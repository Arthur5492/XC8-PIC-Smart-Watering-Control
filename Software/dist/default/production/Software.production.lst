

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Thu Dec 12 01:20:03 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     6                           	psect	idataBANK1,global,class=CODE,space=0,delta=2,noexec
     7                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     8                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1,noexec
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	inittext,global,class=CODE,space=0,delta=2
    16                           	psect	clrtext,global,class=CODE,space=0,delta=2
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    20                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2,group=2
    38                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2,group=2
    39                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,space=0,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,space=0,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,space=0,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,space=0,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,space=0,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,space=0,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,space=0,merge=1,delta=2,group=3
    47                           	psect	text28,local,class=CODE,space=0,merge=1,delta=2,group=1
    48                           	psect	text29,local,class=CODE,space=0,merge=1,delta=2,group=1
    49                           	psect	text30,local,class=CODE,space=0,merge=1,delta=2,group=3
    50                           	psect	text31,local,class=CODE,space=0,merge=1,delta=2,group=3
    51                           	psect	text32,local,class=CODE,space=0,merge=1,delta=2,group=3
    52                           	psect	text33,local,class=CODE,space=0,merge=1,delta=2,group=2
    53                           	psect	text34,local,class=CODE,space=0,merge=1,delta=2,group=2
    54                           	psect	text35,local,class=CODE,space=0,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,space=0,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,space=0,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,space=0,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,space=0,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,space=0,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,space=0,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,space=0,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,space=0,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,space=0,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,space=0,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,space=0,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,space=0,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,space=0,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,space=0,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,space=0,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,space=0,merge=1,delta=2
    71                           	psect	intentry,global,class=CODE,space=0,delta=2
    72                           	psect	functab,global,class=ENTRY,space=0,delta=2
    73                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    74                           	dabs	1,0x7E,2
    75     0000                     
    76                           ; Generated 12/10/2023 GMT
    77                           ; 
    78                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    79                           ; All rights reserved.
    80                           ; 
    81                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    82                           ; 
    83                           ; Redistribution and use in source and binary forms, with or without modification, are
    84                           ; permitted provided that the following conditions are met:
    85                           ; 
    86                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    87                           ;        conditions and the following disclaimer.
    88                           ; 
    89                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    90                           ;        of conditions and the following disclaimer in the documentation and/or other
    91                           ;        materials provided with the distribution. Publication is not required when
    92                           ;        this file is used in an embedded application.
    93                           ; 
    94                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    95                           ;        software without specific prior written permission.
    96                           ; 
    97                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    98                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    99                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   100                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   101                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   102                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   103                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   104                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   105                           ; 
   106                           ; 
   107                           ; Code-generator required, PIC16F877A Definitions
   108                           ; 
   109                           ; SFR Addresses
   110     0004                     fsr             equ	4
   111     0004                     fsr0            equ	4
   112     0000                     indf            equ	0
   113     0000                     indf0           equ	0
   114     0002                     pc              equ	2
   115     0002                     pcl             equ	2
   116     000A                     pclath          equ	10
   117     0003                     status          equ	3
   118     0000                     INDF            equ	0	;# 
   119     0001                     TMR0            equ	1	;# 
   120     0002                     PCL             equ	2	;# 
   121     0003                     STATUS          equ	3	;# 
   122     0004                     FSR             equ	4	;# 
   123     0005                     PORTA           equ	5	;# 
   124     0006                     PORTB           equ	6	;# 
   125     0007                     PORTC           equ	7	;# 
   126     0008                     PORTD           equ	8	;# 
   127     0009                     PORTE           equ	9	;# 
   128     000A                     PCLATH          equ	10	;# 
   129     000B                     INTCON          equ	11	;# 
   130     000C                     PIR1            equ	12	;# 
   131     000D                     PIR2            equ	13	;# 
   132     000E                     TMR1            equ	14	;# 
   133     000E                     TMR1L           equ	14	;# 
   134     000F                     TMR1H           equ	15	;# 
   135     0010                     T1CON           equ	16	;# 
   136     0011                     TMR2            equ	17	;# 
   137     0012                     T2CON           equ	18	;# 
   138     0013                     SSPBUF          equ	19	;# 
   139     0014                     SSPCON          equ	20	;# 
   140     0015                     CCPR1           equ	21	;# 
   141     0015                     CCPR1L          equ	21	;# 
   142     0016                     CCPR1H          equ	22	;# 
   143     0017                     CCP1CON         equ	23	;# 
   144     0018                     RCSTA           equ	24	;# 
   145     0019                     TXREG           equ	25	;# 
   146     001A                     RCREG           equ	26	;# 
   147     001B                     CCPR2           equ	27	;# 
   148     001B                     CCPR2L          equ	27	;# 
   149     001C                     CCPR2H          equ	28	;# 
   150     001D                     CCP2CON         equ	29	;# 
   151     001E                     ADRESH          equ	30	;# 
   152     001F                     ADCON0          equ	31	;# 
   153     0081                     OPTION_REG      equ	129	;# 
   154     0085                     TRISA           equ	133	;# 
   155     0086                     TRISB           equ	134	;# 
   156     0087                     TRISC           equ	135	;# 
   157     0088                     TRISD           equ	136	;# 
   158     0089                     TRISE           equ	137	;# 
   159     008C                     PIE1            equ	140	;# 
   160     008D                     PIE2            equ	141	;# 
   161     008E                     PCON            equ	142	;# 
   162     0091                     SSPCON2         equ	145	;# 
   163     0092                     PR2             equ	146	;# 
   164     0093                     SSPADD          equ	147	;# 
   165     0094                     SSPSTAT         equ	148	;# 
   166     0098                     TXSTA           equ	152	;# 
   167     0099                     SPBRG           equ	153	;# 
   168     009C                     CMCON           equ	156	;# 
   169     009D                     CVRCON          equ	157	;# 
   170     009E                     ADRESL          equ	158	;# 
   171     009F                     ADCON1          equ	159	;# 
   172     010C                     EEDATA          equ	268	;# 
   173     010D                     EEADR           equ	269	;# 
   174     010E                     EEDATH          equ	270	;# 
   175     010F                     EEADRH          equ	271	;# 
   176     018C                     EECON1          equ	396	;# 
   177     018D                     EECON2          equ	397	;# 
   178     0000                     INDF            equ	0	;# 
   179     0001                     TMR0            equ	1	;# 
   180     0002                     PCL             equ	2	;# 
   181     0003                     STATUS          equ	3	;# 
   182     0004                     FSR             equ	4	;# 
   183     0005                     PORTA           equ	5	;# 
   184     0006                     PORTB           equ	6	;# 
   185     0007                     PORTC           equ	7	;# 
   186     0008                     PORTD           equ	8	;# 
   187     0009                     PORTE           equ	9	;# 
   188     000A                     PCLATH          equ	10	;# 
   189     000B                     INTCON          equ	11	;# 
   190     000C                     PIR1            equ	12	;# 
   191     000D                     PIR2            equ	13	;# 
   192     000E                     TMR1            equ	14	;# 
   193     000E                     TMR1L           equ	14	;# 
   194     000F                     TMR1H           equ	15	;# 
   195     0010                     T1CON           equ	16	;# 
   196     0011                     TMR2            equ	17	;# 
   197     0012                     T2CON           equ	18	;# 
   198     0013                     SSPBUF          equ	19	;# 
   199     0014                     SSPCON          equ	20	;# 
   200     0015                     CCPR1           equ	21	;# 
   201     0015                     CCPR1L          equ	21	;# 
   202     0016                     CCPR1H          equ	22	;# 
   203     0017                     CCP1CON         equ	23	;# 
   204     0018                     RCSTA           equ	24	;# 
   205     0019                     TXREG           equ	25	;# 
   206     001A                     RCREG           equ	26	;# 
   207     001B                     CCPR2           equ	27	;# 
   208     001B                     CCPR2L          equ	27	;# 
   209     001C                     CCPR2H          equ	28	;# 
   210     001D                     CCP2CON         equ	29	;# 
   211     001E                     ADRESH          equ	30	;# 
   212     001F                     ADCON0          equ	31	;# 
   213     0081                     OPTION_REG      equ	129	;# 
   214     0085                     TRISA           equ	133	;# 
   215     0086                     TRISB           equ	134	;# 
   216     0087                     TRISC           equ	135	;# 
   217     0088                     TRISD           equ	136	;# 
   218     0089                     TRISE           equ	137	;# 
   219     008C                     PIE1            equ	140	;# 
   220     008D                     PIE2            equ	141	;# 
   221     008E                     PCON            equ	142	;# 
   222     0091                     SSPCON2         equ	145	;# 
   223     0092                     PR2             equ	146	;# 
   224     0093                     SSPADD          equ	147	;# 
   225     0094                     SSPSTAT         equ	148	;# 
   226     0098                     TXSTA           equ	152	;# 
   227     0099                     SPBRG           equ	153	;# 
   228     009C                     CMCON           equ	156	;# 
   229     009D                     CVRCON          equ	157	;# 
   230     009E                     ADRESL          equ	158	;# 
   231     009F                     ADCON1          equ	159	;# 
   232     010C                     EEDATA          equ	268	;# 
   233     010D                     EEADR           equ	269	;# 
   234     010E                     EEDATH          equ	270	;# 
   235     010F                     EEADRH          equ	271	;# 
   236     018C                     EECON1          equ	396	;# 
   237     018D                     EECON2          equ	397	;# 
   238     0000                     INDF            equ	0	;# 
   239     0001                     TMR0            equ	1	;# 
   240     0002                     PCL             equ	2	;# 
   241     0003                     STATUS          equ	3	;# 
   242     0004                     FSR             equ	4	;# 
   243     0005                     PORTA           equ	5	;# 
   244     0006                     PORTB           equ	6	;# 
   245     0007                     PORTC           equ	7	;# 
   246     0008                     PORTD           equ	8	;# 
   247     0009                     PORTE           equ	9	;# 
   248     000A                     PCLATH          equ	10	;# 
   249     000B                     INTCON          equ	11	;# 
   250     000C                     PIR1            equ	12	;# 
   251     000D                     PIR2            equ	13	;# 
   252     000E                     TMR1            equ	14	;# 
   253     000E                     TMR1L           equ	14	;# 
   254     000F                     TMR1H           equ	15	;# 
   255     0010                     T1CON           equ	16	;# 
   256     0011                     TMR2            equ	17	;# 
   257     0012                     T2CON           equ	18	;# 
   258     0013                     SSPBUF          equ	19	;# 
   259     0014                     SSPCON          equ	20	;# 
   260     0015                     CCPR1           equ	21	;# 
   261     0015                     CCPR1L          equ	21	;# 
   262     0016                     CCPR1H          equ	22	;# 
   263     0017                     CCP1CON         equ	23	;# 
   264     0018                     RCSTA           equ	24	;# 
   265     0019                     TXREG           equ	25	;# 
   266     001A                     RCREG           equ	26	;# 
   267     001B                     CCPR2           equ	27	;# 
   268     001B                     CCPR2L          equ	27	;# 
   269     001C                     CCPR2H          equ	28	;# 
   270     001D                     CCP2CON         equ	29	;# 
   271     001E                     ADRESH          equ	30	;# 
   272     001F                     ADCON0          equ	31	;# 
   273     0081                     OPTION_REG      equ	129	;# 
   274     0085                     TRISA           equ	133	;# 
   275     0086                     TRISB           equ	134	;# 
   276     0087                     TRISC           equ	135	;# 
   277     0088                     TRISD           equ	136	;# 
   278     0089                     TRISE           equ	137	;# 
   279     008C                     PIE1            equ	140	;# 
   280     008D                     PIE2            equ	141	;# 
   281     008E                     PCON            equ	142	;# 
   282     0091                     SSPCON2         equ	145	;# 
   283     0092                     PR2             equ	146	;# 
   284     0093                     SSPADD          equ	147	;# 
   285     0094                     SSPSTAT         equ	148	;# 
   286     0098                     TXSTA           equ	152	;# 
   287     0099                     SPBRG           equ	153	;# 
   288     009C                     CMCON           equ	156	;# 
   289     009D                     CVRCON          equ	157	;# 
   290     009E                     ADRESL          equ	158	;# 
   291     009F                     ADCON1          equ	159	;# 
   292     010C                     EEDATA          equ	268	;# 
   293     010D                     EEADR           equ	269	;# 
   294     010E                     EEDATH          equ	270	;# 
   295     010F                     EEADRH          equ	271	;# 
   296     018C                     EECON1          equ	396	;# 
   297     018D                     EECON2          equ	397	;# 
   298     0000                     INDF            equ	0	;# 
   299     0001                     TMR0            equ	1	;# 
   300     0002                     PCL             equ	2	;# 
   301     0003                     STATUS          equ	3	;# 
   302     0004                     FSR             equ	4	;# 
   303     0005                     PORTA           equ	5	;# 
   304     0006                     PORTB           equ	6	;# 
   305     0007                     PORTC           equ	7	;# 
   306     0008                     PORTD           equ	8	;# 
   307     0009                     PORTE           equ	9	;# 
   308     000A                     PCLATH          equ	10	;# 
   309     000B                     INTCON          equ	11	;# 
   310     000C                     PIR1            equ	12	;# 
   311     000D                     PIR2            equ	13	;# 
   312     000E                     TMR1            equ	14	;# 
   313     000E                     TMR1L           equ	14	;# 
   314     000F                     TMR1H           equ	15	;# 
   315     0010                     T1CON           equ	16	;# 
   316     0011                     TMR2            equ	17	;# 
   317     0012                     T2CON           equ	18	;# 
   318     0013                     SSPBUF          equ	19	;# 
   319     0014                     SSPCON          equ	20	;# 
   320     0015                     CCPR1           equ	21	;# 
   321     0015                     CCPR1L          equ	21	;# 
   322     0016                     CCPR1H          equ	22	;# 
   323     0017                     CCP1CON         equ	23	;# 
   324     0018                     RCSTA           equ	24	;# 
   325     0019                     TXREG           equ	25	;# 
   326     001A                     RCREG           equ	26	;# 
   327     001B                     CCPR2           equ	27	;# 
   328     001B                     CCPR2L          equ	27	;# 
   329     001C                     CCPR2H          equ	28	;# 
   330     001D                     CCP2CON         equ	29	;# 
   331     001E                     ADRESH          equ	30	;# 
   332     001F                     ADCON0          equ	31	;# 
   333     0081                     OPTION_REG      equ	129	;# 
   334     0085                     TRISA           equ	133	;# 
   335     0086                     TRISB           equ	134	;# 
   336     0087                     TRISC           equ	135	;# 
   337     0088                     TRISD           equ	136	;# 
   338     0089                     TRISE           equ	137	;# 
   339     008C                     PIE1            equ	140	;# 
   340     008D                     PIE2            equ	141	;# 
   341     008E                     PCON            equ	142	;# 
   342     0091                     SSPCON2         equ	145	;# 
   343     0092                     PR2             equ	146	;# 
   344     0093                     SSPADD          equ	147	;# 
   345     0094                     SSPSTAT         equ	148	;# 
   346     0098                     TXSTA           equ	152	;# 
   347     0099                     SPBRG           equ	153	;# 
   348     009C                     CMCON           equ	156	;# 
   349     009D                     CVRCON          equ	157	;# 
   350     009E                     ADRESL          equ	158	;# 
   351     009F                     ADCON1          equ	159	;# 
   352     010C                     EEDATA          equ	268	;# 
   353     010D                     EEADR           equ	269	;# 
   354     010E                     EEDATH          equ	270	;# 
   355     010F                     EEADRH          equ	271	;# 
   356     018C                     EECON1          equ	396	;# 
   357     018D                     EECON2          equ	397	;# 
   358                           
   359                           	psect	idataCOMMON
   360     07FD                     __pidataCOMMON:
   361                           
   362                           ;initializer for _tankState
   363     07FD  3401               	retlw	1
   364                           
   365                           	psect	idataBANK0
   366     0B42                     __pidataBANK0:
   367                           
   368                           ;initializer for _idealHumidity
   369     0B42  3432               	retlw	50
   370                           
   371                           ;initializer for _minHumidity
   372     0B43  341E               	retlw	30
   373                           
   374                           ;initializer for _lastRightButtonState
   375     0B44  3401               	retlw	1
   376                           
   377                           ;initializer for _lastLeftButtonState
   378     0B45  3401               	retlw	1
   379                           
   380                           ;initializer for _lcd_index
   381     0B46  3401               	retlw	1
   382                           
   383                           ;initializer for _lcd_maxIndex
   384     0B47  3405               	retlw	5
   385                           
   386                           ;initializer for _lastIrrigationState
   387     0B48  34FF               	retlw	-1
   388                           
   389                           ;initializer for _irrigationState
   390     0B49  3401               	retlw	1
   391                           
   392                           ;initializer for _lastTankState
   393     0B4A  34FF               	retlw	-1
   394                           
   395                           	psect	idataBANK1
   396     0C37                     __pidataBANK1:
   397                           
   398                           ;initializer for _TankStateString
   399     0C37  344D               	retlw	low ((STR_1-__stringbase)| (0+32768))
   400     0C38  345F               	retlw	low ((STR_2-__stringbase)| (0+32768))
   401     0C39  3453               	retlw	low ((STR_3-__stringbase)| (0+32768))
   402     0C3A  3464               	retlw	low ((STR_4-__stringbase)| (0+32768))
   403                           
   404                           ;initializer for _IrrigationStateString
   405     0C3B  346D               	retlw	low ((STR_5-__stringbase)| (0+32768))
   406     0C3C  3469               	retlw	low ((STR_6-__stringbase)| (0+32768))
   407     0C3D  3459               	retlw	low ((STR_7-__stringbase)| (0+32768))
   408                           
   409                           ;initializer for _old_light
   410     0C3E  34FF               	retlw	255
   411     0C3F  34FF               	retlw	255
   412                           
   413                           ;initializer for _old_temperature
   414     0C40  34FF               	retlw	255
   415     0C41  34FF               	retlw	255
   416                           
   417                           ;initializer for _old_soilMoisture
   418     0C42  34FF               	retlw	255
   419     0C43  34FF               	retlw	255
   420                           
   421                           ;initializer for _timer_ADCReadAll
   422     0C44  3402               	retlw	2
   423     0C45  3400               	retlw	0
   424     0C46  3400               	retlw	0
   425     0C47  3400               	retlw	0
   426     0C48  3400               	retlw	0
   427     0C49  3404               	retlw	low (fp__ADC_readAll-fpbase)
   428                           
   429                           ;initializer for _timer_IRRIG_Timeout
   430     0C4A  3414               	retlw	20
   431     0C4B  3400               	retlw	0
   432     0C4C  3400               	retlw	0
   433     0C4D  3400               	retlw	0
   434     0C4E  3400               	retlw	0
   435     0C4F  3407               	retlw	low (fp__interrupt_IRRIG_timeout-fpbase)
   436                           
   437                           ;initializer for _timer_WTANK_Timeout
   438     0C50  341E               	retlw	30
   439     0C51  3400               	retlw	0
   440     0C52  3400               	retlw	0
   441     0C53  3400               	retlw	0
   442     0C54  3400               	retlw	0
   443     0C55  3401               	retlw	low (fp__interrupt_WTANK_timeout-fpbase)
   444     000C                     _PIR1bits       set	12
   445     0006                     _PORTBbits      set	6
   446     0007                     _PORTCbits      set	7
   447     001E                     _ADRESH         set	30
   448     001F                     _ADCON0bits     set	31
   449     000B                     _INTCONbits     set	11
   450     000E                     _TMR1L          set	14
   451     000F                     _TMR1H          set	15
   452     0010                     _T1CONbits      set	16
   453     0043                     _RD3            set	67
   454     0042                     _RD2            set	66
   455     0047                     _RD7            set	71
   456     0046                     _RD6            set	70
   457     0045                     _RD5            set	69
   458     0044                     _RD4            set	68
   459     009E                     _ADRESL         set	158
   460     009F                     _ADCON1bits     set	159
   461     008C                     _PIE1bits       set	140
   462     0087                     _TRISCbits      set	135
   463     0088                     _TRISD          set	136
   464     0087                     _TRISC          set	135
   465     0086                     _TRISB          set	134
   466     0085                     _TRISA          set	133
   467     0081                     _OPTION_REGbits set	129
   468                           
   469                           	psect	strings
   470     0409                     __pstrings:
   471     0409                     stringtab:
   472     0409                     __stringtab:
   473                           
   474                           ;	String table - string pointers are 1 byte each
   475     0409  1BFF               	btfsc	btemp+1,7
   476     040A  2C13               	ljmp	stringcode
   477     040B  1383               	bcf	3,7
   478     040C  187F               	btfsc	btemp+1,0
   479     040D  1783               	bsf	3,7
   480     040E  0800               	movf	0,w
   481     040F  0A84               	incf	4,f
   482     0410  1903               	skipnz
   483     0411  0AFF               	incf	btemp+1,f
   484     0412  0008               	return
   485     0413                     stringcode:
   486     0413                     stringdir:
   487     0413  3004               	movlw	high stringdir
   488     0414  008A               	movwf	10
   489     0415  0804               	movf	4,w
   490     0416  0A84               	incf	4,f
   491     0417  0782               	addwf	2,f
   492     0418                     __stringbase:
   493     0418  3400               	retlw	0
   494     0419                     __end_of__stringtab:
   495     0419                     STR_12:
   496     0419  344C               	retlw	76	;'L'
   497     041A  3455               	retlw	85	;'U'
   498     041B  345A               	retlw	90	;'Z'
   499     041C  3420               	retlw	32	;' '
   500     041D  3441               	retlw	65	;'A'
   501     041E  3452               	retlw	82	;'R'
   502     041F  3454               	retlw	84	;'T'
   503     0420  3449               	retlw	73	;'I'
   504     0421  3446               	retlw	70	;'F'
   505     0422  3449               	retlw	73	;'I'
   506     0423  3443               	retlw	67	;'C'
   507     0424  3449               	retlw	73	;'I'
   508     0425  3441               	retlw	65	;'A'
   509     0426  344C               	retlw	76	;'L'
   510     0427  3400               	retlw	0
   511     0428                     STR_8:
   512     0428  3445               	retlw	69	;'E'
   513     0429  3453               	retlw	83	;'S'
   514     042A  3454               	retlw	84	;'T'
   515     042B  3441               	retlw	65	;'A'
   516     042C  3444               	retlw	68	;'D'
   517     042D  344F               	retlw	79	;'O'
   518     042E  3420               	retlw	32	;' '
   519     042F  3454               	retlw	84	;'T'
   520     0430  3441               	retlw	65	;'A'
   521     0431  344E               	retlw	78	;'N'
   522     0432  3451               	retlw	81	;'Q'
   523     0433  3455               	retlw	85	;'U'
   524     0434  3445               	retlw	69	;'E'
   525     0435  3400               	retlw	0
   526     0436                     STR_15:
   527     0436  3454               	retlw	84	;'T'
   528     0437  3445               	retlw	69	;'E'
   529     0438  344D               	retlw	77	;'M'
   530     0439  3450               	retlw	80	;'P'
   531     043A  3445               	retlw	69	;'E'
   532     043B  3452               	retlw	82	;'R'
   533     043C  3441               	retlw	65	;'A'
   534     043D  3454               	retlw	84	;'T'
   535     043E  3455               	retlw	85	;'U'
   536     043F  3452               	retlw	82	;'R'
   537     0440  3441               	retlw	65	;'A'
   538     0441  343A               	retlw	58	;':'
   539     0442  3400               	retlw	0
   540     0443                     STR_10:
   541     0443  3455               	retlw	85	;'U'
   542     0444  344D               	retlw	77	;'M'
   543     0445  3449               	retlw	73	;'I'
   544     0446  3444               	retlw	68	;'D'
   545     0447  3441               	retlw	65	;'A'
   546     0448  3444               	retlw	68	;'D'
   547     0449  3445               	retlw	69	;'E'
   548     044A  3420               	retlw	32	;' '
   549     044B  3453               	retlw	83	;'S'
   550     044C  344F               	retlw	79	;'O'
   551     044D  344C               	retlw	76	;'L'
   552     044E  344F               	retlw	79	;'O'
   553     044F  3400               	retlw	0
   554     0450                     STR_9:
   555     0450  3449               	retlw	73	;'I'
   556     0451  3452               	retlw	82	;'R'
   557     0452  3452               	retlw	82	;'R'
   558     0453  3449               	retlw	73	;'I'
   559     0454  3447               	retlw	71	;'G'
   560     0455  3441               	retlw	65	;'A'
   561     0456  3443               	retlw	67	;'C'
   562     0457  3441               	retlw	65	;'A'
   563     0458  344F               	retlw	79	;'O'
   564     0459  343A               	retlw	58	;':'
   565     045A  3400               	retlw	0
   566     045B                     STR_14:
   567     045B  3444               	retlw	68	;'D'
   568     045C  3445               	retlw	69	;'E'
   569     045D  3453               	retlw	83	;'S'
   570     045E  344C               	retlw	76	;'L'
   571     045F  3449               	retlw	73	;'I'
   572     0460  3447               	retlw	71	;'G'
   573     0461  3441               	retlw	65	;'A'
   574     0462  3444               	retlw	68	;'D'
   575     0463  3441               	retlw	65	;'A'
   576     0464  3400               	retlw	0
   577     0465                     STR_1:
   578     0465  3443               	retlw	67	;'C'
   579     0466  3448               	retlw	72	;'H'
   580     0467  3445               	retlw	69	;'E'
   581     0468  3449               	retlw	73	;'I'
   582     0469  344F               	retlw	79	;'O'
   583     046A  3400               	retlw	0
   584     046B                     STR_3:
   585     046B  3456               	retlw	86	;'V'
   586     046C  3441               	retlw	65	;'A'
   587     046D  345A               	retlw	90	;'Z'
   588     046E  3449               	retlw	73	;'I'
   589     046F  344F               	retlw	79	;'O'
   590     0470  3400               	retlw	0
   591     0471                     STR_7:
   592     0471  3445               	retlw	69	;'E'
   593     0472  3452               	retlw	82	;'R'
   594     0473  3452               	retlw	82	;'R'
   595     0474  344F               	retlw	79	;'O'
   596     0475  3452               	retlw	82	;'R'
   597     0476  3400               	retlw	0
   598     0477                     STR_2:
   599     0477  344D               	retlw	77	;'M'
   600     0478  3445               	retlw	69	;'E'
   601     0479  3449               	retlw	73	;'I'
   602     047A  344F               	retlw	79	;'O'
   603     047B  3400               	retlw	0
   604     047C                     STR_4:
   605     047C  3445               	retlw	69	;'E'
   606     047D  3452               	retlw	82	;'R'
   607     047E  3452               	retlw	82	;'R'
   608     047F  344F               	retlw	79	;'O'
   609     0480  3400               	retlw	0
   610     0481                     STR_6:
   611     0481  344F               	retlw	79	;'O'
   612     0482  3446               	retlw	70	;'F'
   613     0483  3446               	retlw	70	;'F'
   614     0484  3400               	retlw	0
   615     0485                     STR_5:
   616     0485  344F               	retlw	79	;'O'
   617     0486  344E               	retlw	78	;'N'
   618     0487  3400               	retlw	0
   619     0488                     STR_11:
   620     0488  3425               	retlw	37	;'%'
   621     0489  3464               	retlw	100	;'d'
   622     048A  3400               	retlw	0
   623     0488                     STR_16          equ	STR_11
   624     045E                     STR_13          equ	STR_14+3
   625                           
   626                           	psect	cinit
   627     000F                     start_initialization:	
   628                           ; #config settings
   629                           
   630     000F                     __initialization:
   631                           
   632                           ; Initialize objects allocated to BANK1
   633     000F  1383               	bcf	3,7	;select IRP bank0
   634     0010  30E6               	movlw	low (__pdataBANK1+31)
   635     0011  00FD               	movwf	btemp+-1
   636     0012  300C               	movlw	high __pidataBANK1
   637     0013  00FE               	movwf	btemp
   638     0014  3037               	movlw	low __pidataBANK1
   639     0015  00FF               	movwf	btemp+1
   640     0016  30C7               	movlw	low __pdataBANK1
   641     0017  0084               	movwf	4
   642     0018  120A  158A  23FF  120A  118A  	fcall	init_ram0
   643                           
   644                           ; Initialize objects allocated to BANK0
   645     001D  306F               	movlw	low (__pdataBANK0+9)
   646     001E  00FD               	movwf	btemp+-1
   647     001F  300B               	movlw	high __pidataBANK0
   648     0020  00FE               	movwf	btemp
   649     0021  3042               	movlw	low __pidataBANK0
   650     0022  00FF               	movwf	btemp+1
   651     0023  3066               	movlw	low __pdataBANK0
   652     0024  0084               	movwf	4
   653     0025  120A  158A  23FF  120A  118A  	fcall	init_ram0
   654                           
   655                           ; Initialize objects allocated to COMMON
   656     002A  120A  118A  27FD  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   657     002F  00FB               	movwf	__pdataCOMMON& (0+127)
   658                           
   659                           ; Clear objects allocated to BANK1
   660     0030  30A0               	movlw	low __pbssBANK1
   661     0031  0084               	movwf	4
   662     0032  30C7               	movlw	low (__pbssBANK1+39)
   663     0033  120A  158A  233A  120A  118A  	fcall	clear_ram0
   664                           
   665                           ; Clear objects allocated to BANK0
   666     0038  305C               	movlw	low __pbssBANK0
   667     0039  0084               	movwf	4
   668     003A  3066               	movlw	low (__pbssBANK0+10)
   669     003B  120A  158A  233A  120A  118A  	fcall	clear_ram0
   670                           
   671                           ; Clear objects allocated to BITCOMMON
   672     0040  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   673     0041                     end_of_initialization:	
   674                           ;End of C runtime variable initialization code
   675                           
   676     0041                     __end_of__initialization:
   677     0041  0183               	clrf	3
   678     0042  120A  118A  2AD3   	ljmp	_main	;jump to C main() function
   679                           
   680                           	psect	bitbssCOMMON
   681     03D0                     __pbitbssCOMMON:
   682     03D0                     _isIrrigating:
   683     03D0                     	ds	1
   684     03D1                     _isFilling:
   685     03D1                     	ds	1
   686     03D2                     _rightButtonPressed:
   687     03D2                     	ds	1
   688     03D3                     _leftButtonPressed:
   689     03D3                     	ds	1
   690                           
   691                           	psect	dataCOMMON
   692     007B                     __pdataCOMMON:
   693     007B                     _tankState:
   694     007B                     	ds	1
   695                           
   696                           	psect	bssBANK0
   697     005C                     __pbssBANK0:
   698     005C                     _timerCounter:
   699     005C                     	ds	2
   700     005E                     _temperature:
   701     005E                     	ds	2
   702     0060                     _light:
   703     0060                     	ds	2
   704     0062                     _soilMoisture:
   705     0062                     	ds	2
   706     0064                     _flags:
   707     0064                     	ds	1
   708     0065                     _lcd_lastIndex:
   709     0065                     	ds	1
   710                           
   711                           	psect	dataBANK0
   712     0066                     __pdataBANK0:
   713     0066                     _idealHumidity:
   714     0066                     	ds	1
   715     0067                     _minHumidity:
   716     0067                     	ds	1
   717     0068                     _lastRightButtonState:
   718     0068                     	ds	1
   719     0069                     _lastLeftButtonState:
   720     0069                     	ds	1
   721     006A                     _lcd_index:
   722     006A                     	ds	1
   723     006B                     _lcd_maxIndex:
   724     006B                     	ds	1
   725     006C                     _lastIrrigationState:
   726     006C                     	ds	1
   727     006D                     _irrigationState:
   728     006D                     	ds	1
   729     006E                     _lastTankState:
   730     006E                     	ds	1
   731                           
   732                           	psect	bssBANK1
   733     00A0                     __pbssBANK1:
   734     00A0                     _dbuf:
   735     00A0                     	ds	32
   736     00C0                     draw_Index@F1444:
   737     00C0                     	ds	3
   738     00C3                     _width:
   739     00C3                     	ds	2
   740     00C5                     _prec:
   741     00C5                     	ds	2
   742                           
   743                           	psect	dataBANK1
   744     00C7                     __pdataBANK1:
   745     00C7                     _TankStateString:
   746     00C7                     	ds	4
   747     00CB                     _IrrigationStateString:
   748     00CB                     	ds	3
   749     00CE                     _old_light:
   750     00CE                     	ds	2
   751     00D0                     _old_temperature:
   752     00D0                     	ds	2
   753     00D2                     _old_soilMoisture:
   754     00D2                     	ds	2
   755     00D4                     _timer_ADCReadAll:
   756     00D4                     	ds	6
   757     00DA                     _timer_IRRIG_Timeout:
   758     00DA                     	ds	6
   759     00E0                     _timer_WTANK_Timeout:
   760     00E0                     	ds	6
   761                           
   762                           	psect	inittext
   763     0BFB                     init_fetch0:	
   764                           ;	Called with low address in FSR and high address in W
   765                           
   766     0BFB  087E               	movf	btemp,w
   767     0BFC  008A               	movwf	10
   768     0BFD  087F               	movf	btemp+1,w
   769     0BFE  0082               	movwf	2
   770     0BFF                     init_ram0:	
   771                           ;Called with:
   772                           ;	high address of idata address in btemp 
   773                           ;	low address of idata address in btemp+1 
   774                           ;	low address of data in FSR
   775                           ;	high address + 1 of data in btemp-1
   776                           
   777     0BFF  120A  158A  23FB  120A  158A  	fcall	init_fetch0
   778     0C04  0080               	movwf	0
   779     0C05  0A84               	incf	4,f
   780     0C06  0804               	movf	4,w
   781     0C07  067D               	xorwf	btemp+-1,w
   782     0C08  1903               	btfsc	3,2
   783     0C09  3400               	retlw	0
   784     0C0A  0AFF               	incf	btemp+1,f
   785     0C0B  1903               	btfsc	3,2
   786     0C0C  0AFE               	incf	btemp,f
   787     0C0D  2BFF               	goto	init_ram0
   788                           
   789                           	psect	clrtext
   790     0B3A                     clear_ram0:	
   791                           ;	Called with FSR containing the base address, and
   792                           ;	W with the last address+1
   793                           
   794     0B3A  0064               	clrwdt	;clear the watchdog before getting into this loop
   795     0B3B                     clrloop0:
   796     0B3B  0180               	clrf	0	;clear RAM location pointed to by FSR
   797     0B3C  0A84               	incf	4,f	;increment pointer
   798     0B3D  0604               	xorwf	4,w	;XOR with final address
   799     0B3E  1903               	btfsc	3,2	;have we reached the end yet?
   800     0B3F  3400               	retlw	0	;all done for this memory range, return
   801     0B40  0604               	xorwf	4,w	;XOR again to restore value
   802     0B41  2B3B               	goto	clrloop0	;do the next byte
   803                           
   804                           	psect	cstackCOMMON
   805     0070                     __pcstackCOMMON:
   806     0070                     ?_lcd_turnLeft:
   807     0070                     ?_lcd_turnRight:	
   808                           ; 1 bytes @ 0x0
   809                           
   810     0070                     ?_run_waterTankLogic:	
   811                           ; 1 bytes @ 0x0
   812                           
   813     0070                     ?_interrupt_WTANK_timeout:	
   814                           ; 1 bytes @ 0x0
   815                           
   816     0070                     ?_stopFilling:	
   817                           ; 1 bytes @ 0x0
   818                           
   819     0070                     ?_startFilling:	
   820                           ; 1 bytes @ 0x0
   821                           
   822     0070                     ?_interrupt_IRRIG_timeout:	
   823                           ; 1 bytes @ 0x0
   824                           
   825     0070                     ?_stopIrrigation:	
   826                           ; 1 bytes @ 0x0
   827                           
   828     0070                     ?_startIrrigation:	
   829                           ; 1 bytes @ 0x0
   830                           
   831     0070                     ?_putch:	
   832                           ; 1 bytes @ 0x0
   833                           
   834     0070                     ?_WDT_init:	
   835                           ; 1 bytes @ 0x0
   836                           
   837     0070                     ?_timer1_1ms_init:	
   838                           ; 1 bytes @ 0x0
   839                           
   840     0070                     ?_interruption_init:	
   841                           ; 1 bytes @ 0x0
   842                           
   843     0070                     ?_ADC_init:	
   844                           ; 1 bytes @ 0x0
   845                           
   846     0070                     ?_readSoilMoisture:	
   847                           ; 1 bytes @ 0x0
   848                           
   849     0070                     ?_readTemperature:	
   850                           ; 1 bytes @ 0x0
   851                           
   852     0070                     ?_readLight:	
   853                           ; 1 bytes @ 0x0
   854                           
   855     0070                     ?_ADC_readAll:	
   856                           ; 1 bytes @ 0x0
   857                           
   858     0070                     ?_Lcd_Port:	
   859                           ; 1 bytes @ 0x0
   860                           
   861     0070                     ?_Lcd_Cmd:	
   862                           ; 1 bytes @ 0x0
   863                           
   864     0070                     ?_Lcd_Clear:	
   865                           ; 1 bytes @ 0x0
   866                           
   867     0070                     ?_Lcd_Init:	
   868                           ; 1 bytes @ 0x0
   869                           
   870     0070                     ?_Lcd_Write_Char:	
   871                           ; 1 bytes @ 0x0
   872                           
   873     0070                     ?_draw_Index:	
   874                           ; 1 bytes @ 0x0
   875                           
   876     0070                     ?_print_TankState:	
   877                           ; 1 bytes @ 0x0
   878                           
   879     0070                     ?_print_Irrigation:	
   880                           ; 1 bytes @ 0x0
   881                           
   882     0070                     ?_print_SoilMoisture:	
   883                           ; 1 bytes @ 0x0
   884                           
   885     0070                     ?_print_ArtificialLight:	
   886                           ; 1 bytes @ 0x0
   887                           
   888     0070                     ?_print_Temperature:	
   889                           ; 1 bytes @ 0x0
   890                           
   891     0070                     ?_lcd_debounceButtons:	
   892                           ; 1 bytes @ 0x0
   893                           
   894     0070                     ?_lcd_run:	
   895                           ; 1 bytes @ 0x0
   896                           
   897     0070                     ?_interruptionHandler:	
   898                           ; 1 bytes @ 0x0
   899                           
   900     0070                     ?_main:	
   901                           ; 1 bytes @ 0x0
   902                           
   903     0070                     ?_check_TankStatus:	
   904                           ; 1 bytes @ 0x0
   905                           
   906     0070                     putch@c:	
   907                           ; 1 bytes @ 0x0
   908                           
   909     0070                     ??_interruptionHandler:	
   910                           ; 1 bytes @ 0x0
   911                           
   912                           
   913                           ; 1 bytes @ 0x0
   914     0070                     	ds	2
   915     0072                     ?_startTimer:
   916     0072                     ?_stopTimer:	
   917                           ; 1 bytes @ 0x2
   918                           
   919     0072                     ?_pins_init:	
   920                           ; 1 bytes @ 0x2
   921                           
   922     0072                     ?_fputc:	
   923                           ; 1 bytes @ 0x2
   924                           
   925     0072                     ?_ADC_Read:	
   926                           ; 2 bytes @ 0x2
   927                           
   928     0072                     ?___awdiv:	
   929                           ; 2 bytes @ 0x2
   930                           
   931     0072                     ?___awmod:	
   932                           ; 2 bytes @ 0x2
   933                           
   934     0072                     ?___lmul:	
   935                           ; 2 bytes @ 0x2
   936                           
   937     0072                     pins_init@_TRISB:	
   938                           ; 4 bytes @ 0x2
   939                           
   940     0072                     Lcd_Port@a:	
   941                           ; 1 bytes @ 0x2
   942                           
   943     0072                     startTimer@timer:	
   944                           ; 1 bytes @ 0x2
   945                           
   946     0072                     stopTimer@timer:	
   947                           ; 2 bytes @ 0x2
   948                           
   949     0072                     ___awdiv@divisor:	
   950                           ; 2 bytes @ 0x2
   951                           
   952     0072                     ___awmod@divisor:	
   953                           ; 2 bytes @ 0x2
   954                           
   955     0072                     fputc@c:	
   956                           ; 2 bytes @ 0x2
   957                           
   958     0072                     ___lmul@multiplier:	
   959                           ; 2 bytes @ 0x2
   960                           
   961     0072                     ??_lcd_turnLeft:	
   962                           ; 4 bytes @ 0x2
   963                           
   964     0072                     ??_lcd_turnRight:	
   965                           ; 1 bytes @ 0x2
   966                           
   967     0072                     ??_putch:	
   968                           ; 1 bytes @ 0x2
   969                           
   970     0072                     ??_WDT_init:	
   971                           ; 1 bytes @ 0x2
   972                           
   973     0072                     ??_timer1_1ms_init:	
   974                           ; 1 bytes @ 0x2
   975                           
   976     0072                     ??_interruption_init:	
   977                           ; 1 bytes @ 0x2
   978                           
   979     0072                     ??_ADC_init:	
   980                           ; 1 bytes @ 0x2
   981                           
   982     0072                     ??_Lcd_Port:	
   983                           ; 1 bytes @ 0x2
   984                           
   985     0072                     ??_lcd_debounceButtons:	
   986                           ; 1 bytes @ 0x2
   987                           
   988     0072                     ??_check_TankStatus:	
   989                           ; 1 bytes @ 0x2
   990                           
   991                           
   992                           ; 1 bytes @ 0x2
   993     0072                     	ds	1
   994     0073                     pins_init@_TRISC:
   995     0073                     check_TankStatus@top:	
   996                           ; 1 bytes @ 0x3
   997                           
   998     0073                     ??_Lcd_Cmd:	
   999                           ; 1 bytes @ 0x3
  1000                           
  1001     0073                     ??_Lcd_Write_Char:	
  1002                           ; 1 bytes @ 0x3
  1003                           
  1004                           
  1005                           ; 1 bytes @ 0x3
  1006     0073                     	ds	1
  1007     0074                     pins_init@_TRISD:
  1008     0074                     Lcd_Write_Char@temp:	
  1009                           ; 1 bytes @ 0x4
  1010                           
  1011     0074                     check_TankStatus@bot:	
  1012                           ; 1 bytes @ 0x4
  1013                           
  1014     0074                     ___awdiv@dividend:	
  1015                           ; 1 bytes @ 0x4
  1016                           
  1017     0074                     ___awmod@dividend:	
  1018                           ; 2 bytes @ 0x4
  1019                           
  1020     0074                     fputc@fp:	
  1021                           ; 2 bytes @ 0x4
  1022                           
  1023     0074                     ??_startTimer:	
  1024                           ; 2 bytes @ 0x4
  1025                           
  1026     0074                     ??_stopTimer:	
  1027                           ; 1 bytes @ 0x4
  1028                           
  1029     0074                     ??_ADC_Read:	
  1030                           ; 1 bytes @ 0x4
  1031                           
  1032                           
  1033                           ; 1 bytes @ 0x4
  1034     0074                     	ds	1
  1035     0075                     pins_init@_TRISA:
  1036     0075                     ADC_Read@channel:	
  1037                           ; 1 bytes @ 0x5
  1038                           
  1039     0075                     Lcd_Cmd@a:	
  1040                           ; 1 bytes @ 0x5
  1041                           
  1042     0075                     Lcd_Write_Char@y:	
  1043                           ; 1 bytes @ 0x5
  1044                           
  1045     0075                     ??_pins_init:	
  1046                           ; 1 bytes @ 0x5
  1047                           
  1048                           
  1049                           ; 1 bytes @ 0x5
  1050     0075                     	ds	1
  1051     0076                     ?_run_IrrigationLogic:
  1052     0076                     ?_Lcd_Set_Cursor:	
  1053                           ; 1 bytes @ 0x6
  1054                           
  1055     0076                     Lcd_Set_Cursor@b:	
  1056                           ; 1 bytes @ 0x6
  1057                           
  1058     0076                     Lcd_Write_Char@a:	
  1059                           ; 1 bytes @ 0x6
  1060                           
  1061     0076                     ___awdiv@counter:	
  1062                           ; 1 bytes @ 0x6
  1063                           
  1064     0076                     ___awmod@counter:	
  1065                           ; 1 bytes @ 0x6
  1066                           
  1067     0076                     run_IrrigationLogic@sMoistureValue:	
  1068                           ; 1 bytes @ 0x6
  1069                           
  1070     0076                     ___lmul@multiplicand:	
  1071                           ; 2 bytes @ 0x6
  1072                           
  1073     0076                     ??_run_waterTankLogic:	
  1074                           ; 4 bytes @ 0x6
  1075                           
  1076     0076                     ??_interrupt_WTANK_timeout:	
  1077                           ; 1 bytes @ 0x6
  1078                           
  1079     0076                     ??_stopFilling:	
  1080                           ; 1 bytes @ 0x6
  1081                           
  1082     0076                     ??_startFilling:	
  1083                           ; 1 bytes @ 0x6
  1084                           
  1085     0076                     ??_interrupt_IRRIG_timeout:	
  1086                           ; 1 bytes @ 0x6
  1087                           
  1088     0076                     ??_stopIrrigation:	
  1089                           ; 1 bytes @ 0x6
  1090                           
  1091     0076                     ??_startIrrigation:	
  1092                           ; 1 bytes @ 0x6
  1093                           
  1094     0076                     ??_readLight:	
  1095                           ; 1 bytes @ 0x6
  1096                           
  1097     0076                     ??_Lcd_Clear:	
  1098                           ; 1 bytes @ 0x6
  1099                           
  1100     0076                     ??_Lcd_Init:	
  1101                           ; 1 bytes @ 0x6
  1102                           
  1103     0076                     ??___awdiv:	
  1104                           ; 1 bytes @ 0x6
  1105                           
  1106     0076                     ??___awmod:	
  1107                           ; 1 bytes @ 0x6
  1108                           
  1109                           
  1110                           ; 1 bytes @ 0x6
  1111     0076                     	ds	1
  1112     0077                     ?_Lcd_Write_String:
  1113     0077                     ___awdiv@sign:	
  1114                           ; 1 bytes @ 0x7
  1115                           
  1116     0077                     ___awmod@sign:	
  1117                           ; 1 bytes @ 0x7
  1118                           
  1119     0077                     Lcd_Write_String@a:	
  1120                           ; 1 bytes @ 0x7
  1121                           
  1122     0077                     ??_Lcd_Set_Cursor:	
  1123                           ; 2 bytes @ 0x7
  1124                           
  1125                           
  1126                           ; 1 bytes @ 0x7
  1127     0077                     	ds	1
  1128     0078                     ?_abs:
  1129     0078                     ___awdiv@quotient:	
  1130                           ; 2 bytes @ 0x8
  1131                           
  1132     0078                     abs@a:	
  1133                           ; 2 bytes @ 0x8
  1134                           
  1135     0078                     ??_run_IrrigationLogic:	
  1136                           ; 2 bytes @ 0x8
  1137                           
  1138                           
  1139                           ; 1 bytes @ 0x8
  1140     0078                     	ds	1
  1141     0079                     ??_draw_Index:
  1142     0079                     ??_print_TankState:	
  1143                           ; 1 bytes @ 0x9
  1144                           
  1145     0079                     ??_print_Irrigation:	
  1146                           ; 1 bytes @ 0x9
  1147                           
  1148     0079                     ??_print_ArtificialLight:	
  1149                           ; 1 bytes @ 0x9
  1150                           
  1151                           
  1152                           ; 1 bytes @ 0x9
  1153     0079                     	ds	1
  1154     007A                     ??_vfprintf:
  1155     007A                     ??_readSoilMoisture:	
  1156                           ; 1 bytes @ 0xA
  1157                           
  1158     007A                     ??_readTemperature:	
  1159                           ; 1 bytes @ 0xA
  1160                           
  1161     007A                     ??_ADC_readAll:	
  1162                           ; 1 bytes @ 0xA
  1163                           
  1164     007A                     ??_print_SoilMoisture:	
  1165                           ; 1 bytes @ 0xA
  1166                           
  1167     007A                     ??_print_Temperature:	
  1168                           ; 1 bytes @ 0xA
  1169                           
  1170     007A                     ??_lcd_run:	
  1171                           ; 1 bytes @ 0xA
  1172                           
  1173     007A                     ??_main:	
  1174                           ; 1 bytes @ 0xA
  1175                           
  1176                           
  1177                           	psect	cstackBANK0
  1178     0020                     __pcstackBANK0:	
  1179                           ; 1 bytes @ 0xA
  1180                           
  1181     0020                     Lcd_Set_Cursor@a:
  1182     0020                     ??_fputc:	
  1183                           ; 1 bytes @ 0x0
  1184                           
  1185     0020                     ??_abs:	
  1186                           ; 1 bytes @ 0x0
  1187                           
  1188     0020                     ??_Lcd_Write_String:	
  1189                           ; 1 bytes @ 0x0
  1190                           
  1191     0020                     ??___lmul:	
  1192                           ; 1 bytes @ 0x0
  1193                           
  1194                           
  1195                           ; 1 bytes @ 0x0
  1196     0020                     	ds	1
  1197     0021                     Lcd_Set_Cursor@z:
  1198     0021                     ___lmul@product:	
  1199                           ; 1 bytes @ 0x1
  1200                           
  1201                           
  1202                           ; 4 bytes @ 0x1
  1203     0021                     	ds	1
  1204     0022                     Lcd_Set_Cursor@y:
  1205                           
  1206                           ; 1 bytes @ 0x2
  1207     0022                     	ds	1
  1208     0023                     Lcd_Set_Cursor@temp:
  1209     0023                     Lcd_Write_String@i:	
  1210                           ; 1 bytes @ 0x3
  1211                           
  1212                           
  1213                           ; 2 bytes @ 0x3
  1214     0023                     	ds	2
  1215     0025                     ?___aldiv:
  1216     0025                     draw_Index@temp_index:	
  1217                           ; 4 bytes @ 0x5
  1218                           
  1219     0025                     ___aldiv@divisor:	
  1220                           ; 3 bytes @ 0x5
  1221                           
  1222                           
  1223                           ; 4 bytes @ 0x5
  1224     0025                     	ds	4
  1225     0029                     ?_vfpfcnvrt:
  1226     0029                     vfpfcnvrt@fp:	
  1227                           ; 1 bytes @ 0x9
  1228                           
  1229     0029                     ___aldiv@dividend:	
  1230                           ; 2 bytes @ 0x9
  1231                           
  1232                           
  1233                           ; 4 bytes @ 0x9
  1234     0029                     	ds	2
  1235     002B                     vfpfcnvrt@fmt:
  1236                           
  1237                           ; 1 bytes @ 0xB
  1238     002B                     	ds	1
  1239     002C                     vfpfcnvrt@ap:
  1240                           
  1241                           ; 1 bytes @ 0xC
  1242     002C                     	ds	1
  1243     002D                     ??___aldiv:
  1244     002D                     ??_vfpfcnvrt:	
  1245                           ; 1 bytes @ 0xD
  1246                           
  1247                           
  1248                           ; 1 bytes @ 0xD
  1249     002D                     	ds	1
  1250     002E                     ___aldiv@counter:
  1251                           
  1252                           ; 1 bytes @ 0xE
  1253     002E                     	ds	1
  1254     002F                     ___aldiv@sign:
  1255     002F                     vfpfcnvrt@done:	
  1256                           ; 1 bytes @ 0xF
  1257                           
  1258                           
  1259                           ; 1 bytes @ 0xF
  1260     002F                     	ds	1
  1261     0030                     vfpfcnvrt@cp:
  1262     0030                     ___aldiv@quotient:	
  1263                           ; 1 bytes @ 0x10
  1264                           
  1265                           
  1266                           ; 4 bytes @ 0x10
  1267     0030                     	ds	1
  1268     0031                     vfpfcnvrt@convarg:
  1269                           
  1270                           ; 4 bytes @ 0x11
  1271     0031                     	ds	3
  1272     0034                     ?_map:
  1273     0034                     map@x:	
  1274                           ; 4 bytes @ 0x14
  1275                           
  1276                           
  1277                           ; 2 bytes @ 0x14
  1278     0034                     	ds	1
  1279     0035                     vfpfcnvrt@c:
  1280                           
  1281                           ; 1 bytes @ 0x15
  1282     0035                     	ds	1
  1283     0036                     ?_vfprintf:
  1284     0036                     map@in_min:	
  1285                           ; 2 bytes @ 0x16
  1286                           
  1287     0036                     vfprintf@fp:	
  1288                           ; 2 bytes @ 0x16
  1289                           
  1290                           
  1291                           ; 2 bytes @ 0x16
  1292     0036                     	ds	2
  1293     0038                     vfprintf@fmt:
  1294     0038                     map@in_max:	
  1295                           ; 1 bytes @ 0x18
  1296                           
  1297                           
  1298                           ; 2 bytes @ 0x18
  1299     0038                     	ds	1
  1300     0039                     vfprintf@ap:
  1301                           
  1302                           ; 1 bytes @ 0x19
  1303     0039                     	ds	1
  1304     003A                     vfprintf@cfmt:
  1305     003A                     map@out_min:	
  1306                           ; 1 bytes @ 0x1A
  1307                           
  1308                           
  1309                           ; 2 bytes @ 0x1A
  1310     003A                     	ds	1
  1311     003B                     ?_sprintf:
  1312     003B                     sprintf@s:	
  1313                           ; 2 bytes @ 0x1B
  1314                           
  1315                           
  1316                           ; 1 bytes @ 0x1B
  1317     003B                     	ds	1
  1318     003C                     sprintf@fmt:
  1319     003C                     map@out_max:	
  1320                           ; 1 bytes @ 0x1C
  1321                           
  1322                           
  1323                           ; 2 bytes @ 0x1C
  1324     003C                     	ds	2
  1325     003E                     ??_map:
  1326                           
  1327                           ; 1 bytes @ 0x1E
  1328     003E                     	ds	1
  1329     003F                     ??_sprintf:
  1330                           
  1331                           ; 1 bytes @ 0x1F
  1332     003F                     	ds	1
  1333     0040                     sprintf@ap:
  1334                           
  1335                           ; 1 bytes @ 0x20
  1336     0040                     	ds	1
  1337     0041                     sprintf@f:
  1338                           
  1339                           ; 11 bytes @ 0x21
  1340     0041                     	ds	5
  1341     0046                     map@rise:
  1342                           
  1343                           ; 4 bytes @ 0x26
  1344     0046                     	ds	4
  1345     004A                     map@delta:
  1346                           
  1347                           ; 4 bytes @ 0x2A
  1348     004A                     	ds	2
  1349     004C                     print_SoilMoisture@buffer:
  1350     004C                     print_Temperature@buffer:	
  1351                           ; 16 bytes @ 0x2C
  1352                           
  1353                           
  1354                           ; 16 bytes @ 0x2C
  1355     004C                     	ds	2
  1356     004E                     map@run:
  1357                           
  1358                           ; 4 bytes @ 0x2E
  1359     004E                     	ds	4
  1360     0052                     ?_runTimer:
  1361     0052                     runTimer@timer:	
  1362                           ; 1 bytes @ 0x32
  1363                           
  1364                           
  1365                           ; 2 bytes @ 0x32
  1366     0052                     	ds	2
  1367     0054                     ??_runTimer:
  1368                           
  1369                           ; 1 bytes @ 0x34
  1370     0054                     	ds	4
  1371     0058                     runTimer@elapsedTime:
  1372                           
  1373                           ; 2 bytes @ 0x38
  1374     0058                     	ds	4
  1375                           
  1376                           	psect	maintext
  1377     02D3                     __pmaintext:	
  1378 ;;
  1379 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1380 ;;
  1381 ;; *************** function _main *****************
  1382 ;; Defined at:
  1383 ;;		line 44 in file "main.c"
  1384 ;; Parameters:    Size  Location     Type
  1385 ;;		None
  1386 ;; Auto vars:     Size  Location     Type
  1387 ;;		None
  1388 ;; Return value:  Size  Location     Type
  1389 ;;                  1    wreg      void 
  1390 ;; Registers used:
  1391 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1392 ;; Tracked objects:
  1393 ;;		On entry : B00/0
  1394 ;;		On exit  : 0/0
  1395 ;;		Unchanged: 0/0
  1396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1397 ;;      Params:         0       0       0       0       0
  1398 ;;      Locals:         0       0       0       0       0
  1399 ;;      Temps:          0       0       0       0       0
  1400 ;;      Totals:         0       0       0       0       0
  1401 ;;Total ram usage:        0 bytes
  1402 ;; Hardware stack levels required when called: 8
  1403 ;; This function calls:
  1404 ;;		_ADC_init
  1405 ;;		_ADC_readAll
  1406 ;;		_Lcd_Init
  1407 ;;		_WDT_init
  1408 ;;		_interruption_init
  1409 ;;		_lcd_run
  1410 ;;		_pins_init
  1411 ;;		_runTimer
  1412 ;;		_run_IrrigationLogic
  1413 ;;		_run_waterTankLogic
  1414 ;;		_startTimer
  1415 ;;		_timer1_1ms_init
  1416 ;; This function is called by:
  1417 ;;		Startup code after reset
  1418 ;; This function uses a non-reentrant model
  1419 ;;
  1420                           
  1421     02D3                     _main:	
  1422                           ;psect for function _main
  1423                           
  1424     02D3                     l2821:	
  1425                           ;incstack = 0
  1426                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1427                           
  1428                           
  1429                           ;main.c: 47:   pins_init(0xFF ,0xFF ,0x00 ,0x00);
  1430     02D3  30FF               	movlw	255
  1431     02D4  00F2               	movwf	pins_init@_TRISB
  1432     02D5  01F3               	clrf	pins_init@_TRISC
  1433     02D6  01F4               	clrf	pins_init@_TRISD
  1434     02D7  30FF               	movlw	255
  1435     02D8  120A  158A  23A3  120A  118A  	fcall	_pins_init
  1436     02DD                     l2823:
  1437                           
  1438                           ;main.c: 51:   PORTCbits.RC0 = 1;
  1439     02DD  1283               	bcf	3,5	;RP0=0, select bank0
  1440     02DE  1303               	bcf	3,6	;RP1=0, select bank0
  1441     02DF  1407               	bsf	7,0	;volatile
  1442     02E0                     l2825:
  1443                           
  1444                           ;main.c: 52:   PORTCbits.RC1 = 1;
  1445     02E0  1487               	bsf	7,1	;volatile
  1446     02E1                     l2827:
  1447                           
  1448                           ;main.c: 53:   PORTCbits.RC4 = 1;
  1449     02E1  1607               	bsf	7,4	;volatile
  1450     02E2                     l2829:
  1451                           
  1452                           ;main.c: 54:   PORTCbits.RC2 = 1;
  1453     02E2  1507               	bsf	7,2	;volatile
  1454     02E3                     l2831:
  1455                           
  1456                           ;main.c: 56:   PORTCbits.RC3 = 1;
  1457     02E3  1587               	bsf	7,3	;volatile
  1458     02E4                     l2833:
  1459                           
  1460                           ;main.c: 60:   WDT_init();
  1461     02E4  120A  158A  2322  120A  118A  	fcall	_WDT_init
  1462     02E9                     l2835:
  1463                           
  1464                           ;main.c: 61:   interruption_init();
  1465     02E9  120A  158A  232A  120A  118A  	fcall	_interruption_init
  1466     02EE                     l2837:
  1467                           
  1468                           ;main.c: 62:   timer1_1ms_init();
  1469     02EE  120A  158A  2355  120A  118A  	fcall	_timer1_1ms_init
  1470     02F3                     l2839:
  1471                           
  1472                           ;main.c: 63:   ADC_init();
  1473     02F3  120A  158A  2360  120A  118A  	fcall	_ADC_init
  1474                           
  1475                           ;main.c: 64:   Lcd_Init();
  1476     02F8  120A  118A  2699  120A  118A  	fcall	_Lcd_Init
  1477                           
  1478                           ;main.c: 67:   ADC_readAll();
  1479     02FD  120A  158A  23B2  120A  118A  	fcall	_ADC_readAll
  1480     0302                     l2841:
  1481                           
  1482                           ;main.c: 69:   startTimer(&timer_ADCReadAll);
  1483     0302  30D4               	movlw	low _timer_ADCReadAll
  1484     0303  00F2               	movwf	startTimer@timer
  1485     0304  3000               	movlw	high _timer_ADCReadAll
  1486     0305  00F3               	movwf	startTimer@timer+1
  1487     0306  120A  158A  2631  120A  118A  	fcall	_startTimer
  1488     030B                     l257:	
  1489                           ;main.c: 71:   while(1)
  1490                           
  1491     030B  0064               	clrwdt	;# 
  1492     030C                     l2843:
  1493                           
  1494                           ;main.c: 74:     run_waterTankLogic();
  1495     030C  120A  158A  25C8  120A  118A  	fcall	_run_waterTankLogic
  1496     0311                     l2845:
  1497                           
  1498                           ;main.c: 75:     run_IrrigationLogic(soilMoisture);
  1499     0311  1283               	bcf	3,5	;RP0=0, select bank0
  1500     0312  1303               	bcf	3,6	;RP1=0, select bank0
  1501     0313  0863               	movf	_soilMoisture+1,w
  1502     0314  00F7               	movwf	run_IrrigationLogic@sMoistureValue+1
  1503     0315  0862               	movf	_soilMoisture,w
  1504     0316  00F6               	movwf	run_IrrigationLogic@sMoistureValue
  1505     0317  120A  158A  26E8  120A  118A  	fcall	_run_IrrigationLogic
  1506     031C                     l2847:
  1507                           
  1508                           ;main.c: 76:     lcd_run();
  1509     031C  120A  158A  2668  120A  118A  	fcall	_lcd_run
  1510     0321                     l2849:
  1511                           
  1512                           ;main.c: 79:     runTimer(&timer_WTANK_Timeout);
  1513     0321  30E0               	movlw	low _timer_WTANK_Timeout
  1514     0322  1283               	bcf	3,5	;RP0=0, select bank0
  1515     0323  1303               	bcf	3,6	;RP1=0, select bank0
  1516     0324  00D2               	movwf	runTimer@timer
  1517     0325  3000               	movlw	high _timer_WTANK_Timeout
  1518     0326  00D3               	movwf	runTimer@timer+1
  1519     0327  120A  118A  248B  120A  118A  	fcall	_runTimer
  1520     032C                     l2851:
  1521                           
  1522                           ;main.c: 80:     runTimer(&timer_IRRIG_Timeout);
  1523     032C  30DA               	movlw	low _timer_IRRIG_Timeout
  1524     032D  1283               	bcf	3,5	;RP0=0, select bank0
  1525     032E  1303               	bcf	3,6	;RP1=0, select bank0
  1526     032F  00D2               	movwf	runTimer@timer
  1527     0330  3000               	movlw	high _timer_IRRIG_Timeout
  1528     0331  00D3               	movwf	runTimer@timer+1
  1529     0332  120A  118A  248B  120A  118A  	fcall	_runTimer
  1530     0337                     l2853:
  1531                           
  1532                           ;main.c: 81:     runTimer(&timer_ADCReadAll);
  1533     0337  30D4               	movlw	low _timer_ADCReadAll
  1534     0338  1283               	bcf	3,5	;RP0=0, select bank0
  1535     0339  1303               	bcf	3,6	;RP1=0, select bank0
  1536     033A  00D2               	movwf	runTimer@timer
  1537     033B  3000               	movlw	high _timer_ADCReadAll
  1538     033C  00D3               	movwf	runTimer@timer+1
  1539     033D  120A  118A  248B  120A  118A  	fcall	_runTimer
  1540     0342                     l2855:
  1541                           
  1542                           ;main.c: 85:     if(light >= 900)
  1543     0342  1283               	bcf	3,5	;RP0=0, select bank0
  1544     0343  1303               	bcf	3,6	;RP1=0, select bank0
  1545     0344  0861               	movf	_light+1,w
  1546     0345  3A80               	xorlw	128
  1547     0346  00FF               	movwf	btemp+1
  1548     0347  3083               	movlw	131
  1549     0348  027F               	subwf	btemp+1,w
  1550     0349  1D03               	skipz
  1551     034A  2B4D               	goto	u2765
  1552     034B  3084               	movlw	132
  1553     034C  0260               	subwf	_light,w
  1554     034D                     u2765:
  1555     034D  1C03               	skipc
  1556     034E  2B50               	goto	u2761
  1557     034F  2B51               	goto	u2760
  1558     0350                     u2761:
  1559     0350  2B55               	goto	l258
  1560     0351                     u2760:
  1561     0351                     l2857:
  1562                           
  1563                           ;main.c: 86:       PORTCbits.RC3 = 0;
  1564     0351  1283               	bcf	3,5	;RP0=0, select bank0
  1565     0352  1303               	bcf	3,6	;RP1=0, select bank0
  1566     0353  1187               	bcf	7,3	;volatile
  1567     0354  2B58               	goto	l2859
  1568     0355                     l258:	
  1569                           ;main.c: 87:     else
  1570                           
  1571                           
  1572                           ;main.c: 88:       PORTCbits.RC3 = 1;
  1573     0355  1283               	bcf	3,5	;RP0=0, select bank0
  1574     0356  1303               	bcf	3,6	;RP1=0, select bank0
  1575     0357  1587               	bsf	7,3	;volatile
  1576     0358                     l2859:
  1577                           
  1578                           ;main.c: 90:     if(temperature >= 30)
  1579     0358  085F               	movf	_temperature+1,w
  1580     0359  3A80               	xorlw	128
  1581     035A  00FF               	movwf	btemp+1
  1582     035B  3080               	movlw	128
  1583     035C  027F               	subwf	btemp+1,w
  1584     035D  1D03               	skipz
  1585     035E  2B61               	goto	u2775
  1586     035F  301E               	movlw	30
  1587     0360  025E               	subwf	_temperature,w
  1588     0361                     u2775:
  1589     0361  1C03               	skipc
  1590     0362  2B64               	goto	u2771
  1591     0363  2B65               	goto	u2770
  1592     0364                     u2771:
  1593     0364  2B69               	goto	l260
  1594     0365                     u2770:
  1595     0365                     l2861:
  1596                           
  1597                           ;main.c: 91:       PORTCbits.RC4 = 0;
  1598     0365  1283               	bcf	3,5	;RP0=0, select bank0
  1599     0366  1303               	bcf	3,6	;RP1=0, select bank0
  1600     0367  1207               	bcf	7,4	;volatile
  1601     0368  2B0B               	goto	l257
  1602     0369                     l260:	
  1603                           ;main.c: 92:     else
  1604                           
  1605                           
  1606                           ;main.c: 93:       PORTCbits.RC4 = 1;
  1607     0369  1283               	bcf	3,5	;RP0=0, select bank0
  1608     036A  1303               	bcf	3,6	;RP1=0, select bank0
  1609     036B  1607               	bsf	7,4	;volatile
  1610     036C  2B0B               	goto	l257
  1611     036D  120A  118A  280C   	ljmp	start
  1612     0370                     __end_of_main:
  1613                           
  1614                           	psect	text1
  1615     0B55                     __ptext1:	
  1616 ;; *************** function _timer1_1ms_init *****************
  1617 ;; Defined at:
  1618 ;;		line 51 in file "./config.h"
  1619 ;; Parameters:    Size  Location     Type
  1620 ;;		None
  1621 ;; Auto vars:     Size  Location     Type
  1622 ;;		None
  1623 ;; Return value:  Size  Location     Type
  1624 ;;                  1    wreg      void 
  1625 ;; Registers used:
  1626 ;;		None
  1627 ;; Tracked objects:
  1628 ;;		On entry : 0/0
  1629 ;;		On exit  : 0/0
  1630 ;;		Unchanged: 0/0
  1631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1632 ;;      Params:         0       0       0       0       0
  1633 ;;      Locals:         0       0       0       0       0
  1634 ;;      Temps:          0       0       0       0       0
  1635 ;;      Totals:         0       0       0       0       0
  1636 ;;Total ram usage:        0 bytes
  1637 ;; Hardware stack levels used: 1
  1638 ;; Hardware stack levels required when called: 1
  1639 ;; This function calls:
  1640 ;;		Nothing
  1641 ;; This function is called by:
  1642 ;;		_main
  1643 ;; This function uses a non-reentrant model
  1644 ;;
  1645                           
  1646     0B55                     _timer1_1ms_init:	
  1647                           ;psect for function _timer1_1ms_init
  1648                           
  1649     0B55                     l2257:	
  1650                           ;incstack = 0
  1651                           ; Regs used in _timer1_1ms_init: []
  1652                           
  1653     0B55  1283               	bcf	3,5	;RP0=0, select bank0
  1654     0B56  1303               	bcf	3,6	;RP1=0, select bank0
  1655     0B57  1090               	bcf	16,1	;volatile
  1656     0B58  1610               	bsf	16,4	;volatile
  1657     0B59  1690               	bsf	16,5	;volatile
  1658     0B5A  300B               	movlw	11
  1659     0B5B  008F               	movwf	15	;volatile
  1660     0B5C  30DB               	movlw	219
  1661     0B5D  008E               	movwf	14	;volatile
  1662                           
  1663                           ;./config.h: 75:   T1CONbits.TMR1ON = 1;
  1664     0B5E  1410               	bsf	16,0	;volatile
  1665     0B5F                     l100:
  1666     0B5F  0008               	return
  1667     0B60                     __end_of_timer1_1ms_init:
  1668                           
  1669                           	psect	text2
  1670     0DC8                     __ptext2:	
  1671 ;; *************** function _run_waterTankLogic *****************
  1672 ;; Defined at:
  1673 ;;		line 43 in file "waterTankManager.c"
  1674 ;; Parameters:    Size  Location     Type
  1675 ;;		None
  1676 ;; Auto vars:     Size  Location     Type
  1677 ;;		None
  1678 ;; Return value:  Size  Location     Type
  1679 ;;                  1    wreg      void 
  1680 ;; Registers used:
  1681 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1682 ;; Tracked objects:
  1683 ;;		On entry : 0/0
  1684 ;;		On exit  : 0/0
  1685 ;;		Unchanged: 0/0
  1686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1687 ;;      Params:         0       0       0       0       0
  1688 ;;      Locals:         0       0       0       0       0
  1689 ;;      Temps:          2       0       0       0       0
  1690 ;;      Totals:         2       0       0       0       0
  1691 ;;Total ram usage:        2 bytes
  1692 ;; Hardware stack levels used: 1
  1693 ;; Hardware stack levels required when called: 3
  1694 ;; This function calls:
  1695 ;;		_check_TankStatus
  1696 ;;		_startFilling
  1697 ;;		_stopFilling
  1698 ;; This function is called by:
  1699 ;;		_main
  1700 ;; This function uses a non-reentrant model
  1701 ;;
  1702                           
  1703     0DC8                     _run_waterTankLogic:	
  1704                           ;psect for function _run_waterTankLogic
  1705                           
  1706     0DC8                     l2299:	
  1707                           ;incstack = 0
  1708                           ; Regs used in _run_waterTankLogic: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1709                           
  1710                           
  1711                           ;waterTankManager.c: 46:   check_TankStatus();
  1712     0DC8  120A  158A  27B9  120A  158A  	fcall	_check_TankStatus
  1713                           
  1714                           ;waterTankManager.c: 48:   switch (tankState)
  1715     0DCD  2DE3               	goto	l2311
  1716     0DCE                     l2301:
  1717                           
  1718                           ;waterTankManager.c: 51:     stopFilling();
  1719     0DCE  120A  158A  23D5  120A  158A  	fcall	_stopFilling
  1720     0DD3                     l2303:
  1721                           
  1722                           ;waterTankManager.c: 52:     PORTCbits.RC2 = 0;
  1723     0DD3  1283               	bcf	3,5	;RP0=0, select bank0
  1724     0DD4  1303               	bcf	3,6	;RP1=0, select bank0
  1725     0DD5  1107               	bcf	7,2	;volatile
  1726                           
  1727                           ;waterTankManager.c: 53:     break;
  1728     0DD6  2DFB               	goto	l308
  1729     0DD7                     l2305:
  1730                           
  1731                           ;waterTankManager.c: 56:     startFilling();
  1732     0DD7  120A  158A  23E8  120A  158A  	fcall	_startFilling
  1733                           
  1734                           ;waterTankManager.c: 57:     break;
  1735     0DDC  2DFB               	goto	l308
  1736     0DDD                     l2307:
  1737                           
  1738                           ;waterTankManager.c: 60:     stopFilling();
  1739     0DDD  120A  158A  23D5  120A  158A  	fcall	_stopFilling
  1740                           
  1741                           ;waterTankManager.c: 61:     break;
  1742     0DE2  2DFB               	goto	l308
  1743     0DE3                     l2311:
  1744     0DE3  087B               	movf	_tankState,w
  1745     0DE4  00F6               	movwf	??_run_waterTankLogic
  1746     0DE5  01F7               	clrf	??_run_waterTankLogic+1
  1747     0DE6  1BF6               	btfsc	??_run_waterTankLogic,7
  1748     0DE7  03F7               	decf	??_run_waterTankLogic+1,f
  1749                           
  1750                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1751                           ; Switch size 1, requested type "simple"
  1752                           ; Number of cases is 1, Range of values is 0 to 0
  1753                           ; switch strategies available:
  1754                           ; Name         Instructions Cycles
  1755                           ; simple_byte            4     3 (average)
  1756                           ; direct_byte           11     8 (fixed)
  1757                           ; jumptable            260     6 (fixed)
  1758                           ;	Chosen strategy is simple_byte
  1759     0DE8  0877               	movf	??_run_waterTankLogic+1,w
  1760     0DE9  3A00               	xorlw	0	; case 0
  1761     0DEA  1903               	skipnz
  1762     0DEB  2DED               	goto	l2883
  1763     0DEC  2DDD               	goto	l2307
  1764     0DED                     l2883:
  1765                           
  1766                           ; Switch size 1, requested type "simple"
  1767                           ; Number of cases is 4, Range of values is 0 to 3
  1768                           ; switch strategies available:
  1769                           ; Name         Instructions Cycles
  1770                           ; simple_byte           13     7 (average)
  1771                           ; direct_byte           20     8 (fixed)
  1772                           ; jumptable            260     6 (fixed)
  1773                           ;	Chosen strategy is simple_byte
  1774     0DED  0876               	movf	??_run_waterTankLogic,w
  1775     0DEE  3A00               	xorlw	0	; case 0
  1776     0DEF  1903               	skipnz
  1777     0DF0  2DDD               	goto	l2307
  1778     0DF1  3A01               	xorlw	1	; case 1
  1779     0DF2  1903               	skipnz
  1780     0DF3  2DFB               	goto	l308
  1781     0DF4  3A03               	xorlw	3	; case 2
  1782     0DF5  1903               	skipnz
  1783     0DF6  2DD7               	goto	l2305
  1784     0DF7  3A01               	xorlw	1	; case 3
  1785     0DF8  1903               	skipnz
  1786     0DF9  2DCE               	goto	l2301
  1787     0DFA  2DDD               	goto	l2307
  1788     0DFB                     l308:
  1789     0DFB  0008               	return
  1790     0DFC                     __end_of_run_waterTankLogic:
  1791                           
  1792                           	psect	text3
  1793     0BE8                     __ptext3:	
  1794 ;; *************** function _startFilling *****************
  1795 ;; Defined at:
  1796 ;;		line 72 in file "waterTankManager.c"
  1797 ;; Parameters:    Size  Location     Type
  1798 ;;		None
  1799 ;; Auto vars:     Size  Location     Type
  1800 ;;		None
  1801 ;; Return value:  Size  Location     Type
  1802 ;;                  1    wreg      void 
  1803 ;; Registers used:
  1804 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1805 ;; Tracked objects:
  1806 ;;		On entry : 0/0
  1807 ;;		On exit  : 0/0
  1808 ;;		Unchanged: 0/0
  1809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1810 ;;      Params:         0       0       0       0       0
  1811 ;;      Locals:         0       0       0       0       0
  1812 ;;      Temps:          0       0       0       0       0
  1813 ;;      Totals:         0       0       0       0       0
  1814 ;;Total ram usage:        0 bytes
  1815 ;; Hardware stack levels used: 1
  1816 ;; Hardware stack levels required when called: 2
  1817 ;; This function calls:
  1818 ;;		_startTimer
  1819 ;; This function is called by:
  1820 ;;		_run_waterTankLogic
  1821 ;; This function uses a non-reentrant model
  1822 ;;
  1823                           
  1824     0BE8                     _startFilling:	
  1825                           ;psect for function _startFilling
  1826                           
  1827     0BE8                     l2231:	
  1828                           ;incstack = 0
  1829                           ; Regs used in _startFilling: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1830                           
  1831                           
  1832                           ;waterTankManager.c: 74:   if(isFilling)
  1833     0BE8  1CFA               	btfss	_isFilling/(0+8),_isFilling& (0+7)
  1834     0BE9  2BEB               	goto	u2041
  1835     0BEA  2BEC               	goto	u2040
  1836     0BEB                     u2041:
  1837     0BEB  2BED               	goto	l311
  1838     0BEC                     u2040:
  1839     0BEC  2BFA               	goto	l312
  1840     0BED                     l311:
  1841                           
  1842                           ;waterTankManager.c: 77:   isFilling = 1;
  1843     0BED  14FA               	bsf	_isFilling/(0+8),_isFilling& (0+7)
  1844                           
  1845                           ;waterTankManager.c: 78:   PORTCbits.RC0 = 0;
  1846     0BEE  1283               	bcf	3,5	;RP0=0, select bank0
  1847     0BEF  1303               	bcf	3,6	;RP1=0, select bank0
  1848     0BF0  1007               	bcf	7,0	;volatile
  1849     0BF1                     l2235:
  1850                           
  1851                           ;waterTankManager.c: 79:   startTimer(&timer_WTANK_Timeout);
  1852     0BF1  30E0               	movlw	low _timer_WTANK_Timeout
  1853     0BF2  00F2               	movwf	startTimer@timer
  1854     0BF3  3000               	movlw	high _timer_WTANK_Timeout
  1855     0BF4  00F3               	movwf	startTimer@timer+1
  1856     0BF5  120A  158A  2631  120A  158A  	fcall	_startTimer
  1857     0BFA                     l312:
  1858     0BFA  0008               	return
  1859     0BFB                     __end_of_startFilling:
  1860                           
  1861                           	psect	text4
  1862     0FB9                     __ptext4:	
  1863 ;; *************** function _check_TankStatus *****************
  1864 ;; Defined at:
  1865 ;;		line 14 in file "waterTankManager.c"
  1866 ;; Parameters:    Size  Location     Type
  1867 ;;		None
  1868 ;; Auto vars:     Size  Location     Type
  1869 ;;  bot             1    4[COMMON] unsigned char 
  1870 ;;  top             1    3[COMMON] unsigned char 
  1871 ;; Return value:  Size  Location     Type
  1872 ;;                  1    wreg      void 
  1873 ;; Registers used:
  1874 ;;		wreg, status,2, status,0
  1875 ;; Tracked objects:
  1876 ;;		On entry : 0/0
  1877 ;;		On exit  : 0/0
  1878 ;;		Unchanged: 0/0
  1879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1880 ;;      Params:         0       0       0       0       0
  1881 ;;      Locals:         2       0       0       0       0
  1882 ;;      Temps:          1       0       0       0       0
  1883 ;;      Totals:         3       0       0       0       0
  1884 ;;Total ram usage:        3 bytes
  1885 ;; Hardware stack levels used: 1
  1886 ;; Hardware stack levels required when called: 1
  1887 ;; This function calls:
  1888 ;;		Nothing
  1889 ;; This function is called by:
  1890 ;;		_run_waterTankLogic
  1891 ;; This function uses a non-reentrant model
  1892 ;;
  1893                           
  1894     0FB9                     _check_TankStatus:	
  1895                           ;psect for function _check_TankStatus
  1896                           
  1897     0FB9                     l2203:	
  1898                           ;incstack = 0
  1899                           ; Regs used in _check_TankStatus: [wreg+status,2+status,0]
  1900                           
  1901                           
  1902                           ;waterTankManager.c: 17:   unsigned char top = PORTCbits.RC6;
  1903     0FB9  1283               	bcf	3,5	;RP0=0, select bank0
  1904     0FBA  1303               	bcf	3,6	;RP1=0, select bank0
  1905     0FBB  0E07               	swapf	7,w	;volatile
  1906     0FBC  00F2               	movwf	??_check_TankStatus
  1907     0FBD  0CF2               	rrf	??_check_TankStatus,f
  1908     0FBE  0C72               	rrf	??_check_TankStatus,w
  1909     0FBF  3901               	andlw	1
  1910     0FC0  00F3               	movwf	check_TankStatus@top
  1911                           
  1912                           ;waterTankManager.c: 18:   unsigned char bot = PORTCbits.RC7;
  1913     0FC1  0D07               	rlf	7,w	;volatile
  1914     0FC2  0D07               	rlf	7,w	;volatile
  1915     0FC3  3901               	andlw	1
  1916     0FC4  00F4               	movwf	check_TankStatus@bot
  1917                           
  1918                           ;waterTankManager.c: 20:   if(tankState == WTANK_ERROR)
  1919     0FC5  3003               	movlw	3
  1920     0FC6  067B               	xorwf	_tankState,w
  1921     0FC7  1D03               	btfss	3,2
  1922     0FC8  2FCA               	goto	u1951
  1923     0FC9  2FCB               	goto	u1950
  1924     0FCA                     u1951:
  1925     0FCA  2FCE               	goto	l2207
  1926     0FCB                     u1950:
  1927     0FCB                     l2205:
  1928                           
  1929                           ;waterTankManager.c: 21:     tankState = WTANK_ERROR;
  1930     0FCB  3003               	movlw	3
  1931     0FCC  00FB               	movwf	_tankState
  1932     0FCD  2FFF               	goto	l298
  1933     0FCE                     l2207:
  1934     0FCE  0373               	decf	check_TankStatus@top,w
  1935     0FCF  1D03               	btfss	3,2
  1936     0FD0  2FD2               	goto	u1961
  1937     0FD1  2FD3               	goto	u1960
  1938     0FD2                     u1961:
  1939     0FD2  2FD9               	goto	l2213
  1940     0FD3                     u1960:
  1941     0FD3                     l2209:
  1942     0FD3  0874               	movf	check_TankStatus@bot,w
  1943     0FD4  1D03               	btfss	3,2
  1944     0FD5  2FD7               	goto	u1971
  1945     0FD6  2FD8               	goto	u1970
  1946     0FD7                     u1971:
  1947     0FD7  2FD9               	goto	l2213
  1948     0FD8                     u1970:
  1949     0FD8  2FCB               	goto	l2205
  1950     0FD9                     l2213:
  1951     0FD9  0873               	movf	check_TankStatus@top,w
  1952     0FDA  1D03               	btfss	3,2
  1953     0FDB  2FDD               	goto	u1981
  1954     0FDC  2FDE               	goto	u1980
  1955     0FDD                     u1981:
  1956     0FDD  2FE6               	goto	l2219
  1957     0FDE                     u1980:
  1958     0FDE                     l2215:
  1959     0FDE  0374               	decf	check_TankStatus@bot,w
  1960     0FDF  1D03               	btfss	3,2
  1961     0FE0  2FE2               	goto	u1991
  1962     0FE1  2FE3               	goto	u1990
  1963     0FE2                     u1991:
  1964     0FE2  2FE6               	goto	l2219
  1965     0FE3                     u1990:
  1966     0FE3                     l2217:
  1967                           
  1968                           ;waterTankManager.c: 29:     tankState = WTANK_MID;
  1969     0FE3  3001               	movlw	1
  1970     0FE4  00FB               	movwf	_tankState
  1971     0FE5  2FFF               	goto	l298
  1972     0FE6                     l2219:
  1973     0FE6  0373               	decf	check_TankStatus@top,w
  1974     0FE7  1D03               	btfss	3,2
  1975     0FE8  2FEA               	goto	u2001
  1976     0FE9  2FEB               	goto	u2000
  1977     0FEA                     u2001:
  1978     0FEA  2FF2               	goto	l2225
  1979     0FEB                     u2000:
  1980     0FEB                     l2221:
  1981     0FEB  0374               	decf	check_TankStatus@bot,w
  1982     0FEC  1D03               	btfss	3,2
  1983     0FED  2FEF               	goto	u2011
  1984     0FEE  2FF0               	goto	u2010
  1985     0FEF                     u2011:
  1986     0FEF  2FF2               	goto	l2225
  1987     0FF0                     u2010:
  1988     0FF0                     l2223:
  1989                           
  1990                           ;waterTankManager.c: 33:     tankState = WTANK_FULL;
  1991     0FF0  01FB               	clrf	_tankState
  1992     0FF1  2FFF               	goto	l298
  1993     0FF2                     l2225:
  1994     0FF2  0873               	movf	check_TankStatus@top,w
  1995     0FF3  1D03               	btfss	3,2
  1996     0FF4  2FF6               	goto	u2021
  1997     0FF5  2FF7               	goto	u2020
  1998     0FF6                     u2021:
  1999     0FF6  2FFF               	goto	l292
  2000     0FF7                     u2020:
  2001     0FF7                     l2227:
  2002     0FF7  0874               	movf	check_TankStatus@bot,w
  2003     0FF8  1D03               	btfss	3,2
  2004     0FF9  2FFB               	goto	u2031
  2005     0FFA  2FFC               	goto	u2030
  2006     0FFB                     u2031:
  2007     0FFB  2FFF               	goto	l292
  2008     0FFC                     u2030:
  2009     0FFC                     l2229:
  2010                           
  2011                           ;waterTankManager.c: 37:     tankState = WTANK_LOW;
  2012     0FFC  3002               	movlw	2
  2013     0FFD  00FB               	movwf	_tankState
  2014     0FFE  2FFF               	goto	l298
  2015     0FFF                     l292:
  2016     0FFF                     l298:
  2017     0FFF  0008               	return
  2018     1000                     __end_of_check_TankStatus:
  2019                           
  2020                           	psect	text5
  2021     0EE8                     __ptext5:	
  2022 ;; *************** function _run_IrrigationLogic *****************
  2023 ;; Defined at:
  2024 ;;		line 17 in file "irrigation.c"
  2025 ;; Parameters:    Size  Location     Type
  2026 ;;  sMoistureVal    2    6[COMMON] int 
  2027 ;; Auto vars:     Size  Location     Type
  2028 ;;		None
  2029 ;; Return value:  Size  Location     Type
  2030 ;;                  1    wreg      void 
  2031 ;; Registers used:
  2032 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2033 ;; Tracked objects:
  2034 ;;		On entry : 0/0
  2035 ;;		On exit  : 0/0
  2036 ;;		Unchanged: 0/0
  2037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2038 ;;      Params:         2       0       0       0       0
  2039 ;;      Locals:         0       0       0       0       0
  2040 ;;      Temps:          0       0       0       0       0
  2041 ;;      Totals:         2       0       0       0       0
  2042 ;;Total ram usage:        2 bytes
  2043 ;; Hardware stack levels used: 1
  2044 ;; Hardware stack levels required when called: 3
  2045 ;; This function calls:
  2046 ;;		_startIrrigation
  2047 ;;		_stopIrrigation
  2048 ;; This function is called by:
  2049 ;;		_main
  2050 ;; This function uses a non-reentrant model
  2051 ;;
  2052                           
  2053     0EE8                     _run_IrrigationLogic:	
  2054                           ;psect for function _run_IrrigationLogic
  2055                           
  2056     0EE8                     l2317:	
  2057                           ;incstack = 0
  2058                           ; Regs used in _run_IrrigationLogic: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  2059                           
  2060                           
  2061                           ;irrigation.c: 17: void run_IrrigationLogic(int sMoistureValue);irrigation.c: 18: {;irri
      +                          gation.c: 20:   if(irrigationState == IRRIG_ERROR)
  2062     0EE8  3002               	movlw	2
  2063     0EE9  1283               	bcf	3,5	;RP0=0, select bank0
  2064     0EEA  1303               	bcf	3,6	;RP1=0, select bank0
  2065     0EEB  066D               	xorwf	_irrigationState,w
  2066     0EEC  1D03               	btfss	3,2
  2067     0EED  2EEF               	goto	u2061
  2068     0EEE  2EF0               	goto	u2060
  2069     0EEF                     u2061:
  2070     0EEF  2EF9               	goto	l2323
  2071     0EF0                     u2060:
  2072     0EF0                     l2319:
  2073                           
  2074                           ;irrigation.c: 21:   {;irrigation.c: 22:     stopIrrigation();
  2075     0EF0  120A  158A  2422  120A  158A  	fcall	_stopIrrigation
  2076     0EF5                     l2321:
  2077                           
  2078                           ;irrigation.c: 23:     PORTCbits.RC2 = 0;
  2079     0EF5  1283               	bcf	3,5	;RP0=0, select bank0
  2080     0EF6  1303               	bcf	3,6	;RP1=0, select bank0
  2081     0EF7  1107               	bcf	7,2	;volatile
  2082                           
  2083                           ;irrigation.c: 24:   }
  2084     0EF8  2F2C               	goto	l377
  2085     0EF9                     l2323:
  2086     0EF9  3002               	movlw	2
  2087     0EFA  067B               	xorwf	_tankState,w
  2088     0EFB  1903               	btfsc	3,2
  2089     0EFC  2EFE               	goto	u2071
  2090     0EFD  2EFF               	goto	u2070
  2091     0EFE                     u2071:
  2092     0EFE  2F05               	goto	l2327
  2093     0EFF                     u2070:
  2094     0EFF                     l2325:
  2095     0EFF  3003               	movlw	3
  2096     0F00  067B               	xorwf	_tankState,w
  2097     0F01  1D03               	btfss	3,2
  2098     0F02  2F04               	goto	u2081
  2099     0F03  2F05               	goto	u2080
  2100     0F04                     u2081:
  2101     0F04  2F0B               	goto	l2329
  2102     0F05                     u2080:
  2103     0F05                     l2327:
  2104                           
  2105                           ;irrigation.c: 27:   stopIrrigation();
  2106     0F05  120A  158A  2422  120A  158A  	fcall	_stopIrrigation
  2107     0F0A  2F2C               	goto	l377
  2108     0F0B                     l2329:
  2109     0F0B  0877               	movf	run_IrrigationLogic@sMoistureValue+1,w
  2110     0F0C  3A80               	xorlw	128
  2111     0F0D  00FF               	movwf	btemp+1
  2112     0F0E  3080               	movlw	128
  2113     0F0F  027F               	subwf	btemp+1,w
  2114     0F10  1D03               	skipz
  2115     0F11  2F14               	goto	u2095
  2116     0F12  301F               	movlw	31
  2117     0F13  0276               	subwf	run_IrrigationLogic@sMoistureValue,w
  2118     0F14                     u2095:
  2119     0F14  1803               	skipnc
  2120     0F15  2F17               	goto	u2091
  2121     0F16  2F18               	goto	u2090
  2122     0F17                     u2091:
  2123     0F17  2F1E               	goto	l2333
  2124     0F18                     u2090:
  2125     0F18                     l2331:
  2126                           
  2127                           ;irrigation.c: 30:     startIrrigation();
  2128     0F18  120A  158A  240E  120A  158A  	fcall	_startIrrigation
  2129     0F1D  2F2C               	goto	l377
  2130     0F1E                     l2333:
  2131     0F1E  0877               	movf	run_IrrigationLogic@sMoistureValue+1,w
  2132     0F1F  3A80               	xorlw	128
  2133     0F20  00FF               	movwf	btemp+1
  2134     0F21  3080               	movlw	128
  2135     0F22  027F               	subwf	btemp+1,w
  2136     0F23  1D03               	skipz
  2137     0F24  2F27               	goto	u2105
  2138     0F25  3032               	movlw	50
  2139     0F26  0276               	subwf	run_IrrigationLogic@sMoistureValue,w
  2140     0F27                     u2105:
  2141     0F27  1C03               	skipc
  2142     0F28  2F2A               	goto	u2101
  2143     0F29  2F2B               	goto	u2100
  2144     0F2A                     u2101:
  2145     0F2A  2F2C               	goto	l373
  2146     0F2B                     u2100:
  2147     0F2B  2F05               	goto	l2327
  2148     0F2C                     l373:
  2149     0F2C                     l377:
  2150     0F2C  0008               	return
  2151     0F2D                     __end_of_run_IrrigationLogic:
  2152                           
  2153                           	psect	text6
  2154     0C0E                     __ptext6:	
  2155 ;; *************** function _startIrrigation *****************
  2156 ;; Defined at:
  2157 ;;		line 36 in file "irrigation.c"
  2158 ;; Parameters:    Size  Location     Type
  2159 ;;		None
  2160 ;; Auto vars:     Size  Location     Type
  2161 ;;		None
  2162 ;; Return value:  Size  Location     Type
  2163 ;;                  1    wreg      void 
  2164 ;; Registers used:
  2165 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2166 ;; Tracked objects:
  2167 ;;		On entry : 0/0
  2168 ;;		On exit  : 0/0
  2169 ;;		Unchanged: 0/0
  2170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2171 ;;      Params:         0       0       0       0       0
  2172 ;;      Locals:         0       0       0       0       0
  2173 ;;      Temps:          0       0       0       0       0
  2174 ;;      Totals:         0       0       0       0       0
  2175 ;;Total ram usage:        0 bytes
  2176 ;; Hardware stack levels used: 1
  2177 ;; Hardware stack levels required when called: 2
  2178 ;; This function calls:
  2179 ;;		_startTimer
  2180 ;; This function is called by:
  2181 ;;		_run_IrrigationLogic
  2182 ;; This function uses a non-reentrant model
  2183 ;;
  2184                           
  2185     0C0E                     _startIrrigation:	
  2186                           ;psect for function _startIrrigation
  2187                           
  2188     0C0E                     l2241:	
  2189                           ;incstack = 0
  2190                           ; Regs used in _startIrrigation: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2191                           
  2192                           
  2193                           ;irrigation.c: 38:   if(isIrrigating)
  2194     0C0E  1C7A               	btfss	_isIrrigating/(0+8),_isIrrigating& (0+7)
  2195     0C0F  2C11               	goto	u2051
  2196     0C10  2C12               	goto	u2050
  2197     0C11                     u2051:
  2198     0C11  2C13               	goto	l380
  2199     0C12                     u2050:
  2200     0C12  2C21               	goto	l381
  2201     0C13                     l380:
  2202                           
  2203                           ;irrigation.c: 41:   PORTCbits.RC1 = 0;
  2204     0C13  1283               	bcf	3,5	;RP0=0, select bank0
  2205     0C14  1303               	bcf	3,6	;RP1=0, select bank0
  2206     0C15  1087               	bcf	7,1	;volatile
  2207     0C16                     l2245:
  2208                           
  2209                           ;irrigation.c: 42:   irrigationState = IRRIG_ON;
  2210     0C16  01ED               	clrf	_irrigationState
  2211     0C17                     l2247:
  2212                           
  2213                           ;irrigation.c: 43:   isIrrigating = 1;
  2214     0C17  147A               	bsf	_isIrrigating/(0+8),_isIrrigating& (0+7)
  2215     0C18                     l2249:
  2216                           
  2217                           ;irrigation.c: 44:   startTimer(&timer_IRRIG_Timeout);
  2218     0C18  30DA               	movlw	low _timer_IRRIG_Timeout
  2219     0C19  00F2               	movwf	startTimer@timer
  2220     0C1A  3000               	movlw	high _timer_IRRIG_Timeout
  2221     0C1B  00F3               	movwf	startTimer@timer+1
  2222     0C1C  120A  158A  2631  120A  158A  	fcall	_startTimer
  2223     0C21                     l381:
  2224     0C21  0008               	return
  2225     0C22                     __end_of_startIrrigation:
  2226                           
  2227                           	psect	text7
  2228     0E31                     __ptext7:	
  2229 ;; *************** function _startTimer *****************
  2230 ;; Defined at:
  2231 ;;		line 25 in file "virtualTimer.c"
  2232 ;; Parameters:    Size  Location     Type
  2233 ;;  timer           2    2[COMMON] PTR struct .
  2234 ;;		 -> timer_IRRIG_Timeout(6), timer_WTANK_Timeout(6), timer_ADCReadAll(6), 
  2235 ;; Auto vars:     Size  Location     Type
  2236 ;;		None
  2237 ;; Return value:  Size  Location     Type
  2238 ;;                  1    wreg      void 
  2239 ;; Registers used:
  2240 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2241 ;; Tracked objects:
  2242 ;;		On entry : 0/0
  2243 ;;		On exit  : 0/0
  2244 ;;		Unchanged: 0/0
  2245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2246 ;;      Params:         2       0       0       0       0
  2247 ;;      Locals:         0       0       0       0       0
  2248 ;;      Temps:          2       0       0       0       0
  2249 ;;      Totals:         4       0       0       0       0
  2250 ;;Total ram usage:        4 bytes
  2251 ;; Hardware stack levels used: 1
  2252 ;; Hardware stack levels required when called: 1
  2253 ;; This function calls:
  2254 ;;		Nothing
  2255 ;; This function is called by:
  2256 ;;		_main
  2257 ;;		_startFilling
  2258 ;;		_startIrrigation
  2259 ;; This function uses a non-reentrant model
  2260 ;;
  2261                           
  2262     0E31                     _startTimer:	
  2263                           ;psect for function _startTimer
  2264                           
  2265     0E31                     l2055:	
  2266                           ;incstack = 0
  2267                           ; Regs used in _startTimer: [wreg-fsr0h+status,2+status,0]
  2268                           
  2269                           
  2270                           ;virtualTimer.c: 25: void startTimer(virtualTimer *timer);virtualTimer.c: 26: {;virtualT
      +                          imer.c: 27:   if(timer->active)
  2271     0E31  0872               	movf	startTimer@timer,w
  2272     0E32  3E04               	addlw	4
  2273     0E33  00F4               	movwf	??_startTimer
  2274     0E34  0873               	movf	startTimer@timer+1,w
  2275     0E35  1803               	skipnc
  2276     0E36  3E01               	addlw	1
  2277     0E37  3E00               	addlw	0
  2278     0E38  00F5               	movwf	??_startTimer+1
  2279     0E39  0874               	movf	??_startTimer,w
  2280     0E3A  0084               	movwf	4
  2281     0E3B  1783               	bsf	3,7
  2282     0E3C  1C75               	btfss	??_startTimer+1,0
  2283     0E3D  1383               	bcf	3,7
  2284     0E3E  0800               	movf	0,w
  2285     0E3F  1903               	btfsc	3,2
  2286     0E40  2E42               	goto	u1771
  2287     0E41  2E43               	goto	u1770
  2288     0E42                     u1771:
  2289     0E42  2E44               	goto	l2059
  2290     0E43                     u1770:
  2291     0E43  2E67               	goto	l333
  2292     0E44                     l2059:
  2293                           
  2294                           ;virtualTimer.c: 30:   timer->startTime = timerCounter;
  2295     0E44  0872               	movf	startTimer@timer,w
  2296     0E45  3E02               	addlw	2
  2297     0E46  00F4               	movwf	??_startTimer
  2298     0E47  0873               	movf	startTimer@timer+1,w
  2299     0E48  1803               	skipnc
  2300     0E49  3E01               	addlw	1
  2301     0E4A  3E00               	addlw	0
  2302     0E4B  00F5               	movwf	??_startTimer+1
  2303     0E4C  0874               	movf	??_startTimer,w
  2304     0E4D  0084               	movwf	4
  2305     0E4E  1783               	bsf	3,7
  2306     0E4F  1C75               	btfss	??_startTimer+1,0
  2307     0E50  1383               	bcf	3,7
  2308     0E51  1283               	bcf	3,5	;RP0=0, select bank0
  2309     0E52  1303               	bcf	3,6	;RP1=0, select bank0
  2310     0E53  085C               	movf	_timerCounter,w	;volatile
  2311     0E54  0080               	movwf	0
  2312     0E55  0A84               	incf	4,f
  2313     0E56  085D               	movf	_timerCounter+1,w	;volatile
  2314     0E57  0080               	movwf	0
  2315                           
  2316                           ;virtualTimer.c: 31:   timer->active = 1;
  2317     0E58  0872               	movf	startTimer@timer,w
  2318     0E59  3E04               	addlw	4
  2319     0E5A  00F4               	movwf	??_startTimer
  2320     0E5B  0873               	movf	startTimer@timer+1,w
  2321     0E5C  1803               	skipnc
  2322     0E5D  3E01               	addlw	1
  2323     0E5E  3E00               	addlw	0
  2324     0E5F  00F5               	movwf	??_startTimer+1
  2325     0E60  0874               	movf	??_startTimer,w
  2326     0E61  0084               	movwf	4
  2327     0E62  1783               	bsf	3,7
  2328     0E63  1C75               	btfss	??_startTimer+1,0
  2329     0E64  1383               	bcf	3,7
  2330     0E65  3001               	movlw	1
  2331     0E66  0080               	movwf	0
  2332     0E67                     l333:
  2333     0E67  0008               	return
  2334     0E68                     __end_of_startTimer:
  2335                           
  2336                           	psect	text8
  2337     048B                     __ptext8:	
  2338 ;; *************** function _runTimer *****************
  2339 ;; Defined at:
  2340 ;;		line 5 in file "virtualTimer.c"
  2341 ;; Parameters:    Size  Location     Type
  2342 ;;  timer           2   50[BANK0 ] PTR struct .
  2343 ;;		 -> timer_IRRIG_Timeout(6), timer_WTANK_Timeout(6), timer_ADCReadAll(6), 
  2344 ;; Auto vars:     Size  Location     Type
  2345 ;;  elapsedTime     2   56[BANK0 ] unsigned int 
  2346 ;; Return value:  Size  Location     Type
  2347 ;;                  1    wreg      void 
  2348 ;; Registers used:
  2349 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2350 ;; Tracked objects:
  2351 ;;		On entry : 0/0
  2352 ;;		On exit  : 0/0
  2353 ;;		Unchanged: 0/0
  2354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2355 ;;      Params:         0       2       0       0       0
  2356 ;;      Locals:         0       2       0       0       0
  2357 ;;      Temps:          0       4       0       0       0
  2358 ;;      Totals:         0       8       0       0       0
  2359 ;;Total ram usage:        8 bytes
  2360 ;; Hardware stack levels used: 1
  2361 ;; Hardware stack levels required when called: 5
  2362 ;; This function calls:
  2363 ;;		_ADC_readAll
  2364 ;;		_interrupt_IRRIG_timeout
  2365 ;;		_interrupt_WTANK_timeout
  2366 ;; This function is called by:
  2367 ;;		_main
  2368 ;; This function uses a non-reentrant model
  2369 ;;
  2370                           
  2371     048B                     _runTimer:	
  2372                           ;psect for function _runTimer
  2373                           
  2374     048B                     l2807:	
  2375                           ;incstack = 0
  2376                           ; Regs used in _runTimer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2377                           
  2378                           
  2379                           ;virtualTimer.c: 5: void runTimer(virtualTimer *timer);virtualTimer.c: 6: {;virtualTimer
      +                          .c: 7:   if(timer->active == 0)
  2380     048B  1283               	bcf	3,5	;RP0=0, select bank0
  2381     048C  1303               	bcf	3,6	;RP1=0, select bank0
  2382     048D  0852               	movf	runTimer@timer,w
  2383     048E  3E04               	addlw	4
  2384     048F  00D4               	movwf	??_runTimer
  2385     0490  0853               	movf	runTimer@timer+1,w
  2386     0491  1803               	skipnc
  2387     0492  3E01               	addlw	1
  2388     0493  3E00               	addlw	0
  2389     0494  00D5               	movwf	??_runTimer+1
  2390     0495  0854               	movf	??_runTimer,w
  2391     0496  0084               	movwf	4
  2392     0497  1783               	bsf	3,7
  2393     0498  1C55               	btfss	??_runTimer+1,0
  2394     0499  1383               	bcf	3,7
  2395     049A  0800               	movf	0,w
  2396     049B  1D03               	btfss	3,2
  2397     049C  2C9E               	goto	u2731
  2398     049D  2C9F               	goto	u2730
  2399     049E                     u2731:
  2400     049E  2CA0               	goto	l2811
  2401     049F                     u2730:
  2402     049F  2D05               	goto	l327
  2403     04A0                     l2811:
  2404                           
  2405                           ;virtualTimer.c: 10:   unsigned int elapsedTime = timerCounter - timer->startTime;
  2406     04A0  0852               	movf	runTimer@timer,w
  2407     04A1  3E02               	addlw	2
  2408     04A2  00D4               	movwf	??_runTimer
  2409     04A3  0853               	movf	runTimer@timer+1,w
  2410     04A4  1803               	skipnc
  2411     04A5  3E01               	addlw	1
  2412     04A6  3E00               	addlw	0
  2413     04A7  00D5               	movwf	??_runTimer+1
  2414     04A8  0854               	movf	??_runTimer,w
  2415     04A9  0084               	movwf	4
  2416     04AA  1783               	bsf	3,7
  2417     04AB  1C55               	btfss	??_runTimer+1,0
  2418     04AC  1383               	bcf	3,7
  2419     04AD  0800               	movf	0,w
  2420     04AE  00D6               	movwf	??_runTimer+2
  2421     04AF  0A84               	incf	4,f
  2422     04B0  0800               	movf	0,w
  2423     04B1  00D7               	movwf	??_runTimer+3
  2424     04B2  0856               	movf	??_runTimer+2,w
  2425     04B3  025C               	subwf	_timerCounter,w	;volatile
  2426     04B4  00D8               	movwf	runTimer@elapsedTime
  2427     04B5  0857               	movf	??_runTimer+3,w
  2428     04B6  1C03               	skipc
  2429     04B7  0A57               	incf	??_runTimer+3,w
  2430     04B8  025D               	subwf	_timerCounter+1,w	;volatile
  2431     04B9  00D9               	movwf	runTimer@elapsedTime+1
  2432     04BA                     l2813:
  2433                           
  2434                           ;virtualTimer.c: 14:   if(elapsedTime >= timer->targetTime)
  2435     04BA  0852               	movf	runTimer@timer,w
  2436     04BB  0084               	movwf	4
  2437     04BC  1783               	bsf	3,7
  2438     04BD  1C53               	btfss	runTimer@timer+1,0
  2439     04BE  1383               	bcf	3,7
  2440     04BF  0800               	movf	0,w
  2441     04C0  00D4               	movwf	??_runTimer
  2442     04C1  0A84               	incf	4,f
  2443     04C2  0800               	movf	0,w
  2444     04C3  00D5               	movwf	??_runTimer+1
  2445     04C4  0855               	movf	??_runTimer+1,w
  2446     04C5  0259               	subwf	runTimer@elapsedTime+1,w
  2447     04C6  1D03               	skipz
  2448     04C7  2CCA               	goto	u2745
  2449     04C8  0854               	movf	??_runTimer,w
  2450     04C9  0258               	subwf	runTimer@elapsedTime,w
  2451     04CA                     u2745:
  2452     04CA  1C03               	skipc
  2453     04CB  2CCD               	goto	u2741
  2454     04CC  2CCE               	goto	u2740
  2455     04CD                     u2741:
  2456     04CD  2D05               	goto	l327
  2457     04CE                     u2740:
  2458     04CE                     l2815:
  2459                           
  2460                           ;virtualTimer.c: 15:   {;virtualTimer.c: 16:     timer->startTime = timerCounter;
  2461     04CE  0852               	movf	runTimer@timer,w
  2462     04CF  3E02               	addlw	2
  2463     04D0  00D4               	movwf	??_runTimer
  2464     04D1  0853               	movf	runTimer@timer+1,w
  2465     04D2  1803               	skipnc
  2466     04D3  3E01               	addlw	1
  2467     04D4  3E00               	addlw	0
  2468     04D5  00D5               	movwf	??_runTimer+1
  2469     04D6  0854               	movf	??_runTimer,w
  2470     04D7  0084               	movwf	4
  2471     04D8  1783               	bsf	3,7
  2472     04D9  1C55               	btfss	??_runTimer+1,0
  2473     04DA  1383               	bcf	3,7
  2474     04DB  085C               	movf	_timerCounter,w	;volatile
  2475     04DC  0080               	movwf	0
  2476     04DD  0A84               	incf	4,f
  2477     04DE  085D               	movf	_timerCounter+1,w	;volatile
  2478     04DF  0080               	movwf	0
  2479                           
  2480                           ;virtualTimer.c: 18:     if(timer->callback != 0)
  2481     04E0  0852               	movf	runTimer@timer,w
  2482     04E1  3E05               	addlw	5
  2483     04E2  00D4               	movwf	??_runTimer
  2484     04E3  0853               	movf	runTimer@timer+1,w
  2485     04E4  1803               	skipnc
  2486     04E5  3E01               	addlw	1
  2487     04E6  3E00               	addlw	0
  2488     04E7  00D5               	movwf	??_runTimer+1
  2489     04E8  0854               	movf	??_runTimer,w
  2490     04E9  0084               	movwf	4
  2491     04EA  1783               	bsf	3,7
  2492     04EB  1C55               	btfss	??_runTimer+1,0
  2493     04EC  1383               	bcf	3,7
  2494     04ED  0800               	movf	0,w
  2495     04EE  1903               	btfsc	3,2
  2496     04EF  2CF1               	goto	u2751
  2497     04F0  2CF2               	goto	u2750
  2498     04F1                     u2751:
  2499     04F1  2D05               	goto	l327
  2500     04F2                     u2750:
  2501     04F2                     l2817:
  2502                           
  2503                           ;virtualTimer.c: 19:       timer->callback();
  2504     04F2  0852               	movf	runTimer@timer,w
  2505     04F3  3E05               	addlw	5
  2506     04F4  00D4               	movwf	??_runTimer
  2507     04F5  0853               	movf	runTimer@timer+1,w
  2508     04F6  1803               	skipnc
  2509     04F7  3E01               	addlw	1
  2510     04F8  3E00               	addlw	0
  2511     04F9  00D5               	movwf	??_runTimer+1
  2512     04FA  0854               	movf	??_runTimer,w
  2513     04FB  0084               	movwf	4
  2514     04FC  1783               	bsf	3,7
  2515     04FD  1C55               	btfss	??_runTimer+1,0
  2516     04FE  1383               	bcf	3,7
  2517     04FF  0800               	movf	0,w
  2518     0500  120A  118A  2045  120A  118A  	fcall	fptable
  2519     0505                     l327:
  2520     0505  0008               	return
  2521     0506                     __end_of_runTimer:
  2522                           
  2523                           	psect	text9
  2524     0B4B                     __ptext9:	
  2525 ;; *************** function _interrupt_IRRIG_timeout *****************
  2526 ;; Defined at:
  2527 ;;		line 58 in file "irrigation.c"
  2528 ;; Parameters:    Size  Location     Type
  2529 ;;		None
  2530 ;; Auto vars:     Size  Location     Type
  2531 ;;		None
  2532 ;; Return value:  Size  Location     Type
  2533 ;;                  1    wreg      void 
  2534 ;; Registers used:
  2535 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2536 ;; Tracked objects:
  2537 ;;		On entry : 0/0
  2538 ;;		On exit  : 0/0
  2539 ;;		Unchanged: 0/0
  2540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2541 ;;      Params:         0       0       0       0       0
  2542 ;;      Locals:         0       0       0       0       0
  2543 ;;      Temps:          0       0       0       0       0
  2544 ;;      Totals:         0       0       0       0       0
  2545 ;;Total ram usage:        0 bytes
  2546 ;; Hardware stack levels used: 1
  2547 ;; Hardware stack levels required when called: 3
  2548 ;; This function calls:
  2549 ;;		_stopIrrigation
  2550 ;; This function is called by:
  2551 ;;		_runTimer
  2552 ;; This function uses a non-reentrant model
  2553 ;;
  2554                           
  2555     0B4B                     _interrupt_IRRIG_timeout:	
  2556                           ;psect for function _interrupt_IRRIG_timeout
  2557                           
  2558     0B4B                     l2251:	
  2559                           ;incstack = 0
  2560                           ; Regs used in _interrupt_IRRIG_timeout: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2561                           
  2562                           
  2563                           ;irrigation.c: 60:   stopIrrigation();
  2564     0B4B  120A  158A  2422  120A  158A  	fcall	_stopIrrigation
  2565     0B50                     l2253:
  2566                           
  2567                           ;irrigation.c: 61:   irrigationState = IRRIG_ERROR;
  2568     0B50  3002               	movlw	2
  2569     0B51  1283               	bcf	3,5	;RP0=0, select bank0
  2570     0B52  1303               	bcf	3,6	;RP1=0, select bank0
  2571     0B53  00ED               	movwf	_irrigationState
  2572     0B54                     l388:
  2573     0B54  0008               	return
  2574     0B55                     __end_of_interrupt_IRRIG_timeout:
  2575                           
  2576                           	psect	text10
  2577     0BB2                     __ptext10:	
  2578 ;; *************** function _ADC_readAll *****************
  2579 ;; Defined at:
  2580 ;;		line 196 in file "./config.h"
  2581 ;; Parameters:    Size  Location     Type
  2582 ;;		None
  2583 ;; Auto vars:     Size  Location     Type
  2584 ;;		None
  2585 ;; Return value:  Size  Location     Type
  2586 ;;                  1    wreg      void 
  2587 ;; Registers used:
  2588 ;;		wreg, status,2, status,0, pclath, cstack
  2589 ;; Tracked objects:
  2590 ;;		On entry : 0/0
  2591 ;;		On exit  : 0/0
  2592 ;;		Unchanged: 0/0
  2593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2594 ;;      Params:         0       0       0       0       0
  2595 ;;      Locals:         0       0       0       0       0
  2596 ;;      Temps:          0       0       0       0       0
  2597 ;;      Totals:         0       0       0       0       0
  2598 ;;Total ram usage:        0 bytes
  2599 ;; Hardware stack levels used: 1
  2600 ;; Hardware stack levels required when called: 4
  2601 ;; This function calls:
  2602 ;;		_readLight
  2603 ;;		_readSoilMoisture
  2604 ;;		_readTemperature
  2605 ;; This function is called by:
  2606 ;;		_main
  2607 ;;		_runTimer
  2608 ;; This function uses a non-reentrant model
  2609 ;;
  2610                           
  2611     0BB2                     _ADC_readAll:	
  2612                           ;psect for function _ADC_readAll
  2613                           
  2614     0BB2                     l2665:	
  2615                           ;incstack = 0
  2616                           ; Regs used in _ADC_readAll: [wreg+status,2+status,0+pclath+cstack]
  2617                           
  2618                           
  2619                           ;./config.h: 198:   readTemperature();
  2620     0BB2  120A  158A  2573  120A  158A  	fcall	_readTemperature
  2621                           
  2622                           ;./config.h: 199:   readSoilMoisture();
  2623     0BB7  120A  158A  2549  120A  158A  	fcall	_readSoilMoisture
  2624                           
  2625                           ;./config.h: 200:   readLight();
  2626     0BBC  120A  158A  237A  120A  158A  	fcall	_readLight
  2627     0BC1                     l134:
  2628     0BC1  0008               	return
  2629     0BC2                     __end_of_ADC_readAll:
  2630                           
  2631                           	psect	text11
  2632     0B32                     __ptext11:	
  2633 ;; *************** function _interrupt_WTANK_timeout *****************
  2634 ;; Defined at:
  2635 ;;		line 100 in file "waterTankManager.c"
  2636 ;; Parameters:    Size  Location     Type
  2637 ;;		None
  2638 ;; Auto vars:     Size  Location     Type
  2639 ;;		None
  2640 ;; Return value:  Size  Location     Type
  2641 ;;                  1    wreg      void 
  2642 ;; Registers used:
  2643 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2644 ;; Tracked objects:
  2645 ;;		On entry : 0/0
  2646 ;;		On exit  : 0/0
  2647 ;;		Unchanged: 0/0
  2648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2649 ;;      Params:         0       0       0       0       0
  2650 ;;      Locals:         0       0       0       0       0
  2651 ;;      Temps:          0       0       0       0       0
  2652 ;;      Totals:         0       0       0       0       0
  2653 ;;Total ram usage:        0 bytes
  2654 ;; Hardware stack levels used: 1
  2655 ;; Hardware stack levels required when called: 3
  2656 ;; This function calls:
  2657 ;;		_stopFilling
  2658 ;; This function is called by:
  2659 ;;		_runTimer
  2660 ;; This function uses a non-reentrant model
  2661 ;;
  2662                           
  2663     0B32                     _interrupt_WTANK_timeout:	
  2664                           ;psect for function _interrupt_WTANK_timeout
  2665                           
  2666     0B32                     l2237:	
  2667                           ;incstack = 0
  2668                           ; Regs used in _interrupt_WTANK_timeout: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2669                           
  2670                           
  2671                           ;waterTankManager.c: 102:   stopFilling();
  2672     0B32  120A  158A  23D5  120A  158A  	fcall	_stopFilling
  2673     0B37                     l2239:
  2674                           
  2675                           ;waterTankManager.c: 103:   tankState = WTANK_ERROR;
  2676     0B37  3003               	movlw	3
  2677     0B38  00FB               	movwf	_tankState
  2678     0B39                     l319:
  2679     0B39  0008               	return
  2680     0B3A                     __end_of_interrupt_WTANK_timeout:
  2681                           
  2682                           	psect	text12
  2683     0BD5                     __ptext12:	
  2684 ;; *************** function _stopFilling *****************
  2685 ;; Defined at:
  2686 ;;		line 83 in file "waterTankManager.c"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;		None
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;		None
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  1    wreg      void 
  2693 ;; Registers used:
  2694 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2700 ;;      Params:         0       0       0       0       0
  2701 ;;      Locals:         0       0       0       0       0
  2702 ;;      Temps:          0       0       0       0       0
  2703 ;;      Totals:         0       0       0       0       0
  2704 ;;Total ram usage:        0 bytes
  2705 ;; Hardware stack levels used: 1
  2706 ;; Hardware stack levels required when called: 2
  2707 ;; This function calls:
  2708 ;;		_stopTimer
  2709 ;; This function is called by:
  2710 ;;		_run_waterTankLogic
  2711 ;;		_interrupt_WTANK_timeout
  2712 ;; This function uses a non-reentrant model
  2713 ;;
  2714                           
  2715     0BD5                     _stopFilling:	
  2716                           ;psect for function _stopFilling
  2717                           
  2718     0BD5                     l2061:	
  2719                           ;incstack = 0
  2720                           ; Regs used in _stopFilling: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2721                           
  2722                           
  2723                           ;waterTankManager.c: 85:   if(!isFilling)
  2724     0BD5  18FA               	btfsc	_isFilling/(0+8),_isFilling& (0+7)
  2725     0BD6  2BD8               	goto	u1781
  2726     0BD7  2BD9               	goto	u1780
  2727     0BD8                     u1781:
  2728     0BD8  2BDA               	goto	l315
  2729     0BD9                     u1780:
  2730     0BD9  2BE7               	goto	l316
  2731     0BDA                     l315:
  2732                           
  2733                           ;waterTankManager.c: 88:   isFilling = 0;
  2734     0BDA  10FA               	bcf	_isFilling/(0+8),_isFilling& (0+7)
  2735                           
  2736                           ;waterTankManager.c: 89:   PORTCbits.RC0 = 1;
  2737     0BDB  1283               	bcf	3,5	;RP0=0, select bank0
  2738     0BDC  1303               	bcf	3,6	;RP1=0, select bank0
  2739     0BDD  1407               	bsf	7,0	;volatile
  2740     0BDE                     l2065:
  2741                           
  2742                           ;waterTankManager.c: 90:   stopTimer(&timer_WTANK_Timeout);
  2743     0BDE  30E0               	movlw	low _timer_WTANK_Timeout
  2744     0BDF  00F2               	movwf	stopTimer@timer
  2745     0BE0  3000               	movlw	high _timer_WTANK_Timeout
  2746     0BE1  00F3               	movwf	stopTimer@timer+1
  2747     0BE2  120A  158A  2499  120A  158A  	fcall	_stopTimer
  2748     0BE7                     l316:
  2749     0BE7  0008               	return
  2750     0BE8                     __end_of_stopFilling:
  2751                           
  2752                           	psect	text13
  2753     0C22                     __ptext13:	
  2754 ;; *************** function _stopIrrigation *****************
  2755 ;; Defined at:
  2756 ;;		line 47 in file "irrigation.c"
  2757 ;; Parameters:    Size  Location     Type
  2758 ;;		None
  2759 ;; Auto vars:     Size  Location     Type
  2760 ;;		None
  2761 ;; Return value:  Size  Location     Type
  2762 ;;                  1    wreg      void 
  2763 ;; Registers used:
  2764 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2765 ;; Tracked objects:
  2766 ;;		On entry : 0/0
  2767 ;;		On exit  : 0/0
  2768 ;;		Unchanged: 0/0
  2769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2770 ;;      Params:         0       0       0       0       0
  2771 ;;      Locals:         0       0       0       0       0
  2772 ;;      Temps:          0       0       0       0       0
  2773 ;;      Totals:         0       0       0       0       0
  2774 ;;Total ram usage:        0 bytes
  2775 ;; Hardware stack levels used: 1
  2776 ;; Hardware stack levels required when called: 2
  2777 ;; This function calls:
  2778 ;;		_stopTimer
  2779 ;; This function is called by:
  2780 ;;		_run_IrrigationLogic
  2781 ;;		_interrupt_IRRIG_timeout
  2782 ;; This function uses a non-reentrant model
  2783 ;;
  2784                           
  2785     0C22                     _stopIrrigation:	
  2786                           ;psect for function _stopIrrigation
  2787                           
  2788     0C22                     l2067:	
  2789                           ;incstack = 0
  2790                           ; Regs used in _stopIrrigation: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2791                           
  2792                           
  2793                           ;irrigation.c: 49:   if(!isIrrigating)
  2794     0C22  187A               	btfsc	_isIrrigating/(0+8),_isIrrigating& (0+7)
  2795     0C23  2C25               	goto	u1791
  2796     0C24  2C26               	goto	u1790
  2797     0C25                     u1791:
  2798     0C25  2C27               	goto	l384
  2799     0C26                     u1790:
  2800     0C26  2C36               	goto	l385
  2801     0C27                     l384:
  2802                           
  2803                           ;irrigation.c: 52:   PORTCbits.RC1 = 1;
  2804     0C27  1283               	bcf	3,5	;RP0=0, select bank0
  2805     0C28  1303               	bcf	3,6	;RP1=0, select bank0
  2806     0C29  1487               	bsf	7,1	;volatile
  2807                           
  2808                           ;irrigation.c: 53:   isIrrigating = 0;
  2809     0C2A  107A               	bcf	_isIrrigating/(0+8),_isIrrigating& (0+7)
  2810                           
  2811                           ;irrigation.c: 54:   irrigationState = IRRIG_OFF;
  2812     0C2B  3001               	movlw	1
  2813     0C2C  00ED               	movwf	_irrigationState
  2814     0C2D                     l2071:
  2815                           
  2816                           ;irrigation.c: 55:   stopTimer(&timer_IRRIG_Timeout);
  2817     0C2D  30DA               	movlw	low _timer_IRRIG_Timeout
  2818     0C2E  00F2               	movwf	stopTimer@timer
  2819     0C2F  3000               	movlw	high _timer_IRRIG_Timeout
  2820     0C30  00F3               	movwf	stopTimer@timer+1
  2821     0C31  120A  158A  2499  120A  158A  	fcall	_stopTimer
  2822     0C36                     l385:
  2823     0C36  0008               	return
  2824     0C37                     __end_of_stopIrrigation:
  2825                           
  2826                           	psect	text14
  2827     0C99                     __ptext14:	
  2828 ;; *************** function _stopTimer *****************
  2829 ;; Defined at:
  2830 ;;		line 35 in file "virtualTimer.c"
  2831 ;; Parameters:    Size  Location     Type
  2832 ;;  timer           2    2[COMMON] PTR struct .
  2833 ;;		 -> timer_IRRIG_Timeout(6), timer_WTANK_Timeout(6), 
  2834 ;; Auto vars:     Size  Location     Type
  2835 ;;		None
  2836 ;; Return value:  Size  Location     Type
  2837 ;;                  1    wreg      void 
  2838 ;; Registers used:
  2839 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2840 ;; Tracked objects:
  2841 ;;		On entry : 0/0
  2842 ;;		On exit  : 0/0
  2843 ;;		Unchanged: 0/0
  2844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2845 ;;      Params:         2       0       0       0       0
  2846 ;;      Locals:         0       0       0       0       0
  2847 ;;      Temps:          2       0       0       0       0
  2848 ;;      Totals:         4       0       0       0       0
  2849 ;;Total ram usage:        4 bytes
  2850 ;; Hardware stack levels used: 1
  2851 ;; Hardware stack levels required when called: 1
  2852 ;; This function calls:
  2853 ;;		Nothing
  2854 ;; This function is called by:
  2855 ;;		_stopFilling
  2856 ;;		_stopIrrigation
  2857 ;; This function uses a non-reentrant model
  2858 ;;
  2859                           
  2860     0C99                     _stopTimer:	
  2861                           ;psect for function _stopTimer
  2862                           
  2863     0C99                     l1993:	
  2864                           ;incstack = 0
  2865                           ; Regs used in _stopTimer: [wreg-fsr0h+status,2+status,0]
  2866                           
  2867                           
  2868                           ;virtualTimer.c: 35: void stopTimer(virtualTimer *timer);virtualTimer.c: 36: {;virtualTi
      +                          mer.c: 37:   if(timer->active == 0)
  2869     0C99  0872               	movf	stopTimer@timer,w
  2870     0C9A  3E04               	addlw	4
  2871     0C9B  00F4               	movwf	??_stopTimer
  2872     0C9C  0873               	movf	stopTimer@timer+1,w
  2873     0C9D  1803               	skipnc
  2874     0C9E  3E01               	addlw	1
  2875     0C9F  3E00               	addlw	0
  2876     0CA0  00F5               	movwf	??_stopTimer+1
  2877     0CA1  0874               	movf	??_stopTimer,w
  2878     0CA2  0084               	movwf	4
  2879     0CA3  1783               	bsf	3,7
  2880     0CA4  1C75               	btfss	??_stopTimer+1,0
  2881     0CA5  1383               	bcf	3,7
  2882     0CA6  0800               	movf	0,w
  2883     0CA7  1D03               	btfss	3,2
  2884     0CA8  2CAA               	goto	u1731
  2885     0CA9  2CAB               	goto	u1730
  2886     0CAA                     u1731:
  2887     0CAA  2CAC               	goto	l1997
  2888     0CAB                     u1730:
  2889     0CAB  2CBA               	goto	l337
  2890     0CAC                     l1997:
  2891                           
  2892                           ;virtualTimer.c: 40:   timer->active = 0;
  2893     0CAC  0872               	movf	stopTimer@timer,w
  2894     0CAD  3E04               	addlw	4
  2895     0CAE  00F4               	movwf	??_stopTimer
  2896     0CAF  0873               	movf	stopTimer@timer+1,w
  2897     0CB0  1803               	skipnc
  2898     0CB1  3E01               	addlw	1
  2899     0CB2  3E00               	addlw	0
  2900     0CB3  00F5               	movwf	??_stopTimer+1
  2901     0CB4  0874               	movf	??_stopTimer,w
  2902     0CB5  0084               	movwf	4
  2903     0CB6  1783               	bsf	3,7
  2904     0CB7  1C75               	btfss	??_stopTimer+1,0
  2905     0CB8  1383               	bcf	3,7
  2906     0CB9  0180               	clrf	0
  2907     0CBA                     l337:
  2908     0CBA  0008               	return
  2909     0CBB                     __end_of_stopTimer:
  2910                           
  2911                           	psect	text15
  2912     0D73                     __ptext15:	
  2913 ;; *************** function _readTemperature *****************
  2914 ;; Defined at:
  2915 ;;		line 185 in file "./config.h"
  2916 ;; Parameters:    Size  Location     Type
  2917 ;;		None
  2918 ;; Auto vars:     Size  Location     Type
  2919 ;;		None
  2920 ;; Return value:  Size  Location     Type
  2921 ;;                  1    wreg      void 
  2922 ;; Registers used:
  2923 ;;		wreg, status,2, status,0, pclath, cstack
  2924 ;; Tracked objects:
  2925 ;;		On entry : 0/0
  2926 ;;		On exit  : 0/0
  2927 ;;		Unchanged: 0/0
  2928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2929 ;;      Params:         0       0       0       0       0
  2930 ;;      Locals:         0       0       0       0       0
  2931 ;;      Temps:          0       0       0       0       0
  2932 ;;      Totals:         0       0       0       0       0
  2933 ;;Total ram usage:        0 bytes
  2934 ;; Hardware stack levels used: 1
  2935 ;; Hardware stack levels required when called: 3
  2936 ;; This function calls:
  2937 ;;		_ADC_Read
  2938 ;;		_map
  2939 ;; This function is called by:
  2940 ;;		_ADC_readAll
  2941 ;; This function uses a non-reentrant model
  2942 ;;
  2943                           
  2944     0D73                     _readTemperature:	
  2945                           ;psect for function _readTemperature
  2946                           
  2947     0D73                     l2635:	
  2948                           ;incstack = 0
  2949                           ; Regs used in _readTemperature: [wreg+status,2+status,0+pclath+cstack]
  2950                           
  2951                           
  2952                           ;./config.h: 187:   temperature = ADC_Read(1);
  2953     0D73  3001               	movlw	1
  2954     0D74  120A  158A  2525  120A  158A  	fcall	_ADC_Read
  2955     0D79  0873               	movf	?_ADC_Read+1,w
  2956     0D7A  1283               	bcf	3,5	;RP0=0, select bank0
  2957     0D7B  1303               	bcf	3,6	;RP1=0, select bank0
  2958     0D7C  00DF               	movwf	_temperature+1
  2959     0D7D  0872               	movf	?_ADC_Read,w
  2960     0D7E  00DE               	movwf	_temperature
  2961                           
  2962                           ;./config.h: 188:   temperature = (int)map(temperature,0,1023,0,500);
  2963     0D7F  085F               	movf	_temperature+1,w
  2964     0D80  00B5               	movwf	map@x+1
  2965     0D81  085E               	movf	_temperature,w
  2966     0D82  00B4               	movwf	map@x
  2967     0D83  3000               	movlw	0
  2968     0D84  00B6               	movwf	map@in_min
  2969     0D85  00B7               	movwf	map@in_min+1
  2970     0D86  30FF               	movlw	255
  2971     0D87  00B8               	movwf	map@in_max
  2972     0D88  3003               	movlw	3
  2973     0D89  00B9               	movwf	map@in_max+1
  2974     0D8A  3000               	movlw	0
  2975     0D8B  00BA               	movwf	map@out_min
  2976     0D8C  00BB               	movwf	map@out_min+1
  2977     0D8D  30F4               	movlw	244
  2978     0D8E  00BC               	movwf	map@out_max
  2979     0D8F  3001               	movlw	1
  2980     0D90  00BD               	movwf	map@out_max+1
  2981     0D91  120A  118A  2054  120A  158A  	fcall	_map
  2982     0D96  1283               	bcf	3,5	;RP0=0, select bank0
  2983     0D97  1303               	bcf	3,6	;RP1=0, select bank0
  2984     0D98  0835               	movf	?_map+1,w
  2985     0D99  00DF               	movwf	_temperature+1
  2986     0D9A  0834               	movf	?_map,w
  2987     0D9B  00DE               	movwf	_temperature
  2988     0D9C                     l128:
  2989     0D9C  0008               	return
  2990     0D9D                     __end_of_readTemperature:
  2991                           
  2992                           	psect	text16
  2993     0D49                     __ptext16:	
  2994 ;; *************** function _readSoilMoisture *****************
  2995 ;; Defined at:
  2996 ;;		line 173 in file "./config.h"
  2997 ;; Parameters:    Size  Location     Type
  2998 ;;		None
  2999 ;; Auto vars:     Size  Location     Type
  3000 ;;		None
  3001 ;; Return value:  Size  Location     Type
  3002 ;;                  1    wreg      void 
  3003 ;; Registers used:
  3004 ;;		wreg, status,2, status,0, pclath, cstack
  3005 ;; Tracked objects:
  3006 ;;		On entry : 0/0
  3007 ;;		On exit  : 0/0
  3008 ;;		Unchanged: 0/0
  3009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3010 ;;      Params:         0       0       0       0       0
  3011 ;;      Locals:         0       0       0       0       0
  3012 ;;      Temps:          0       0       0       0       0
  3013 ;;      Totals:         0       0       0       0       0
  3014 ;;Total ram usage:        0 bytes
  3015 ;; Hardware stack levels used: 1
  3016 ;; Hardware stack levels required when called: 3
  3017 ;; This function calls:
  3018 ;;		_ADC_Read
  3019 ;;		_map
  3020 ;; This function is called by:
  3021 ;;		_ADC_readAll
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025     0D49                     _readSoilMoisture:	
  3026                           ;psect for function _readSoilMoisture
  3027                           
  3028     0D49                     l2633:	
  3029                           ;incstack = 0
  3030                           ; Regs used in _readSoilMoisture: [wreg+status,2+status,0+pclath+cstack]
  3031                           
  3032                           
  3033                           ;./config.h: 175:   soilMoisture = ADC_Read(0);
  3034     0D49  3000               	movlw	0
  3035     0D4A  120A  158A  2525  120A  158A  	fcall	_ADC_Read
  3036     0D4F  0873               	movf	?_ADC_Read+1,w
  3037     0D50  1283               	bcf	3,5	;RP0=0, select bank0
  3038     0D51  1303               	bcf	3,6	;RP1=0, select bank0
  3039     0D52  00E3               	movwf	_soilMoisture+1
  3040     0D53  0872               	movf	?_ADC_Read,w
  3041     0D54  00E2               	movwf	_soilMoisture
  3042                           
  3043                           ;./config.h: 176:   soilMoisture = (int)map(soilMoisture,0,1023,0,100);
  3044     0D55  0863               	movf	_soilMoisture+1,w
  3045     0D56  00B5               	movwf	map@x+1
  3046     0D57  0862               	movf	_soilMoisture,w
  3047     0D58  00B4               	movwf	map@x
  3048     0D59  3000               	movlw	0
  3049     0D5A  00B6               	movwf	map@in_min
  3050     0D5B  00B7               	movwf	map@in_min+1
  3051     0D5C  30FF               	movlw	255
  3052     0D5D  00B8               	movwf	map@in_max
  3053     0D5E  3003               	movlw	3
  3054     0D5F  00B9               	movwf	map@in_max+1
  3055     0D60  3000               	movlw	0
  3056     0D61  00BA               	movwf	map@out_min
  3057     0D62  00BB               	movwf	map@out_min+1
  3058     0D63  3064               	movlw	100
  3059     0D64  00BC               	movwf	map@out_max
  3060     0D65  3000               	movlw	0
  3061     0D66  00BD               	movwf	map@out_max+1
  3062     0D67  120A  118A  2054  120A  158A  	fcall	_map
  3063     0D6C  1283               	bcf	3,5	;RP0=0, select bank0
  3064     0D6D  1303               	bcf	3,6	;RP1=0, select bank0
  3065     0D6E  0835               	movf	?_map+1,w
  3066     0D6F  00E3               	movwf	_soilMoisture+1
  3067     0D70  0834               	movf	?_map,w
  3068     0D71  00E2               	movwf	_soilMoisture
  3069     0D72                     l125:
  3070     0D72  0008               	return
  3071     0D73                     __end_of_readSoilMoisture:
  3072                           
  3073                           	psect	text17
  3074     0054                     __ptext17:	
  3075 ;; *************** function _map *****************
  3076 ;; Defined at:
  3077 ;;		line 160 in file "./config.h"
  3078 ;; Parameters:    Size  Location     Type
  3079 ;;  x               2   20[BANK0 ] int 
  3080 ;;  in_min          2   22[BANK0 ] int 
  3081 ;;  in_max          2   24[BANK0 ] int 
  3082 ;;  out_min         2   26[BANK0 ] int 
  3083 ;;  out_max         2   28[BANK0 ] int 
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;  run             4   46[BANK0 ] long 
  3086 ;;  delta           4   42[BANK0 ] long 
  3087 ;;  rise            4   38[BANK0 ] long 
  3088 ;; Return value:  Size  Location     Type
  3089 ;;                  4   20[BANK0 ] long 
  3090 ;; Registers used:
  3091 ;;		wreg, status,2, status,0, pclath, cstack
  3092 ;; Tracked objects:
  3093 ;;		On entry : 0/0
  3094 ;;		On exit  : 0/0
  3095 ;;		Unchanged: 0/0
  3096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3097 ;;      Params:         0      10       0       0       0
  3098 ;;      Locals:         0      12       0       0       0
  3099 ;;      Temps:          0       8       0       0       0
  3100 ;;      Totals:         0      30       0       0       0
  3101 ;;Total ram usage:       30 bytes
  3102 ;; Hardware stack levels used: 1
  3103 ;; Hardware stack levels required when called: 2
  3104 ;; This function calls:
  3105 ;;		___aldiv
  3106 ;;		___lmul
  3107 ;; This function is called by:
  3108 ;;		_readSoilMoisture
  3109 ;;		_readTemperature
  3110 ;; This function uses a non-reentrant model
  3111 ;;
  3112                           
  3113     0054                     _map:	
  3114                           ;psect for function _map
  3115                           
  3116     0054                     l2579:	
  3117                           ;incstack = 0
  3118                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  3119                           
  3120                           
  3121                           ;./config.h: 162:     long run = (long)in_max - (long)in_min;
  3122     0054  1283               	bcf	3,5	;RP0=0, select bank0
  3123     0055  1303               	bcf	3,6	;RP1=0, select bank0
  3124     0056  0836               	movf	map@in_min,w
  3125     0057  00BE               	movwf	??_map
  3126     0058  0837               	movf	map@in_min+1,w
  3127     0059  00BF               	movwf	??_map+1
  3128     005A  3000               	movlw	0
  3129     005B  1BBF               	btfsc	??_map+1,7
  3130     005C  30FF               	movlw	255
  3131     005D  00C0               	movwf	??_map+2
  3132     005E  00C1               	movwf	??_map+3
  3133     005F  0838               	movf	map@in_max,w
  3134     0060  00C2               	movwf	??_map+4
  3135     0061  0839               	movf	map@in_max+1,w
  3136     0062  00C3               	movwf	??_map+5
  3137     0063  3000               	movlw	0
  3138     0064  1BC3               	btfsc	??_map+5,7
  3139     0065  30FF               	movlw	255
  3140     0066  00C4               	movwf	??_map+6
  3141     0067  00C5               	movwf	??_map+7
  3142     0068  083E               	movf	??_map,w
  3143     0069  02C2               	subwf	??_map+4,f
  3144     006A  083F               	movf	??_map+1,w
  3145     006B  1C03               	skipc
  3146     006C  0F3F               	incfsz	??_map+1,w
  3147     006D  286F               	goto	u2491
  3148     006E  2870               	goto	u2492
  3149     006F                     u2491:
  3150     006F  02C3               	subwf	??_map+5,f
  3151     0070                     u2492:
  3152     0070  0840               	movf	??_map+2,w
  3153     0071  1C03               	skipc
  3154     0072  0F40               	incfsz	??_map+2,w
  3155     0073  2875               	goto	u2493
  3156     0074  2876               	goto	u2494
  3157     0075                     u2493:
  3158     0075  02C4               	subwf	??_map+6,f
  3159     0076                     u2494:
  3160     0076  0841               	movf	??_map+3,w
  3161     0077  1C03               	skipc
  3162     0078  0F41               	incfsz	??_map+3,w
  3163     0079  287B               	goto	u2495
  3164     007A  287C               	goto	u2496
  3165     007B                     u2495:
  3166     007B  02C5               	subwf	??_map+7,f
  3167     007C                     u2496:
  3168     007C  0845               	movf	??_map+7,w
  3169     007D  00D1               	movwf	map@run+3
  3170     007E  0844               	movf	??_map+6,w
  3171     007F  00D0               	movwf	map@run+2
  3172     0080  0843               	movf	??_map+5,w
  3173     0081  00CF               	movwf	map@run+1
  3174     0082  0842               	movf	??_map+4,w
  3175     0083  00CE               	movwf	map@run
  3176                           
  3177                           ;./config.h: 164:     if (run == 0)
  3178     0084  0851               	movf	map@run+3,w
  3179     0085  0450               	iorwf	map@run+2,w
  3180     0086  044F               	iorwf	map@run+1,w
  3181     0087  044E               	iorwf	map@run,w
  3182     0088  1D03               	skipz
  3183     0089  288B               	goto	u2501
  3184     008A  288C               	goto	u2500
  3185     008B                     u2501:
  3186     008B  2896               	goto	l2585
  3187     008C                     u2500:
  3188     008C                     l2581:
  3189                           
  3190                           ;./config.h: 165:         return out_min;
  3191     008C  083A               	movf	map@out_min,w
  3192     008D  00B4               	movwf	?_map
  3193     008E  083B               	movf	map@out_min+1,w
  3194     008F  00B5               	movwf	?_map+1
  3195     0090  3000               	movlw	0
  3196     0091  1BB5               	btfsc	?_map+1,7
  3197     0092  30FF               	movlw	255
  3198     0093  00B6               	movwf	?_map+2
  3199     0094  00B7               	movwf	?_map+3
  3200     0095  2943               	goto	l122
  3201     0096                     l2585:
  3202                           
  3203                           ;./config.h: 167:     long rise = (long)out_max - (long)out_min;
  3204     0096  083A               	movf	map@out_min,w
  3205     0097  00BE               	movwf	??_map
  3206     0098  083B               	movf	map@out_min+1,w
  3207     0099  00BF               	movwf	??_map+1
  3208     009A  3000               	movlw	0
  3209     009B  1BBF               	btfsc	??_map+1,7
  3210     009C  30FF               	movlw	255
  3211     009D  00C0               	movwf	??_map+2
  3212     009E  00C1               	movwf	??_map+3
  3213     009F  083C               	movf	map@out_max,w
  3214     00A0  00C2               	movwf	??_map+4
  3215     00A1  083D               	movf	map@out_max+1,w
  3216     00A2  00C3               	movwf	??_map+5
  3217     00A3  3000               	movlw	0
  3218     00A4  1BC3               	btfsc	??_map+5,7
  3219     00A5  30FF               	movlw	255
  3220     00A6  00C4               	movwf	??_map+6
  3221     00A7  00C5               	movwf	??_map+7
  3222     00A8  083E               	movf	??_map,w
  3223     00A9  02C2               	subwf	??_map+4,f
  3224     00AA  083F               	movf	??_map+1,w
  3225     00AB  1C03               	skipc
  3226     00AC  0F3F               	incfsz	??_map+1,w
  3227     00AD  28AF               	goto	u2511
  3228     00AE  28B0               	goto	u2512
  3229     00AF                     u2511:
  3230     00AF  02C3               	subwf	??_map+5,f
  3231     00B0                     u2512:
  3232     00B0  0840               	movf	??_map+2,w
  3233     00B1  1C03               	skipc
  3234     00B2  0F40               	incfsz	??_map+2,w
  3235     00B3  28B5               	goto	u2513
  3236     00B4  28B6               	goto	u2514
  3237     00B5                     u2513:
  3238     00B5  02C4               	subwf	??_map+6,f
  3239     00B6                     u2514:
  3240     00B6  0841               	movf	??_map+3,w
  3241     00B7  1C03               	skipc
  3242     00B8  0F41               	incfsz	??_map+3,w
  3243     00B9  28BB               	goto	u2515
  3244     00BA  28BC               	goto	u2516
  3245     00BB                     u2515:
  3246     00BB  02C5               	subwf	??_map+7,f
  3247     00BC                     u2516:
  3248     00BC  0845               	movf	??_map+7,w
  3249     00BD  00C9               	movwf	map@rise+3
  3250     00BE  0844               	movf	??_map+6,w
  3251     00BF  00C8               	movwf	map@rise+2
  3252     00C0  0843               	movf	??_map+5,w
  3253     00C1  00C7               	movwf	map@rise+1
  3254     00C2  0842               	movf	??_map+4,w
  3255     00C3  00C6               	movwf	map@rise
  3256                           
  3257                           ;./config.h: 168:     long delta = (long)x - (long)in_min;
  3258     00C4  0836               	movf	map@in_min,w
  3259     00C5  00BE               	movwf	??_map
  3260     00C6  0837               	movf	map@in_min+1,w
  3261     00C7  00BF               	movwf	??_map+1
  3262     00C8  3000               	movlw	0
  3263     00C9  1BBF               	btfsc	??_map+1,7
  3264     00CA  30FF               	movlw	255
  3265     00CB  00C0               	movwf	??_map+2
  3266     00CC  00C1               	movwf	??_map+3
  3267     00CD  0834               	movf	map@x,w
  3268     00CE  00C2               	movwf	??_map+4
  3269     00CF  0835               	movf	map@x+1,w
  3270     00D0  00C3               	movwf	??_map+5
  3271     00D1  3000               	movlw	0
  3272     00D2  1BC3               	btfsc	??_map+5,7
  3273     00D3  30FF               	movlw	255
  3274     00D4  00C4               	movwf	??_map+6
  3275     00D5  00C5               	movwf	??_map+7
  3276     00D6  083E               	movf	??_map,w
  3277     00D7  02C2               	subwf	??_map+4,f
  3278     00D8  083F               	movf	??_map+1,w
  3279     00D9  1C03               	skipc
  3280     00DA  0F3F               	incfsz	??_map+1,w
  3281     00DB  28DD               	goto	u2521
  3282     00DC  28DE               	goto	u2522
  3283     00DD                     u2521:
  3284     00DD  02C3               	subwf	??_map+5,f
  3285     00DE                     u2522:
  3286     00DE  0840               	movf	??_map+2,w
  3287     00DF  1C03               	skipc
  3288     00E0  0F40               	incfsz	??_map+2,w
  3289     00E1  28E3               	goto	u2523
  3290     00E2  28E4               	goto	u2524
  3291     00E3                     u2523:
  3292     00E3  02C4               	subwf	??_map+6,f
  3293     00E4                     u2524:
  3294     00E4  0841               	movf	??_map+3,w
  3295     00E5  1C03               	skipc
  3296     00E6  0F41               	incfsz	??_map+3,w
  3297     00E7  28E9               	goto	u2525
  3298     00E8  28EA               	goto	u2526
  3299     00E9                     u2525:
  3300     00E9  02C5               	subwf	??_map+7,f
  3301     00EA                     u2526:
  3302     00EA  0845               	movf	??_map+7,w
  3303     00EB  00CD               	movwf	map@delta+3
  3304     00EC  0844               	movf	??_map+6,w
  3305     00ED  00CC               	movwf	map@delta+2
  3306     00EE  0843               	movf	??_map+5,w
  3307     00EF  00CB               	movwf	map@delta+1
  3308     00F0  0842               	movf	??_map+4,w
  3309     00F1  00CA               	movwf	map@delta
  3310     00F2                     l2587:
  3311                           
  3312                           ;./config.h: 170:     return (delta * rise) / run + out_min;
  3313     00F2  083A               	movf	map@out_min,w
  3314     00F3  00BE               	movwf	??_map
  3315     00F4  083B               	movf	map@out_min+1,w
  3316     00F5  00BF               	movwf	??_map+1
  3317     00F6  3000               	movlw	0
  3318     00F7  1BBF               	btfsc	??_map+1,7
  3319     00F8  30FF               	movlw	255
  3320     00F9  00C0               	movwf	??_map+2
  3321     00FA  00C1               	movwf	??_map+3
  3322     00FB  0851               	movf	map@run+3,w
  3323     00FC  00A8               	movwf	___aldiv@divisor+3
  3324     00FD  0850               	movf	map@run+2,w
  3325     00FE  00A7               	movwf	___aldiv@divisor+2
  3326     00FF  084F               	movf	map@run+1,w
  3327     0100  00A6               	movwf	___aldiv@divisor+1
  3328     0101  084E               	movf	map@run,w
  3329     0102  00A5               	movwf	___aldiv@divisor
  3330     0103  084D               	movf	map@delta+3,w
  3331     0104  00F5               	movwf	___lmul@multiplier+3
  3332     0105  084C               	movf	map@delta+2,w
  3333     0106  00F4               	movwf	___lmul@multiplier+2
  3334     0107  084B               	movf	map@delta+1,w
  3335     0108  00F3               	movwf	___lmul@multiplier+1
  3336     0109  084A               	movf	map@delta,w
  3337     010A  00F2               	movwf	___lmul@multiplier
  3338     010B  0849               	movf	map@rise+3,w
  3339     010C  00F9               	movwf	___lmul@multiplicand+3
  3340     010D  0848               	movf	map@rise+2,w
  3341     010E  00F8               	movwf	___lmul@multiplicand+2
  3342     010F  0847               	movf	map@rise+1,w
  3343     0110  00F7               	movwf	___lmul@multiplicand+1
  3344     0111  0846               	movf	map@rise,w
  3345     0112  00F6               	movwf	___lmul@multiplicand
  3346     0113  120A  118A  279B  120A  118A  	fcall	___lmul
  3347     0118  0875               	movf	?___lmul+3,w
  3348     0119  1283               	bcf	3,5	;RP0=0, select bank0
  3349     011A  1303               	bcf	3,6	;RP1=0, select bank0
  3350     011B  00AC               	movwf	___aldiv@dividend+3
  3351     011C  0874               	movf	?___lmul+2,w
  3352     011D  00AB               	movwf	___aldiv@dividend+2
  3353     011E  0873               	movf	?___lmul+1,w
  3354     011F  00AA               	movwf	___aldiv@dividend+1
  3355     0120  0872               	movf	?___lmul,w
  3356     0121  00A9               	movwf	___aldiv@dividend
  3357     0122  120A  118A  2370  120A  118A  	fcall	___aldiv
  3358     0127  1283               	bcf	3,5	;RP0=0, select bank0
  3359     0128  1303               	bcf	3,6	;RP1=0, select bank0
  3360     0129  0825               	movf	?___aldiv,w
  3361     012A  07BE               	addwf	??_map,f
  3362     012B  0826               	movf	?___aldiv+1,w
  3363     012C  1803               	skipnc
  3364     012D  0F26               	incfsz	?___aldiv+1,w
  3365     012E  2930               	goto	u2530
  3366     012F  2931               	goto	u2531
  3367     0130                     u2530:
  3368     0130  07BF               	addwf	??_map+1,f
  3369     0131                     u2531:
  3370     0131  0827               	movf	?___aldiv+2,w
  3371     0132  1803               	skipnc
  3372     0133  0F27               	incfsz	?___aldiv+2,w
  3373     0134  2936               	goto	u2532
  3374     0135  2937               	goto	u2533
  3375     0136                     u2532:
  3376     0136  07C0               	addwf	??_map+2,f
  3377     0137                     u2533:
  3378     0137  0828               	movf	?___aldiv+3,w
  3379     0138  1803               	skipnc
  3380     0139  0A28               	incf	?___aldiv+3,w
  3381     013A  07C1               	addwf	??_map+3,f
  3382     013B  0841               	movf	??_map+3,w
  3383     013C  00B7               	movwf	?_map+3
  3384     013D  0840               	movf	??_map+2,w
  3385     013E  00B6               	movwf	?_map+2
  3386     013F  083F               	movf	??_map+1,w
  3387     0140  00B5               	movwf	?_map+1
  3388     0141  083E               	movf	??_map,w
  3389     0142  00B4               	movwf	?_map
  3390     0143                     l122:
  3391     0143  0008               	return
  3392     0144                     __end_of_map:
  3393                           
  3394                           	psect	text18
  3395     079B                     __ptext18:	
  3396 ;; *************** function ___lmul *****************
  3397 ;; Defined at:
  3398 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\Umul32.c"
  3399 ;; Parameters:    Size  Location     Type
  3400 ;;  multiplier      4    2[COMMON] unsigned long 
  3401 ;;  multiplicand    4    6[COMMON] unsigned long 
  3402 ;; Auto vars:     Size  Location     Type
  3403 ;;  product         4    1[BANK0 ] unsigned long 
  3404 ;; Return value:  Size  Location     Type
  3405 ;;                  4    2[COMMON] unsigned long 
  3406 ;; Registers used:
  3407 ;;		wreg, status,2, status,0
  3408 ;; Tracked objects:
  3409 ;;		On entry : 0/0
  3410 ;;		On exit  : 0/0
  3411 ;;		Unchanged: 0/0
  3412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3413 ;;      Params:         8       0       0       0       0
  3414 ;;      Locals:         0       4       0       0       0
  3415 ;;      Temps:          0       1       0       0       0
  3416 ;;      Totals:         8       5       0       0       0
  3417 ;;Total ram usage:       13 bytes
  3418 ;; Hardware stack levels used: 1
  3419 ;; Hardware stack levels required when called: 1
  3420 ;; This function calls:
  3421 ;;		Nothing
  3422 ;; This function is called by:
  3423 ;;		_map
  3424 ;; This function uses a non-reentrant model
  3425 ;;
  3426                           
  3427     079B                     ___lmul:	
  3428                           ;psect for function ___lmul
  3429                           
  3430     079B                     l2473:	
  3431                           ;incstack = 0
  3432                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3433                           
  3434     079B  3000               	movlw	0
  3435     079C  1283               	bcf	3,5	;RP0=0, select bank0
  3436     079D  1303               	bcf	3,6	;RP1=0, select bank0
  3437     079E  00A4               	movwf	___lmul@product+3
  3438     079F  3000               	movlw	0
  3439     07A0  00A3               	movwf	___lmul@product+2
  3440     07A1  3000               	movlw	0
  3441     07A2  00A2               	movwf	___lmul@product+1
  3442     07A3  3000               	movlw	0
  3443     07A4  00A1               	movwf	___lmul@product
  3444     07A5                     l2475:
  3445     07A5  1C72               	btfss	___lmul@multiplier,0
  3446     07A6  2FA8               	goto	u2241
  3447     07A7  2FA9               	goto	u2240
  3448     07A8                     u2241:
  3449     07A8  2FC0               	goto	l2479
  3450     07A9                     u2240:
  3451     07A9                     l2477:
  3452     07A9  0876               	movf	___lmul@multiplicand,w
  3453     07AA  07A1               	addwf	___lmul@product,f
  3454     07AB  0877               	movf	___lmul@multiplicand+1,w
  3455     07AC  1103               	clrz
  3456     07AD  1803               	skipnc
  3457     07AE  3E01               	addlw	1
  3458     07AF  1903               	skipnz
  3459     07B0  2FB2               	goto	u2251
  3460     07B1  07A2               	addwf	___lmul@product+1,f
  3461     07B2                     u2251:
  3462     07B2  0878               	movf	___lmul@multiplicand+2,w
  3463     07B3  1103               	clrz
  3464     07B4  1803               	skipnc
  3465     07B5  3E01               	addlw	1
  3466     07B6  1903               	skipnz
  3467     07B7  2FB9               	goto	u2252
  3468     07B8  07A3               	addwf	___lmul@product+2,f
  3469     07B9                     u2252:
  3470     07B9  0879               	movf	___lmul@multiplicand+3,w
  3471     07BA  1103               	clrz
  3472     07BB  1803               	skipnc
  3473     07BC  3E01               	addlw	1
  3474     07BD  1903               	skipnz
  3475     07BE  2FC0               	goto	u2253
  3476     07BF  07A4               	addwf	___lmul@product+3,f
  3477     07C0                     u2253:
  3478     07C0                     l2479:
  3479     07C0  3001               	movlw	1
  3480     07C1  00A0               	movwf	??___lmul
  3481     07C2                     u2265:
  3482     07C2  1003               	clrc
  3483     07C3  0DF6               	rlf	___lmul@multiplicand,f
  3484     07C4  0DF7               	rlf	___lmul@multiplicand+1,f
  3485     07C5  0DF8               	rlf	___lmul@multiplicand+2,f
  3486     07C6  0DF9               	rlf	___lmul@multiplicand+3,f
  3487     07C7  0BA0               	decfsz	??___lmul,f
  3488     07C8  2FC2               	goto	u2265
  3489     07C9                     l2481:
  3490     07C9  3001               	movlw	1
  3491     07CA                     u2275:
  3492     07CA  1003               	clrc
  3493     07CB  0CF5               	rrf	___lmul@multiplier+3,f
  3494     07CC  0CF4               	rrf	___lmul@multiplier+2,f
  3495     07CD  0CF3               	rrf	___lmul@multiplier+1,f
  3496     07CE  0CF2               	rrf	___lmul@multiplier,f
  3497     07CF  3EFF               	addlw	-1
  3498     07D0  1D03               	skipz
  3499     07D1  2FCA               	goto	u2275
  3500     07D2  0875               	movf	___lmul@multiplier+3,w
  3501     07D3  0474               	iorwf	___lmul@multiplier+2,w
  3502     07D4  0473               	iorwf	___lmul@multiplier+1,w
  3503     07D5  0472               	iorwf	___lmul@multiplier,w
  3504     07D6  1D03               	skipz
  3505     07D7  2FD9               	goto	u2281
  3506     07D8  2FDA               	goto	u2280
  3507     07D9                     u2281:
  3508     07D9  2FA5               	goto	l2475
  3509     07DA                     u2280:
  3510     07DA                     l2483:
  3511     07DA  0824               	movf	___lmul@product+3,w
  3512     07DB  00F5               	movwf	?___lmul+3
  3513     07DC  0823               	movf	___lmul@product+2,w
  3514     07DD  00F4               	movwf	?___lmul+2
  3515     07DE  0822               	movf	___lmul@product+1,w
  3516     07DF  00F3               	movwf	?___lmul+1
  3517     07E0  0821               	movf	___lmul@product,w
  3518     07E1  00F2               	movwf	?___lmul
  3519     07E2                     l488:
  3520     07E2  0008               	return
  3521     07E3                     __end_of___lmul:
  3522                           
  3523                           	psect	text19
  3524     0370                     __ptext19:	
  3525 ;; *************** function ___aldiv *****************
  3526 ;; Defined at:
  3527 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\aldiv.c"
  3528 ;; Parameters:    Size  Location     Type
  3529 ;;  divisor         4    5[BANK0 ] long 
  3530 ;;  dividend        4    9[BANK0 ] long 
  3531 ;; Auto vars:     Size  Location     Type
  3532 ;;  quotient        4   16[BANK0 ] long 
  3533 ;;  sign            1   15[BANK0 ] unsigned char 
  3534 ;;  counter         1   14[BANK0 ] unsigned char 
  3535 ;; Return value:  Size  Location     Type
  3536 ;;                  4    5[BANK0 ] long 
  3537 ;; Registers used:
  3538 ;;		wreg, status,2, status,0
  3539 ;; Tracked objects:
  3540 ;;		On entry : 0/0
  3541 ;;		On exit  : 0/0
  3542 ;;		Unchanged: 0/0
  3543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3544 ;;      Params:         0       8       0       0       0
  3545 ;;      Locals:         0       6       0       0       0
  3546 ;;      Temps:          0       1       0       0       0
  3547 ;;      Totals:         0      15       0       0       0
  3548 ;;Total ram usage:       15 bytes
  3549 ;; Hardware stack levels used: 1
  3550 ;; Hardware stack levels required when called: 1
  3551 ;; This function calls:
  3552 ;;		Nothing
  3553 ;; This function is called by:
  3554 ;;		_map
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558     0370                     ___aldiv:	
  3559                           ;psect for function ___aldiv
  3560                           
  3561     0370                     l2487:	
  3562                           ;incstack = 0
  3563                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3564                           
  3565     0370  1283               	bcf	3,5	;RP0=0, select bank0
  3566     0371  1303               	bcf	3,6	;RP1=0, select bank0
  3567     0372  01AF               	clrf	___aldiv@sign
  3568     0373                     l2489:
  3569     0373  1FA8               	btfss	___aldiv@divisor+3,7
  3570     0374  2B76               	goto	u2291
  3571     0375  2B77               	goto	u2290
  3572     0376                     u2291:
  3573     0376  2B84               	goto	l539
  3574     0377                     u2290:
  3575     0377                     l2491:
  3576     0377  09A5               	comf	___aldiv@divisor,f
  3577     0378  09A6               	comf	___aldiv@divisor+1,f
  3578     0379  09A7               	comf	___aldiv@divisor+2,f
  3579     037A  09A8               	comf	___aldiv@divisor+3,f
  3580     037B  0AA5               	incf	___aldiv@divisor,f
  3581     037C  1903               	skipnz
  3582     037D  0AA6               	incf	___aldiv@divisor+1,f
  3583     037E  1903               	skipnz
  3584     037F  0AA7               	incf	___aldiv@divisor+2,f
  3585     0380  1903               	skipnz
  3586     0381  0AA8               	incf	___aldiv@divisor+3,f
  3587     0382  3001               	movlw	1
  3588     0383  00AF               	movwf	___aldiv@sign
  3589     0384                     l539:
  3590     0384  1FAC               	btfss	___aldiv@dividend+3,7
  3591     0385  2B87               	goto	u2301
  3592     0386  2B88               	goto	u2300
  3593     0387                     u2301:
  3594     0387  2B95               	goto	l2497
  3595     0388                     u2300:
  3596     0388                     l2493:
  3597     0388  09A9               	comf	___aldiv@dividend,f
  3598     0389  09AA               	comf	___aldiv@dividend+1,f
  3599     038A  09AB               	comf	___aldiv@dividend+2,f
  3600     038B  09AC               	comf	___aldiv@dividend+3,f
  3601     038C  0AA9               	incf	___aldiv@dividend,f
  3602     038D  1903               	skipnz
  3603     038E  0AAA               	incf	___aldiv@dividend+1,f
  3604     038F  1903               	skipnz
  3605     0390  0AAB               	incf	___aldiv@dividend+2,f
  3606     0391  1903               	skipnz
  3607     0392  0AAC               	incf	___aldiv@dividend+3,f
  3608     0393                     l2495:
  3609     0393  3001               	movlw	1
  3610     0394  06AF               	xorwf	___aldiv@sign,f
  3611     0395                     l2497:
  3612     0395  3000               	movlw	0
  3613     0396  00B3               	movwf	___aldiv@quotient+3
  3614     0397  3000               	movlw	0
  3615     0398  00B2               	movwf	___aldiv@quotient+2
  3616     0399  3000               	movlw	0
  3617     039A  00B1               	movwf	___aldiv@quotient+1
  3618     039B  3000               	movlw	0
  3619     039C  00B0               	movwf	___aldiv@quotient
  3620     039D                     l2499:
  3621     039D  0828               	movf	___aldiv@divisor+3,w
  3622     039E  0427               	iorwf	___aldiv@divisor+2,w
  3623     039F  0426               	iorwf	___aldiv@divisor+1,w
  3624     03A0  0425               	iorwf	___aldiv@divisor,w
  3625     03A1  1903               	skipnz
  3626     03A2  2BA4               	goto	u2311
  3627     03A3  2BA5               	goto	u2310
  3628     03A4                     u2311:
  3629     03A4  2BF0               	goto	l2519
  3630     03A5                     u2310:
  3631     03A5                     l2501:
  3632     03A5  3001               	movlw	1
  3633     03A6  00AE               	movwf	___aldiv@counter
  3634     03A7  2BB3               	goto	l2505
  3635     03A8                     l2503:
  3636     03A8  3001               	movlw	1
  3637     03A9  00AD               	movwf	??___aldiv
  3638     03AA                     u2325:
  3639     03AA  1003               	clrc
  3640     03AB  0DA5               	rlf	___aldiv@divisor,f
  3641     03AC  0DA6               	rlf	___aldiv@divisor+1,f
  3642     03AD  0DA7               	rlf	___aldiv@divisor+2,f
  3643     03AE  0DA8               	rlf	___aldiv@divisor+3,f
  3644     03AF  0BAD               	decfsz	??___aldiv,f
  3645     03B0  2BAA               	goto	u2325
  3646     03B1  3001               	movlw	1
  3647     03B2  07AE               	addwf	___aldiv@counter,f
  3648     03B3                     l2505:
  3649     03B3  1FA8               	btfss	___aldiv@divisor+3,7
  3650     03B4  2BB6               	goto	u2331
  3651     03B5  2BB7               	goto	u2330
  3652     03B6                     u2331:
  3653     03B6  2BA8               	goto	l2503
  3654     03B7                     u2330:
  3655     03B7                     l2507:
  3656     03B7  3001               	movlw	1
  3657     03B8  00AD               	movwf	??___aldiv
  3658     03B9                     u2345:
  3659     03B9  1003               	clrc
  3660     03BA  0DB0               	rlf	___aldiv@quotient,f
  3661     03BB  0DB1               	rlf	___aldiv@quotient+1,f
  3662     03BC  0DB2               	rlf	___aldiv@quotient+2,f
  3663     03BD  0DB3               	rlf	___aldiv@quotient+3,f
  3664     03BE  0BAD               	decfsz	??___aldiv,f
  3665     03BF  2BB9               	goto	u2345
  3666     03C0                     l2509:
  3667     03C0  0828               	movf	___aldiv@divisor+3,w
  3668     03C1  022C               	subwf	___aldiv@dividend+3,w
  3669     03C2  1D03               	skipz
  3670     03C3  2BCE               	goto	u2355
  3671     03C4  0827               	movf	___aldiv@divisor+2,w
  3672     03C5  022B               	subwf	___aldiv@dividend+2,w
  3673     03C6  1D03               	skipz
  3674     03C7  2BCE               	goto	u2355
  3675     03C8  0826               	movf	___aldiv@divisor+1,w
  3676     03C9  022A               	subwf	___aldiv@dividend+1,w
  3677     03CA  1D03               	skipz
  3678     03CB  2BCE               	goto	u2355
  3679     03CC  0825               	movf	___aldiv@divisor,w
  3680     03CD  0229               	subwf	___aldiv@dividend,w
  3681     03CE                     u2355:
  3682     03CE  1C03               	skipc
  3683     03CF  2BD1               	goto	u2351
  3684     03D0  2BD2               	goto	u2350
  3685     03D1                     u2351:
  3686     03D1  2BE1               	goto	l2515
  3687     03D2                     u2350:
  3688     03D2                     l2511:
  3689     03D2  0825               	movf	___aldiv@divisor,w
  3690     03D3  02A9               	subwf	___aldiv@dividend,f
  3691     03D4  0826               	movf	___aldiv@divisor+1,w
  3692     03D5  1C03               	skipc
  3693     03D6  0F26               	incfsz	___aldiv@divisor+1,w
  3694     03D7  02AA               	subwf	___aldiv@dividend+1,f
  3695     03D8  0827               	movf	___aldiv@divisor+2,w
  3696     03D9  1C03               	skipc
  3697     03DA  0F27               	incfsz	___aldiv@divisor+2,w
  3698     03DB  02AB               	subwf	___aldiv@dividend+2,f
  3699     03DC  0828               	movf	___aldiv@divisor+3,w
  3700     03DD  1C03               	skipc
  3701     03DE  0F28               	incfsz	___aldiv@divisor+3,w
  3702     03DF  02AC               	subwf	___aldiv@dividend+3,f
  3703     03E0                     l2513:
  3704     03E0  1430               	bsf	___aldiv@quotient,0
  3705     03E1                     l2515:
  3706     03E1  3001               	movlw	1
  3707     03E2                     u2365:
  3708     03E2  1003               	clrc
  3709     03E3  0CA8               	rrf	___aldiv@divisor+3,f
  3710     03E4  0CA7               	rrf	___aldiv@divisor+2,f
  3711     03E5  0CA6               	rrf	___aldiv@divisor+1,f
  3712     03E6  0CA5               	rrf	___aldiv@divisor,f
  3713     03E7  3EFF               	addlw	-1
  3714     03E8  1D03               	skipz
  3715     03E9  2BE2               	goto	u2365
  3716     03EA                     l2517:
  3717     03EA  3001               	movlw	1
  3718     03EB  02AE               	subwf	___aldiv@counter,f
  3719     03EC  1D03               	btfss	3,2
  3720     03ED  2BEF               	goto	u2371
  3721     03EE  2BF0               	goto	u2370
  3722     03EF                     u2371:
  3723     03EF  2BB7               	goto	l2507
  3724     03F0                     u2370:
  3725     03F0                     l2519:
  3726     03F0  082F               	movf	___aldiv@sign,w
  3727     03F1  1903               	btfsc	3,2
  3728     03F2  2BF4               	goto	u2381
  3729     03F3  2BF5               	goto	u2380
  3730     03F4                     u2381:
  3731     03F4  2C00               	goto	l2523
  3732     03F5                     u2380:
  3733     03F5                     l2521:
  3734     03F5  09B0               	comf	___aldiv@quotient,f
  3735     03F6  09B1               	comf	___aldiv@quotient+1,f
  3736     03F7  09B2               	comf	___aldiv@quotient+2,f
  3737     03F8  09B3               	comf	___aldiv@quotient+3,f
  3738     03F9  0AB0               	incf	___aldiv@quotient,f
  3739     03FA  1903               	skipnz
  3740     03FB  0AB1               	incf	___aldiv@quotient+1,f
  3741     03FC  1903               	skipnz
  3742     03FD  0AB2               	incf	___aldiv@quotient+2,f
  3743     03FE  1903               	skipnz
  3744     03FF  0AB3               	incf	___aldiv@quotient+3,f
  3745     0400                     l2523:
  3746     0400  0833               	movf	___aldiv@quotient+3,w
  3747     0401  00A8               	movwf	?___aldiv+3
  3748     0402  0832               	movf	___aldiv@quotient+2,w
  3749     0403  00A7               	movwf	?___aldiv+2
  3750     0404  0831               	movf	___aldiv@quotient+1,w
  3751     0405  00A6               	movwf	?___aldiv+1
  3752     0406  0830               	movf	___aldiv@quotient,w
  3753     0407  00A5               	movwf	?___aldiv
  3754     0408                     l549:
  3755     0408  0008               	return
  3756     0409                     __end_of___aldiv:
  3757                           
  3758                           	psect	text20
  3759     0B7A                     __ptext20:	
  3760 ;; *************** function _readLight *****************
  3761 ;; Defined at:
  3762 ;;		line 191 in file "./config.h"
  3763 ;; Parameters:    Size  Location     Type
  3764 ;;		None
  3765 ;; Auto vars:     Size  Location     Type
  3766 ;;		None
  3767 ;; Return value:  Size  Location     Type
  3768 ;;                  1    wreg      void 
  3769 ;; Registers used:
  3770 ;;		wreg, status,2, status,0, pclath, cstack
  3771 ;; Tracked objects:
  3772 ;;		On entry : 0/0
  3773 ;;		On exit  : 0/0
  3774 ;;		Unchanged: 0/0
  3775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3776 ;;      Params:         0       0       0       0       0
  3777 ;;      Locals:         0       0       0       0       0
  3778 ;;      Temps:          0       0       0       0       0
  3779 ;;      Totals:         0       0       0       0       0
  3780 ;;Total ram usage:        0 bytes
  3781 ;; Hardware stack levels used: 1
  3782 ;; Hardware stack levels required when called: 2
  3783 ;; This function calls:
  3784 ;;		_ADC_Read
  3785 ;; This function is called by:
  3786 ;;		_ADC_readAll
  3787 ;; This function uses a non-reentrant model
  3788 ;;
  3789                           
  3790     0B7A                     _readLight:	
  3791                           ;psect for function _readLight
  3792                           
  3793     0B7A                     l2013:	
  3794                           ;incstack = 0
  3795                           ; Regs used in _readLight: [wreg+status,2+status,0+pclath+cstack]
  3796                           
  3797                           
  3798                           ;./config.h: 193:   light = ADC_Read(2);
  3799     0B7A  3002               	movlw	2
  3800     0B7B  120A  158A  2525  120A  158A  	fcall	_ADC_Read
  3801     0B80  0873               	movf	?_ADC_Read+1,w
  3802     0B81  1283               	bcf	3,5	;RP0=0, select bank0
  3803     0B82  1303               	bcf	3,6	;RP1=0, select bank0
  3804     0B83  00E1               	movwf	_light+1
  3805     0B84  0872               	movf	?_ADC_Read,w
  3806     0B85  00E0               	movwf	_light
  3807     0B86                     l131:
  3808     0B86  0008               	return
  3809     0B87                     __end_of_readLight:
  3810                           
  3811                           	psect	text21
  3812     0D25                     __ptext21:	
  3813 ;; *************** function _ADC_Read *****************
  3814 ;; Defined at:
  3815 ;;		line 140 in file "./config.h"
  3816 ;; Parameters:    Size  Location     Type
  3817 ;;  channel         1    wreg     unsigned char 
  3818 ;; Auto vars:     Size  Location     Type
  3819 ;;  channel         1    5[COMMON] unsigned char 
  3820 ;; Return value:  Size  Location     Type
  3821 ;;                  2    2[COMMON] int 
  3822 ;; Registers used:
  3823 ;;		wreg, status,2, status,0
  3824 ;; Tracked objects:
  3825 ;;		On entry : 0/0
  3826 ;;		On exit  : 0/0
  3827 ;;		Unchanged: 0/0
  3828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3829 ;;      Params:         2       0       0       0       0
  3830 ;;      Locals:         1       0       0       0       0
  3831 ;;      Temps:          1       0       0       0       0
  3832 ;;      Totals:         4       0       0       0       0
  3833 ;;Total ram usage:        4 bytes
  3834 ;; Hardware stack levels used: 1
  3835 ;; Hardware stack levels required when called: 1
  3836 ;; This function calls:
  3837 ;;		Nothing
  3838 ;; This function is called by:
  3839 ;;		_readSoilMoisture
  3840 ;;		_readTemperature
  3841 ;;		_readLight
  3842 ;; This function uses a non-reentrant model
  3843 ;;
  3844                           
  3845     0D25                     _ADC_Read:	
  3846                           ;psect for function _ADC_Read
  3847                           
  3848                           
  3849                           ;incstack = 0
  3850                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  3851                           ;ADC_Read@channel stored from wreg
  3852     0D25  00F5               	movwf	ADC_Read@channel
  3853     0D26                     l1941:
  3854                           
  3855                           ;./config.h: 143:   ADCON0bits.CHS = channel;
  3856     0D26  0875               	movf	ADC_Read@channel,w
  3857     0D27  00F4               	movwf	??_ADC_Read
  3858     0D28  0DF4               	rlf	??_ADC_Read,f
  3859     0D29  0DF4               	rlf	??_ADC_Read,f
  3860     0D2A  0DF4               	rlf	??_ADC_Read,f
  3861     0D2B  1283               	bcf	3,5	;RP0=0, select bank0
  3862     0D2C  1303               	bcf	3,6	;RP1=0, select bank0
  3863     0D2D  081F               	movf	31,w	;volatile
  3864     0D2E  0674               	xorwf	??_ADC_Read,w
  3865     0D2F  39C7               	andlw	-57
  3866     0D30  0674               	xorwf	??_ADC_Read,w
  3867     0D31  009F               	movwf	31	;volatile
  3868     0D32                     l1943:
  3869                           
  3870                           ;./config.h: 146:   _delay((unsigned long)((20)*(4000000/4000000.0)));
  3871     0D32  3006               	movlw	6
  3872     0D33  00F4               	movwf	??_ADC_Read
  3873     0D34                     u2787:
  3874     0D34  0BF4               	decfsz	??_ADC_Read,f
  3875     0D35  2D34               	goto	u2787
  3876     0D36  0000               	nop
  3877     0D37                     l112:	
  3878                           ;./config.h: 148:   while (ADCON0bits.nDONE) {};
  3879                           
  3880     0D37  1283               	bcf	3,5	;RP0=0, select bank0
  3881     0D38  1303               	bcf	3,6	;RP1=0, select bank0
  3882     0D39  191F               	btfsc	31,2	;volatile
  3883     0D3A  2D3C               	goto	u1591
  3884     0D3B  2D3D               	goto	u1590
  3885     0D3C                     u1591:
  3886     0D3C  2D37               	goto	l112
  3887     0D3D                     u1590:
  3888     0D3D                     l114:
  3889                           
  3890                           ;./config.h: 151:   ADCON0bits.GO = 1;
  3891     0D3D  151F               	bsf	31,2	;volatile
  3892     0D3E                     l115:	
  3893                           ;./config.h: 154:     {};
  3894                           
  3895                           
  3896                           ;./config.h: 153:   while (ADCON0bits.nDONE)
  3897     0D3E  191F               	btfsc	31,2	;volatile
  3898     0D3F  2D41               	goto	u1601
  3899     0D40  2D42               	goto	u1600
  3900     0D41                     u1601:
  3901     0D41  2D3E               	goto	l115
  3902     0D42                     u1600:
  3903     0D42                     l1945:
  3904                           
  3905                           ;./config.h: 156:   return((ADRESH<<8) + ADRESL);
  3906     0D42  081E               	movf	30,w	;volatile
  3907     0D43  00F3               	movwf	?_ADC_Read+1
  3908     0D44  1683               	bsf	3,5	;RP0=1, select bank1
  3909     0D45  1303               	bcf	3,6	;RP1=0, select bank1
  3910     0D46  081E               	movf	30,w	;volatile
  3911     0D47  00F2               	movwf	?_ADC_Read
  3912     0D48                     l118:
  3913     0D48  0008               	return
  3914     0D49                     __end_of_ADC_Read:
  3915                           
  3916                           	psect	text22
  3917     0BA3                     __ptext22:	
  3918 ;; *************** function _pins_init *****************
  3919 ;; Defined at:
  3920 ;;		line 99 in file "./config.h"
  3921 ;; Parameters:    Size  Location     Type
  3922 ;;  _TRISA          1    wreg     unsigned char 
  3923 ;;  _TRISB          1    2[COMMON] unsigned char 
  3924 ;;  _TRISC          1    3[COMMON] unsigned char 
  3925 ;;  _TRISD          1    4[COMMON] unsigned char 
  3926 ;; Auto vars:     Size  Location     Type
  3927 ;;  _TRISA          1    5[COMMON] unsigned char 
  3928 ;; Return value:  Size  Location     Type
  3929 ;;                  1    wreg      void 
  3930 ;; Registers used:
  3931 ;;		wreg
  3932 ;; Tracked objects:
  3933 ;;		On entry : 0/0
  3934 ;;		On exit  : 0/0
  3935 ;;		Unchanged: 0/0
  3936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3937 ;;      Params:         3       0       0       0       0
  3938 ;;      Locals:         1       0       0       0       0
  3939 ;;      Temps:          0       0       0       0       0
  3940 ;;      Totals:         4       0       0       0       0
  3941 ;;Total ram usage:        4 bytes
  3942 ;; Hardware stack levels used: 1
  3943 ;; Hardware stack levels required when called: 1
  3944 ;; This function calls:
  3945 ;;		Nothing
  3946 ;; This function is called by:
  3947 ;;		_main
  3948 ;; This function uses a non-reentrant model
  3949 ;;
  3950                           
  3951     0BA3                     _pins_init:	
  3952                           ;psect for function _pins_init
  3953                           
  3954                           
  3955                           ;incstack = 0
  3956                           ; Regs used in _pins_init: [wreg]
  3957                           ;pins_init@_TRISA stored from wreg
  3958     0BA3  00F5               	movwf	pins_init@_TRISA
  3959     0BA4                     l2259:
  3960                           
  3961                           ;./config.h: 100:   TRISA = _TRISA;
  3962     0BA4  0875               	movf	pins_init@_TRISA,w
  3963     0BA5  1683               	bsf	3,5	;RP0=1, select bank1
  3964     0BA6  1303               	bcf	3,6	;RP1=0, select bank1
  3965     0BA7  0085               	movwf	5	;volatile
  3966                           
  3967                           ;./config.h: 101:   TRISB = _TRISB;
  3968     0BA8  0872               	movf	pins_init@_TRISB,w
  3969     0BA9  0086               	movwf	6	;volatile
  3970                           
  3971                           ;./config.h: 102:   TRISC = _TRISC;
  3972     0BAA  0873               	movf	pins_init@_TRISC,w
  3973     0BAB  0087               	movwf	7	;volatile
  3974                           
  3975                           ;./config.h: 103:   TRISD = _TRISD;
  3976     0BAC  0874               	movf	pins_init@_TRISD,w
  3977     0BAD  0088               	movwf	8	;volatile
  3978     0BAE                     l2261:
  3979                           
  3980                           ;./config.h: 105:   OPTION_REGbits.nRBPU = 0;
  3981     0BAE  1381               	bcf	1,7	;volatile
  3982     0BAF                     l2263:
  3983                           
  3984                           ;./config.h: 107:   TRISCbits.TRISC6 = 1;
  3985     0BAF  1707               	bsf	7,6	;volatile
  3986     0BB0                     l2265:
  3987                           
  3988                           ;./config.h: 108:   TRISCbits.TRISC7 = 1;
  3989     0BB0  1787               	bsf	7,7	;volatile
  3990     0BB1                     l103:
  3991     0BB1  0008               	return
  3992     0BB2                     __end_of_pins_init:
  3993                           
  3994                           	psect	text23
  3995     0E68                     __ptext23:	
  3996 ;; *************** function _lcd_run *****************
  3997 ;; Defined at:
  3998 ;;		line 188 in file "./lcdFunctions.h"
  3999 ;; Parameters:    Size  Location     Type
  4000 ;;		None
  4001 ;; Auto vars:     Size  Location     Type
  4002 ;;		None
  4003 ;; Return value:  Size  Location     Type
  4004 ;;                  1    wreg      void 
  4005 ;; Registers used:
  4006 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4007 ;; Tracked objects:
  4008 ;;		On entry : 0/0
  4009 ;;		On exit  : 0/0
  4010 ;;		Unchanged: 0/0
  4011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4012 ;;      Params:         0       0       0       0       0
  4013 ;;      Locals:         0       0       0       0       0
  4014 ;;      Temps:          0       0       0       0       0
  4015 ;;      Totals:         0       0       0       0       0
  4016 ;;Total ram usage:        0 bytes
  4017 ;; Hardware stack levels used: 1
  4018 ;; Hardware stack levels required when called: 7
  4019 ;; This function calls:
  4020 ;;		_lcd_debounceButtons
  4021 ;;		_print_ArtificialLight
  4022 ;;		_print_Irrigation
  4023 ;;		_print_SoilMoisture
  4024 ;;		_print_TankState
  4025 ;;		_print_Temperature
  4026 ;; This function is called by:
  4027 ;;		_main
  4028 ;; This function uses a non-reentrant model
  4029 ;;
  4030                           
  4031     0E68                     _lcd_run:	
  4032                           ;psect for function _lcd_run
  4033                           
  4034     0E68                     l2789:	
  4035                           ;incstack = 0
  4036                           ; Regs used in _lcd_run: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4037                           
  4038                           
  4039                           ;./lcdFunctions.h: 191:   lcd_debounceButtons();
  4040     0E68  120A  158A  259D  120A  158A  	fcall	_lcd_debounceButtons
  4041                           
  4042                           ;./lcdFunctions.h: 193:   switch(lcd_index)
  4043     0E6D  2E8C               	goto	l2803
  4044     0E6E                     l2791:
  4045                           
  4046                           ;./lcdFunctions.h: 196:     print_TankState();
  4047     0E6E  120A  158A  26A4  120A  158A  	fcall	_print_TankState
  4048                           
  4049                           ;./lcdFunctions.h: 197:     break;
  4050     0E73  2E9F               	goto	l2805
  4051     0E74                     l2793:
  4052                           
  4053                           ;./lcdFunctions.h: 199:     print_Irrigation();
  4054     0E74  120A  158A  2773  120A  158A  	fcall	_print_Irrigation
  4055                           
  4056                           ;./lcdFunctions.h: 200:     break;
  4057     0E79  2E9F               	goto	l2805
  4058     0E7A                     l2795:
  4059                           
  4060                           ;./lcdFunctions.h: 202:     print_SoilMoisture();
  4061     0E7A  120A  118A  2571  120A  158A  	fcall	_print_SoilMoisture
  4062                           
  4063                           ;./lcdFunctions.h: 203:     break;
  4064     0E7F  2E9F               	goto	l2805
  4065     0E80                     l2797:
  4066                           
  4067                           ;./lcdFunctions.h: 205:     print_Temperature();
  4068     0E80  120A  118A  2506  120A  158A  	fcall	_print_Temperature
  4069                           
  4070                           ;./lcdFunctions.h: 206:     break;
  4071     0E85  2E9F               	goto	l2805
  4072     0E86                     l2799:
  4073                           
  4074                           ;./lcdFunctions.h: 208:     print_ArtificialLight();
  4075     0E86  120A  118A  2639  120A  158A  	fcall	_print_ArtificialLight
  4076     0E8B  2E9F               	goto	l2805
  4077     0E8C                     l2803:
  4078     0E8C  1283               	bcf	3,5	;RP0=0, select bank0
  4079     0E8D  1303               	bcf	3,6	;RP1=0, select bank0
  4080     0E8E  086A               	movf	_lcd_index,w
  4081                           
  4082                           ; Switch size 1, requested type "simple"
  4083                           ; Number of cases is 5, Range of values is 1 to 5
  4084                           ; switch strategies available:
  4085                           ; Name         Instructions Cycles
  4086                           ; simple_byte           16     9 (average)
  4087                           ; direct_byte           26    11 (fixed)
  4088                           ; jumptable            263     9 (fixed)
  4089                           ;	Chosen strategy is simple_byte
  4090     0E8F  3A01               	xorlw	1	; case 1
  4091     0E90  1903               	skipnz
  4092     0E91  2E6E               	goto	l2791
  4093     0E92  3A03               	xorlw	3	; case 2
  4094     0E93  1903               	skipnz
  4095     0E94  2E74               	goto	l2793
  4096     0E95  3A01               	xorlw	1	; case 3
  4097     0E96  1903               	skipnz
  4098     0E97  2E7A               	goto	l2795
  4099     0E98  3A07               	xorlw	7	; case 4
  4100     0E99  1903               	skipnz
  4101     0E9A  2E80               	goto	l2797
  4102     0E9B  3A01               	xorlw	1	; case 5
  4103     0E9C  1903               	skipnz
  4104     0E9D  2E86               	goto	l2799
  4105     0E9E  2E9F               	goto	l2805
  4106     0E9F                     l2805:
  4107                           
  4108                           ;./lcdFunctions.h: 213:   lcd_lastIndex = lcd_index;
  4109     0E9F  1283               	bcf	3,5	;RP0=0, select bank0
  4110     0EA0  1303               	bcf	3,6	;RP1=0, select bank0
  4111     0EA1  086A               	movf	_lcd_index,w
  4112     0EA2  00E5               	movwf	_lcd_lastIndex
  4113     0EA3                     l232:
  4114     0EA3  0008               	return
  4115     0EA4                     __end_of_lcd_run:
  4116                           
  4117                           	psect	text24
  4118     0506                     __ptext24:	
  4119 ;; *************** function _print_Temperature *****************
  4120 ;; Defined at:
  4121 ;;		line 145 in file "./lcdFunctions.h"
  4122 ;; Parameters:    Size  Location     Type
  4123 ;;		None
  4124 ;; Auto vars:     Size  Location     Type
  4125 ;;  buffer         16   44[BANK0 ] unsigned char [16]
  4126 ;; Return value:  Size  Location     Type
  4127 ;;                  1    wreg      void 
  4128 ;; Registers used:
  4129 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4130 ;; Tracked objects:
  4131 ;;		On entry : 0/0
  4132 ;;		On exit  : 0/0
  4133 ;;		Unchanged: 0/0
  4134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4135 ;;      Params:         0       0       0       0       0
  4136 ;;      Locals:         0      16       0       0       0
  4137 ;;      Temps:          0       0       0       0       0
  4138 ;;      Totals:         0      16       0       0       0
  4139 ;;Total ram usage:       16 bytes
  4140 ;; Hardware stack levels used: 1
  4141 ;; Hardware stack levels required when called: 6
  4142 ;; This function calls:
  4143 ;;		_Lcd_Clear
  4144 ;;		_Lcd_Set_Cursor
  4145 ;;		_Lcd_Write_Char
  4146 ;;		_Lcd_Write_String
  4147 ;;		_draw_Index
  4148 ;;		_sprintf
  4149 ;; This function is called by:
  4150 ;;		_lcd_run
  4151 ;; This function uses a non-reentrant model
  4152 ;;
  4153                           
  4154     0506                     _print_Temperature:	
  4155                           ;psect for function _print_Temperature
  4156                           
  4157     0506                     l2753:	
  4158                           ;incstack = 0
  4159                           ; Regs used in _print_Temperature: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4160                           
  4161                           
  4162                           ;./lcdFunctions.h: 147:   if(temperature == old_temperature && lcd_lastIndex == lcd_inde
      +                          x)
  4163     0506  1683               	bsf	3,5	;RP0=1, select bank1
  4164     0507  1303               	bcf	3,6	;RP1=0, select bank1
  4165     0508  0851               	movf	(_old_temperature+1)^(0+128),w
  4166     0509  1283               	bcf	3,5	;RP0=0, select bank0
  4167     050A  1303               	bcf	3,6	;RP1=0, select bank0
  4168     050B  065F               	xorwf	_temperature+1,w
  4169     050C  1D03               	skipz
  4170     050D  2D14               	goto	u2715
  4171     050E  1683               	bsf	3,5	;RP0=1, select bank1
  4172     050F  1303               	bcf	3,6	;RP1=0, select bank1
  4173     0510  0850               	movf	_old_temperature^(0+128),w
  4174     0511  1283               	bcf	3,5	;RP0=0, select bank0
  4175     0512  1303               	bcf	3,6	;RP1=0, select bank0
  4176     0513  065E               	xorwf	_temperature,w
  4177     0514                     u2715:
  4178     0514  1D03               	skipz
  4179     0515  2D17               	goto	u2711
  4180     0516  2D18               	goto	u2710
  4181     0517                     u2711:
  4182     0517  2D1F               	goto	l2759
  4183     0518                     u2710:
  4184     0518                     l2755:
  4185     0518  0865               	movf	_lcd_lastIndex,w
  4186     0519  066A               	xorwf	_lcd_index,w
  4187     051A  1D03               	skipz
  4188     051B  2D1D               	goto	u2721
  4189     051C  2D1E               	goto	u2720
  4190     051D                     u2721:
  4191     051D  2D1F               	goto	l2759
  4192     051E                     u2720:
  4193     051E  2D70               	goto	l216
  4194     051F                     l2759:
  4195                           
  4196                           ;./lcdFunctions.h: 150:   old_temperature = temperature;
  4197     051F  085F               	movf	_temperature+1,w
  4198     0520  1683               	bsf	3,5	;RP0=1, select bank1
  4199     0521  1303               	bcf	3,6	;RP1=0, select bank1
  4200     0522  00D1               	movwf	(_old_temperature+1)^(0+128)
  4201     0523  1283               	bcf	3,5	;RP0=0, select bank0
  4202     0524  1303               	bcf	3,6	;RP1=0, select bank0
  4203     0525  085E               	movf	_temperature,w
  4204     0526  1683               	bsf	3,5	;RP0=1, select bank1
  4205     0527  1303               	bcf	3,6	;RP1=0, select bank1
  4206     0528  00D0               	movwf	_old_temperature^(0+128)
  4207     0529                     l2761:
  4208                           
  4209                           ;./lcdFunctions.h: 152:   Lcd_Clear();
  4210     0529  120A  158A  236D  120A  118A  	fcall	_Lcd_Clear
  4211     052E                     l2763:
  4212                           
  4213                           ;./lcdFunctions.h: 154:   char buffer[16];;./lcdFunctions.h: 156:   Lcd_Set_Cursor(1,3);
  4214     052E  3003               	movlw	3
  4215     052F  00F6               	movwf	Lcd_Set_Cursor@b
  4216     0530  3001               	movlw	1
  4217     0531  120A  118A  274D  120A  118A  	fcall	_Lcd_Set_Cursor
  4218     0536                     l2765:
  4219                           
  4220                           ;./lcdFunctions.h: 157:   Lcd_Write_String("TEMPERATURA:");
  4221     0536  301E               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  4222     0537  00F7               	movwf	Lcd_Write_String@a
  4223     0538  3080               	movlw	128
  4224     0539  00F8               	movwf	Lcd_Write_String@a+1
  4225     053A  120A  158A  272D  120A  118A  	fcall	_Lcd_Write_String
  4226     053F                     l2767:
  4227                           
  4228                           ;./lcdFunctions.h: 159:   Lcd_Set_Cursor(2,7);
  4229     053F  3007               	movlw	7
  4230     0540  00F6               	movwf	Lcd_Set_Cursor@b
  4231     0541  3002               	movlw	2
  4232     0542  120A  118A  274D  120A  118A  	fcall	_Lcd_Set_Cursor
  4233     0547                     l2769:
  4234                           
  4235                           ;./lcdFunctions.h: 161:   sprintf(buffer,"%d",temperature);
  4236     0547  304C               	movlw	(low (print_Temperature@buffer| 0))& (0+255)
  4237     0548  1283               	bcf	3,5	;RP0=0, select bank0
  4238     0549  1303               	bcf	3,6	;RP1=0, select bank0
  4239     054A  00BB               	movwf	sprintf@s
  4240     054B  3070               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  4241     054C  00BC               	movwf	sprintf@fmt
  4242     054D  085F               	movf	_temperature+1,w
  4243     054E  00BE               	movwf	?_sprintf+3
  4244     054F  085E               	movf	_temperature,w
  4245     0550  00BD               	movwf	?_sprintf+2
  4246     0551  120A  158A  24DE  120A  118A  	fcall	_sprintf
  4247     0556                     l2771:
  4248                           
  4249                           ;./lcdFunctions.h: 162:   Lcd_Write_String(buffer);
  4250     0556  304C               	movlw	(low (print_Temperature@buffer| 0))& (0+255)
  4251     0557  00F7               	movwf	Lcd_Write_String@a
  4252     0558  3000               	movlw	0
  4253     0559  00F8               	movwf	Lcd_Write_String@a+1
  4254     055A  120A  158A  272D  120A  118A  	fcall	_Lcd_Write_String
  4255     055F                     l2773:
  4256                           
  4257                           ;./lcdFunctions.h: 163:   Lcd_Write_Char((char)223);
  4258     055F  30DF               	movlw	223
  4259     0560  120A  158A  25FC  120A  118A  	fcall	_Lcd_Write_Char
  4260     0565                     l2775:
  4261                           
  4262                           ;./lcdFunctions.h: 164:   Lcd_Write_Char('C');
  4263     0565  3043               	movlw	67
  4264     0566  120A  158A  25FC  120A  118A  	fcall	_Lcd_Write_Char
  4265     056B                     l2777:
  4266                           
  4267                           ;./lcdFunctions.h: 167:   draw_Index();
  4268     056B  120A  158A  2456  120A  118A  	fcall	_draw_Index
  4269     0570                     l216:
  4270     0570  0008               	return
  4271     0571                     __end_of_print_Temperature:
  4272                           
  4273                           	psect	text25
  4274     0EA4                     __ptext25:	
  4275 ;; *************** function _print_TankState *****************
  4276 ;; Defined at:
  4277 ;;		line 64 in file "./lcdFunctions.h"
  4278 ;; Parameters:    Size  Location     Type
  4279 ;;		None
  4280 ;; Auto vars:     Size  Location     Type
  4281 ;;		None
  4282 ;; Return value:  Size  Location     Type
  4283 ;;                  1    wreg      void 
  4284 ;; Registers used:
  4285 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4286 ;; Tracked objects:
  4287 ;;		On entry : 0/0
  4288 ;;		On exit  : 0/0
  4289 ;;		Unchanged: 0/0
  4290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4291 ;;      Params:         0       0       0       0       0
  4292 ;;      Locals:         0       0       0       0       0
  4293 ;;      Temps:          0       0       0       0       0
  4294 ;;      Totals:         0       0       0       0       0
  4295 ;;Total ram usage:        0 bytes
  4296 ;; Hardware stack levels used: 1
  4297 ;; Hardware stack levels required when called: 5
  4298 ;; This function calls:
  4299 ;;		_Lcd_Clear
  4300 ;;		_Lcd_Set_Cursor
  4301 ;;		_Lcd_Write_String
  4302 ;;		_draw_Index
  4303 ;; This function is called by:
  4304 ;;		_lcd_run
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308     0EA4                     _print_TankState:	
  4309                           ;psect for function _print_TankState
  4310                           
  4311     0EA4                     l2667:	
  4312                           ;incstack = 0
  4313                           ; Regs used in _print_TankState: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4314                           
  4315                           
  4316                           ;./lcdFunctions.h: 67:   if(tankState == lastTankState && lcd_lastIndex == lcd_index)
  4317     0EA4  087B               	movf	_tankState,w
  4318     0EA5  1283               	bcf	3,5	;RP0=0, select bank0
  4319     0EA6  1303               	bcf	3,6	;RP1=0, select bank0
  4320     0EA7  066E               	xorwf	_lastTankState,w
  4321     0EA8  1D03               	skipz
  4322     0EA9  2EAB               	goto	u2621
  4323     0EAA  2EAC               	goto	u2620
  4324     0EAB                     u2621:
  4325     0EAB  2EB3               	goto	l2673
  4326     0EAC                     u2620:
  4327     0EAC                     l2669:
  4328     0EAC  0865               	movf	_lcd_lastIndex,w
  4329     0EAD  066A               	xorwf	_lcd_index,w
  4330     0EAE  1D03               	skipz
  4331     0EAF  2EB1               	goto	u2631
  4332     0EB0  2EB2               	goto	u2630
  4333     0EB1                     u2631:
  4334     0EB1  2EB3               	goto	l2673
  4335     0EB2                     u2630:
  4336     0EB2  2EE7               	goto	l198
  4337     0EB3                     l2673:
  4338                           
  4339                           ;./lcdFunctions.h: 70:   lastTankState = tankState;
  4340     0EB3  087B               	movf	_tankState,w
  4341     0EB4  00EE               	movwf	_lastTankState
  4342     0EB5                     l2675:
  4343                           
  4344                           ;./lcdFunctions.h: 72:   Lcd_Clear();
  4345     0EB5  120A  158A  236D  120A  158A  	fcall	_Lcd_Clear
  4346     0EBA                     l2677:
  4347                           
  4348                           ;./lcdFunctions.h: 74:   Lcd_Set_Cursor(1,2);
  4349     0EBA  3002               	movlw	2
  4350     0EBB  00F6               	movwf	Lcd_Set_Cursor@b
  4351     0EBC  3001               	movlw	1
  4352     0EBD  120A  118A  274D  120A  158A  	fcall	_Lcd_Set_Cursor
  4353     0EC2                     l2679:
  4354                           
  4355                           ;./lcdFunctions.h: 75:   Lcd_Write_String("ESTADO TANQUE");
  4356     0EC2  3010               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  4357     0EC3  00F7               	movwf	Lcd_Write_String@a
  4358     0EC4  3080               	movlw	128
  4359     0EC5  00F8               	movwf	Lcd_Write_String@a+1
  4360     0EC6  120A  158A  272D  120A  158A  	fcall	_Lcd_Write_String
  4361     0ECB                     l2681:
  4362                           
  4363                           ;./lcdFunctions.h: 77:   Lcd_Set_Cursor(2,6);
  4364     0ECB  3006               	movlw	6
  4365     0ECC  00F6               	movwf	Lcd_Set_Cursor@b
  4366     0ECD  3002               	movlw	2
  4367     0ECE  120A  118A  274D  120A  158A  	fcall	_Lcd_Set_Cursor
  4368     0ED3                     l2683:
  4369                           
  4370                           ;./lcdFunctions.h: 78:   Lcd_Write_String( TankStateString[tankState] );
  4371     0ED3  087B               	movf	_tankState,w
  4372     0ED4  3EC7               	addlw	(low (_TankStateString| 0))& (0+255)
  4373     0ED5  0084               	movwf	4
  4374     0ED6  1383               	bcf	3,7	;select IRP bank1
  4375     0ED7  0800               	movf	0,w
  4376     0ED8  00F7               	movwf	Lcd_Write_String@a
  4377     0ED9  3000               	movlw	0
  4378     0EDA  1D03               	btfss	3,2
  4379     0EDB  3080               	movlw	128
  4380     0EDC  00F8               	movwf	Lcd_Write_String@a+1
  4381     0EDD  120A  158A  272D  120A  158A  	fcall	_Lcd_Write_String
  4382     0EE2                     l2685:
  4383                           
  4384                           ;./lcdFunctions.h: 80:   draw_Index();
  4385     0EE2  120A  158A  2456  120A  158A  	fcall	_draw_Index
  4386     0EE7                     l198:
  4387     0EE7  0008               	return
  4388     0EE8                     __end_of_print_TankState:
  4389                           
  4390                           	psect	text26
  4391     0571                     __ptext26:	
  4392 ;; *************** function _print_SoilMoisture *****************
  4393 ;; Defined at:
  4394 ;;		line 102 in file "./lcdFunctions.h"
  4395 ;; Parameters:    Size  Location     Type
  4396 ;;		None
  4397 ;; Auto vars:     Size  Location     Type
  4398 ;;  buffer         16   44[BANK0 ] unsigned char [16]
  4399 ;; Return value:  Size  Location     Type
  4400 ;;                  1    wreg      void 
  4401 ;; Registers used:
  4402 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4403 ;; Tracked objects:
  4404 ;;		On entry : 0/0
  4405 ;;		On exit  : 0/0
  4406 ;;		Unchanged: 0/0
  4407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4408 ;;      Params:         0       0       0       0       0
  4409 ;;      Locals:         0      16       0       0       0
  4410 ;;      Temps:          0       0       0       0       0
  4411 ;;      Totals:         0      16       0       0       0
  4412 ;;Total ram usage:       16 bytes
  4413 ;; Hardware stack levels used: 1
  4414 ;; Hardware stack levels required when called: 6
  4415 ;; This function calls:
  4416 ;;		_Lcd_Clear
  4417 ;;		_Lcd_Set_Cursor
  4418 ;;		_Lcd_Write_Char
  4419 ;;		_Lcd_Write_String
  4420 ;;		_draw_Index
  4421 ;;		_sprintf
  4422 ;; This function is called by:
  4423 ;;		_lcd_run
  4424 ;; This function uses a non-reentrant model
  4425 ;;
  4426                           
  4427     0571                     _print_SoilMoisture:	
  4428                           ;psect for function _print_SoilMoisture
  4429                           
  4430     0571                     l2707:	
  4431                           ;incstack = 0
  4432                           ; Regs used in _print_SoilMoisture: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4433                           
  4434                           
  4435                           ;./lcdFunctions.h: 104:   if(soilMoisture == old_soilMoisture && lcd_lastIndex == lcd_in
      +                          dex)
  4436     0571  1683               	bsf	3,5	;RP0=1, select bank1
  4437     0572  1303               	bcf	3,6	;RP1=0, select bank1
  4438     0573  0853               	movf	(_old_soilMoisture+1)^(0+128),w
  4439     0574  1283               	bcf	3,5	;RP0=0, select bank0
  4440     0575  1303               	bcf	3,6	;RP1=0, select bank0
  4441     0576  0663               	xorwf	_soilMoisture+1,w
  4442     0577  1D03               	skipz
  4443     0578  2D7F               	goto	u2665
  4444     0579  1683               	bsf	3,5	;RP0=1, select bank1
  4445     057A  1303               	bcf	3,6	;RP1=0, select bank1
  4446     057B  0852               	movf	_old_soilMoisture^(0+128),w
  4447     057C  1283               	bcf	3,5	;RP0=0, select bank0
  4448     057D  1303               	bcf	3,6	;RP1=0, select bank0
  4449     057E  0662               	xorwf	_soilMoisture,w
  4450     057F                     u2665:
  4451     057F  1D03               	skipz
  4452     0580  2D82               	goto	u2661
  4453     0581  2D83               	goto	u2660
  4454     0582                     u2661:
  4455     0582  2D8A               	goto	l2713
  4456     0583                     u2660:
  4457     0583                     l2709:
  4458     0583  0865               	movf	_lcd_lastIndex,w
  4459     0584  066A               	xorwf	_lcd_index,w
  4460     0585  1D03               	skipz
  4461     0586  2D88               	goto	u2671
  4462     0587  2D89               	goto	u2670
  4463     0588                     u2671:
  4464     0588  2D8A               	goto	l2713
  4465     0589                     u2670:
  4466     0589  2DD5               	goto	l206
  4467     058A                     l2713:
  4468                           
  4469                           ;./lcdFunctions.h: 107:   old_soilMoisture = soilMoisture;
  4470     058A  0863               	movf	_soilMoisture+1,w
  4471     058B  1683               	bsf	3,5	;RP0=1, select bank1
  4472     058C  1303               	bcf	3,6	;RP1=0, select bank1
  4473     058D  00D3               	movwf	(_old_soilMoisture+1)^(0+128)
  4474     058E  1283               	bcf	3,5	;RP0=0, select bank0
  4475     058F  1303               	bcf	3,6	;RP1=0, select bank0
  4476     0590  0862               	movf	_soilMoisture,w
  4477     0591  1683               	bsf	3,5	;RP0=1, select bank1
  4478     0592  1303               	bcf	3,6	;RP1=0, select bank1
  4479     0593  00D2               	movwf	_old_soilMoisture^(0+128)
  4480     0594                     l2715:
  4481                           
  4482                           ;./lcdFunctions.h: 109:   Lcd_Clear();
  4483     0594  120A  158A  236D  120A  118A  	fcall	_Lcd_Clear
  4484     0599                     l2717:
  4485                           
  4486                           ;./lcdFunctions.h: 111:   char buffer[16];;./lcdFunctions.h: 114:   Lcd_Set_Cursor(1,2);
  4487     0599  3002               	movlw	2
  4488     059A  00F6               	movwf	Lcd_Set_Cursor@b
  4489     059B  3001               	movlw	1
  4490     059C  120A  118A  274D  120A  118A  	fcall	_Lcd_Set_Cursor
  4491     05A1                     l2719:
  4492                           
  4493                           ;./lcdFunctions.h: 115:   Lcd_Write_String("UMIDADE SOLO");
  4494     05A1  302B               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  4495     05A2  00F7               	movwf	Lcd_Write_String@a
  4496     05A3  3080               	movlw	128
  4497     05A4  00F8               	movwf	Lcd_Write_String@a+1
  4498     05A5  120A  158A  272D  120A  118A  	fcall	_Lcd_Write_String
  4499     05AA                     l2721:
  4500                           
  4501                           ;./lcdFunctions.h: 117:   Lcd_Set_Cursor(2,6);
  4502     05AA  3006               	movlw	6
  4503     05AB  00F6               	movwf	Lcd_Set_Cursor@b
  4504     05AC  3002               	movlw	2
  4505     05AD  120A  118A  274D  120A  118A  	fcall	_Lcd_Set_Cursor
  4506     05B2                     l2723:
  4507                           
  4508                           ;./lcdFunctions.h: 118:   sprintf(buffer,"%d",soilMoisture);
  4509     05B2  304C               	movlw	(low (print_SoilMoisture@buffer| 0))& (0+255)
  4510     05B3  1283               	bcf	3,5	;RP0=0, select bank0
  4511     05B4  1303               	bcf	3,6	;RP1=0, select bank0
  4512     05B5  00BB               	movwf	sprintf@s
  4513     05B6  3070               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  4514     05B7  00BC               	movwf	sprintf@fmt
  4515     05B8  0863               	movf	_soilMoisture+1,w
  4516     05B9  00BE               	movwf	?_sprintf+3
  4517     05BA  0862               	movf	_soilMoisture,w
  4518     05BB  00BD               	movwf	?_sprintf+2
  4519     05BC  120A  158A  24DE  120A  118A  	fcall	_sprintf
  4520     05C1                     l2725:
  4521                           
  4522                           ;./lcdFunctions.h: 119:   Lcd_Write_String(buffer);
  4523     05C1  304C               	movlw	(low (print_SoilMoisture@buffer| 0))& (0+255)
  4524     05C2  00F7               	movwf	Lcd_Write_String@a
  4525     05C3  3000               	movlw	0
  4526     05C4  00F8               	movwf	Lcd_Write_String@a+1
  4527     05C5  120A  158A  272D  120A  118A  	fcall	_Lcd_Write_String
  4528     05CA                     l2727:
  4529                           
  4530                           ;./lcdFunctions.h: 120:   Lcd_Write_Char('%');
  4531     05CA  3025               	movlw	37
  4532     05CB  120A  158A  25FC  120A  118A  	fcall	_Lcd_Write_Char
  4533     05D0                     l2729:
  4534                           
  4535                           ;./lcdFunctions.h: 122:   draw_Index();
  4536     05D0  120A  158A  2456  120A  118A  	fcall	_draw_Index
  4537     05D5                     l206:
  4538     05D5  0008               	return
  4539     05D6                     __end_of_print_SoilMoisture:
  4540                           
  4541                           	psect	text27
  4542     0CDE                     __ptext27:	
  4543 ;; *************** function _sprintf *****************
  4544 ;; Defined at:
  4545 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_sprintf.c"
  4546 ;; Parameters:    Size  Location     Type
  4547 ;;  s               1   27[BANK0 ] PTR unsigned char 
  4548 ;;		 -> print_Temperature@buffer(16), print_SoilMoisture@buffer(16), 
  4549 ;;  fmt             1   28[BANK0 ] PTR const unsigned char 
  4550 ;;		 -> STR_16(3), STR_11(3), 
  4551 ;; Auto vars:     Size  Location     Type
  4552 ;;  f              11   33[BANK0 ] struct _IO_FILE
  4553 ;;  ret             2    0        int 
  4554 ;;  ap              1   32[BANK0 ] PTR void [1]
  4555 ;;		 -> ?_sprintf(2), 
  4556 ;; Return value:  Size  Location     Type
  4557 ;;                  2   27[BANK0 ] int 
  4558 ;; Registers used:
  4559 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4560 ;; Tracked objects:
  4561 ;;		On entry : 0/0
  4562 ;;		On exit  : 0/0
  4563 ;;		Unchanged: 0/0
  4564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4565 ;;      Params:         0       4       0       0       0
  4566 ;;      Locals:         0      12       0       0       0
  4567 ;;      Temps:          0       1       0       0       0
  4568 ;;      Totals:         0      17       0       0       0
  4569 ;;Total ram usage:       17 bytes
  4570 ;; Hardware stack levels used: 1
  4571 ;; Hardware stack levels required when called: 5
  4572 ;; This function calls:
  4573 ;;		_vfprintf
  4574 ;; This function is called by:
  4575 ;;		_print_SoilMoisture
  4576 ;;		_print_Temperature
  4577 ;; This function uses a non-reentrant model
  4578 ;;
  4579                           
  4580     0CDE                     _sprintf:	
  4581                           ;psect for function _sprintf
  4582                           
  4583     0CDE                     l2651:	
  4584                           ;incstack = 0
  4585                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4586                           
  4587     0CDE  303D               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  4588     0CDF  1283               	bcf	3,5	;RP0=0, select bank0
  4589     0CE0  1303               	bcf	3,6	;RP1=0, select bank0
  4590     0CE1  00C0               	movwf	sprintf@ap
  4591     0CE2                     l2653:
  4592     0CE2  083B               	movf	sprintf@s,w
  4593     0CE3  00C1               	movwf	sprintf@f
  4594     0CE4  3000               	movlw	0
  4595     0CE5  00C2               	movwf	sprintf@f+1
  4596     0CE6                     l2655:
  4597     0CE6  01C3               	clrf	sprintf@f+2
  4598     0CE7  01C4               	clrf	sprintf@f+3
  4599     0CE8                     l2657:
  4600     0CE8  01CA               	clrf	sprintf@f+9
  4601     0CE9  01CB               	clrf	sprintf@f+10
  4602     0CEA                     l2659:
  4603     0CEA  3041               	movlw	low sprintf@f
  4604     0CEB  00B6               	movwf	vfprintf@fp
  4605     0CEC  3000               	movlw	high sprintf@f
  4606     0CED  00B7               	movwf	vfprintf@fp+1
  4607     0CEE  083C               	movf	sprintf@fmt,w
  4608     0CEF  00B8               	movwf	vfprintf@fmt
  4609     0CF0  3040               	movlw	(low (sprintf@ap| 0))& (0+255)
  4610     0CF1  00B9               	movwf	vfprintf@ap
  4611     0CF2  120A  158A  24BB  120A  158A  	fcall	_vfprintf
  4612     0CF7                     l2661:
  4613     0CF7  1283               	bcf	3,5	;RP0=0, select bank0
  4614     0CF8  1303               	bcf	3,6	;RP1=0, select bank0
  4615     0CF9  0843               	movf	sprintf@f+2,w
  4616     0CFA  073B               	addwf	sprintf@s,w
  4617     0CFB  00BF               	movwf	??_sprintf
  4618     0CFC  083F               	movf	??_sprintf,w
  4619     0CFD  0084               	movwf	4
  4620     0CFE  1383               	bcf	3,7	;select IRP bank0
  4621     0CFF  0180               	clrf	0
  4622     0D00                     l937:
  4623     0D00  0008               	return
  4624     0D01                     __end_of_sprintf:
  4625                           
  4626                           	psect	text28
  4627     0CBB                     __ptext28:	
  4628 ;; *************** function _vfprintf *****************
  4629 ;; Defined at:
  4630 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  4631 ;; Parameters:    Size  Location     Type
  4632 ;;  fp              2   22[BANK0 ] PTR struct _IO_FILE
  4633 ;;		 -> sprintf@f(11), 
  4634 ;;  fmt             1   24[BANK0 ] PTR const unsigned char 
  4635 ;;		 -> STR_16(3), STR_11(3), 
  4636 ;;  ap              1   25[BANK0 ] PTR PTR void 
  4637 ;;		 -> sprintf@ap(1), 
  4638 ;; Auto vars:     Size  Location     Type
  4639 ;;  cfmt            1   26[BANK0 ] PTR unsigned char 
  4640 ;;		 -> STR_16(3), STR_11(3), 
  4641 ;; Return value:  Size  Location     Type
  4642 ;;                  2   22[BANK0 ] int 
  4643 ;; Registers used:
  4644 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4645 ;; Tracked objects:
  4646 ;;		On entry : 0/0
  4647 ;;		On exit  : 0/0
  4648 ;;		Unchanged: 0/0
  4649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4650 ;;      Params:         0       4       0       0       0
  4651 ;;      Locals:         0       1       0       0       0
  4652 ;;      Temps:          0       0       0       0       0
  4653 ;;      Totals:         0       5       0       0       0
  4654 ;;Total ram usage:        5 bytes
  4655 ;; Hardware stack levels used: 1
  4656 ;; Hardware stack levels required when called: 4
  4657 ;; This function calls:
  4658 ;;		_vfpfcnvrt
  4659 ;; This function is called by:
  4660 ;;		_sprintf
  4661 ;; This function uses a non-reentrant model
  4662 ;;
  4663                           
  4664     0CBB                     _vfprintf:	
  4665                           ;psect for function _vfprintf
  4666                           
  4667     0CBB                     l2623:	
  4668                           ;incstack = 0
  4669 ;; using string table level
  4670                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4671                           
  4672                           
  4673                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  4674     0CBB  1283               	bcf	3,5	;RP0=0, select bank0
  4675     0CBC  1303               	bcf	3,6	;RP1=0, select bank0
  4676     0CBD  0838               	movf	vfprintf@fmt,w
  4677     0CBE  00BA               	movwf	vfprintf@cfmt
  4678                           
  4679                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  4680     0CBF  2CCD               	goto	l2627
  4681     0CC0                     l2625:
  4682                           
  4683                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  4684     0CC0  0836               	movf	vfprintf@fp,w
  4685     0CC1  00A9               	movwf	vfpfcnvrt@fp
  4686     0CC2  0837               	movf	vfprintf@fp+1,w
  4687     0CC3  00AA               	movwf	vfpfcnvrt@fp+1
  4688     0CC4  303A               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  4689     0CC5  00AB               	movwf	vfpfcnvrt@fmt
  4690     0CC6  0839               	movf	vfprintf@ap,w
  4691     0CC7  00AC               	movwf	vfpfcnvrt@ap
  4692     0CC8  120A  118A  2144  120A  158A  	fcall	_vfpfcnvrt
  4693     0CCD                     l2627:
  4694                           
  4695                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  4696     0CCD  1283               	bcf	3,5	;RP0=0, select bank0
  4697     0CCE  1303               	bcf	3,6	;RP1=0, select bank0
  4698     0CCF  083A               	movf	vfprintf@cfmt,w
  4699     0CD0  0084               	movwf	4
  4700     0CD1  120A  118A  2413  120A  158A  	fcall	stringdir
  4701     0CD6  3A00               	xorlw	0
  4702     0CD7  1D03               	skipz
  4703     0CD8  2CDA               	goto	u2611
  4704     0CD9  2CDB               	goto	u2610
  4705     0CDA                     u2611:
  4706     0CDA  2CC0               	goto	l2625
  4707     0CDB                     u2610:
  4708     0CDB                     l2629:
  4709                           
  4710                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  4711     0CDB  01B6               	clrf	?_vfprintf
  4712     0CDC  01B7               	clrf	?_vfprintf+1
  4713     0CDD                     l981:
  4714     0CDD  0008               	return
  4715     0CDE                     __end_of_vfprintf:
  4716                           
  4717                           	psect	text29
  4718     0144                     __ptext29:	
  4719 ;; *************** function _vfpfcnvrt *****************
  4720 ;; Defined at:
  4721 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  4722 ;; Parameters:    Size  Location     Type
  4723 ;;  fp              2    9[BANK0 ] PTR struct _IO_FILE
  4724 ;;		 -> sprintf@f(11), 
  4725 ;;  fmt             1   11[BANK0 ] PTR PTR unsigned char 
  4726 ;;		 -> vfprintf@cfmt(1), 
  4727 ;;  ap              1   12[BANK0 ] PTR PTR void 
  4728 ;;		 -> sprintf@ap(1), 
  4729 ;; Auto vars:     Size  Location     Type
  4730 ;;  convarg         4   17[BANK0 ] struct .
  4731 ;;  c               1   21[BANK0 ] unsigned char 
  4732 ;;  cp              1   16[BANK0 ] PTR unsigned char 
  4733 ;;		 -> STR_16(3), STR_11(3), 
  4734 ;;  done            1   15[BANK0 ] _Bool 
  4735 ;; Return value:  Size  Location     Type
  4736 ;;                  1    wreg      void 
  4737 ;; Registers used:
  4738 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4739 ;; Tracked objects:
  4740 ;;		On entry : 0/0
  4741 ;;		On exit  : 0/0
  4742 ;;		Unchanged: 0/0
  4743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4744 ;;      Params:         0       4       0       0       0
  4745 ;;      Locals:         0       7       0       0       0
  4746 ;;      Temps:          0       2       0       0       0
  4747 ;;      Totals:         0      13       0       0       0
  4748 ;;Total ram usage:       13 bytes
  4749 ;; Hardware stack levels used: 1
  4750 ;; Hardware stack levels required when called: 3
  4751 ;; This function calls:
  4752 ;;		___awdiv
  4753 ;;		___awmod
  4754 ;;		_abs
  4755 ;;		_fputc
  4756 ;; This function is called by:
  4757 ;;		_vfprintf
  4758 ;; This function uses a non-reentrant model
  4759 ;;
  4760                           
  4761     0144                     _vfpfcnvrt:	
  4762                           ;psect for function _vfpfcnvrt
  4763                           
  4764     0144                     l2527:	
  4765                           ;incstack = 0
  4766 ;; using string table level
  4767                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4768                           
  4769                           
  4770                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  4771     0144  1283               	bcf	3,5	;RP0=0, select bank0
  4772     0145  1303               	bcf	3,6	;RP1=0, select bank0
  4773     0146  082B               	movf	vfpfcnvrt@fmt,w
  4774     0147  0084               	movwf	4
  4775     0148  1383               	bcf	3,7	;select IRP bank0
  4776     0149  0800               	movf	0,w
  4777     014A  0084               	movwf	4
  4778     014B  120A  118A  2413  120A  118A  	fcall	stringdir
  4779     0150  3A25               	xorlw	37
  4780     0151  1D03               	skipz
  4781     0152  2954               	goto	u2391
  4782     0153  2955               	goto	u2390
  4783     0154                     u2391:
  4784     0154  2A19               	goto	l2573
  4785     0155                     u2390:
  4786     0155                     l2529:
  4787                           
  4788                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  4789     0155  082B               	movf	vfpfcnvrt@fmt,w
  4790     0156  0084               	movwf	4
  4791     0157  3001               	movlw	1
  4792     0158  0780               	addwf	0,f
  4793     0159                     l2531:
  4794                           
  4795                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  4796     0159  1683               	bsf	3,5	;RP0=1, select bank1
  4797     015A  1303               	bcf	3,6	;RP1=0, select bank1
  4798     015B  01C3               	clrf	_width^(0+128)
  4799     015C  01C4               	clrf	(_width+1)^(0+128)
  4800     015D  3000               	movlw	0
  4801     015E  1283               	bcf	3,5	;RP0=0, select bank0
  4802     015F  1303               	bcf	3,6	;RP1=0, select bank0
  4803     0160  00E4               	movwf	_flags
  4804     0161                     l2533:
  4805                           
  4806                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  4807     0161  30FF               	movlw	255
  4808     0162  1683               	bsf	3,5	;RP0=1, select bank1
  4809     0163  1303               	bcf	3,6	;RP1=0, select bank1
  4810     0164  00C5               	movwf	_prec^(0+128)
  4811     0165  30FF               	movlw	255
  4812     0166  00C6               	movwf	(_prec^(0+128)+1)
  4813     0167                     l2535:
  4814                           
  4815                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  4816     0167  1283               	bcf	3,5	;RP0=0, select bank0
  4817     0168  1303               	bcf	3,6	;RP1=0, select bank0
  4818     0169  082B               	movf	vfpfcnvrt@fmt,w
  4819     016A  0084               	movwf	4
  4820     016B  0800               	movf	0,w
  4821     016C  00B0               	movwf	vfpfcnvrt@cp
  4822     016D                     l2537:
  4823                           
  4824                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  4825     016D  0830               	movf	vfpfcnvrt@cp,w
  4826     016E  0084               	movwf	4
  4827     016F  120A  118A  2413  120A  118A  	fcall	stringdir
  4828     0174  3A64               	xorlw	100
  4829     0175  1903               	skipnz
  4830     0176  2978               	goto	u2401
  4831     0177  2979               	goto	u2400
  4832     0178                     u2401:
  4833     0178  2985               	goto	l2541
  4834     0179                     u2400:
  4835     0179                     l2539:
  4836     0179  0830               	movf	vfpfcnvrt@cp,w
  4837     017A  0084               	movwf	4
  4838     017B  120A  118A  2413  120A  118A  	fcall	stringdir
  4839     0180  3A69               	xorlw	105
  4840     0181  1D03               	skipz
  4841     0182  2984               	goto	u2411
  4842     0183  2985               	goto	u2410
  4843     0184                     u2411:
  4844     0184  2A11               	goto	l2569
  4845     0185                     u2410:
  4846     0185                     l2541:
  4847                           
  4848                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  4849     0185  082C               	movf	vfpfcnvrt@ap,w
  4850     0186  0084               	movwf	4
  4851     0187  0800               	movf	0,w
  4852     0188  00FF               	movwf	btemp+1
  4853     0189  3002               	movlw	2
  4854     018A  0780               	addwf	0,f
  4855     018B  087F               	movf	btemp+1,w
  4856     018C  0084               	movwf	4
  4857     018D  0800               	movf	0,w
  4858     018E  00B1               	movwf	vfpfcnvrt@convarg
  4859     018F  0A84               	incf	4,f
  4860     0190  0800               	movf	0,w
  4861     0191  00B2               	movwf	vfpfcnvrt@convarg+1
  4862     0192                     l2543:
  4863                           
  4864                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  4865     0192  082B               	movf	vfpfcnvrt@fmt,w
  4866     0193  0084               	movwf	4
  4867     0194  0830               	movf	vfpfcnvrt@cp,w
  4868     0195  3E01               	addlw	1
  4869     0196  0080               	movwf	0
  4870     0197                     l2545:
  4871                           
  4872                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  4873     0197  3020               	movlw	32
  4874     0198  00B5               	movwf	vfpfcnvrt@c
  4875     0199                     l2547:
  4876                           
  4877                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  4878     0199  1BB2               	btfsc	vfpfcnvrt@convarg+1,7
  4879     019A  299C               	goto	u2421
  4880     019B  299E               	goto	u2420
  4881     019C                     u2421:
  4882     019C  3001               	movlw	1
  4883     019D  299F               	goto	u2430
  4884     019E                     u2420:
  4885     019E  3000               	movlw	0
  4886     019F                     u2430:
  4887     019F  00AF               	movwf	vfpfcnvrt@done
  4888     01A0                     l2549:
  4889                           
  4890                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  4891     01A0  3001               	movlw	1
  4892     01A1  02B5               	subwf	vfpfcnvrt@c,f
  4893     01A2  0835               	movf	vfpfcnvrt@c,w
  4894     01A3  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  4895     01A4  0084               	movwf	4
  4896     01A5  300A               	movlw	10
  4897     01A6  00F2               	movwf	___awmod@divisor
  4898     01A7  3000               	movlw	0
  4899     01A8  00F3               	movwf	___awmod@divisor+1
  4900     01A9  0832               	movf	vfpfcnvrt@convarg+1,w
  4901     01AA  00F5               	movwf	___awmod@dividend+1
  4902     01AB  0831               	movf	vfpfcnvrt@convarg,w
  4903     01AC  00F4               	movwf	___awmod@dividend
  4904     01AD  120A  118A  26F6  120A  118A  	fcall	___awmod
  4905     01B2  0873               	movf	?___awmod+1,w
  4906     01B3  00F9               	movwf	abs@a+1
  4907     01B4  0872               	movf	?___awmod,w
  4908     01B5  00F8               	movwf	abs@a
  4909     01B6  120A  158A  23C2  120A  118A  	fcall	_abs
  4910     01BB  0878               	movf	?_abs,w
  4911     01BC  3E30               	addlw	48
  4912     01BD  1383               	bcf	3,7	;select IRP bank1
  4913     01BE  0080               	movwf	0
  4914     01BF                     l2551:
  4915                           
  4916                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  4917     01BF  300A               	movlw	10
  4918     01C0  00F2               	movwf	___awdiv@divisor
  4919     01C1  3000               	movlw	0
  4920     01C2  00F3               	movwf	___awdiv@divisor+1
  4921     01C3  1283               	bcf	3,5	;RP0=0, select bank0
  4922     01C4  1303               	bcf	3,6	;RP1=0, select bank0
  4923     01C5  0832               	movf	vfpfcnvrt@convarg+1,w
  4924     01C6  00F5               	movwf	___awdiv@dividend+1
  4925     01C7  0831               	movf	vfpfcnvrt@convarg,w
  4926     01C8  00F4               	movwf	___awdiv@dividend
  4927     01C9  120A  118A  25D6  120A  118A  	fcall	___awdiv
  4928     01CE  0873               	movf	?___awdiv+1,w
  4929     01CF  1283               	bcf	3,5	;RP0=0, select bank0
  4930     01D0  1303               	bcf	3,6	;RP1=0, select bank0
  4931     01D1  00B2               	movwf	vfpfcnvrt@convarg+1
  4932     01D2  0872               	movf	?___awdiv,w
  4933     01D3  00B1               	movwf	vfpfcnvrt@convarg
  4934     01D4                     l2553:
  4935                           
  4936                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  4937     01D4  0831               	movf	vfpfcnvrt@convarg,w
  4938     01D5  0432               	iorwf	vfpfcnvrt@convarg+1,w
  4939     01D6  1903               	btfsc	3,2
  4940     01D7  29D9               	goto	u2441
  4941     01D8  29DA               	goto	u2440
  4942     01D9                     u2441:
  4943     01D9  29DF               	goto	l2557
  4944     01DA                     u2440:
  4945     01DA                     l2555:
  4946     01DA  0835               	movf	vfpfcnvrt@c,w
  4947     01DB  1D03               	btfss	3,2
  4948     01DC  29DE               	goto	u2451
  4949     01DD  29DF               	goto	u2450
  4950     01DE                     u2451:
  4951     01DE  29A0               	goto	l2549
  4952     01DF                     u2450:
  4953     01DF                     l2557:
  4954                           
  4955                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  4956     01DF  0835               	movf	vfpfcnvrt@c,w
  4957     01E0  1903               	btfsc	3,2
  4958     01E1  29E3               	goto	u2461
  4959     01E2  29E4               	goto	u2460
  4960     01E3                     u2461:
  4961     01E3  2A0A               	goto	l2567
  4962     01E4                     u2460:
  4963     01E4                     l2559:
  4964     01E4  082F               	movf	vfpfcnvrt@done,w
  4965     01E5  1903               	btfsc	3,2
  4966     01E6  29E8               	goto	u2471
  4967     01E7  29E9               	goto	u2470
  4968     01E8                     u2471:
  4969     01E8  2A0A               	goto	l2567
  4970     01E9                     u2470:
  4971     01E9                     l2561:
  4972                           
  4973                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  4974     01E9  3001               	movlw	1
  4975     01EA  02B5               	subwf	vfpfcnvrt@c,f
  4976     01EB  0835               	movf	vfpfcnvrt@c,w
  4977     01EC  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  4978     01ED  0084               	movwf	4
  4979     01EE  302D               	movlw	45
  4980     01EF  1383               	bcf	3,7	;select IRP bank1
  4981     01F0  0080               	movwf	0
  4982     01F1  2A0A               	goto	l2567
  4983     01F2                     l2563:
  4984                           
  4985                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  4986     01F2  0835               	movf	vfpfcnvrt@c,w
  4987     01F3  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  4988     01F4  0084               	movwf	4
  4989     01F5  1383               	bcf	3,7	;select IRP bank1
  4990     01F6  0800               	movf	0,w
  4991     01F7  00AD               	movwf	??_vfpfcnvrt
  4992     01F8  01AE               	clrf	??_vfpfcnvrt+1
  4993     01F9  082D               	movf	??_vfpfcnvrt,w
  4994     01FA  00F2               	movwf	fputc@c
  4995     01FB  082E               	movf	??_vfpfcnvrt+1,w
  4996     01FC  00F3               	movwf	fputc@c+1
  4997     01FD  0829               	movf	vfpfcnvrt@fp,w
  4998     01FE  00F4               	movwf	fputc@fp
  4999     01FF  082A               	movf	vfpfcnvrt@fp+1,w
  5000     0200  00F5               	movwf	fputc@fp+1
  5001     0201  120A  118A  2233  120A  118A  	fcall	_fputc
  5002     0206                     l2565:
  5003     0206  3001               	movlw	1
  5004     0207  1283               	bcf	3,5	;RP0=0, select bank0
  5005     0208  1303               	bcf	3,6	;RP1=0, select bank0
  5006     0209  07B5               	addwf	vfpfcnvrt@c,f
  5007     020A                     l2567:
  5008                           
  5009                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  5010     020A  3020               	movlw	32
  5011     020B  0635               	xorwf	vfpfcnvrt@c,w
  5012     020C  1D03               	btfss	3,2
  5013     020D  2A0F               	goto	u2481
  5014     020E  2A10               	goto	u2480
  5015     020F                     u2481:
  5016     020F  29F2               	goto	l2563
  5017     0210                     u2480:
  5018     0210  2A32               	goto	l975
  5019     0211                     l2569:
  5020                           
  5021                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  5022     0211  1283               	bcf	3,5	;RP0=0, select bank0
  5023     0212  1303               	bcf	3,6	;RP1=0, select bank0
  5024     0213  082B               	movf	vfpfcnvrt@fmt,w
  5025     0214  0084               	movwf	4
  5026     0215  3001               	movlw	1
  5027     0216  1383               	bcf	3,7	;select IRP bank0
  5028     0217  0780               	addwf	0,f
  5029     0218  2A32               	goto	l975
  5030     0219                     l2573:
  5031                           
  5032                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  5033     0219  082B               	movf	vfpfcnvrt@fmt,w
  5034     021A  0084               	movwf	4
  5035     021B  0800               	movf	0,w
  5036     021C  0084               	movwf	4
  5037     021D  120A  118A  2413  120A  118A  	fcall	stringdir
  5038     0222  00AD               	movwf	??_vfpfcnvrt
  5039     0223  01AE               	clrf	??_vfpfcnvrt+1
  5040     0224  082D               	movf	??_vfpfcnvrt,w
  5041     0225  00F2               	movwf	fputc@c
  5042     0226  082E               	movf	??_vfpfcnvrt+1,w
  5043     0227  00F3               	movwf	fputc@c+1
  5044     0228  0829               	movf	vfpfcnvrt@fp,w
  5045     0229  00F4               	movwf	fputc@fp
  5046     022A  082A               	movf	vfpfcnvrt@fp+1,w
  5047     022B  00F5               	movwf	fputc@fp+1
  5048     022C  120A  118A  2233  120A  118A  	fcall	_fputc
  5049     0231  2A11               	goto	l2569
  5050     0232                     l975:
  5051     0232  0008               	return
  5052     0233                     __end_of_vfpfcnvrt:
  5053                           
  5054                           	psect	text30
  5055     0233                     __ptext30:	
  5056 ;; *************** function _fputc *****************
  5057 ;; Defined at:
  5058 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_fputc.c"
  5059 ;; Parameters:    Size  Location     Type
  5060 ;;  c               2    2[COMMON] int 
  5061 ;;  fp              2    4[COMMON] PTR struct _IO_FILE
  5062 ;;		 -> sprintf@f(11), 
  5063 ;; Auto vars:     Size  Location     Type
  5064 ;;		None
  5065 ;; Return value:  Size  Location     Type
  5066 ;;                  2    2[COMMON] int 
  5067 ;; Registers used:
  5068 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5069 ;; Tracked objects:
  5070 ;;		On entry : 0/0
  5071 ;;		On exit  : 0/0
  5072 ;;		Unchanged: 0/0
  5073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5074 ;;      Params:         4       0       0       0       0
  5075 ;;      Locals:         0       0       0       0       0
  5076 ;;      Temps:          0       9       0       0       0
  5077 ;;      Totals:         4       9       0       0       0
  5078 ;;Total ram usage:       13 bytes
  5079 ;; Hardware stack levels used: 1
  5080 ;; Hardware stack levels required when called: 2
  5081 ;; This function calls:
  5082 ;;		_putch
  5083 ;; This function is called by:
  5084 ;;		_vfpfcnvrt
  5085 ;; This function uses a non-reentrant model
  5086 ;;
  5087                           
  5088     0233                     _fputc:	
  5089                           ;psect for function _fputc
  5090                           
  5091     0233                     l1779:	
  5092                           ;incstack = 0
  5093                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5094                           
  5095     0233  0874               	movf	fputc@fp,w
  5096     0234  0475               	iorwf	fputc@fp+1,w
  5097     0235  1903               	btfsc	3,2
  5098     0236  2A38               	goto	u1271
  5099     0237  2A39               	goto	u1270
  5100     0238                     u1271:
  5101     0238  2A3F               	goto	l1783
  5102     0239                     u1270:
  5103     0239                     l1781:
  5104     0239  0874               	movf	fputc@fp,w
  5105     023A  0475               	iorwf	fputc@fp+1,w
  5106     023B  1D03               	btfss	3,2
  5107     023C  2A3E               	goto	u1281
  5108     023D  2A3F               	goto	u1280
  5109     023E                     u1281:
  5110     023E  2A46               	goto	l1785
  5111     023F                     u1280:
  5112     023F                     l1783:
  5113     023F  0872               	movf	fputc@c,w
  5114     0240  120A  118A  27FE  120A  118A  	fcall	_putch
  5115     0245  2AD2               	goto	l1000
  5116     0246                     l1785:
  5117     0246  0874               	movf	fputc@fp,w
  5118     0247  3E09               	addlw	9
  5119     0248  1283               	bcf	3,5	;RP0=0, select bank0
  5120     0249  1303               	bcf	3,6	;RP1=0, select bank0
  5121     024A  00A0               	movwf	??_fputc
  5122     024B  0875               	movf	fputc@fp+1,w
  5123     024C  1803               	skipnc
  5124     024D  3E01               	addlw	1
  5125     024E  3E00               	addlw	0
  5126     024F  00A1               	movwf	??_fputc+1
  5127     0250  0820               	movf	??_fputc,w
  5128     0251  0084               	movwf	4
  5129     0252  1783               	bsf	3,7
  5130     0253  1C21               	btfss	??_fputc+1,0
  5131     0254  1383               	bcf	3,7
  5132     0255  0800               	movf	0,w
  5133     0256  00A2               	movwf	??_fputc+2
  5134     0257  0A84               	incf	4,f
  5135     0258  0800               	movf	0,w
  5136     0259  00A3               	movwf	??_fputc+3
  5137     025A  0822               	movf	??_fputc+2,w
  5138     025B  0423               	iorwf	??_fputc+3,w
  5139     025C  1903               	btfsc	3,2
  5140     025D  2A5F               	goto	u1291
  5141     025E  2A60               	goto	u1290
  5142     025F                     u1291:
  5143     025F  2A92               	goto	l1789
  5144     0260                     u1290:
  5145     0260                     l1787:
  5146     0260  0874               	movf	fputc@fp,w
  5147     0261  3E09               	addlw	9
  5148     0262  00A0               	movwf	??_fputc
  5149     0263  0875               	movf	fputc@fp+1,w
  5150     0264  1803               	skipnc
  5151     0265  3E01               	addlw	1
  5152     0266  3E00               	addlw	0
  5153     0267  00A1               	movwf	??_fputc+1
  5154     0268  0820               	movf	??_fputc,w
  5155     0269  0084               	movwf	4
  5156     026A  1783               	bsf	3,7
  5157     026B  1C21               	btfss	??_fputc+1,0
  5158     026C  1383               	bcf	3,7
  5159     026D  0800               	movf	0,w
  5160     026E  00A2               	movwf	??_fputc+2
  5161     026F  0A84               	incf	4,f
  5162     0270  0800               	movf	0,w
  5163     0271  00A3               	movwf	??_fputc+3
  5164     0272  0874               	movf	fputc@fp,w
  5165     0273  3E02               	addlw	2
  5166     0274  00A4               	movwf	??_fputc+4
  5167     0275  0875               	movf	fputc@fp+1,w
  5168     0276  1803               	skipnc
  5169     0277  3E01               	addlw	1
  5170     0278  3E00               	addlw	0
  5171     0279  00A5               	movwf	??_fputc+5
  5172     027A  0824               	movf	??_fputc+4,w
  5173     027B  0084               	movwf	4
  5174     027C  1783               	bsf	3,7
  5175     027D  1C25               	btfss	??_fputc+5,0
  5176     027E  1383               	bcf	3,7
  5177     027F  0800               	movf	0,w
  5178     0280  00A6               	movwf	??_fputc+6
  5179     0281  0A84               	incf	4,f
  5180     0282  0800               	movf	0,w
  5181     0283  00A7               	movwf	??_fputc+7
  5182     0284  0827               	movf	??_fputc+7,w
  5183     0285  3A80               	xorlw	128
  5184     0286  00A8               	movwf	??_fputc+8
  5185     0287  0823               	movf	??_fputc+3,w
  5186     0288  3A80               	xorlw	128
  5187     0289  0228               	subwf	??_fputc+8,w
  5188     028A  1D03               	skipz
  5189     028B  2A8E               	goto	u1305
  5190     028C  0822               	movf	??_fputc+2,w
  5191     028D  0226               	subwf	??_fputc+6,w
  5192     028E                     u1305:
  5193     028E  1803               	skipnc
  5194     028F  2A91               	goto	u1301
  5195     0290  2A92               	goto	u1300
  5196     0291                     u1301:
  5197     0291  2AD2               	goto	l1000
  5198     0292                     u1300:
  5199     0292                     l1789:
  5200     0292  0874               	movf	fputc@fp,w
  5201     0293  0084               	movwf	4
  5202     0294  1783               	bsf	3,7
  5203     0295  1C75               	btfss	fputc@fp+1,0
  5204     0296  1383               	bcf	3,7
  5205     0297  0800               	movf	0,w
  5206     0298  1283               	bcf	3,5	;RP0=0, select bank0
  5207     0299  1303               	bcf	3,6	;RP1=0, select bank0
  5208     029A  00A0               	movwf	??_fputc
  5209     029B  0A84               	incf	4,f
  5210     029C  0800               	movf	0,w
  5211     029D  00A1               	movwf	??_fputc+1
  5212     029E  0874               	movf	fputc@fp,w
  5213     029F  3E02               	addlw	2
  5214     02A0  00A2               	movwf	??_fputc+2
  5215     02A1  0875               	movf	fputc@fp+1,w
  5216     02A2  1803               	skipnc
  5217     02A3  3E01               	addlw	1
  5218     02A4  3E00               	addlw	0
  5219     02A5  00A3               	movwf	??_fputc+3
  5220     02A6  0822               	movf	??_fputc+2,w
  5221     02A7  0084               	movwf	4
  5222     02A8  1783               	bsf	3,7
  5223     02A9  1C23               	btfss	??_fputc+3,0
  5224     02AA  1383               	bcf	3,7
  5225     02AB  0800               	movf	0,w
  5226     02AC  0720               	addwf	??_fputc,w
  5227     02AD  00A5               	movwf	??_fputc+5
  5228     02AE  0821               	movf	??_fputc+1,w
  5229     02AF  00A4               	movwf	??_fputc+4
  5230     02B0  1803               	skipnc
  5231     02B1  0AA4               	incf	??_fputc+4,f
  5232     02B2  1F80               	btfss	0,7
  5233     02B3  2AB5               	goto	u1310
  5234     02B4  03A4               	decf	??_fputc+4,f
  5235     02B5                     u1310:
  5236     02B5  1283               	bcf	3,5	;RP0=0, select bank0
  5237     02B6  1303               	bcf	3,6	;RP1=0, select bank0
  5238     02B7  0824               	movf	??_fputc+4,w
  5239     02B8  00A6               	movwf	??_fputc+6
  5240     02B9  0825               	movf	??_fputc+5,w
  5241     02BA  0084               	movwf	4
  5242     02BB  1783               	bsf	3,7
  5243     02BC  1C26               	btfss	??_fputc+6,0
  5244     02BD  1383               	bcf	3,7
  5245     02BE  0872               	movf	fputc@c,w
  5246     02BF  0080               	movwf	0
  5247     02C0  0874               	movf	fputc@fp,w
  5248     02C1  3E02               	addlw	2
  5249     02C2  00A0               	movwf	??_fputc
  5250     02C3  0875               	movf	fputc@fp+1,w
  5251     02C4  1803               	skipnc
  5252     02C5  3E01               	addlw	1
  5253     02C6  3E00               	addlw	0
  5254     02C7  00A1               	movwf	??_fputc+1
  5255     02C8  0820               	movf	??_fputc,w
  5256     02C9  0084               	movwf	4
  5257     02CA  1783               	bsf	3,7
  5258     02CB  1C21               	btfss	??_fputc+1,0
  5259     02CC  1383               	bcf	3,7
  5260     02CD  3001               	movlw	1
  5261     02CE  0780               	addwf	0,f
  5262     02CF  0A84               	incf	4,f
  5263     02D0  1803               	skipnc
  5264     02D1  0A80               	incf	0,f
  5265     02D2                     l1000:
  5266     02D2  0008               	return
  5267     02D3                     __end_of_fputc:
  5268                           
  5269                           	psect	text31
  5270     07FE                     __ptext31:	
  5271 ;; *************** function _putch *****************
  5272 ;; Defined at:
  5273 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\putch.c"
  5274 ;; Parameters:    Size  Location     Type
  5275 ;;  c               1    wreg     unsigned char 
  5276 ;; Auto vars:     Size  Location     Type
  5277 ;;  c               1    0[COMMON] unsigned char 
  5278 ;; Return value:  Size  Location     Type
  5279 ;;                  1    wreg      void 
  5280 ;; Registers used:
  5281 ;;		wreg
  5282 ;; Tracked objects:
  5283 ;;		On entry : 0/0
  5284 ;;		On exit  : 0/0
  5285 ;;		Unchanged: 0/0
  5286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5287 ;;      Params:         0       0       0       0       0
  5288 ;;      Locals:         0       0       0       0       0
  5289 ;;      Temps:          0       0       0       0       0
  5290 ;;      Totals:         0       0       0       0       0
  5291 ;;Total ram usage:        0 bytes
  5292 ;; Hardware stack levels used: 1
  5293 ;; Hardware stack levels required when called: 1
  5294 ;; This function calls:
  5295 ;;		Nothing
  5296 ;; This function is called by:
  5297 ;;		_fputc
  5298 ;; This function uses a non-reentrant model
  5299 ;;
  5300                           
  5301     07FE                     _putch:	
  5302                           ;psect for function _putch
  5303                           
  5304     07FE                     l1011:	
  5305                           ;incstack = 0
  5306                           ; Regs used in _putch: [wreg]
  5307                           
  5308     07FE  0008               	return
  5309     07FF                     __end_of_putch:
  5310                           
  5311                           	psect	text32
  5312     0BC2                     __ptext32:	
  5313 ;; *************** function _abs *****************
  5314 ;; Defined at:
  5315 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\abs.c"
  5316 ;; Parameters:    Size  Location     Type
  5317 ;;  a               2    8[COMMON] int 
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;		None
  5320 ;; Return value:  Size  Location     Type
  5321 ;;                  2    8[COMMON] int 
  5322 ;; Registers used:
  5323 ;;		wreg, status,2, status,0
  5324 ;; Tracked objects:
  5325 ;;		On entry : 0/0
  5326 ;;		On exit  : 0/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5329 ;;      Params:         2       0       0       0       0
  5330 ;;      Locals:         0       0       0       0       0
  5331 ;;      Temps:          0       2       0       0       0
  5332 ;;      Totals:         2       2       0       0       0
  5333 ;;Total ram usage:        4 bytes
  5334 ;; Hardware stack levels used: 1
  5335 ;; Hardware stack levels required when called: 1
  5336 ;; This function calls:
  5337 ;;		Nothing
  5338 ;; This function is called by:
  5339 ;;		_vfpfcnvrt
  5340 ;; This function uses a non-reentrant model
  5341 ;;
  5342                           
  5343     0BC2                     _abs:	
  5344                           ;psect for function _abs
  5345                           
  5346     0BC2                     l2431:	
  5347                           ;incstack = 0
  5348                           ; Regs used in _abs: [wreg+status,2+status,0]
  5349                           
  5350     0BC2  1BF9               	btfsc	abs@a+1,7
  5351     0BC3  2BC5               	goto	u2221
  5352     0BC4  2BC6               	goto	u2220
  5353     0BC5                     u2221:
  5354     0BC5  2BC7               	goto	l2435
  5355     0BC6                     u2220:
  5356     0BC6                     l2433:
  5357     0BC6  2BD4               	goto	l988
  5358     0BC7                     l2435:
  5359     0BC7  0978               	comf	abs@a,w
  5360     0BC8  1283               	bcf	3,5	;RP0=0, select bank0
  5361     0BC9  1303               	bcf	3,6	;RP1=0, select bank0
  5362     0BCA  00A0               	movwf	??_abs
  5363     0BCB  0979               	comf	abs@a+1,w
  5364     0BCC  00A1               	movwf	??_abs+1
  5365     0BCD  0AA0               	incf	??_abs,f
  5366     0BCE  1903               	skipnz
  5367     0BCF  0AA1               	incf	??_abs+1,f
  5368     0BD0  0820               	movf	??_abs,w
  5369     0BD1  00F8               	movwf	?_abs
  5370     0BD2  0821               	movf	??_abs+1,w
  5371     0BD3  00F9               	movwf	?_abs+1
  5372     0BD4                     l988:
  5373     0BD4  0008               	return
  5374     0BD5                     __end_of_abs:
  5375                           
  5376                           	psect	text33
  5377     06F6                     __ptext33:	
  5378 ;; *************** function ___awmod *****************
  5379 ;; Defined at:
  5380 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awmod.c"
  5381 ;; Parameters:    Size  Location     Type
  5382 ;;  divisor         2    2[COMMON] int 
  5383 ;;  dividend        2    4[COMMON] int 
  5384 ;; Auto vars:     Size  Location     Type
  5385 ;;  sign            1    7[COMMON] unsigned char 
  5386 ;;  counter         1    6[COMMON] unsigned char 
  5387 ;; Return value:  Size  Location     Type
  5388 ;;                  2    2[COMMON] int 
  5389 ;; Registers used:
  5390 ;;		wreg, status,2, status,0
  5391 ;; Tracked objects:
  5392 ;;		On entry : 0/0
  5393 ;;		On exit  : 0/0
  5394 ;;		Unchanged: 0/0
  5395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5396 ;;      Params:         4       0       0       0       0
  5397 ;;      Locals:         2       0       0       0       0
  5398 ;;      Temps:          0       0       0       0       0
  5399 ;;      Totals:         6       0       0       0       0
  5400 ;;Total ram usage:        6 bytes
  5401 ;; Hardware stack levels used: 1
  5402 ;; Hardware stack levels required when called: 1
  5403 ;; This function calls:
  5404 ;;		Nothing
  5405 ;; This function is called by:
  5406 ;;		_vfpfcnvrt
  5407 ;; This function uses a non-reentrant model
  5408 ;;
  5409                           
  5410     06F6                     ___awmod:	
  5411                           ;psect for function ___awmod
  5412                           
  5413     06F6                     l1741:	
  5414                           ;incstack = 0
  5415                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5416                           
  5417     06F6  01F7               	clrf	___awmod@sign
  5418     06F7                     l1743:
  5419     06F7  1FF5               	btfss	___awmod@dividend+1,7
  5420     06F8  2EFA               	goto	u1181
  5421     06F9  2EFB               	goto	u1180
  5422     06FA                     u1181:
  5423     06FA  2F02               	goto	l1749
  5424     06FB                     u1180:
  5425     06FB                     l1745:
  5426     06FB  09F4               	comf	___awmod@dividend,f
  5427     06FC  09F5               	comf	___awmod@dividend+1,f
  5428     06FD  0AF4               	incf	___awmod@dividend,f
  5429     06FE  1903               	skipnz
  5430     06FF  0AF5               	incf	___awmod@dividend+1,f
  5431     0700                     l1747:
  5432     0700  3001               	movlw	1
  5433     0701  00F7               	movwf	___awmod@sign
  5434     0702                     l1749:
  5435     0702  1FF3               	btfss	___awmod@divisor+1,7
  5436     0703  2F05               	goto	u1191
  5437     0704  2F06               	goto	u1190
  5438     0705                     u1191:
  5439     0705  2F0B               	goto	l1753
  5440     0706                     u1190:
  5441     0706                     l1751:
  5442     0706  09F2               	comf	___awmod@divisor,f
  5443     0707  09F3               	comf	___awmod@divisor+1,f
  5444     0708  0AF2               	incf	___awmod@divisor,f
  5445     0709  1903               	skipnz
  5446     070A  0AF3               	incf	___awmod@divisor+1,f
  5447     070B                     l1753:
  5448     070B  0872               	movf	___awmod@divisor,w
  5449     070C  0473               	iorwf	___awmod@divisor+1,w
  5450     070D  1903               	btfsc	3,2
  5451     070E  2F10               	goto	u1201
  5452     070F  2F11               	goto	u1200
  5453     0710                     u1201:
  5454     0710  2F3E               	goto	l1771
  5455     0711                     u1200:
  5456     0711                     l1755:
  5457     0711  3001               	movlw	1
  5458     0712  00F6               	movwf	___awmod@counter
  5459     0713  2F1D               	goto	l1761
  5460     0714                     l1757:
  5461     0714  3001               	movlw	1
  5462     0715                     u1215:
  5463     0715  1003               	clrc
  5464     0716  0DF2               	rlf	___awmod@divisor,f
  5465     0717  0DF3               	rlf	___awmod@divisor+1,f
  5466     0718  3EFF               	addlw	-1
  5467     0719  1D03               	skipz
  5468     071A  2F15               	goto	u1215
  5469     071B                     l1759:
  5470     071B  3001               	movlw	1
  5471     071C  07F6               	addwf	___awmod@counter,f
  5472     071D                     l1761:
  5473     071D  1FF3               	btfss	___awmod@divisor+1,7
  5474     071E  2F20               	goto	u1221
  5475     071F  2F21               	goto	u1220
  5476     0720                     u1221:
  5477     0720  2F14               	goto	l1757
  5478     0721                     u1220:
  5479     0721                     l1763:
  5480     0721  0873               	movf	___awmod@divisor+1,w
  5481     0722  0275               	subwf	___awmod@dividend+1,w
  5482     0723  1D03               	skipz
  5483     0724  2F27               	goto	u1235
  5484     0725  0872               	movf	___awmod@divisor,w
  5485     0726  0274               	subwf	___awmod@dividend,w
  5486     0727                     u1235:
  5487     0727  1C03               	skipc
  5488     0728  2F2A               	goto	u1231
  5489     0729  2F2B               	goto	u1230
  5490     072A                     u1231:
  5491     072A  2F31               	goto	l1767
  5492     072B                     u1230:
  5493     072B                     l1765:
  5494     072B  0872               	movf	___awmod@divisor,w
  5495     072C  02F4               	subwf	___awmod@dividend,f
  5496     072D  0873               	movf	___awmod@divisor+1,w
  5497     072E  1C03               	skipc
  5498     072F  03F5               	decf	___awmod@dividend+1,f
  5499     0730  02F5               	subwf	___awmod@dividend+1,f
  5500     0731                     l1767:
  5501     0731  3001               	movlw	1
  5502     0732                     u1245:
  5503     0732  1003               	clrc
  5504     0733  0CF3               	rrf	___awmod@divisor+1,f
  5505     0734  0CF2               	rrf	___awmod@divisor,f
  5506     0735  3EFF               	addlw	-1
  5507     0736  1D03               	skipz
  5508     0737  2F32               	goto	u1245
  5509     0738                     l1769:
  5510     0738  3001               	movlw	1
  5511     0739  02F6               	subwf	___awmod@counter,f
  5512     073A  1D03               	btfss	3,2
  5513     073B  2F3D               	goto	u1251
  5514     073C  2F3E               	goto	u1250
  5515     073D                     u1251:
  5516     073D  2F21               	goto	l1763
  5517     073E                     u1250:
  5518     073E                     l1771:
  5519     073E  0877               	movf	___awmod@sign,w
  5520     073F  1903               	btfsc	3,2
  5521     0740  2F42               	goto	u1261
  5522     0741  2F43               	goto	u1260
  5523     0742                     u1261:
  5524     0742  2F48               	goto	l1775
  5525     0743                     u1260:
  5526     0743                     l1773:
  5527     0743  09F4               	comf	___awmod@dividend,f
  5528     0744  09F5               	comf	___awmod@dividend+1,f
  5529     0745  0AF4               	incf	___awmod@dividend,f
  5530     0746  1903               	skipnz
  5531     0747  0AF5               	incf	___awmod@dividend+1,f
  5532     0748                     l1775:
  5533     0748  0875               	movf	___awmod@dividend+1,w
  5534     0749  00F3               	movwf	?___awmod+1
  5535     074A  0874               	movf	___awmod@dividend,w
  5536     074B  00F2               	movwf	?___awmod
  5537     074C                     l640:
  5538     074C  0008               	return
  5539     074D                     __end_of___awmod:
  5540                           
  5541                           	psect	text34
  5542     05D6                     __ptext34:	
  5543 ;; *************** function ___awdiv *****************
  5544 ;; Defined at:
  5545 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awdiv.c"
  5546 ;; Parameters:    Size  Location     Type
  5547 ;;  divisor         2    2[COMMON] int 
  5548 ;;  dividend        2    4[COMMON] int 
  5549 ;; Auto vars:     Size  Location     Type
  5550 ;;  quotient        2    8[COMMON] int 
  5551 ;;  sign            1    7[COMMON] unsigned char 
  5552 ;;  counter         1    6[COMMON] unsigned char 
  5553 ;; Return value:  Size  Location     Type
  5554 ;;                  2    2[COMMON] int 
  5555 ;; Registers used:
  5556 ;;		wreg, status,2, status,0
  5557 ;; Tracked objects:
  5558 ;;		On entry : 0/0
  5559 ;;		On exit  : 0/0
  5560 ;;		Unchanged: 0/0
  5561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5562 ;;      Params:         4       0       0       0       0
  5563 ;;      Locals:         4       0       0       0       0
  5564 ;;      Temps:          0       0       0       0       0
  5565 ;;      Totals:         8       0       0       0       0
  5566 ;;Total ram usage:        8 bytes
  5567 ;; Hardware stack levels used: 1
  5568 ;; Hardware stack levels required when called: 1
  5569 ;; This function calls:
  5570 ;;		Nothing
  5571 ;; This function is called by:
  5572 ;;		_vfpfcnvrt
  5573 ;; This function uses a non-reentrant model
  5574 ;;
  5575                           
  5576     05D6                     ___awdiv:	
  5577                           ;psect for function ___awdiv
  5578                           
  5579     05D6                     l1697:	
  5580                           ;incstack = 0
  5581                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5582                           
  5583     05D6  01F7               	clrf	___awdiv@sign
  5584     05D7                     l1699:
  5585     05D7  1FF3               	btfss	___awdiv@divisor+1,7
  5586     05D8  2DDA               	goto	u1081
  5587     05D9  2DDB               	goto	u1080
  5588     05DA                     u1081:
  5589     05DA  2DE2               	goto	l1705
  5590     05DB                     u1080:
  5591     05DB                     l1701:
  5592     05DB  09F2               	comf	___awdiv@divisor,f
  5593     05DC  09F3               	comf	___awdiv@divisor+1,f
  5594     05DD  0AF2               	incf	___awdiv@divisor,f
  5595     05DE  1903               	skipnz
  5596     05DF  0AF3               	incf	___awdiv@divisor+1,f
  5597     05E0                     l1703:
  5598     05E0  3001               	movlw	1
  5599     05E1  00F7               	movwf	___awdiv@sign
  5600     05E2                     l1705:
  5601     05E2  1FF5               	btfss	___awdiv@dividend+1,7
  5602     05E3  2DE5               	goto	u1091
  5603     05E4  2DE6               	goto	u1090
  5604     05E5                     u1091:
  5605     05E5  2DED               	goto	l1711
  5606     05E6                     u1090:
  5607     05E6                     l1707:
  5608     05E6  09F4               	comf	___awdiv@dividend,f
  5609     05E7  09F5               	comf	___awdiv@dividend+1,f
  5610     05E8  0AF4               	incf	___awdiv@dividend,f
  5611     05E9  1903               	skipnz
  5612     05EA  0AF5               	incf	___awdiv@dividend+1,f
  5613     05EB                     l1709:
  5614     05EB  3001               	movlw	1
  5615     05EC  06F7               	xorwf	___awdiv@sign,f
  5616     05ED                     l1711:
  5617     05ED  01F8               	clrf	___awdiv@quotient
  5618     05EE  01F9               	clrf	___awdiv@quotient+1
  5619     05EF                     l1713:
  5620     05EF  0872               	movf	___awdiv@divisor,w
  5621     05F0  0473               	iorwf	___awdiv@divisor+1,w
  5622     05F1  1903               	btfsc	3,2
  5623     05F2  2DF4               	goto	u1101
  5624     05F3  2DF5               	goto	u1100
  5625     05F4                     u1101:
  5626     05F4  2E2A               	goto	l1733
  5627     05F5                     u1100:
  5628     05F5                     l1715:
  5629     05F5  3001               	movlw	1
  5630     05F6  00F6               	movwf	___awdiv@counter
  5631     05F7  2E01               	goto	l1721
  5632     05F8                     l1717:
  5633     05F8  3001               	movlw	1
  5634     05F9                     u1115:
  5635     05F9  1003               	clrc
  5636     05FA  0DF2               	rlf	___awdiv@divisor,f
  5637     05FB  0DF3               	rlf	___awdiv@divisor+1,f
  5638     05FC  3EFF               	addlw	-1
  5639     05FD  1D03               	skipz
  5640     05FE  2DF9               	goto	u1115
  5641     05FF                     l1719:
  5642     05FF  3001               	movlw	1
  5643     0600  07F6               	addwf	___awdiv@counter,f
  5644     0601                     l1721:
  5645     0601  1FF3               	btfss	___awdiv@divisor+1,7
  5646     0602  2E04               	goto	u1121
  5647     0603  2E05               	goto	u1120
  5648     0604                     u1121:
  5649     0604  2DF8               	goto	l1717
  5650     0605                     u1120:
  5651     0605                     l1723:
  5652     0605  3001               	movlw	1
  5653     0606                     u1135:
  5654     0606  1003               	clrc
  5655     0607  0DF8               	rlf	___awdiv@quotient,f
  5656     0608  0DF9               	rlf	___awdiv@quotient+1,f
  5657     0609  3EFF               	addlw	-1
  5658     060A  1D03               	skipz
  5659     060B  2E06               	goto	u1135
  5660     060C  0873               	movf	___awdiv@divisor+1,w
  5661     060D  0275               	subwf	___awdiv@dividend+1,w
  5662     060E  1D03               	skipz
  5663     060F  2E12               	goto	u1145
  5664     0610  0872               	movf	___awdiv@divisor,w
  5665     0611  0274               	subwf	___awdiv@dividend,w
  5666     0612                     u1145:
  5667     0612  1C03               	skipc
  5668     0613  2E15               	goto	u1141
  5669     0614  2E16               	goto	u1140
  5670     0615                     u1141:
  5671     0615  2E1D               	goto	l1729
  5672     0616                     u1140:
  5673     0616                     l1725:
  5674     0616  0872               	movf	___awdiv@divisor,w
  5675     0617  02F4               	subwf	___awdiv@dividend,f
  5676     0618  0873               	movf	___awdiv@divisor+1,w
  5677     0619  1C03               	skipc
  5678     061A  03F5               	decf	___awdiv@dividend+1,f
  5679     061B  02F5               	subwf	___awdiv@dividend+1,f
  5680     061C                     l1727:
  5681     061C  1478               	bsf	___awdiv@quotient,0
  5682     061D                     l1729:
  5683     061D  3001               	movlw	1
  5684     061E                     u1155:
  5685     061E  1003               	clrc
  5686     061F  0CF3               	rrf	___awdiv@divisor+1,f
  5687     0620  0CF2               	rrf	___awdiv@divisor,f
  5688     0621  3EFF               	addlw	-1
  5689     0622  1D03               	skipz
  5690     0623  2E1E               	goto	u1155
  5691     0624                     l1731:
  5692     0624  3001               	movlw	1
  5693     0625  02F6               	subwf	___awdiv@counter,f
  5694     0626  1D03               	btfss	3,2
  5695     0627  2E29               	goto	u1161
  5696     0628  2E2A               	goto	u1160
  5697     0629                     u1161:
  5698     0629  2E05               	goto	l1723
  5699     062A                     u1160:
  5700     062A                     l1733:
  5701     062A  0877               	movf	___awdiv@sign,w
  5702     062B  1903               	btfsc	3,2
  5703     062C  2E2E               	goto	u1171
  5704     062D  2E2F               	goto	u1170
  5705     062E                     u1171:
  5706     062E  2E34               	goto	l1737
  5707     062F                     u1170:
  5708     062F                     l1735:
  5709     062F  09F8               	comf	___awdiv@quotient,f
  5710     0630  09F9               	comf	___awdiv@quotient+1,f
  5711     0631  0AF8               	incf	___awdiv@quotient,f
  5712     0632  1903               	skipnz
  5713     0633  0AF9               	incf	___awdiv@quotient+1,f
  5714     0634                     l1737:
  5715     0634  0879               	movf	___awdiv@quotient+1,w
  5716     0635  00F3               	movwf	?___awdiv+1
  5717     0636  0878               	movf	___awdiv@quotient,w
  5718     0637  00F2               	movwf	?___awdiv
  5719     0638                     l627:
  5720     0638  0008               	return
  5721     0639                     __end_of___awdiv:
  5722                           
  5723                           	psect	text35
  5724     0F73                     __ptext35:	
  5725 ;; *************** function _print_Irrigation *****************
  5726 ;; Defined at:
  5727 ;;		line 83 in file "./lcdFunctions.h"
  5728 ;; Parameters:    Size  Location     Type
  5729 ;;		None
  5730 ;; Auto vars:     Size  Location     Type
  5731 ;;		None
  5732 ;; Return value:  Size  Location     Type
  5733 ;;                  1    wreg      void 
  5734 ;; Registers used:
  5735 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5736 ;; Tracked objects:
  5737 ;;		On entry : 0/0
  5738 ;;		On exit  : 0/0
  5739 ;;		Unchanged: 0/0
  5740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5741 ;;      Params:         0       0       0       0       0
  5742 ;;      Locals:         0       0       0       0       0
  5743 ;;      Temps:          0       0       0       0       0
  5744 ;;      Totals:         0       0       0       0       0
  5745 ;;Total ram usage:        0 bytes
  5746 ;; Hardware stack levels used: 1
  5747 ;; Hardware stack levels required when called: 5
  5748 ;; This function calls:
  5749 ;;		_Lcd_Clear
  5750 ;;		_Lcd_Set_Cursor
  5751 ;;		_Lcd_Write_String
  5752 ;;		_draw_Index
  5753 ;; This function is called by:
  5754 ;;		_lcd_run
  5755 ;; This function uses a non-reentrant model
  5756 ;;
  5757                           
  5758     0F73                     _print_Irrigation:	
  5759                           ;psect for function _print_Irrigation
  5760                           
  5761     0F73                     l2687:	
  5762                           ;incstack = 0
  5763                           ; Regs used in _print_Irrigation: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5764                           
  5765                           
  5766                           ;./lcdFunctions.h: 86:   if(irrigationState == lastIrrigationState && lcd_lastIndex == l
      +                          cd_index)
  5767     0F73  1283               	bcf	3,5	;RP0=0, select bank0
  5768     0F74  1303               	bcf	3,6	;RP1=0, select bank0
  5769     0F75  086D               	movf	_irrigationState,w
  5770     0F76  066C               	xorwf	_lastIrrigationState,w
  5771     0F77  1D03               	skipz
  5772     0F78  2F7A               	goto	u2641
  5773     0F79  2F7B               	goto	u2640
  5774     0F7A                     u2641:
  5775     0F7A  2F82               	goto	l2693
  5776     0F7B                     u2640:
  5777     0F7B                     l2689:
  5778     0F7B  0865               	movf	_lcd_lastIndex,w
  5779     0F7C  066A               	xorwf	_lcd_index,w
  5780     0F7D  1D03               	skipz
  5781     0F7E  2F80               	goto	u2651
  5782     0F7F  2F81               	goto	u2650
  5783     0F80                     u2651:
  5784     0F80  2F82               	goto	l2693
  5785     0F81                     u2650:
  5786     0F81  2FB8               	goto	l202
  5787     0F82                     l2693:
  5788                           
  5789                           ;./lcdFunctions.h: 89:   lastIrrigationState = irrigationState;
  5790     0F82  086D               	movf	_irrigationState,w
  5791     0F83  00EC               	movwf	_lastIrrigationState
  5792     0F84                     l2695:
  5793                           
  5794                           ;./lcdFunctions.h: 91:   Lcd_Clear();
  5795     0F84  120A  158A  236D  120A  158A  	fcall	_Lcd_Clear
  5796     0F89                     l2697:
  5797                           
  5798                           ;./lcdFunctions.h: 93:   Lcd_Set_Cursor(1,2);
  5799     0F89  3002               	movlw	2
  5800     0F8A  00F6               	movwf	Lcd_Set_Cursor@b
  5801     0F8B  3001               	movlw	1
  5802     0F8C  120A  118A  274D  120A  158A  	fcall	_Lcd_Set_Cursor
  5803     0F91                     l2699:
  5804                           
  5805                           ;./lcdFunctions.h: 94:   Lcd_Write_String("IRRIGACAO:");
  5806     0F91  3038               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  5807     0F92  00F7               	movwf	Lcd_Write_String@a
  5808     0F93  3080               	movlw	128
  5809     0F94  00F8               	movwf	Lcd_Write_String@a+1
  5810     0F95  120A  158A  272D  120A  158A  	fcall	_Lcd_Write_String
  5811     0F9A                     l2701:
  5812                           
  5813                           ;./lcdFunctions.h: 96:   Lcd_Set_Cursor(2,4);
  5814     0F9A  3004               	movlw	4
  5815     0F9B  00F6               	movwf	Lcd_Set_Cursor@b
  5816     0F9C  3002               	movlw	2
  5817     0F9D  120A  118A  274D  120A  158A  	fcall	_Lcd_Set_Cursor
  5818     0FA2                     l2703:
  5819                           
  5820                           ;./lcdFunctions.h: 97:   Lcd_Write_String( IrrigationStateString[irrigationState] );
  5821     0FA2  1283               	bcf	3,5	;RP0=0, select bank0
  5822     0FA3  1303               	bcf	3,6	;RP1=0, select bank0
  5823     0FA4  086D               	movf	_irrigationState,w
  5824     0FA5  3ECB               	addlw	(low (_IrrigationStateString| 0))& (0+255)
  5825     0FA6  0084               	movwf	4
  5826     0FA7  1383               	bcf	3,7	;select IRP bank1
  5827     0FA8  0800               	movf	0,w
  5828     0FA9  00F7               	movwf	Lcd_Write_String@a
  5829     0FAA  3000               	movlw	0
  5830     0FAB  1D03               	btfss	3,2
  5831     0FAC  3080               	movlw	128
  5832     0FAD  00F8               	movwf	Lcd_Write_String@a+1
  5833     0FAE  120A  158A  272D  120A  158A  	fcall	_Lcd_Write_String
  5834     0FB3                     l2705:
  5835                           
  5836                           ;./lcdFunctions.h: 99:   draw_Index();
  5837     0FB3  120A  158A  2456  120A  158A  	fcall	_draw_Index
  5838     0FB8                     l202:
  5839     0FB8  0008               	return
  5840     0FB9                     __end_of_print_Irrigation:
  5841                           
  5842                           	psect	text36
  5843     0639                     __ptext36:	
  5844 ;; *************** function _print_ArtificialLight *****************
  5845 ;; Defined at:
  5846 ;;		line 124 in file "./lcdFunctions.h"
  5847 ;; Parameters:    Size  Location     Type
  5848 ;;		None
  5849 ;; Auto vars:     Size  Location     Type
  5850 ;;		None
  5851 ;; Return value:  Size  Location     Type
  5852 ;;                  1    wreg      void 
  5853 ;; Registers used:
  5854 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5855 ;; Tracked objects:
  5856 ;;		On entry : 0/0
  5857 ;;		On exit  : 0/0
  5858 ;;		Unchanged: 0/0
  5859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5860 ;;      Params:         0       0       0       0       0
  5861 ;;      Locals:         0       0       0       0       0
  5862 ;;      Temps:          0       0       0       0       0
  5863 ;;      Totals:         0       0       0       0       0
  5864 ;;Total ram usage:        0 bytes
  5865 ;; Hardware stack levels used: 1
  5866 ;; Hardware stack levels required when called: 5
  5867 ;; This function calls:
  5868 ;;		_Lcd_Clear
  5869 ;;		_Lcd_Set_Cursor
  5870 ;;		_Lcd_Write_String
  5871 ;;		_draw_Index
  5872 ;; This function is called by:
  5873 ;;		_lcd_run
  5874 ;; This function uses a non-reentrant model
  5875 ;;
  5876                           
  5877     0639                     _print_ArtificialLight:	
  5878                           ;psect for function _print_ArtificialLight
  5879                           
  5880     0639                     l2731:	
  5881                           ;incstack = 0
  5882                           ; Regs used in _print_ArtificialLight: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  5883                           
  5884                           
  5885                           ;./lcdFunctions.h: 126:   if(light == old_light && lcd_lastIndex == lcd_index )
  5886     0639  1683               	bsf	3,5	;RP0=1, select bank1
  5887     063A  1303               	bcf	3,6	;RP1=0, select bank1
  5888     063B  084F               	movf	(_old_light+1)^(0+128),w
  5889     063C  1283               	bcf	3,5	;RP0=0, select bank0
  5890     063D  1303               	bcf	3,6	;RP1=0, select bank0
  5891     063E  0661               	xorwf	_light+1,w
  5892     063F  1D03               	skipz
  5893     0640  2E47               	goto	u2685
  5894     0641  1683               	bsf	3,5	;RP0=1, select bank1
  5895     0642  1303               	bcf	3,6	;RP1=0, select bank1
  5896     0643  084E               	movf	_old_light^(0+128),w
  5897     0644  1283               	bcf	3,5	;RP0=0, select bank0
  5898     0645  1303               	bcf	3,6	;RP1=0, select bank0
  5899     0646  0660               	xorwf	_light,w
  5900     0647                     u2685:
  5901     0647  1D03               	skipz
  5902     0648  2E4A               	goto	u2681
  5903     0649  2E4B               	goto	u2680
  5904     064A                     u2681:
  5905     064A  2E52               	goto	l2737
  5906     064B                     u2680:
  5907     064B                     l2733:
  5908     064B  0865               	movf	_lcd_lastIndex,w
  5909     064C  066A               	xorwf	_lcd_index,w
  5910     064D  1D03               	skipz
  5911     064E  2E50               	goto	u2691
  5912     064F  2E51               	goto	u2690
  5913     0650                     u2691:
  5914     0650  2E52               	goto	l2737
  5915     0651                     u2690:
  5916     0651  2E98               	goto	l210
  5917     0652                     l2737:
  5918                           
  5919                           ;./lcdFunctions.h: 129:   old_light = light;
  5920     0652  0861               	movf	_light+1,w
  5921     0653  1683               	bsf	3,5	;RP0=1, select bank1
  5922     0654  1303               	bcf	3,6	;RP1=0, select bank1
  5923     0655  00CF               	movwf	(_old_light+1)^(0+128)
  5924     0656  1283               	bcf	3,5	;RP0=0, select bank0
  5925     0657  1303               	bcf	3,6	;RP1=0, select bank0
  5926     0658  0860               	movf	_light,w
  5927     0659  1683               	bsf	3,5	;RP0=1, select bank1
  5928     065A  1303               	bcf	3,6	;RP1=0, select bank1
  5929     065B  00CE               	movwf	_old_light^(0+128)
  5930     065C                     l2739:
  5931                           
  5932                           ;./lcdFunctions.h: 131:   Lcd_Clear();
  5933     065C  120A  158A  236D  120A  118A  	fcall	_Lcd_Clear
  5934     0661                     l2741:
  5935                           
  5936                           ;./lcdFunctions.h: 133:   Lcd_Set_Cursor(1,2);
  5937     0661  3002               	movlw	2
  5938     0662  00F6               	movwf	Lcd_Set_Cursor@b
  5939     0663  3001               	movlw	1
  5940     0664  120A  118A  274D  120A  118A  	fcall	_Lcd_Set_Cursor
  5941     0669                     l2743:
  5942                           
  5943                           ;./lcdFunctions.h: 134:   Lcd_Write_String("LUZ ARTIFICIAL");
  5944     0669  3001               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  5945     066A  00F7               	movwf	Lcd_Write_String@a
  5946     066B  3080               	movlw	128
  5947     066C  00F8               	movwf	Lcd_Write_String@a+1
  5948     066D  120A  158A  272D  120A  118A  	fcall	_Lcd_Write_String
  5949     0672                     l2745:
  5950                           
  5951                           ;./lcdFunctions.h: 136:   Lcd_Set_Cursor(2,4);
  5952     0672  3004               	movlw	4
  5953     0673  00F6               	movwf	Lcd_Set_Cursor@b
  5954     0674  3002               	movlw	2
  5955     0675  120A  118A  274D  120A  118A  	fcall	_Lcd_Set_Cursor
  5956     067A                     l2747:
  5957                           
  5958                           ;./lcdFunctions.h: 137:   if(PORTCbits.RC3 == 0)
  5959     067A  1283               	bcf	3,5	;RP0=0, select bank0
  5960     067B  1303               	bcf	3,6	;RP1=0, select bank0
  5961     067C  1987               	btfsc	7,3	;volatile
  5962     067D  2E7F               	goto	u2701
  5963     067E  2E80               	goto	u2700
  5964     067F                     u2701:
  5965     067F  2E8A               	goto	l2751
  5966     0680                     u2700:
  5967     0680                     l2749:
  5968                           
  5969                           ;./lcdFunctions.h: 138:     Lcd_Write_String("LIGADA");
  5970     0680  3046               	movlw	(low (((STR_14+3)-__stringbase)| (0+32768)))& (0+255)
  5971     0681  00F7               	movwf	Lcd_Write_String@a
  5972     0682  3080               	movlw	128
  5973     0683  00F8               	movwf	Lcd_Write_String@a+1
  5974     0684  120A  158A  272D  120A  118A  	fcall	_Lcd_Write_String
  5975     0689  2E93               	goto	l212
  5976     068A                     l2751:
  5977                           
  5978                           ;./lcdFunctions.h: 140:     Lcd_Write_String("DESLIGADA");
  5979     068A  3043               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  5980     068B  00F7               	movwf	Lcd_Write_String@a
  5981     068C  3080               	movlw	128
  5982     068D  00F8               	movwf	Lcd_Write_String@a+1
  5983     068E  120A  158A  272D  120A  118A  	fcall	_Lcd_Write_String
  5984     0693                     l212:
  5985                           
  5986                           ;./lcdFunctions.h: 142:   draw_Index();
  5987     0693  120A  158A  2456  120A  118A  	fcall	_draw_Index
  5988     0698                     l210:
  5989     0698  0008               	return
  5990     0699                     __end_of_print_ArtificialLight:
  5991                           
  5992                           	psect	text37
  5993     0C56                     __ptext37:	
  5994 ;; *************** function _draw_Index *****************
  5995 ;; Defined at:
  5996 ;;		line 56 in file "./lcdFunctions.h"
  5997 ;; Parameters:    Size  Location     Type
  5998 ;;		None
  5999 ;; Auto vars:     Size  Location     Type
  6000 ;;  temp_index      3    5[BANK0 ] unsigned char [3]
  6001 ;; Return value:  Size  Location     Type
  6002 ;;                  1    wreg      void 
  6003 ;; Registers used:
  6004 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6005 ;; Tracked objects:
  6006 ;;		On entry : 0/0
  6007 ;;		On exit  : 0/0
  6008 ;;		Unchanged: 0/0
  6009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6010 ;;      Params:         0       0       0       0       0
  6011 ;;      Locals:         0       3       0       0       0
  6012 ;;      Temps:          0       0       0       0       0
  6013 ;;      Totals:         0       3       0       0       0
  6014 ;;Total ram usage:        3 bytes
  6015 ;; Hardware stack levels used: 1
  6016 ;; Hardware stack levels required when called: 4
  6017 ;; This function calls:
  6018 ;;		_Lcd_Set_Cursor
  6019 ;;		_Lcd_Write_String
  6020 ;; This function is called by:
  6021 ;;		_print_TankState
  6022 ;;		_print_Irrigation
  6023 ;;		_print_SoilMoisture
  6024 ;;		_print_ArtificialLight
  6025 ;;		_print_Temperature
  6026 ;; This function uses a non-reentrant model
  6027 ;;
  6028                           
  6029     0C56                     _draw_Index:	
  6030                           ;psect for function _draw_Index
  6031                           
  6032     0C56                     l2639:	
  6033                           ;incstack = 0
  6034                           ; Regs used in _draw_Index: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6035                           
  6036                           
  6037                           ;./lcdFunctions.h: 58:   char temp_index[3] = {lcd_index + '0' , '/' , lcd_maxIndex + '0
      +                          ' };
  6038     0C56  3000               	movlw	0
  6039     0C57  1283               	bcf	3,5	;RP0=0, select bank0
  6040     0C58  1303               	bcf	3,6	;RP1=0, select bank0
  6041     0C59  00A5               	movwf	draw_Index@temp_index
  6042     0C5A  3000               	movlw	0
  6043     0C5B  00A6               	movwf	draw_Index@temp_index+1
  6044     0C5C  3000               	movlw	0
  6045     0C5D  00A7               	movwf	draw_Index@temp_index+2
  6046     0C5E                     l2641:
  6047     0C5E  086A               	movf	_lcd_index,w
  6048     0C5F  3E30               	addlw	48
  6049     0C60  00A5               	movwf	draw_Index@temp_index
  6050     0C61                     l2643:
  6051     0C61  302F               	movlw	47
  6052     0C62  00A6               	movwf	draw_Index@temp_index+1
  6053     0C63                     l2645:
  6054     0C63  3035               	movlw	53
  6055     0C64  00A7               	movwf	draw_Index@temp_index+2
  6056     0C65                     l2647:
  6057                           
  6058                           ;./lcdFunctions.h: 59:   Lcd_Set_Cursor(2,14);
  6059     0C65  300E               	movlw	14
  6060     0C66  00F6               	movwf	Lcd_Set_Cursor@b
  6061     0C67  3002               	movlw	2
  6062     0C68  120A  118A  274D  120A  158A  	fcall	_Lcd_Set_Cursor
  6063     0C6D                     l2649:
  6064                           
  6065                           ;./lcdFunctions.h: 60:   Lcd_Write_String(temp_index);
  6066     0C6D  3025               	movlw	(low (draw_Index@temp_index| 0))& (0+255)
  6067     0C6E  00F7               	movwf	Lcd_Write_String@a
  6068     0C6F  3000               	movlw	0
  6069     0C70  00F8               	movwf	Lcd_Write_String@a+1
  6070     0C71  120A  158A  272D  120A  158A  	fcall	_Lcd_Write_String
  6071     0C76                     l194:
  6072     0C76  0008               	return
  6073     0C77                     __end_of_draw_Index:
  6074                           
  6075                           	psect	text38
  6076     0F2D                     __ptext38:	
  6077 ;; *************** function _Lcd_Write_String *****************
  6078 ;; Defined at:
  6079 ;;		line 105 in file "./lcd.h"
  6080 ;; Parameters:    Size  Location     Type
  6081 ;;  a               2    7[COMMON] PTR unsigned char 
  6082 ;;		 -> print_Temperature@buffer(16), STR_15(13), STR_14(10), STR_13(7), 
  6083 ;;		 -> STR_12(15), print_SoilMoisture@buffer(16), STR_10(13), STR_9(11), 
  6084 ;;		 -> STR_8(14), draw_Index@temp_index(3), STR_7(6), STR_6(4), 
  6085 ;;		 -> STR_5(3), STR_4(5), STR_3(6), STR_2(5), 
  6086 ;;		 -> STR_1(6), 
  6087 ;; Auto vars:     Size  Location     Type
  6088 ;;  i               2    3[BANK0 ] int 
  6089 ;; Return value:  Size  Location     Type
  6090 ;;                  1    wreg      void 
  6091 ;; Registers used:
  6092 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6093 ;; Tracked objects:
  6094 ;;		On entry : 0/0
  6095 ;;		On exit  : 0/0
  6096 ;;		Unchanged: 0/0
  6097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6098 ;;      Params:         2       0       0       0       0
  6099 ;;      Locals:         0       2       0       0       0
  6100 ;;      Temps:          0       3       0       0       0
  6101 ;;      Totals:         2       5       0       0       0
  6102 ;;Total ram usage:        7 bytes
  6103 ;; Hardware stack levels used: 1
  6104 ;; Hardware stack levels required when called: 3
  6105 ;; This function calls:
  6106 ;;		_Lcd_Write_Char
  6107 ;; This function is called by:
  6108 ;;		_draw_Index
  6109 ;;		_print_TankState
  6110 ;;		_print_Irrigation
  6111 ;;		_print_SoilMoisture
  6112 ;;		_print_ArtificialLight
  6113 ;;		_print_Temperature
  6114 ;; This function uses a non-reentrant model
  6115 ;;
  6116                           
  6117     0F2D                     _Lcd_Write_String:	
  6118                           ;psect for function _Lcd_Write_String
  6119                           
  6120     0F2D                     l2615:	
  6121                           ;incstack = 0
  6122                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6123                           
  6124                           
  6125                           ;./lcd.h: 105: void Lcd_Write_String(char *a);./lcd.h: 106: {;./lcd.h: 107:  int i;;./lc
      +                          d.h: 108:  for(i=0;a[i]!='\0';i++)
  6126     0F2D  1283               	bcf	3,5	;RP0=0, select bank0
  6127     0F2E  1303               	bcf	3,6	;RP1=0, select bank0
  6128     0F2F  01A3               	clrf	Lcd_Write_String@i
  6129     0F30  01A4               	clrf	Lcd_Write_String@i+1
  6130     0F31  2F56               	goto	l2621
  6131     0F32                     l2617:
  6132                           
  6133                           ;./lcd.h: 109:     Lcd_Write_Char(a[i]);
  6134     0F32  0823               	movf	Lcd_Write_String@i,w
  6135     0F33  0777               	addwf	Lcd_Write_String@a,w
  6136     0F34  00A1               	movwf	??_Lcd_Write_String+1
  6137     0F35  0878               	movf	Lcd_Write_String@a+1,w
  6138     0F36  00A0               	movwf	??_Lcd_Write_String
  6139     0F37  1803               	skipnc
  6140     0F38  0AA0               	incf	??_Lcd_Write_String,f
  6141     0F39  1FA3               	btfss	Lcd_Write_String@i,7
  6142     0F3A  2F3C               	goto	u2580
  6143     0F3B  03A0               	decf	??_Lcd_Write_String,f
  6144     0F3C                     u2580:
  6145     0F3C  1283               	bcf	3,5	;RP0=0, select bank0
  6146     0F3D  1303               	bcf	3,6	;RP1=0, select bank0
  6147     0F3E  0820               	movf	??_Lcd_Write_String,w
  6148     0F3F  00A2               	movwf	??_Lcd_Write_String+2
  6149     0F40  0822               	movf	??_Lcd_Write_String+2,w
  6150     0F41  00FF               	movwf	btemp+1
  6151     0F42  0821               	movf	??_Lcd_Write_String+1,w
  6152     0F43  0084               	movwf	4
  6153     0F44  120A  118A  2409  120A  158A  	fcall	stringtab
  6154     0F49  120A  158A  25FC  120A  158A  	fcall	_Lcd_Write_Char
  6155     0F4E                     l2619:
  6156     0F4E  3001               	movlw	1
  6157     0F4F  1283               	bcf	3,5	;RP0=0, select bank0
  6158     0F50  1303               	bcf	3,6	;RP1=0, select bank0
  6159     0F51  07A3               	addwf	Lcd_Write_String@i,f
  6160     0F52  1803               	skipnc
  6161     0F53  0AA4               	incf	Lcd_Write_String@i+1,f
  6162     0F54  3000               	movlw	0
  6163     0F55  07A4               	addwf	Lcd_Write_String@i+1,f
  6164     0F56                     l2621:
  6165     0F56  0823               	movf	Lcd_Write_String@i,w
  6166     0F57  0777               	addwf	Lcd_Write_String@a,w
  6167     0F58  00A1               	movwf	??_Lcd_Write_String+1
  6168     0F59  0878               	movf	Lcd_Write_String@a+1,w
  6169     0F5A  00A0               	movwf	??_Lcd_Write_String
  6170     0F5B  1803               	skipnc
  6171     0F5C  0AA0               	incf	??_Lcd_Write_String,f
  6172     0F5D  1FA3               	btfss	Lcd_Write_String@i,7
  6173     0F5E  2F60               	goto	u2590
  6174     0F5F  03A0               	decf	??_Lcd_Write_String,f
  6175     0F60                     u2590:
  6176     0F60  1283               	bcf	3,5	;RP0=0, select bank0
  6177     0F61  1303               	bcf	3,6	;RP1=0, select bank0
  6178     0F62  0820               	movf	??_Lcd_Write_String,w
  6179     0F63  00A2               	movwf	??_Lcd_Write_String+2
  6180     0F64  0822               	movf	??_Lcd_Write_String+2,w
  6181     0F65  00FF               	movwf	btemp+1
  6182     0F66  0821               	movf	??_Lcd_Write_String+1,w
  6183     0F67  0084               	movwf	4
  6184     0F68  120A  118A  2409  120A  158A  	fcall	stringtab
  6185     0F6D  3A00               	xorlw	0
  6186     0F6E  1D03               	skipz
  6187     0F6F  2F71               	goto	u2601
  6188     0F70  2F72               	goto	u2600
  6189     0F71                     u2601:
  6190     0F71  2F32               	goto	l2617
  6191     0F72                     u2600:
  6192     0F72                     l169:
  6193     0F72  0008               	return
  6194     0F73                     __end_of_Lcd_Write_String:
  6195                           
  6196                           	psect	text39
  6197     0DFC                     __ptext39:	
  6198 ;; *************** function _Lcd_Write_Char *****************
  6199 ;; Defined at:
  6200 ;;		line 89 in file "./lcd.h"
  6201 ;; Parameters:    Size  Location     Type
  6202 ;;  a               1    wreg     unsigned char 
  6203 ;; Auto vars:     Size  Location     Type
  6204 ;;  a               1    6[COMMON] unsigned char 
  6205 ;;  y               1    5[COMMON] unsigned char 
  6206 ;;  temp            1    4[COMMON] unsigned char 
  6207 ;; Return value:  Size  Location     Type
  6208 ;;                  1    wreg      void 
  6209 ;; Registers used:
  6210 ;;		wreg, status,2, status,0, pclath, cstack
  6211 ;; Tracked objects:
  6212 ;;		On entry : 0/0
  6213 ;;		On exit  : 0/0
  6214 ;;		Unchanged: 0/0
  6215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6216 ;;      Params:         0       0       0       0       0
  6217 ;;      Locals:         3       0       0       0       0
  6218 ;;      Temps:          1       0       0       0       0
  6219 ;;      Totals:         4       0       0       0       0
  6220 ;;Total ram usage:        4 bytes
  6221 ;; Hardware stack levels used: 1
  6222 ;; Hardware stack levels required when called: 2
  6223 ;; This function calls:
  6224 ;;		_Lcd_Port
  6225 ;; This function is called by:
  6226 ;;		_Lcd_Write_String
  6227 ;;		_print_SoilMoisture
  6228 ;;		_print_Temperature
  6229 ;; This function uses a non-reentrant model
  6230 ;;
  6231                           
  6232     0DFC                     _Lcd_Write_Char:	
  6233                           ;psect for function _Lcd_Write_Char
  6234                           
  6235                           
  6236                           ;incstack = 0
  6237                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  6238                           ;Lcd_Write_Char@a stored from wreg
  6239     0DFC  00F6               	movwf	Lcd_Write_Char@a
  6240     0DFD                     l2449:
  6241                           
  6242                           ;./lcd.h: 89: void Lcd_Write_Char(char a);./lcd.h: 90: {;./lcd.h: 91:    char temp,y;;./
      +                          lcd.h: 92:    temp = a&0x0F;
  6243     0DFD  0876               	movf	Lcd_Write_Char@a,w
  6244     0DFE  00F4               	movwf	Lcd_Write_Char@temp
  6245     0DFF                     l2451:
  6246     0DFF  300F               	movlw	15
  6247     0E00  05F4               	andwf	Lcd_Write_Char@temp,f
  6248     0E01                     l2453:
  6249                           
  6250                           ;./lcd.h: 93:    y = a&0xF0;
  6251     0E01  0876               	movf	Lcd_Write_Char@a,w
  6252     0E02  00F5               	movwf	Lcd_Write_Char@y
  6253     0E03  30F0               	movlw	240
  6254     0E04  05F5               	andwf	Lcd_Write_Char@y,f
  6255     0E05                     l2455:
  6256                           
  6257                           ;./lcd.h: 94:    RD2 = 1;
  6258     0E05  1283               	bcf	3,5	;RP0=0, select bank0
  6259     0E06  1303               	bcf	3,6	;RP1=0, select bank0
  6260     0E07  1508               	bsf	8,2	;volatile
  6261     0E08                     l2457:
  6262                           
  6263                           ;./lcd.h: 95:    Lcd_Port(y>>4);
  6264     0E08  0875               	movf	Lcd_Write_Char@y,w
  6265     0E09  00F3               	movwf	??_Lcd_Write_Char
  6266     0E0A  3004               	movlw	4
  6267     0E0B                     u2235:
  6268     0E0B  1003               	clrc
  6269     0E0C  0CF3               	rrf	??_Lcd_Write_Char,f
  6270     0E0D  3EFF               	addlw	-1
  6271     0E0E  1D03               	skipz
  6272     0E0F  2E0B               	goto	u2235
  6273     0E10  0873               	movf	??_Lcd_Write_Char,w
  6274     0E11  120A  158A  2477  120A  158A  	fcall	_Lcd_Port
  6275     0E16                     l2459:
  6276                           
  6277                           ;./lcd.h: 96:    RD3 = 1;
  6278     0E16  1283               	bcf	3,5	;RP0=0, select bank0
  6279     0E17  1303               	bcf	3,6	;RP1=0, select bank0
  6280     0E18  1588               	bsf	8,3	;volatile
  6281     0E19                     l2461:
  6282                           
  6283                           ;./lcd.h: 97:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  6284     0E19  300D               	movlw	13
  6285     0E1A  00F3               	movwf	??_Lcd_Write_Char
  6286     0E1B                     u2797:
  6287     0E1B  0BF3               	decfsz	??_Lcd_Write_Char,f
  6288     0E1C  2E1B               	goto	u2797
  6289     0E1D                     l2463:
  6290                           
  6291                           ;./lcd.h: 98:    RD3 = 0;
  6292     0E1D  1283               	bcf	3,5	;RP0=0, select bank0
  6293     0E1E  1303               	bcf	3,6	;RP1=0, select bank0
  6294     0E1F  1188               	bcf	8,3	;volatile
  6295     0E20                     l2465:
  6296                           
  6297                           ;./lcd.h: 99:    Lcd_Port(temp);
  6298     0E20  0874               	movf	Lcd_Write_Char@temp,w
  6299     0E21  120A  158A  2477  120A  158A  	fcall	_Lcd_Port
  6300     0E26                     l2467:
  6301                           
  6302                           ;./lcd.h: 100:    RD3 = 1;
  6303     0E26  1283               	bcf	3,5	;RP0=0, select bank0
  6304     0E27  1303               	bcf	3,6	;RP1=0, select bank0
  6305     0E28  1588               	bsf	8,3	;volatile
  6306     0E29                     l2469:
  6307                           
  6308                           ;./lcd.h: 101:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  6309     0E29  300D               	movlw	13
  6310     0E2A  00F3               	movwf	??_Lcd_Write_Char
  6311     0E2B                     u2807:
  6312     0E2B  0BF3               	decfsz	??_Lcd_Write_Char,f
  6313     0E2C  2E2B               	goto	u2807
  6314     0E2D                     l2471:
  6315                           
  6316                           ;./lcd.h: 102:    RD3 = 0;
  6317     0E2D  1283               	bcf	3,5	;RP0=0, select bank0
  6318     0E2E  1303               	bcf	3,6	;RP1=0, select bank0
  6319     0E2F  1188               	bcf	8,3	;volatile
  6320     0E30                     l163:
  6321     0E30  0008               	return
  6322     0E31                     __end_of_Lcd_Write_Char:
  6323                           
  6324                           	psect	text40
  6325     074D                     __ptext40:	
  6326 ;; *************** function _Lcd_Set_Cursor *****************
  6327 ;; Defined at:
  6328 ;;		line 49 in file "./lcd.h"
  6329 ;; Parameters:    Size  Location     Type
  6330 ;;  a               1    wreg     unsigned char 
  6331 ;;  b               1    6[COMMON] unsigned char 
  6332 ;; Auto vars:     Size  Location     Type
  6333 ;;  a               1    0[BANK0 ] unsigned char 
  6334 ;;  temp            1    3[BANK0 ] unsigned char 
  6335 ;;  y               1    2[BANK0 ] unsigned char 
  6336 ;;  z               1    1[BANK0 ] unsigned char 
  6337 ;; Return value:  Size  Location     Type
  6338 ;;                  1    wreg      void 
  6339 ;; Registers used:
  6340 ;;		wreg, status,2, status,0, pclath, cstack
  6341 ;; Tracked objects:
  6342 ;;		On entry : 0/0
  6343 ;;		On exit  : 0/0
  6344 ;;		Unchanged: 0/0
  6345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6346 ;;      Params:         1       0       0       0       0
  6347 ;;      Locals:         0       4       0       0       0
  6348 ;;      Temps:          1       0       0       0       0
  6349 ;;      Totals:         2       4       0       0       0
  6350 ;;Total ram usage:        6 bytes
  6351 ;; Hardware stack levels used: 1
  6352 ;; Hardware stack levels required when called: 3
  6353 ;; This function calls:
  6354 ;;		_Lcd_Cmd
  6355 ;; This function is called by:
  6356 ;;		_draw_Index
  6357 ;;		_print_TankState
  6358 ;;		_print_Irrigation
  6359 ;;		_print_SoilMoisture
  6360 ;;		_print_ArtificialLight
  6361 ;;		_print_Temperature
  6362 ;; This function uses a non-reentrant model
  6363 ;;
  6364                           
  6365     074D                     _Lcd_Set_Cursor:	
  6366                           ;psect for function _Lcd_Set_Cursor
  6367                           
  6368                           
  6369                           ;incstack = 0
  6370                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  6371                           ;Lcd_Set_Cursor@a stored from wreg
  6372     074D  1283               	bcf	3,5	;RP0=0, select bank0
  6373     074E  1303               	bcf	3,6	;RP1=0, select bank0
  6374     074F  00A0               	movwf	Lcd_Set_Cursor@a
  6375     0750                     l2591:
  6376                           
  6377                           ;./lcd.h: 49: void Lcd_Set_Cursor(char a, char b);./lcd.h: 50: {;./lcd.h: 51:  char temp
      +                          ,z,y;;./lcd.h: 52:  if(a == 1)
  6378     0750  0320               	decf	Lcd_Set_Cursor@a,w
  6379     0751  1D03               	btfss	3,2
  6380     0752  2F54               	goto	u2541
  6381     0753  2F55               	goto	u2540
  6382     0754                     u2541:
  6383     0754  2F75               	goto	l2603
  6384     0755                     u2540:
  6385     0755                     l2593:
  6386                           
  6387                           ;./lcd.h: 53:  {;./lcd.h: 54:    temp = 0x80 + b - 1;
  6388     0755  0876               	movf	Lcd_Set_Cursor@b,w
  6389     0756  3E7F               	addlw	127
  6390     0757  00A3               	movwf	Lcd_Set_Cursor@temp
  6391                           
  6392                           ;./lcd.h: 55:   z = temp>>4;
  6393     0758  0823               	movf	Lcd_Set_Cursor@temp,w
  6394     0759  00F7               	movwf	??_Lcd_Set_Cursor
  6395     075A  3004               	movlw	4
  6396     075B                     u2555:
  6397     075B  1003               	clrc
  6398     075C  0CF7               	rrf	??_Lcd_Set_Cursor,f
  6399     075D  3EFF               	addlw	-1
  6400     075E  1D03               	skipz
  6401     075F  2F5B               	goto	u2555
  6402     0760  0877               	movf	??_Lcd_Set_Cursor,w
  6403     0761  00A1               	movwf	Lcd_Set_Cursor@z
  6404     0762                     l2595:
  6405                           
  6406                           ;./lcd.h: 56:   y = temp & 0x0F;
  6407     0762  0823               	movf	Lcd_Set_Cursor@temp,w
  6408     0763  00A2               	movwf	Lcd_Set_Cursor@y
  6409     0764                     l2597:
  6410     0764  300F               	movlw	15
  6411     0765  05A2               	andwf	Lcd_Set_Cursor@y,f
  6412     0766                     l2599:
  6413                           
  6414                           ;./lcd.h: 57:   Lcd_Cmd(z);
  6415     0766  0821               	movf	Lcd_Set_Cursor@z,w
  6416     0767  120A  118A  27E3  120A  118A  	fcall	_Lcd_Cmd
  6417     076C                     l2601:
  6418                           
  6419                           ;./lcd.h: 58:   Lcd_Cmd(y);
  6420     076C  1283               	bcf	3,5	;RP0=0, select bank0
  6421     076D  1303               	bcf	3,6	;RP1=0, select bank0
  6422     076E  0822               	movf	Lcd_Set_Cursor@y,w
  6423     076F  120A  118A  27E3  120A  118A  	fcall	_Lcd_Cmd
  6424                           
  6425                           ;./lcd.h: 59:  }
  6426     0774  2F9A               	goto	l157
  6427     0775                     l2603:
  6428     0775  3002               	movlw	2
  6429     0776  0620               	xorwf	Lcd_Set_Cursor@a,w
  6430     0777  1D03               	btfss	3,2
  6431     0778  2F7A               	goto	u2561
  6432     0779  2F7B               	goto	u2560
  6433     077A                     u2561:
  6434     077A  2F9A               	goto	l157
  6435     077B                     u2560:
  6436     077B                     l2605:
  6437                           
  6438                           ;./lcd.h: 61:  {;./lcd.h: 62:   temp = 0xC0 + b - 1;
  6439     077B  0876               	movf	Lcd_Set_Cursor@b,w
  6440     077C  3EBF               	addlw	191
  6441     077D  00A3               	movwf	Lcd_Set_Cursor@temp
  6442                           
  6443                           ;./lcd.h: 63:   z = temp>>4;
  6444     077E  0823               	movf	Lcd_Set_Cursor@temp,w
  6445     077F  00F7               	movwf	??_Lcd_Set_Cursor
  6446     0780  3004               	movlw	4
  6447     0781                     u2575:
  6448     0781  1003               	clrc
  6449     0782  0CF7               	rrf	??_Lcd_Set_Cursor,f
  6450     0783  3EFF               	addlw	-1
  6451     0784  1D03               	skipz
  6452     0785  2F81               	goto	u2575
  6453     0786  0877               	movf	??_Lcd_Set_Cursor,w
  6454     0787  00A1               	movwf	Lcd_Set_Cursor@z
  6455     0788                     l2607:
  6456                           
  6457                           ;./lcd.h: 64:   y = temp & 0x0F;
  6458     0788  0823               	movf	Lcd_Set_Cursor@temp,w
  6459     0789  00A2               	movwf	Lcd_Set_Cursor@y
  6460     078A                     l2609:
  6461     078A  300F               	movlw	15
  6462     078B  05A2               	andwf	Lcd_Set_Cursor@y,f
  6463     078C                     l2611:
  6464                           
  6465                           ;./lcd.h: 65:   Lcd_Cmd(z);
  6466     078C  0821               	movf	Lcd_Set_Cursor@z,w
  6467     078D  120A  118A  27E3  120A  118A  	fcall	_Lcd_Cmd
  6468     0792                     l2613:
  6469                           
  6470                           ;./lcd.h: 66:   Lcd_Cmd(y);
  6471     0792  1283               	bcf	3,5	;RP0=0, select bank0
  6472     0793  1303               	bcf	3,6	;RP1=0, select bank0
  6473     0794  0822               	movf	Lcd_Set_Cursor@y,w
  6474     0795  120A  118A  27E3  120A  118A  	fcall	_Lcd_Cmd
  6475     079A                     l157:
  6476     079A  0008               	return
  6477     079B                     __end_of_Lcd_Set_Cursor:
  6478                           
  6479                           	psect	text41
  6480     0B6D                     __ptext41:	
  6481 ;; *************** function _Lcd_Clear *****************
  6482 ;; Defined at:
  6483 ;;		line 43 in file "./lcd.h"
  6484 ;; Parameters:    Size  Location     Type
  6485 ;;		None
  6486 ;; Auto vars:     Size  Location     Type
  6487 ;;		None
  6488 ;; Return value:  Size  Location     Type
  6489 ;;                  1    wreg      void 
  6490 ;; Registers used:
  6491 ;;		wreg, status,2, status,0, pclath, cstack
  6492 ;; Tracked objects:
  6493 ;;		On entry : 0/0
  6494 ;;		On exit  : 0/0
  6495 ;;		Unchanged: 0/0
  6496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6497 ;;      Params:         0       0       0       0       0
  6498 ;;      Locals:         0       0       0       0       0
  6499 ;;      Temps:          0       0       0       0       0
  6500 ;;      Totals:         0       0       0       0       0
  6501 ;;Total ram usage:        0 bytes
  6502 ;; Hardware stack levels used: 1
  6503 ;; Hardware stack levels required when called: 3
  6504 ;; This function calls:
  6505 ;;		_Lcd_Cmd
  6506 ;; This function is called by:
  6507 ;;		_print_TankState
  6508 ;;		_print_Irrigation
  6509 ;;		_print_SoilMoisture
  6510 ;;		_print_ArtificialLight
  6511 ;;		_print_Temperature
  6512 ;; This function uses a non-reentrant model
  6513 ;;
  6514                           
  6515     0B6D                     _Lcd_Clear:	
  6516                           ;psect for function _Lcd_Clear
  6517                           
  6518     0B6D                     l2637:	
  6519                           ;incstack = 0
  6520                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  6521                           
  6522                           
  6523                           ;./lcd.h: 45:  Lcd_Cmd(0);
  6524     0B6D  3000               	movlw	0
  6525     0B6E  120A  118A  27E3  120A  158A  	fcall	_Lcd_Cmd
  6526                           
  6527                           ;./lcd.h: 46:  Lcd_Cmd(1);
  6528     0B73  3001               	movlw	1
  6529     0B74  120A  118A  27E3  120A  158A  	fcall	_Lcd_Cmd
  6530     0B79                     l151:
  6531     0B79  0008               	return
  6532     0B7A                     __end_of_Lcd_Clear:
  6533                           
  6534                           	psect	text42
  6535     0D9D                     __ptext42:	
  6536 ;; *************** function _lcd_debounceButtons *****************
  6537 ;; Defined at:
  6538 ;;		line 170 in file "./lcdFunctions.h"
  6539 ;; Parameters:    Size  Location     Type
  6540 ;;		None
  6541 ;; Auto vars:     Size  Location     Type
  6542 ;;		None
  6543 ;; Return value:  Size  Location     Type
  6544 ;;                  1    wreg      void 
  6545 ;; Registers used:
  6546 ;;		wreg, status,2, status,0, pclath, cstack
  6547 ;; Tracked objects:
  6548 ;;		On entry : 0/0
  6549 ;;		On exit  : 0/0
  6550 ;;		Unchanged: 0/0
  6551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6552 ;;      Params:         0       0       0       0       0
  6553 ;;      Locals:         0       0       0       0       0
  6554 ;;      Temps:          1       0       0       0       0
  6555 ;;      Totals:         1       0       0       0       0
  6556 ;;Total ram usage:        1 bytes
  6557 ;; Hardware stack levels used: 1
  6558 ;; Hardware stack levels required when called: 2
  6559 ;; This function calls:
  6560 ;;		_lcd_turnLeft
  6561 ;;		_lcd_turnRight
  6562 ;; This function is called by:
  6563 ;;		_lcd_run
  6564 ;; This function uses a non-reentrant model
  6565 ;;
  6566                           
  6567     0D9D                     _lcd_debounceButtons:	
  6568                           ;psect for function _lcd_debounceButtons
  6569                           
  6570     0D9D                     l2187:	
  6571                           ;incstack = 0
  6572                           ; Regs used in _lcd_debounceButtons: [wreg+status,2+status,0+pclath+cstack]
  6573                           
  6574                           
  6575                           ;./lcdFunctions.h: 174:   if (PORTBbits.RB1 == 0 && lastLeftButtonState != 0) {
  6576     0D9D  1283               	bcf	3,5	;RP0=0, select bank0
  6577     0D9E  1303               	bcf	3,6	;RP1=0, select bank0
  6578     0D9F  1886               	btfsc	6,1	;volatile
  6579     0DA0  2DA2               	goto	u1911
  6580     0DA1  2DA3               	goto	u1910
  6581     0DA2                     u1911:
  6582     0DA2  2DAD               	goto	l2193
  6583     0DA3                     u1910:
  6584     0DA3                     l2189:
  6585     0DA3  0869               	movf	_lastLeftButtonState,w
  6586     0DA4  1903               	btfsc	3,2
  6587     0DA5  2DA7               	goto	u1921
  6588     0DA6  2DA8               	goto	u1920
  6589     0DA7                     u1921:
  6590     0DA7  2DAD               	goto	l2193
  6591     0DA8                     u1920:
  6592     0DA8                     l2191:
  6593                           
  6594                           ;./lcdFunctions.h: 175:       lcd_turnLeft();
  6595     0DA8  120A  158A  2387  120A  158A  	fcall	_lcd_turnLeft
  6596     0DAD                     l2193:
  6597                           
  6598                           ;./lcdFunctions.h: 179:   if (PORTBbits.RB2 == 0 && lastRightButtonState != 0) {
  6599     0DAD  1283               	bcf	3,5	;RP0=0, select bank0
  6600     0DAE  1303               	bcf	3,6	;RP1=0, select bank0
  6601     0DAF  1906               	btfsc	6,2	;volatile
  6602     0DB0  2DB2               	goto	u1931
  6603     0DB1  2DB3               	goto	u1930
  6604     0DB2                     u1931:
  6605     0DB2  2DBD               	goto	l2199
  6606     0DB3                     u1930:
  6607     0DB3                     l2195:
  6608     0DB3  0868               	movf	_lastRightButtonState,w
  6609     0DB4  1903               	btfsc	3,2
  6610     0DB5  2DB7               	goto	u1941
  6611     0DB6  2DB8               	goto	u1940
  6612     0DB7                     u1941:
  6613     0DB7  2DBD               	goto	l2199
  6614     0DB8                     u1940:
  6615     0DB8                     l2197:
  6616                           
  6617                           ;./lcdFunctions.h: 180:       lcd_turnRight();
  6618     0DB8  120A  158A  2395  120A  158A  	fcall	_lcd_turnRight
  6619     0DBD                     l2199:
  6620                           
  6621                           ;./lcdFunctions.h: 184:   lastLeftButtonState = PORTBbits.RB1;
  6622     0DBD  1283               	bcf	3,5	;RP0=0, select bank0
  6623     0DBE  1303               	bcf	3,6	;RP1=0, select bank0
  6624     0DBF  0C06               	rrf	6,w	;volatile
  6625     0DC0  3901               	andlw	1
  6626     0DC1  00E9               	movwf	_lastLeftButtonState
  6627     0DC2                     l2201:
  6628                           
  6629                           ;./lcdFunctions.h: 185:   lastRightButtonState = PORTBbits.RB2;
  6630     0DC2  0C06               	rrf	6,w	;volatile
  6631     0DC3  00F2               	movwf	??_lcd_debounceButtons
  6632     0DC4  0C72               	rrf	??_lcd_debounceButtons,w
  6633     0DC5  3901               	andlw	1
  6634     0DC6  00E8               	movwf	_lastRightButtonState
  6635     0DC7                     l221:
  6636     0DC7  0008               	return
  6637     0DC8                     __end_of_lcd_debounceButtons:
  6638                           
  6639                           	psect	text43
  6640     0B95                     __ptext43:	
  6641 ;; *************** function _lcd_turnRight *****************
  6642 ;; Defined at:
  6643 ;;		line 216 in file "./lcdFunctions.h"
  6644 ;; Parameters:    Size  Location     Type
  6645 ;;		None
  6646 ;; Auto vars:     Size  Location     Type
  6647 ;;		None
  6648 ;; Return value:  Size  Location     Type
  6649 ;;                  1    wreg      void 
  6650 ;; Registers used:
  6651 ;;		wreg, status,2, status,0
  6652 ;; Tracked objects:
  6653 ;;		On entry : 0/0
  6654 ;;		On exit  : 0/0
  6655 ;;		Unchanged: 0/0
  6656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6657 ;;      Params:         0       0       0       0       0
  6658 ;;      Locals:         0       0       0       0       0
  6659 ;;      Temps:          0       0       0       0       0
  6660 ;;      Totals:         0       0       0       0       0
  6661 ;;Total ram usage:        0 bytes
  6662 ;; Hardware stack levels used: 1
  6663 ;; Hardware stack levels required when called: 1
  6664 ;; This function calls:
  6665 ;;		Nothing
  6666 ;; This function is called by:
  6667 ;;		_lcd_debounceButtons
  6668 ;; This function uses a non-reentrant model
  6669 ;;
  6670                           
  6671     0B95                     _lcd_turnRight:	
  6672                           ;psect for function _lcd_turnRight
  6673                           
  6674     0B95                     l2049:	
  6675                           ;incstack = 0
  6676                           ; Regs used in _lcd_turnRight: [wreg+status,2+status,0]
  6677                           
  6678                           
  6679                           ;./lcdFunctions.h: 219:   if(lcd_index >= lcd_maxIndex)
  6680     0B95  3005               	movlw	5
  6681     0B96  1283               	bcf	3,5	;RP0=0, select bank0
  6682     0B97  1303               	bcf	3,6	;RP1=0, select bank0
  6683     0B98  026A               	subwf	_lcd_index,w
  6684     0B99  1C03               	skipc
  6685     0B9A  2B9C               	goto	u1761
  6686     0B9B  2B9D               	goto	u1760
  6687     0B9C                     u1761:
  6688     0B9C  2BA0               	goto	l2053
  6689     0B9D                     u1760:
  6690     0B9D                     l2051:
  6691                           
  6692                           ;./lcdFunctions.h: 220:     lcd_index = 1;
  6693     0B9D  3001               	movlw	1
  6694     0B9E  00EA               	movwf	_lcd_index
  6695     0B9F  2BA2               	goto	l237
  6696     0BA0                     l2053:
  6697                           
  6698                           ;./lcdFunctions.h: 222:     lcd_index++;
  6699     0BA0  3001               	movlw	1
  6700     0BA1  07EA               	addwf	_lcd_index,f
  6701     0BA2                     l237:
  6702     0BA2  0008               	return
  6703     0BA3                     __end_of_lcd_turnRight:
  6704                           
  6705                           	psect	text44
  6706     0B87                     __ptext44:	
  6707 ;; *************** function _lcd_turnLeft *****************
  6708 ;; Defined at:
  6709 ;;		line 225 in file "./lcdFunctions.h"
  6710 ;; Parameters:    Size  Location     Type
  6711 ;;		None
  6712 ;; Auto vars:     Size  Location     Type
  6713 ;;		None
  6714 ;; Return value:  Size  Location     Type
  6715 ;;                  1    wreg      void 
  6716 ;; Registers used:
  6717 ;;		wreg, status,2, status,0
  6718 ;; Tracked objects:
  6719 ;;		On entry : 0/0
  6720 ;;		On exit  : 0/0
  6721 ;;		Unchanged: 0/0
  6722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6723 ;;      Params:         0       0       0       0       0
  6724 ;;      Locals:         0       0       0       0       0
  6725 ;;      Temps:          0       0       0       0       0
  6726 ;;      Totals:         0       0       0       0       0
  6727 ;;Total ram usage:        0 bytes
  6728 ;; Hardware stack levels used: 1
  6729 ;; Hardware stack levels required when called: 1
  6730 ;; This function calls:
  6731 ;;		Nothing
  6732 ;; This function is called by:
  6733 ;;		_lcd_debounceButtons
  6734 ;; This function uses a non-reentrant model
  6735 ;;
  6736                           
  6737     0B87                     _lcd_turnLeft:	
  6738                           ;psect for function _lcd_turnLeft
  6739                           
  6740     0B87                     l2043:	
  6741                           ;incstack = 0
  6742                           ; Regs used in _lcd_turnLeft: [wreg+status,2+status,0]
  6743                           
  6744                           
  6745                           ;./lcdFunctions.h: 228:   if(lcd_index <= 1)
  6746     0B87  3002               	movlw	2
  6747     0B88  1283               	bcf	3,5	;RP0=0, select bank0
  6748     0B89  1303               	bcf	3,6	;RP1=0, select bank0
  6749     0B8A  026A               	subwf	_lcd_index,w
  6750     0B8B  1803               	skipnc
  6751     0B8C  2B8E               	goto	u1751
  6752     0B8D  2B8F               	goto	u1750
  6753     0B8E                     u1751:
  6754     0B8E  2B92               	goto	l2047
  6755     0B8F                     u1750:
  6756     0B8F                     l2045:
  6757                           
  6758                           ;./lcdFunctions.h: 229:     lcd_index = lcd_maxIndex;
  6759     0B8F  3005               	movlw	5
  6760     0B90  00EA               	movwf	_lcd_index
  6761     0B91  2B94               	goto	l242
  6762     0B92                     l2047:
  6763                           
  6764                           ;./lcdFunctions.h: 231:     lcd_index--;
  6765     0B92  3001               	movlw	1
  6766     0B93  02EA               	subwf	_lcd_index,f
  6767     0B94                     l242:
  6768     0B94  0008               	return
  6769     0B95                     __end_of_lcd_turnLeft:
  6770                           
  6771                           	psect	text45
  6772     0B2A                     __ptext45:	
  6773 ;; *************** function _interruption_init *****************
  6774 ;; Defined at:
  6775 ;;		line 111 in file "./config.h"
  6776 ;; Parameters:    Size  Location     Type
  6777 ;;		None
  6778 ;; Auto vars:     Size  Location     Type
  6779 ;;		None
  6780 ;; Return value:  Size  Location     Type
  6781 ;;                  1    wreg      void 
  6782 ;; Registers used:
  6783 ;;		None
  6784 ;; Tracked objects:
  6785 ;;		On entry : 0/0
  6786 ;;		On exit  : 0/0
  6787 ;;		Unchanged: 0/0
  6788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6789 ;;      Params:         0       0       0       0       0
  6790 ;;      Locals:         0       0       0       0       0
  6791 ;;      Temps:          0       0       0       0       0
  6792 ;;      Totals:         0       0       0       0       0
  6793 ;;Total ram usage:        0 bytes
  6794 ;; Hardware stack levels used: 1
  6795 ;; Hardware stack levels required when called: 1
  6796 ;; This function calls:
  6797 ;;		Nothing
  6798 ;; This function is called by:
  6799 ;;		_main
  6800 ;; This function uses a non-reentrant model
  6801 ;;
  6802                           
  6803     0B2A                     _interruption_init:	
  6804                           ;psect for function _interruption_init
  6805                           
  6806     0B2A                     l2267:	
  6807                           ;incstack = 0
  6808                           ; Regs used in _interruption_init: []
  6809                           
  6810                           
  6811                           ;./config.h: 113:   INTCONbits.GIE=1;
  6812     0B2A  178B               	bsf	11,7	;volatile
  6813                           
  6814                           ;./config.h: 114:   OPTION_REGbits.INTEDG = 1;
  6815     0B2B  1683               	bsf	3,5	;RP0=1, select bank1
  6816     0B2C  1303               	bcf	3,6	;RP1=0, select bank1
  6817     0B2D  1701               	bsf	1,6	;volatile
  6818                           
  6819                           ;./config.h: 116:   INTCONbits.INTE = 1;
  6820     0B2E  160B               	bsf	11,4	;volatile
  6821                           
  6822                           ;./config.h: 118:   INTCONbits.PEIE = 1;
  6823     0B2F  170B               	bsf	11,6	;volatile
  6824                           
  6825                           ;./config.h: 120:   PIE1bits.TMR1IE = 1;
  6826     0B30  140C               	bsf	12,0	;volatile
  6827     0B31                     l106:
  6828     0B31  0008               	return
  6829     0B32                     __end_of_interruption_init:
  6830                           
  6831                           	psect	text46
  6832     0B22                     __ptext46:	
  6833 ;; *************** function _WDT_init *****************
  6834 ;; Defined at:
  6835 ;;		line 39 in file "./config.h"
  6836 ;; Parameters:    Size  Location     Type
  6837 ;;		None
  6838 ;; Auto vars:     Size  Location     Type
  6839 ;;		None
  6840 ;; Return value:  Size  Location     Type
  6841 ;;                  1    wreg      void 
  6842 ;; Registers used:
  6843 ;;		None
  6844 ;; Tracked objects:
  6845 ;;		On entry : 0/0
  6846 ;;		On exit  : 0/0
  6847 ;;		Unchanged: 0/0
  6848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6849 ;;      Params:         0       0       0       0       0
  6850 ;;      Locals:         0       0       0       0       0
  6851 ;;      Temps:          0       0       0       0       0
  6852 ;;      Totals:         0       0       0       0       0
  6853 ;;Total ram usage:        0 bytes
  6854 ;; Hardware stack levels used: 1
  6855 ;; Hardware stack levels required when called: 1
  6856 ;; This function calls:
  6857 ;;		Nothing
  6858 ;; This function is called by:
  6859 ;;		_main
  6860 ;; This function uses a non-reentrant model
  6861 ;;
  6862                           
  6863     0B22                     _WDT_init:	
  6864                           ;psect for function _WDT_init
  6865                           
  6866     0B22                     l2255:	
  6867                           ;incstack = 0
  6868                           ; Regs used in _WDT_init: []
  6869                           
  6870     0B22  1683               	bsf	3,5	;RP0=1, select bank1
  6871     0B23  1303               	bcf	3,6	;RP1=0, select bank1
  6872     0B24  1581               	bsf	1,3	;volatile
  6873     0B25  1401               	bsf	1,0	;volatile
  6874     0B26  1481               	bsf	1,1	;volatile
  6875     0B27  1501               	bsf	1,2	;volatile
  6876     0B28  0064               	clrwdt	;# 
  6877     0B29                     l97:
  6878     0B29  0008               	return
  6879     0B2A                     __end_of_WDT_init:
  6880                           
  6881                           	psect	text47
  6882     0699                     __ptext47:	
  6883 ;; *************** function _Lcd_Init *****************
  6884 ;; Defined at:
  6885 ;;		line 70 in file "./lcd.h"
  6886 ;; Parameters:    Size  Location     Type
  6887 ;;		None
  6888 ;; Auto vars:     Size  Location     Type
  6889 ;;		None
  6890 ;; Return value:  Size  Location     Type
  6891 ;;                  1    wreg      void 
  6892 ;; Registers used:
  6893 ;;		wreg, status,2, status,0, pclath, cstack
  6894 ;; Tracked objects:
  6895 ;;		On entry : 0/0
  6896 ;;		On exit  : 0/0
  6897 ;;		Unchanged: 0/0
  6898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6899 ;;      Params:         0       0       0       0       0
  6900 ;;      Locals:         0       0       0       0       0
  6901 ;;      Temps:          2       0       0       0       0
  6902 ;;      Totals:         2       0       0       0       0
  6903 ;;Total ram usage:        2 bytes
  6904 ;; Hardware stack levels used: 1
  6905 ;; Hardware stack levels required when called: 3
  6906 ;; This function calls:
  6907 ;;		_Lcd_Cmd
  6908 ;;		_Lcd_Port
  6909 ;; This function is called by:
  6910 ;;		_main
  6911 ;; This function uses a non-reentrant model
  6912 ;;
  6913                           
  6914     0699                     _Lcd_Init:	
  6915                           ;psect for function _Lcd_Init
  6916                           
  6917     0699                     l2779:	
  6918                           ;incstack = 0
  6919                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  6920                           
  6921                           
  6922                           ;./lcd.h: 72:   Lcd_Port(0x00);
  6923     0699  3000               	movlw	0
  6924     069A  120A  158A  2477  120A  118A  	fcall	_Lcd_Port
  6925     069F                     l2781:
  6926                           
  6927                           ;./lcd.h: 73:    _delay((unsigned long)((20)*(4000000/4000.0)));
  6928     069F  301A               	movlw	26
  6929     06A0  00F7               	movwf	??_Lcd_Init+1
  6930     06A1  30F8               	movlw	248
  6931     06A2  00F6               	movwf	??_Lcd_Init
  6932     06A3                     u2817:
  6933     06A3  0BF6               	decfsz	??_Lcd_Init,f
  6934     06A4  2EA3               	goto	u2817
  6935     06A5  0BF7               	decfsz	??_Lcd_Init+1,f
  6936     06A6  2EA3               	goto	u2817
  6937     06A7  0000               	nop
  6938     06A8                     l2783:
  6939                           
  6940                           ;./lcd.h: 74:   Lcd_Cmd(0x03);
  6941     06A8  3003               	movlw	3
  6942     06A9  120A  118A  27E3  120A  118A  	fcall	_Lcd_Cmd
  6943                           
  6944                           ;./lcd.h: 75:  _delay((unsigned long)((5)*(4000000/4000.0)));
  6945     06AE  3007               	movlw	7
  6946     06AF  00F7               	movwf	??_Lcd_Init+1
  6947     06B0  307D               	movlw	125
  6948     06B1  00F6               	movwf	??_Lcd_Init
  6949     06B2                     u2827:
  6950     06B2  0BF6               	decfsz	??_Lcd_Init,f
  6951     06B3  2EB2               	goto	u2827
  6952     06B4  0BF7               	decfsz	??_Lcd_Init+1,f
  6953     06B5  2EB2               	goto	u2827
  6954     06B6                     l2785:
  6955                           
  6956                           ;./lcd.h: 76:   Lcd_Cmd(0x03);
  6957     06B6  3003               	movlw	3
  6958     06B7  120A  118A  27E3  120A  118A  	fcall	_Lcd_Cmd
  6959     06BC                     l2787:
  6960                           
  6961                           ;./lcd.h: 77:  _delay((unsigned long)((11)*(4000000/4000.0)));
  6962     06BC  300F               	movlw	15
  6963     06BD  00F7               	movwf	??_Lcd_Init+1
  6964     06BE  3047               	movlw	71
  6965     06BF  00F6               	movwf	??_Lcd_Init
  6966     06C0                     u2837:
  6967     06C0  0BF6               	decfsz	??_Lcd_Init,f
  6968     06C1  2EC0               	goto	u2837
  6969     06C2  0BF7               	decfsz	??_Lcd_Init+1,f
  6970     06C3  2EC0               	goto	u2837
  6971     06C4  2EC5               	nop2
  6972                           
  6973                           ;./lcd.h: 78:   Lcd_Cmd(0x03);
  6974     06C5  3003               	movlw	3
  6975     06C6  120A  118A  27E3  120A  118A  	fcall	_Lcd_Cmd
  6976                           
  6977                           ;./lcd.h: 80:   Lcd_Cmd(0x02);
  6978     06CB  3002               	movlw	2
  6979     06CC  120A  118A  27E3  120A  118A  	fcall	_Lcd_Cmd
  6980                           
  6981                           ;./lcd.h: 81:   Lcd_Cmd(0x02);
  6982     06D1  3002               	movlw	2
  6983     06D2  120A  118A  27E3  120A  118A  	fcall	_Lcd_Cmd
  6984                           
  6985                           ;./lcd.h: 82:   Lcd_Cmd(0x08);
  6986     06D7  3008               	movlw	8
  6987     06D8  120A  118A  27E3  120A  118A  	fcall	_Lcd_Cmd
  6988                           
  6989                           ;./lcd.h: 83:   Lcd_Cmd(0x00);
  6990     06DD  3000               	movlw	0
  6991     06DE  120A  118A  27E3  120A  118A  	fcall	_Lcd_Cmd
  6992                           
  6993                           ;./lcd.h: 84:   Lcd_Cmd(0x0C);
  6994     06E3  300C               	movlw	12
  6995     06E4  120A  118A  27E3  120A  118A  	fcall	_Lcd_Cmd
  6996                           
  6997                           ;./lcd.h: 85:   Lcd_Cmd(0x00);
  6998     06E9  3000               	movlw	0
  6999     06EA  120A  118A  27E3  120A  118A  	fcall	_Lcd_Cmd
  7000                           
  7001                           ;./lcd.h: 86:   Lcd_Cmd(0x06);
  7002     06EF  3006               	movlw	6
  7003     06F0  120A  118A  27E3  120A  118A  	fcall	_Lcd_Cmd
  7004     06F5                     l160:
  7005     06F5  0008               	return
  7006     06F6                     __end_of_Lcd_Init:
  7007                           
  7008                           	psect	text48
  7009     07E3                     __ptext48:	
  7010 ;; *************** function _Lcd_Cmd *****************
  7011 ;; Defined at:
  7012 ;;		line 34 in file "./lcd.h"
  7013 ;; Parameters:    Size  Location     Type
  7014 ;;  a               1    wreg     unsigned char 
  7015 ;; Auto vars:     Size  Location     Type
  7016 ;;  a               1    5[COMMON] unsigned char 
  7017 ;; Return value:  Size  Location     Type
  7018 ;;                  1    wreg      void 
  7019 ;; Registers used:
  7020 ;;		wreg, status,2, status,0, pclath, cstack
  7021 ;; Tracked objects:
  7022 ;;		On entry : 0/0
  7023 ;;		On exit  : 0/0
  7024 ;;		Unchanged: 0/0
  7025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7026 ;;      Params:         0       0       0       0       0
  7027 ;;      Locals:         1       0       0       0       0
  7028 ;;      Temps:          2       0       0       0       0
  7029 ;;      Totals:         3       0       0       0       0
  7030 ;;Total ram usage:        3 bytes
  7031 ;; Hardware stack levels used: 1
  7032 ;; Hardware stack levels required when called: 2
  7033 ;; This function calls:
  7034 ;;		_Lcd_Port
  7035 ;; This function is called by:
  7036 ;;		_Lcd_Clear
  7037 ;;		_Lcd_Set_Cursor
  7038 ;;		_Lcd_Init
  7039 ;; This function uses a non-reentrant model
  7040 ;;
  7041                           
  7042     07E3                     _Lcd_Cmd:	
  7043                           ;psect for function _Lcd_Cmd
  7044                           
  7045                           
  7046                           ;incstack = 0
  7047                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  7048                           ;Lcd_Cmd@a stored from wreg
  7049     07E3  00F5               	movwf	Lcd_Cmd@a
  7050     07E4                     l2439:
  7051                           
  7052                           ;./lcd.h: 34: void Lcd_Cmd(char a);./lcd.h: 35: {;./lcd.h: 36:  RD2 = 0;
  7053     07E4  1283               	bcf	3,5	;RP0=0, select bank0
  7054     07E5  1303               	bcf	3,6	;RP1=0, select bank0
  7055     07E6  1108               	bcf	8,2	;volatile
  7056     07E7                     l2441:
  7057                           
  7058                           ;./lcd.h: 37:  Lcd_Port(a);
  7059     07E7  0875               	movf	Lcd_Cmd@a,w
  7060     07E8  120A  158A  2477  120A  118A  	fcall	_Lcd_Port
  7061     07ED                     l2443:
  7062                           
  7063                           ;./lcd.h: 38:  RD3 = 1;
  7064     07ED  1283               	bcf	3,5	;RP0=0, select bank0
  7065     07EE  1303               	bcf	3,6	;RP1=0, select bank0
  7066     07EF  1588               	bsf	8,3	;volatile
  7067     07F0                     l2445:
  7068                           
  7069                           ;./lcd.h: 39:         _delay((unsigned long)((4)*(4000000/4000.0)));
  7070     07F0  3006               	movlw	6
  7071     07F1  00F4               	movwf	??_Lcd_Cmd+1
  7072     07F2  3030               	movlw	48
  7073     07F3  00F3               	movwf	??_Lcd_Cmd
  7074     07F4                     u2847:
  7075     07F4  0BF3               	decfsz	??_Lcd_Cmd,f
  7076     07F5  2FF4               	goto	u2847
  7077     07F6  0BF4               	decfsz	??_Lcd_Cmd+1,f
  7078     07F7  2FF4               	goto	u2847
  7079     07F8  0000               	nop
  7080     07F9                     l2447:
  7081                           
  7082                           ;./lcd.h: 40:         RD3 = 0;
  7083     07F9  1283               	bcf	3,5	;RP0=0, select bank0
  7084     07FA  1303               	bcf	3,6	;RP1=0, select bank0
  7085     07FB  1188               	bcf	8,3	;volatile
  7086     07FC                     l148:
  7087     07FC  0008               	return
  7088     07FD                     __end_of_Lcd_Cmd:
  7089                           
  7090                           	psect	text49
  7091     0C77                     __ptext49:	
  7092 ;; *************** function _Lcd_Port *****************
  7093 ;; Defined at:
  7094 ;;		line 12 in file "./lcd.h"
  7095 ;; Parameters:    Size  Location     Type
  7096 ;;  a               1    wreg     unsigned char 
  7097 ;; Auto vars:     Size  Location     Type
  7098 ;;  a               1    2[COMMON] unsigned char 
  7099 ;; Return value:  Size  Location     Type
  7100 ;;                  1    wreg      void 
  7101 ;; Registers used:
  7102 ;;		wreg
  7103 ;; Tracked objects:
  7104 ;;		On entry : 0/0
  7105 ;;		On exit  : 0/0
  7106 ;;		Unchanged: 0/0
  7107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7108 ;;      Params:         0       0       0       0       0
  7109 ;;      Locals:         1       0       0       0       0
  7110 ;;      Temps:          0       0       0       0       0
  7111 ;;      Totals:         1       0       0       0       0
  7112 ;;Total ram usage:        1 bytes
  7113 ;; Hardware stack levels used: 1
  7114 ;; Hardware stack levels required when called: 1
  7115 ;; This function calls:
  7116 ;;		Nothing
  7117 ;; This function is called by:
  7118 ;;		_Lcd_Cmd
  7119 ;;		_Lcd_Init
  7120 ;;		_Lcd_Write_Char
  7121 ;; This function uses a non-reentrant model
  7122 ;;
  7123                           
  7124     0C77                     _Lcd_Port:	
  7125                           ;psect for function _Lcd_Port
  7126                           
  7127                           
  7128                           ;incstack = 0
  7129                           ; Regs used in _Lcd_Port: [wreg]
  7130                           ;Lcd_Port@a stored from wreg
  7131     0C77  00F2               	movwf	Lcd_Port@a
  7132     0C78                     l2421:
  7133                           
  7134                           ;./lcd.h: 12: void Lcd_Port(char a);./lcd.h: 13: {;./lcd.h: 14:  if(a & 1)
  7135     0C78  1C72               	btfss	Lcd_Port@a,0
  7136     0C79  2C7B               	goto	u2181
  7137     0C7A  2C7C               	goto	u2180
  7138     0C7B                     u2181:
  7139     0C7B  2C80               	goto	l137
  7140     0C7C                     u2180:
  7141     0C7C                     l2423:
  7142                           
  7143                           ;./lcd.h: 15:   RD4 = 1;
  7144     0C7C  1283               	bcf	3,5	;RP0=0, select bank0
  7145     0C7D  1303               	bcf	3,6	;RP1=0, select bank0
  7146     0C7E  1608               	bsf	8,4	;volatile
  7147     0C7F  2C83               	goto	l138
  7148     0C80                     l137:	
  7149                           ;./lcd.h: 16:  else
  7150                           
  7151                           
  7152                           ;./lcd.h: 17:   RD4 = 0;
  7153     0C80  1283               	bcf	3,5	;RP0=0, select bank0
  7154     0C81  1303               	bcf	3,6	;RP1=0, select bank0
  7155     0C82  1208               	bcf	8,4	;volatile
  7156     0C83                     l138:
  7157                           
  7158                           ;./lcd.h: 19:  if(a & 2)
  7159     0C83  1CF2               	btfss	Lcd_Port@a,1
  7160     0C84  2C86               	goto	u2191
  7161     0C85  2C87               	goto	u2190
  7162     0C86                     u2191:
  7163     0C86  2C89               	goto	l139
  7164     0C87                     u2190:
  7165     0C87                     l2425:
  7166                           
  7167                           ;./lcd.h: 20:   RD5 = 1;
  7168     0C87  1688               	bsf	8,5	;volatile
  7169     0C88  2C8A               	goto	l140
  7170     0C89                     l139:	
  7171                           ;./lcd.h: 21:  else
  7172                           
  7173                           
  7174                           ;./lcd.h: 22:   RD5 = 0;
  7175     0C89  1288               	bcf	8,5	;volatile
  7176     0C8A                     l140:
  7177                           
  7178                           ;./lcd.h: 24:  if(a & 4)
  7179     0C8A  1D72               	btfss	Lcd_Port@a,2
  7180     0C8B  2C8D               	goto	u2201
  7181     0C8C  2C8E               	goto	u2200
  7182     0C8D                     u2201:
  7183     0C8D  2C90               	goto	l141
  7184     0C8E                     u2200:
  7185     0C8E                     l2427:
  7186                           
  7187                           ;./lcd.h: 25:   RD6 = 1;
  7188     0C8E  1708               	bsf	8,6	;volatile
  7189     0C8F  2C91               	goto	l142
  7190     0C90                     l141:	
  7191                           ;./lcd.h: 26:  else
  7192                           
  7193                           
  7194                           ;./lcd.h: 27:   RD6 = 0;
  7195     0C90  1308               	bcf	8,6	;volatile
  7196     0C91                     l142:
  7197                           
  7198                           ;./lcd.h: 29:  if(a & 8)
  7199     0C91  1DF2               	btfss	Lcd_Port@a,3
  7200     0C92  2C94               	goto	u2211
  7201     0C93  2C95               	goto	u2210
  7202     0C94                     u2211:
  7203     0C94  2C97               	goto	l143
  7204     0C95                     u2210:
  7205     0C95                     l2429:
  7206                           
  7207                           ;./lcd.h: 30:   RD7 = 1;
  7208     0C95  1788               	bsf	8,7	;volatile
  7209     0C96  2C98               	goto	l145
  7210     0C97                     l143:	
  7211                           ;./lcd.h: 31:  else
  7212                           
  7213                           
  7214                           ;./lcd.h: 32:   RD7 = 0;
  7215     0C97  1388               	bcf	8,7	;volatile
  7216     0C98                     l145:
  7217     0C98  0008               	return
  7218     0C99                     __end_of_Lcd_Port:
  7219                           
  7220                           	psect	text50
  7221     0B60                     __ptext50:	
  7222 ;; *************** function _ADC_init *****************
  7223 ;; Defined at:
  7224 ;;		line 123 in file "./config.h"
  7225 ;; Parameters:    Size  Location     Type
  7226 ;;		None
  7227 ;; Auto vars:     Size  Location     Type
  7228 ;;		None
  7229 ;; Return value:  Size  Location     Type
  7230 ;;                  1    wreg      void 
  7231 ;; Registers used:
  7232 ;;		None
  7233 ;; Tracked objects:
  7234 ;;		On entry : 0/0
  7235 ;;		On exit  : 0/0
  7236 ;;		Unchanged: 0/0
  7237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7238 ;;      Params:         0       0       0       0       0
  7239 ;;      Locals:         0       0       0       0       0
  7240 ;;      Temps:          0       0       0       0       0
  7241 ;;      Totals:         0       0       0       0       0
  7242 ;;Total ram usage:        0 bytes
  7243 ;; Hardware stack levels used: 1
  7244 ;; Hardware stack levels required when called: 1
  7245 ;; This function calls:
  7246 ;;		Nothing
  7247 ;; This function is called by:
  7248 ;;		_main
  7249 ;; This function uses a non-reentrant model
  7250 ;;
  7251                           
  7252     0B60                     _ADC_init:	
  7253                           ;psect for function _ADC_init
  7254                           
  7255     0B60                     l2269:	
  7256                           ;incstack = 0
  7257                           ; Regs used in _ADC_init: []
  7258                           
  7259                           
  7260                           ;./config.h: 125:    ADCON1bits.PCFG0=0;
  7261     0B60  1683               	bsf	3,5	;RP0=1, select bank1
  7262     0B61  1303               	bcf	3,6	;RP1=0, select bank1
  7263     0B62  101F               	bcf	31,0	;volatile
  7264                           
  7265                           ;./config.h: 126:    ADCON1bits.PCFG1=0;
  7266     0B63  109F               	bcf	31,1	;volatile
  7267                           
  7268                           ;./config.h: 127:    ADCON1bits.PCFG2=0;
  7269     0B64  111F               	bcf	31,2	;volatile
  7270                           
  7271                           ;./config.h: 128:    ADCON1bits.PCFG3=0;
  7272     0B65  119F               	bcf	31,3	;volatile
  7273                           
  7274                           ;./config.h: 131:    ADCON1bits.ADFM = 1;
  7275     0B66  179F               	bsf	31,7	;volatile
  7276                           
  7277                           ;./config.h: 134:    ADCON0bits.ADCS0 = 0 ;
  7278     0B67  1283               	bcf	3,5	;RP0=0, select bank0
  7279     0B68  1303               	bcf	3,6	;RP1=0, select bank0
  7280     0B69  131F               	bcf	31,6	;volatile
  7281                           
  7282                           ;./config.h: 135:    ADCON0bits.ADCS1 = 0 ;
  7283     0B6A  139F               	bcf	31,7	;volatile
  7284                           
  7285                           ;./config.h: 137:    ADCON0bits.ADON = 1;
  7286     0B6B  141F               	bsf	31,0	;volatile
  7287     0B6C                     l109:
  7288     0B6C  0008               	return
  7289     0B6D                     __end_of_ADC_init:
  7290                           
  7291                           	psect	text51
  7292     0D01                     __ptext51:	
  7293 ;; *************** function _interruptionHandler *****************
  7294 ;; Defined at:
  7295 ;;		line 24 in file "main.c"
  7296 ;; Parameters:    Size  Location     Type
  7297 ;;		None
  7298 ;; Auto vars:     Size  Location     Type
  7299 ;;		None
  7300 ;; Return value:  Size  Location     Type
  7301 ;;                  1    wreg      void 
  7302 ;; Registers used:
  7303 ;;		wreg
  7304 ;; Tracked objects:
  7305 ;;		On entry : 0/0
  7306 ;;		On exit  : 0/0
  7307 ;;		Unchanged: 0/0
  7308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7309 ;;      Params:         0       0       0       0       0
  7310 ;;      Locals:         0       0       0       0       0
  7311 ;;      Temps:          2       0       0       0       0
  7312 ;;      Totals:         2       0       0       0       0
  7313 ;;Total ram usage:        2 bytes
  7314 ;; Hardware stack levels used: 1
  7315 ;; This function calls:
  7316 ;;		Nothing
  7317 ;; This function is called by:
  7318 ;;		Interrupt level 1
  7319 ;; This function uses a non-reentrant model
  7320 ;;
  7321                           
  7322     0D01                     _interruptionHandler:	
  7323                           ;psect for function _interruptionHandler
  7324                           
  7325     0D01                     i1l2351:
  7326                           
  7327                           ;main.c: 26:   if(INTCONbits.INTF)
  7328     0D01  1C8B               	btfss	11,1	;volatile
  7329     0D02  2D04               	goto	u214_21
  7330     0D03  2D05               	goto	u214_20
  7331     0D04                     u214_21:
  7332     0D04  2D0D               	goto	i1l249
  7333     0D05                     u214_20:
  7334     0D05                     i1l2353:
  7335                           
  7336                           ;main.c: 27:   {;main.c: 28:     INTCONbits.INTF = 0;
  7337     0D05  108B               	bcf	11,1	;volatile
  7338                           
  7339                           ;main.c: 29:     tankState = WTANK_ERROR;
  7340     0D06  3003               	movlw	3
  7341     0D07  00FB               	movwf	_tankState
  7342                           
  7343                           ;main.c: 30:     irrigationState = IRRIG_ERROR;
  7344     0D08  3002               	movlw	2
  7345     0D09  1283               	bcf	3,5	;RP0=0, select bank0
  7346     0D0A  1303               	bcf	3,6	;RP1=0, select bank0
  7347     0D0B  00ED               	movwf	_irrigationState
  7348                           
  7349                           ;main.c: 31:   }
  7350     0D0C  2D1E               	goto	i1l252
  7351     0D0D                     i1l249:	
  7352                           ;main.c: 32:   else if(PIR1bits.TMR1IF)
  7353                           
  7354     0D0D  1283               	bcf	3,5	;RP0=0, select bank0
  7355     0D0E  1303               	bcf	3,6	;RP1=0, select bank0
  7356     0D0F  1C0C               	btfss	12,0	;volatile
  7357     0D10  2D12               	goto	u215_21
  7358     0D11  2D13               	goto	u215_20
  7359     0D12                     u215_21:
  7360     0D12  2D1E               	goto	i1l252
  7361     0D13                     u215_20:
  7362     0D13                     i1l2355:
  7363                           
  7364                           ;main.c: 33:   {;main.c: 34:     PIR1bits.TMR1IF = 0;
  7365     0D13  100C               	bcf	12,0	;volatile
  7366                           
  7367                           ;main.c: 37:     TMR1L = 0xDC;
  7368     0D14  30DC               	movlw	220
  7369     0D15  008E               	movwf	14	;volatile
  7370                           
  7371                           ;main.c: 38:     TMR1H = 0x0B;
  7372     0D16  300B               	movlw	11
  7373     0D17  008F               	movwf	15	;volatile
  7374     0D18                     i1l2357:
  7375                           
  7376                           ;main.c: 40:     timerCounter++;
  7377     0D18  3001               	movlw	1
  7378     0D19  07DC               	addwf	_timerCounter,f	;volatile
  7379     0D1A  1803               	skipnc
  7380     0D1B  0ADD               	incf	_timerCounter+1,f	;volatile
  7381     0D1C  3000               	movlw	0
  7382     0D1D  07DD               	addwf	_timerCounter+1,f	;volatile
  7383     0D1E                     i1l252:
  7384     0D1E  0871               	movf	??_interruptionHandler+1,w
  7385     0D1F  008A               	movwf	10
  7386     0D20  0E70               	swapf	??_interruptionHandler,w
  7387     0D21  0083               	movwf	3
  7388     0D22  0EFE               	swapf	btemp,f
  7389     0D23  0E7E               	swapf	btemp,w
  7390     0D24  0009               	retfie
  7391     0D25                     __end_of_interruptionHandler:
  7392     0002                     ___latbits      equ	2
  7393     0006                     fptotal         equ	6
  7394                           
  7395                           	psect	intentry
  7396     0004                     __pintentry:	
  7397                           ;incstack = 0
  7398                           ; Regs used in _interruptionHandler: [wreg]
  7399                           
  7400     0004                     interrupt_function:
  7401     007E                     saved_w         set	btemp
  7402     0004  00FE               	movwf	btemp
  7403     0005  0E03               	swapf	3,w
  7404     0006  00F0               	movwf	??_interruptionHandler
  7405     0007  080A               	movf	10,w
  7406     0008  00F1               	movwf	??_interruptionHandler+1
  7407     0009  120A  158A  2D01   	ljmp	_interruptionHandler
  7408                           
  7409                           	psect	functab
  7410     0045                     __pfunctab:
  7411     0045                     __fptable:
  7412     0045                     fptable:
  7413     0045  00FF               	movwf	(btemp+1)& (0+127)
  7414     0046  3000               	movlw	high fptable
  7415     0047  008A               	movwf	10
  7416     0048  087F               	movf	(btemp+1)& (0+127),w
  7417     0049  0782               	addwf	2,f
  7418     004A                     fpbase:
  7419     004A  284A               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  7420     004B                     fp__interrupt_WTANK_timeout:
  7421     004B  120A  158A  2B32   	ljmp	_interrupt_WTANK_timeout
  7422     004E                     fp__ADC_readAll:
  7423     004E                     entry__ADC_readAll:
  7424     004E  120A  158A  2BB2   	ljmp	_ADC_readAll
  7425     0051                     fp__interrupt_IRRIG_timeout:
  7426     0051  120A  158A  2B4B   	ljmp	_interrupt_IRRIG_timeout
  7427     0054                     __end_of__fptable:
  7428     000F                     __size_of__fptable equ	__end_of__fptable-__fptable
  7429     007E                     btemp           set	126	;btemp
  7430     007E                     wtemp0          set	126
  7431                           
  7432                           	psect	config
  7433                           
  7434                           ;Config register CONFIG @ 0x2007
  7435                           ;	Oscillator Selection bits
  7436                           ;	FOSC = HS, HS oscillator
  7437                           ;	Watchdog Timer Enable bit
  7438                           ;	WDTE = ON, WDT enabled
  7439                           ;	Power-up Timer Enable bit
  7440                           ;	PWRTE = ON, PWRT enabled
  7441                           ;	Brown-out Reset Enable bit
  7442                           ;	BOREN = ON, BOR enabled
  7443                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  7444                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  7445                           ;	Data EEPROM Memory Code Protection bit
  7446                           ;	CPD = OFF, Data EEPROM code protection off
  7447                           ;	Flash Program Memory Write Enable bits
  7448                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  7449                           ;	In-Circuit Debugger Mode bit
  7450                           ;	DEBUG = 0x1, unprogrammed default
  7451                           ;	Flash Program Memory Code Protection bit
  7452                           ;	CP = OFF, Code protection off
  7453     2007                     	org	8199
  7454     2007  3F76               	dw	16246

Data Sizes:
    Strings     114
    Constant    0
    Data        41
    BSS         53
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     60      79
    BANK1            80      0      70
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> print_SoilMoisture@buffer(BANK0[16]), print_Temperature@buffer(BANK0[16]), 

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> print_SoilMoisture@buffer(BANK0[16]), print_Temperature@buffer(BANK0[16]), 

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    IrrigationStateString	PTR unsigned char [3] size(1) Largest target is 6
		 -> STR_5(CODE[3]), STR_6(CODE[4]), STR_7(CODE[6]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 16
		 -> draw_Index@temp_index(BANK0[3]), print_SoilMoisture@buffer(BANK0[16]), print_Temperature@buffer(BANK0[16]), STR_1(CODE[6]), 
		 -> STR_10(CODE[13]), STR_12(CODE[15]), STR_13(CODE[7]), STR_14(CODE[10]), 
		 -> STR_15(CODE[13]), STR_2(CODE[5]), STR_3(CODE[6]), STR_4(CODE[5]), 
		 -> STR_5(CODE[3]), STR_6(CODE[4]), STR_7(CODE[6]), STR_8(CODE[14]), 
		 -> STR_9(CODE[11]), 

    runTimer@timer	PTR struct . size(2) Largest target is 6
		 -> timer_ADCReadAll(BANK1[6]), timer_IRRIG_Timeout(BANK1[6]), timer_WTANK_Timeout(BANK1[6]), 

    runTimer@timer$callback	PTR FTN()void  size(1) Largest target is 1
		 -> ADC_readAll(), interrupt_IRRIG_timeout(), interrupt_WTANK_timeout(), 

    S1159$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> print_SoilMoisture@buffer(BANK0[16]), print_Temperature@buffer(BANK0[16]), 

    S1159$source	PTR const unsigned char  size(1) Largest target is 0

    S319$callback	PTR FTN()void  size(1) Largest target is 1
		 -> ADC_readAll(), interrupt_IRRIG_timeout(), interrupt_WTANK_timeout(), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_11(CODE[3]), STR_16(CODE[3]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 16
		 -> print_SoilMoisture@buffer(BANK0[16]), print_Temperature@buffer(BANK0[16]), 

    startTimer@timer	PTR struct . size(2) Largest target is 6
		 -> timer_ADCReadAll(BANK1[6]), timer_IRRIG_Timeout(BANK1[6]), timer_WTANK_Timeout(BANK1[6]), 

    startTimer@timer$callback	PTR FTN()void  size(1) Largest target is 1
		 -> ADC_readAll(), interrupt_IRRIG_timeout(), interrupt_WTANK_timeout(), 

    stopTimer@timer	PTR struct . size(2) Largest target is 6
		 -> timer_IRRIG_Timeout(BANK1[6]), timer_WTANK_Timeout(BANK1[6]), 

    stopTimer@timer$callback	PTR FTN()void  size(1) Largest target is 1
		 -> ADC_readAll(), interrupt_IRRIG_timeout(), interrupt_WTANK_timeout(), 

    TankStateString	PTR unsigned char [4] size(1) Largest target is 6
		 -> STR_1(CODE[6]), STR_2(CODE[5]), STR_3(CODE[6]), STR_4(CODE[5]), 

    timer_ADCReadAll$callback	PTR FTN()void  size(1) Largest target is 1
		 -> ADC_readAll(), interrupt_IRRIG_timeout(), interrupt_WTANK_timeout(), 

    timer_IRRIG_Timeout$callback	PTR FTN()void  size(1) Largest target is 1
		 -> ADC_readAll(), interrupt_IRRIG_timeout(), interrupt_WTANK_timeout(), 

    timer_WTANK_Timeout$callback	PTR FTN()void  size(1) Largest target is 1
		 -> ADC_readAll(), interrupt_IRRIG_timeout(), interrupt_WTANK_timeout(), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 3
		 -> STR_11(CODE[3]), STR_16(CODE[3]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 3
		 -> STR_11(CODE[3]), STR_16(CODE[3]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_11(CODE[3]), STR_16(CODE[3]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 


Critical Paths under _main in COMMON

    _startFilling->_startTimer
    _startIrrigation->_startTimer
    _stopFilling->_stopTimer
    _stopIrrigation->_stopTimer
    _map->___lmul
    ___aldiv->___lmul
    _readLight->_ADC_Read
    _print_TankState->_Lcd_Write_String
    _vfpfcnvrt->___awdiv
    _vfpfcnvrt->_abs
    _abs->___awmod
    _print_Irrigation->_Lcd_Write_String
    _print_ArtificialLight->_Lcd_Write_String
    _draw_Index->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _interruptionHandler in COMMON

    None.

Critical Paths under _main in BANK0

    _readTemperature->_map
    _readSoilMoisture->_map
    _map->___aldiv
    ___aldiv->___lmul
    _lcd_run->_print_SoilMoisture
    _lcd_run->_print_Temperature
    _print_Temperature->_sprintf
    _print_TankState->_draw_Index
    _print_SoilMoisture->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_fputc
    _print_Irrigation->_draw_Index
    _print_ArtificialLight->_draw_Index
    _draw_Index->_Lcd_Write_String

Critical Paths under _interruptionHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptionHandler in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptionHandler in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptionHandler in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   24796
                           _ADC_init
                        _ADC_readAll
                           _Lcd_Init
                           _WDT_init
                  _interruption_init
                            _lcd_run
                          _pins_init
                           _runTimer
                _run_IrrigationLogic
                 _run_waterTankLogic
                         _startTimer
                    _timer1_1ms_init
 ---------------------------------------------------------------------------------
 (1) _timer1_1ms_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _run_waterTankLogic                                   2     2      0     293
                                              6 COMMON     2     2      0
                   _check_TankStatus
                       _startFilling
                        _stopFilling
 ---------------------------------------------------------------------------------
 (2) _startFilling                                         0     0      0      69
                         _startTimer
 ---------------------------------------------------------------------------------
 (2) _check_TankStatus                                     3     3      0     178
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _run_IrrigationLogic                                  2     0      2     160
                                              6 COMMON     2     0      2
                    _startIrrigation
                     _stopIrrigation
 ---------------------------------------------------------------------------------
 (2) _startIrrigation                                      0     0      0      69
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _startTimer                                           4     2      2      69
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _runTimer                                             8     6      2    2416
                                             50 BANK0      8     6      2
                        _ADC_readAll *
            _interrupt_IRRIG_timeout *
            _interrupt_WTANK_timeout *
 ---------------------------------------------------------------------------------
 (2) _interrupt_WTANK_timeout                              0     0      0      46
                        _stopFilling
 ---------------------------------------------------------------------------------
 (2) _stopFilling                                          0     0      0      46
                          _stopTimer
 ---------------------------------------------------------------------------------
 (2) _interrupt_IRRIG_timeout                              0     0      0      46
                     _stopIrrigation
 ---------------------------------------------------------------------------------
 (2) _stopIrrigation                                       0     0      0      46
                          _stopTimer
 ---------------------------------------------------------------------------------
 (3) _stopTimer                                            4     2      2      46
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _ADC_readAll                                          0     0      0    2095
                          _readLight
                   _readSoilMoisture
                    _readTemperature
 ---------------------------------------------------------------------------------
 (3) _readTemperature                                      0     0      0    1033
                           _ADC_Read
                                _map
 ---------------------------------------------------------------------------------
 (3) _readSoilMoisture                                     0     0      0    1033
                           _ADC_Read
                                _map
 ---------------------------------------------------------------------------------
 (4) _map                                                 30    20     10    1004
                                             20 BANK0     30    20     10
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              13     5      8     142
                                              2 COMMON     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (5) ___aldiv                                             15     7      8     451
                                              5 BANK0     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _readLight                                            0     0      0      29
                           _ADC_Read
 ---------------------------------------------------------------------------------
 (4) _ADC_Read                                             4     2      2      29
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _pins_init                                            4     1      3      98
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _lcd_run                                              0     0      0   19242
                _lcd_debounceButtons
              _print_ArtificialLight
                   _print_Irrigation
                 _print_SoilMoisture
                    _print_TankState
                  _print_Temperature
 ---------------------------------------------------------------------------------
 (2) _print_Temperature                                   16    16      0    5439
                                             44 BANK0     16    16      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                         _draw_Index
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _print_TankState                                      0     0      0    2788
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _draw_Index
 ---------------------------------------------------------------------------------
 (2) _print_SoilMoisture                                  16    16      0    5439
                                             44 BANK0     16    16      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                         _draw_Index
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             19    15      4    2215
                                             27 BANK0     17    13      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             5     1      4    1897
                                             22 BANK0      5     1      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           13     9      4    1697
                                              9 BANK0     13     9      4
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                               13     9      4     230
                                              2 COMMON     4     0      4
                                              0 BANK0      9     9      0
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2      96
                                              8 COMMON     2     0      2
                                              0 BANK0      2     2      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     298
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     302
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _print_Irrigation                                     0     0      0    2788
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _draw_Index
 ---------------------------------------------------------------------------------
 (2) _print_ArtificialLight                                0     0      0    2788
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _draw_Index
 ---------------------------------------------------------------------------------
 (3) _draw_Index                                           3     3      0    1335
                                              5 BANK0      3     3      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (4) _Lcd_Write_String                                     7     5      2     522
                                              7 COMMON     2     0      2
                                              0 BANK0      5     5      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (5) _Lcd_Write_Char                                       4     4      0     356
                                              3 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Set_Cursor                                       6     5      1     696
                                              6 COMMON     2     1      1
                                              0 BANK0      4     4      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Clear                                            0     0      0     235
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_debounceButtons                                  1     1      0       0
                                              2 COMMON     1     1      0
                       _lcd_turnLeft
                      _lcd_turnRight
 ---------------------------------------------------------------------------------
 (3) _lcd_turnRight                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _lcd_turnLeft                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruption_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     423
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (5) _Lcd_Cmd                                              3     3      0     235
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (6) _Lcd_Port                                             1     1      0     188
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interruptionHandler                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _ADC_readAll
     _readLight
       _ADC_Read
     _readSoilMoisture
       _ADC_Read
       _map
         ___aldiv
           ___lmul (ARG)
         ___lmul
     _readTemperature
       _ADC_Read
       _map
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _WDT_init
   _interruption_init
   _lcd_run
     _lcd_debounceButtons
       _lcd_turnLeft
       _lcd_turnRight
     _print_ArtificialLight
       _Lcd_Clear
         _Lcd_Cmd
       _Lcd_Set_Cursor
         _Lcd_Cmd
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _draw_Index
         _Lcd_Set_Cursor
         _Lcd_Write_String
     _print_Irrigation
       _Lcd_Clear
       _Lcd_Set_Cursor
       _Lcd_Write_String
       _draw_Index
     _print_SoilMoisture
       _Lcd_Clear
       _Lcd_Set_Cursor
       _Lcd_Write_Char
       _Lcd_Write_String
       _draw_Index
       _sprintf
         _vfprintf
           _vfpfcnvrt
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _fputc
               _putch
     _print_TankState
       _Lcd_Clear
       _Lcd_Set_Cursor
       _Lcd_Write_String
       _draw_Index
     _print_Temperature
       _Lcd_Clear
       _Lcd_Set_Cursor
       _Lcd_Write_Char
       _Lcd_Write_String
       _draw_Index
       _sprintf
   _pins_init
   _runTimer
     _ADC_readAll *
     _interrupt_IRRIG_timeout *
       _stopIrrigation
         _stopTimer
     _interrupt_WTANK_timeout *
       _stopFilling
         _stopTimer
   _run_IrrigationLogic
     _startIrrigation
       _startTimer
     _stopIrrigation
   _run_waterTankLogic
     _check_TankStatus
     _startFilling
       _startTimer
     _stopFilling
   _startTimer
   _timer1_1ms_init

 _interruptionHandler (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0      70     87.5%
BITBANK1            80      0       0      0.0%
BANK0               80     60      79     98.8%
BITBANK0            80      0       0      0.0%
COMMON              14     10      12     85.7%
BITCOMMON           14      0       1      7.1%
DATA                 0      0     163      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Thu Dec 12 01:20:03 2024

                                pc 0002                                 l97 0B29  
                     ___awdiv@sign 0077                                 fsr 0004  
                              l100 0B5F                                l103 0BB1  
                              l112 0D37                                l106 0B31  
                              l210 0698                                l202 0FB8  
                              l114 0D3D                                l122 0143  
                              l115 0D3E                                l131 0B86  
                              l140 0C8A                                l212 0693  
                              l109 0B6C                                l141 0C90  
                              l221 0DC7                                l125 0D72  
                              l142 0C91                                l206 05D5  
                              l118 0D48                                l134 0BC1  
                              l143 0C97                                l151 0B79  
                              l311 0BED                                l160 06F5  
                              l216 0570                                l232 0EA3  
                              l128 0D9C                                l312 0BFA  
                              l145 0C98                                l137 0C80  
                              l138 0C83                                l242 0B94  
                              l139 0C89                                l163 0E30  
                              l315 0BDA                                l148 07FC  
                              l316 0BE7                                l308 0DFB  
                              l260 0369                                l237 0BA2  
                              l157 079A                                l333 0E67  
                              l319 0B39                                l327 0505  
                              l169 0F72                                l337 0CBA  
                              l257 030B                                l194 0C76  
                              l258 0355                                l380 0C13  
                              l292 0FFF                                l381 0C21  
                              l373 0F2C                                l198 0EE7  
                              l640 074C                                l384 0C27  
                              l385 0C36                                l377 0F2C  
                              l298 0FFF                                l627 0638  
                              l539 0384                                l388 0B54  
                              l549 0408                                l488 07E2  
                              l937 0D00                                l981 0CDD  
                              l975 0232                                l988 0BD4  
                              _RD2 0042                                _RD3 0043  
                              _RD4 0044                                _RD5 0045  
                              _RD6 0046                                _RD7 0047  
                ??_startIrrigation 0076                       _startFilling 0BE8  
                              _abs 0BC2                                _map 0054  
                    ?_lcd_turnLeft 0070                                fsr0 0004  
                              indf 0000                       ___awmod@sign 0077  
                      _stopFilling 0BD5                               l1000 02D2  
                             l1011 07FE                               ?_abs 0078  
                             l2013 0B7A                               l2201 0DC2  
                             l2043 0B87                               l2051 0B9D  
                             l2203 0FB9                               l2045 0B8F  
                             l2053 0BA0                               l2061 0BD5  
                             l2221 0FEB                               l2213 0FD9  
                             l2205 0FCB                               l2301 0DCE  
                             l2047 0B92                               l2071 0C2D  
                             l2055 0E31                               l2223 0FF0  
                             l2215 0FDE                               l2207 0FCE  
                             l2231 0BE8                               l2303 0DD3  
                             l2311 0DE3                               l2049 0B95  
                             l2065 0BDE                               l2241 0C0E  
                             l2321 0EF5                               l2225 0FF2  
                             l2217 0FE3                               l2209 0FD3  
                             l2305 0DD7                               l2067 0C22  
                             l2251 0B4B                               l2059 0E44  
                             l2331 0F18                               l2323 0EF9  
                             l2227 0FF7                               l2219 0FE6  
                             l2235 0BF1                               l2307 0DDD  
                             l2421 0C78                               l1701 05DB  
                             l2261 0BAE                               l2501 03A5  
                             l2237 0B32                               l2253 0B50  
                             l2245 0C16                               l2333 0F1E  
                             l2325 0EFF                               l2317 0EE8  
                             l2229 0FFC                               l2423 0C7C  
                             l2255 0B22                               l2191 0DA8  
                             l1711 05ED                               l1703 05E0  
                             l2431 0BC2                               l2263 0BAF  
                             l2511 03D2                               l2503 03A8  
                             l2239 0B37                               l2247 0C17  
                             l2327 0F05                               l2319 0EF0  
                             l2425 0C87                               l2441 07E7  
                             l2193 0DAD                               l2601 076C  
                             l1721 0601                               l1713 05EF  
                             l1705 05E2                               l2433 0BC6  
                             l2265 0BB0                               l2521 03F5  
                             l2513 03E0                               l2505 03B3  
                             l2249 0C18                               l2329 0F0B  
                             l2257 0B55                               l2427 0C8E  
                             l2443 07ED                               l2267 0B2A  
                             l2195 0DB3                               l2187 0D9D  
                             l2611 078C                               l2603 0775  
                             l2451 0DFF                               l1731 0624  
                             l1723 0605                               l1715 05F5  
                             l1707 05E6                               l2435 0BC7  
                             l2531 0159                               l2259 0BA4  
                             l2523 0400                               l2515 03E1  
                             l2507 03B7                               l2269 0B60  
                             l2429 0C95                               l2445 07F0  
                             l2197 0DB8                               l2189 0DA3  
                             l2613 0792                               l2605 077B  
                             l2461 0E19                               l2453 0E01  
                             l2621 0F56                               l2701 0F9A  
                             l1725 0616                               l1717 05F8  
                             l1733 062A                               l1709 05EB  
                             l1741 06F6                               l2541 0185  
                             l2533 0161                               l2517 03EA  
                             l2509 03C0                               l2447 07F9  
                             l2439 07E4                               l2199 0DBD  
                             l2607 0788                               l2471 0E2D  
                             l2463 0E1D                               l2455 0E05  
                             l2615 0F2D                               l2703 0FA2  
                             l1735 062F                               l1727 061C  
                             l1719 05FF                               l1751 0706  
                             l1743 06F7                               l2551 01BF  
                             l2543 0192                               l2535 0167  
                             l2527 0144                               l2623 0CBB  
                             l2519 03F0                               l2609 078A  
                             l2465 0E20                               l2457 0E08  
                             l2449 0DFD                               l2617 0F32  
                             l2641 0C5E                               l2705 0FB3  
                             l1737 0634                               l1729 061D  
                             l1761 071D                               l1753 070B  
                             l1745 06FB                               l2561 01E9  
                             l2553 01D4                               l2545 0197  
                             l2537 016D                               l2529 0155  
                             l2625 0CC0                               l2721 05AA  
                             l2713 058A                               l2481 07C9  
                             l2473 079B                               l2633 0D49  
                             l2467 0E26                               l2459 0E16  
                             l2619 0F4E                               l2643 0C61  
                             l2731 0639                               l1763 0721  
                             l1755 0711                               l1771 073E  
                             l1747 0700                               l2563 01F2  
                             l2555 01DA                               l2547 0199  
                             l2539 0179                               l2627 0CCD  
                             l2651 0CDE                               l2723 05B2  
                             l2715 0594                               l2707 0571  
                             l2803 0E8C                               l2491 0377  
                             l2483 07DA                               l2475 07A5  
                             l2635 0D73                               l2811 04A0  
                             l2299 0DC8                               l2637 0B6D  
                             l2469 0E29                               l2645 0C63  
                             l2741 0661                               l2733 064B  
                             l1773 0743                               l1765 072B  
                             l1757 0714                               l1749 0702  
                             l1781 0239                               l2565 0206  
                             l2557 01DF                               l2549 01A0  
                             l2573 0219                               l2629 0CDB  
                             l2661 0CF7                               l2653 0CE2  
                             l2725 05C1                               l2717 0599  
                             l2709 0583                               l2805 0E9F  
                             l1941 0D26                               l2493 0388  
                             l2477 07A9                               l2581 008C  
                             l2813 04BA                               l2821 02D3  
                             l2591 0750                               l2647 0C65  
                             l2639 0C56                               l2751 068A  
                             l2743 0669                               l1775 0748  
                             l1767 0731                               l1759 071B  
                             l1783 023F                               l2559 01E4  
                             l2567 020A                               l2655 0CE6  
                             l2727 05CA                               l2719 05A1  
                             l1943 0D32                               l2495 0393  
                             l2487 0370                               l2479 07C0  
                             l2815 04CE                               l2807 048B  
                             l2831 02E3                               l2823 02DD  
                             l2593 0755                               l2649 0C6D  
                             l2745 0672                               l2737 0652  
                             l1697 05D6                               l1769 0738  
                             l1785 0246                               l2569 0211  
                             l2657 0CE8                               l2729 05D0  
                             l2681 0ECB                               l2673 0EB3  
                             l2761 0529                               l2753 0506  
                             l1945 0D42                               l2497 0395  
                             l2489 0373                               l2585 0096  
                             l2665 0BB2                               l2817 04F2  
                             l2841 0302                               l2833 02E4  
                             l2825 02E0                               l2595 0762  
                             l2747 067A                               l2739 065C  
                             l1699 05D7                               l1787 0260  
                             l1779 0233                               l2659 0CEA  
                             l2683 0ED3                               l2675 0EB5  
                             l2667 0EA4                               l2771 0556  
                             l2763 052E                               l2755 0518  
                             l2499 039D                               l2587 00F2  
                             l2579 0054                               l2851 032C  
                             l2843 030C                               l2835 02E9  
                             l2827 02E1                               l2781 069F  
                             l2597 0764                               l2749 0680  
                             l2693 0F82                               l1789 0292  
                             l2685 0EE2                               l2677 0EBA  
                             l2669 0EAC                               l2773 055F  
                             l2765 0536                               l2861 0365  
                             l2853 0337                               l2845 0311  
                             l2837 02EE                               l2829 02E2  
                             ?_map 0034                               l2783 06A8  
                             l2599 0766                               l2695 0F84  
                             l2687 0F73                               l2679 0EC2  
                             l2775 0565                               l2767 053F  
                             l2759 051F                               l2791 0E6E  
                             l2855 0342                               l2847 031C  
                             l2839 02F3                               l2785 06B6  
                             l2697 0F89                               l2689 0F7B  
                             l2777 056B                               l2769 0547  
                             l2793 0E74                               l1993 0C99  
                             l2857 0351                               l2849 0321  
                             l2787 06BC                               l2779 0699  
                             l2699 0F91                               l2795 0E7A  
                             l2883 0DED                               l2859 0358  
                             l2797 0E80                               l2789 0E68  
                             l1997 0CAC                               l2799 0E86  
                             STR_1 0465                               STR_2 0477  
                             STR_3 046B                               STR_4 047C  
                             STR_5 0485                               STR_6 0481  
                             STR_7 0471                               STR_8 0428  
                             STR_9 0450                               u1100 05F5  
                             u1101 05F4                               u1120 0605  
                             u1200 0711                               u2000 0FEB  
                             u1121 0604                               u1201 0710  
                             u2001 0FEA                               u2010 0FF0  
                             u1115 05F9                               u2011 0FEF  
                             u1140 0616                               u1220 0721  
                             u1300 0292                               u2100 0F2B  
                             u2020 0FF7                               u1141 0615  
                             u1221 0720                               u1301 0291  
                             u2101 0F2A                               u2021 0FF6  
                             u1230 072B                               u1310 02B5  
                             u2030 0FFC                               u1135 0606  
                             u1231 072A                               u1215 0715  
                             u2031 0FFB                               u2200 0C8E  
                             u1160 062A                               u1080 05DB  
                             u2040 0BEC                               u2201 0C8D  
                             u1161 0629                               u1145 0612  
                             u1081 05DA                               u1305 028E  
                             u2105 0F27                               u2041 0BEB  
                             u2210 0C95                               u1170 062F  
                             u1090 05E6                               u1250 073E  
                             u2050 0C12                               u2211 0C94  
                             u1171 062E                               u1155 061E  
                             u1091 05E5                               u1251 073D  
                             u1235 0727                               u2051 0C11  
                             u1260 0743                               u1180 06FB  
                             u2220 0BC6                               u2300 0388  
                             u2060 0EF0                               u1261 0742  
                             u1245 0732                               u1181 06FA  
                             u2221 0BC5                               u2301 0387  
                             u2061 0EEF                               u1190 0706  
                             u1270 0239                               u2310 03A5  
                             u2070 0EFF                               u1191 0705  
                             u1271 0238                               u2311 03A4  
                             u2071 0EFE                               u1280 023F  
                             u2400 0179                               u1600 0D42  
                             u2240 07A9                               u2080 0F05  
                             u1281 023E                               u2401 0178  
                             u1601 0D41                               u2241 07A8  
                             u2081 0F04                               u1290 0260  
                             u2410 0185                               u2330 03B7  
                             u2090 0F18                               u2235 0E0B  
                             u1291 025F                               u2411 0184  
                             u2331 03B6                               u2251 07B2  
                             u2091 0F17                               u2180 0C7C  
                             u2420 019E                               u2252 07B9  
                             u2500 008C                               u2181 0C7B  
                             u2421 019C                               u2325 03AA  
                             u2253 07C0                               u2501 008B  
                             u2190 0C87                               u2430 019F  
                             u2350 03D2                               u2191 0C86  
                             u2351 03D1                               u2511 00AF  
                             u2095 0F14                               u2600 0F72  
                             u2440 01DA                               u2280 07DA  
                             u2512 00B0                               u2601 0F71  
                             u2441 01D9                               u2345 03B9  
                             u2281 07D9                               u2265 07C2  
                             u2521 00DD                               u2513 00B5  
                             u2450 01DF                               u2610 0CDB  
                             u2370 03F0                               u2290 0377  
                             u2530 0130                               u2522 00DE  
                             u2514 00B6                               u1730 0CAB  
                             u2451 01DE                               u2611 0CDA  
                             u2371 03EF                               u2355 03CE  
                             u2291 0376                               u2275 07CA  
                             u2531 0131                               u2523 00E3  
                             u2515 00BB                               u1731 0CAA  
                             u2540 0755                               u2700 0680  
                             u2460 01E4                               u2620 0EAC  
                             u2380 03F5                               u2532 0136  
                             u2524 00E4                               u2516 00BC  
                             u2541 0754                               u2701 067F  
                             u2461 01E3                               u2621 0EAB  
                             u2381 03F4                               u2365 03E2  
                             u2533 0137                               u2525 00E9  
                             u1750 0B8F                               u1910 0DA3  
                             u2470 01E9                               u2390 0155  
                             u2630 0EB2                               u2710 0518  
                             u1590 0D3D                               u2526 00EA  
                             u1751 0B8E                               u1911 0DA2  
                             u2471 01E8                               u2391 0154  
                             u2631 0EB1                               u2711 0517  
                             u1591 0D3C                               u1760 0B9D  
                             u1920 0DA8                               u2560 077B  
                             u2640 0F7B                               u2480 0210  
                             u2720 051E                               u1761 0B9C  
                             u1921 0DA7                               u2561 077A  
                             u2641 0F7A                               u2481 020F  
                             u2721 051D                               u1930 0DB3  
                             u2650 0F81                               u2730 049F  
                             u1770 0E43                               u1931 0DB2  
                             u2555 075B                               u2651 0F80  
                             u2715 0514                               u2491 006F  
                             u2731 049E                               u1771 0E42  
                             u1940 0DB8                               u2580 0F3C  
                             u2660 0583                               u2492 0070  
                             u1780 0BD9                               u2740 04CE  
                             u1941 0DB7                               u2661 0582  
                             u2493 0075                               u1781 0BD8  
                             u2741 04CD                               u2590 0F60  
                             u2670 0589                               u2494 0076  
                             u1790 0C26                               u2750 04F2  
                             u1950 0FCB                               u2575 0781  
                             u2807 0E2B                               u2671 0588  
                             u2495 007B                               u1791 0C25  
                             u2751 04F1                               u1951 0FCA  
                             u2680 064B                               u2496 007C  
                             u1960 0FD3                               u2760 0351  
                             u2817 06A3                               u2681 064A  
                             u2665 057F                               u2745 04CA  
                             u1961 0FD2                               u2761 0350  
                             u2690 0651                               u1970 0FD8  
                             u2770 0365                               u2827 06B2  
                             u2691 0650                               u1971 0FD7  
                             u2771 0364                               u1980 0FDE  
                             u2837 06C0                               u2685 0647  
                             u1981 0FDD                               u2765 034D  
                             u1990 0FE3                               u2847 07F4  
                             u1991 0FE2                               u2775 0361  
                             u2787 0D34                               u2797 0E1B  
                             abs@a 0078                  ?_Lcd_Write_String 0077  
                             _dbuf 00A0                               _main 02D3  
                             _prec 00C5                               map@x 0034  
                             btemp 007E                     ?_lcd_turnRight 0070  
                 __end_of_ADC_Read 0D49                               start 000C  
               ??_Lcd_Write_String 0020                   __end_of_ADC_init 0B6D  
                  __end_of_Lcd_Cmd 07FD                              ??_abs 0020  
                            ??_map 003E                    __end_of___aldiv 0409  
                            ?_main 0070                    __end_of___awdiv 0639  
                            STR_10 0443                              STR_11 0488  
                            STR_12 0419                              STR_13 045E  
                            STR_14 045B                              STR_15 0436  
                            STR_16 0488                    __end_of___awmod 074D  
                  ___awdiv@divisor 0072                     ??_lcd_turnLeft 0072  
                            i1l252 0D1E                              i1l249 0D0D  
                  ___awdiv@counter 0076                       vfpfcnvrt@fmt 002B  
                            _TMR1H 000F                              _TMR1L 000E  
          __end_of_timer1_1ms_init 0B60                              _TRISA 0085  
                            _TRISB 0086                              _TRISC 0087  
                            _TRISD 0088                ___lmul@multiplicand 0076  
               _print_SoilMoisture 0571                    __end_of_lcd_run 0EA4  
                            _flags 0064                              _light 0060  
                            _fputc 0233                              _width 00C3  
                            _putch 07FE                              fpbase 004A  
                   __pbitbssCOMMON 03D0                              pclath 000A  
              ?_print_SoilMoisture 0070                    _irrigationState 006D  
                 __end_of_WDT_init 0B2A                              status 0003  
                            wtemp0 007E                    __end_of_sprintf 0D01  
         __end_of_check_TankStatus 1000                   __end_of_Lcd_Init 06F6  
                 __end_of_Lcd_Port 0C99                _lastLeftButtonState 0069  
                  __initialization 000F                       __end_of_main 0370  
                entry__ADC_readAll 004E               ??_print_SoilMoisture 007A  
                           ??_main 007A           ?_interrupt_IRRIG_timeout 0070  
                  _readTemperature 0D73                  _leftButtonPressed 03D3  
                           ?_fputc 0072                             _ADRESH 001E  
                           _ADRESL 009E                      _lastTankState 006E  
                 ___awdiv@dividend 0074                             ?_putch 0070  
                           i1l2351 0D01                             i1l2353 0D05  
                           i1l2355 0D13                             i1l2357 0D18  
                           u214_20 0D05                             u214_21 0D04  
                           u215_20 0D13                             u215_21 0D12  
                  ??_lcd_turnRight 0072                          ??_Lcd_Cmd 0073  
                    vfpfcnvrt@done 002F                   __end_of__fptable 0054  
                     vfprintf@cfmt 003A                             ___lmul 079B  
                        ??___aldiv 002D                          ??___awdiv 0076  
                        ??___awmod 0076                    ADC_Read@channel 0075  
                 ___awdiv@quotient 0078                    ___awmod@divisor 0072  
                  ___awmod@counter 0076                             map@run 004E  
                        ??_lcd_run 007A                             fptable 0045  
                           fputc@c 0072                       __pdataCOMMON 007B  
                           fptotal 0006                   ?_timer1_1ms_init 0070  
                 _print_Irrigation 0F73                          ?_ADC_Read 0072  
                           saved_w 007E                          ?_ADC_init 0070  
                 __end_of_runTimer 0506                             putch@c 0070  
                 __end_of_vfprintf 0CDE                          ??_sprintf 003F  
                  Lcd_Set_Cursor@a 0020                    Lcd_Set_Cursor@b 0076  
                  Lcd_Set_Cursor@y 0022                    Lcd_Set_Cursor@z 0021  
             draw_Index@temp_index 0025              _print_ArtificialLight 0639  
          __end_of__initialization 0041                  __end_of_Lcd_Clear 0B7A  
             __end_of_lcd_turnLeft 0B95                    _startIrrigation 0C0E  
                   __pcstackCOMMON 0070                       __pidataBANK0 0B42  
                     __pidataBANK1 0C37        __end_of_interruptionHandler 0D25  
                    __end_of_fputc 02D3                      __end_of_putch 07FF  
          __end_of_readTemperature 0D9D                      runTimer@timer 0052  
                        ?_WDT_init 0070                     _Lcd_Set_Cursor 074D  
                   _OPTION_REGbits 0081                         ??_ADC_Read 0074  
              _timer_WTANK_Timeout 00E0                         ??_ADC_init 0072  
                        ?_Lcd_Init 0070                       ?_stopFilling 0070  
                        ?_Lcd_Port 0070                            ??_fputc 0020  
                          ??_putch 0072                         __pbssBANK0 005C  
                       __pbssBANK1 00A0                         __pmaintext 02D3  
                          ?___lmul 0072                         __pintentry 0004  
                   ___lmul@product 0021             __end_of_Lcd_Set_Cursor 079B  
                       ??_WDT_init 0072                     stopTimer@timer 0072  
                 _readSoilMoisture 0D49                         _draw_Index 0C56  
                       ??_Lcd_Init 0076                         ??_Lcd_Port 0072  
                   _stopIrrigation 0C22                  ??_print_TankState 0079  
           ?_print_ArtificialLight 0070                         __stringtab 0409  
                   _Lcd_Write_Char 0DFC                            _Lcd_Cmd 07E3  
          __end_of_startIrrigation 0C22                 _rightButtonPressed 03D2  
                    ??_ADC_readAll 007A                  ?_check_TankStatus 0070  
                          ___aldiv 0370                            ___awdiv 05D6  
               ??_check_TankStatus 0072                            ___awmod 06F6  
                        ?_runTimer 0052                          ?_vfprintf 0036  
                 ?_readTemperature 0070                    ?_Lcd_Set_Cursor 0076  
                          __ptext1 0B55                            __ptext2 0DC8  
                          __ptext3 0BE8                            __ptext4 0FB9  
                          __ptext5 0EE8                            __ptext6 0C0E  
                          __ptext7 0E31                            __ptext8 048B  
                          __ptext9 0B4B                            _lcd_run 0E68  
                        _T1CONbits 0010                  __end_of_readLight 0B87  
                 ___awmod@dividend 0074                   ___aldiv@dividend 0029  
                 _timer_ADCReadAll 00D4             __end_of_stopIrrigation 0C37  
          _interrupt_WTANK_timeout 0B32         fp__interrupt_WTANK_timeout 004B  
                          map@rise 0046                            _sprintf 0CDE  
                          clrloop0 0B3B             __end_of_Lcd_Write_Char 0E31  
             end_of_initialization 0041                    draw_Index@F1444 00C0  
                          fputc@fp 0074                  __end_of_pins_init 0BB2  
                     _lcd_maxIndex 006B           __end_of_print_Irrigation 0FB9  
                __end_of_vfpfcnvrt 0233                   ___aldiv@quotient 0030  
                 vfpfcnvrt@convarg 0031                          Lcd_Port@a 0072  
                       ??_runTimer 0054                         ??_vfprintf 007A  
              __end_of_ADC_readAll 0BC2                  __end_of_stopTimer 0CBB  
                        _PORTBbits 0006                          _PORTCbits 0007  
              _run_IrrigationLogic 0EE8                       _lcd_turnLeft 0B87  
                     _isIrrigating 03D0                        ?_draw_Index 0070  
                        _TRISCbits 0087                    ?_stopIrrigation 0070  
run_IrrigationLogic@sMoistureValue 0076                    ?_Lcd_Write_Char 0070  
                       _startTimer 0E31                _timer_IRRIG_Timeout 00DA  
                Lcd_Write_String@a 0077                  Lcd_Write_String@i 0023  
                       map@out_max 003C                         map@out_min 003A  
                 ?_startIrrigation 0070              __end_of_lcd_turnRight 0BA3  
             ?_run_IrrigationLogic 0076         __end_of_run_waterTankLogic 0DFC  
                _print_Temperature 0506            print_Temperature@buffer 004C  
                        _Lcd_Clear 0B6D                 ?_print_Temperature 0070  
                   __end_of___lmul 07E3                        vfpfcnvrt@ap 002C  
                      vfpfcnvrt@cp 0030                        vfpfcnvrt@fp 0029  
                 _Lcd_Write_String 0F2D                      __pidataCOMMON 07FD  
              ??_print_Temperature 007A                      ?_startFilling 0070  
        ??_interrupt_WTANK_timeout 0076                start_initialization 000F  
              _lcd_debounceButtons 0D9D                    pins_init@_TRISA 0075  
                  pins_init@_TRISB 0072                    pins_init@_TRISC 0073  
                  pins_init@_TRISD 0074                        __end_of_abs 0BD5  
                      __end_of_map 0144          __end_of_print_Temperature 0571  
            ??_run_IrrigationLogic 0078               ?_lcd_debounceButtons 0070  
         __end_of_readSoilMoisture 0D73                        _ADC_readAll 0BB2  
         print_SoilMoisture@buffer 004C                        vfprintf@fmt 0038  
              check_TankStatus@bot 0074                         ?_Lcd_Clear 0070  
              check_TankStatus@top 0073                           ??___lmul 0020  
                       init_fetch0 0BFB              _IrrigationStateString 00CB  
                      __pdataBANK0 0066                        __pdataBANK1 00C7  
                  Lcd_Write_Char@a 0076                    Lcd_Write_Char@y 0075  
                  _print_TankState 0EA4                     ??_startFilling 0076  
                        ___latbits 0002            ??_print_ArtificialLight 0079  
                    __pcstackBANK0 0020                  __size_of__fptable 000F  
                      ?_startTimer 0072            _interrupt_IRRIG_timeout 0B4B  
       fp__interrupt_IRRIG_timeout 0051                           ?_Lcd_Cmd 0070  
  __end_of_interrupt_WTANK_timeout 0B3A              ??_lcd_debounceButtons 0072  
                 ??_Lcd_Set_Cursor 0077                          __pfunctab 0045  
                  _TankStateString 00C7                           ?___aldiv 0025  
                         ?___awdiv 0072                           ?___awmod 0072  
                        _isFilling 03D1                          _lcd_index 006A  
                        __pstrings 0409                           ?_lcd_run 0070  
                  startTimer@timer 0072                           _ADC_Read 0D25  
                         _ADC_init 0B60                          _readLight 0B7A  
                         ?_sprintf 003B                          _old_light 00CE  
                  ___aldiv@divisor 0025                  interrupt_function 0004  
                  ___aldiv@counter 002E                  _interruption_init 0B2A  
                        _tankState 007B                          clear_ram0 0B3A  
                         _PIE1bits 008C                 ?_interruption_init 0070  
                        _pins_init 0BA3                           Lcd_Cmd@a 0075  
                ??_timer1_1ms_init 0072                           _PIR1bits 000C  
                ?_print_Irrigation 0070            __end_of_print_TankState 0EE8  
                      ??_Lcd_Clear 0076                      _idealHumidity 0066  
               ??_print_Irrigation 0079                ??_interruption_init 0072  
                        _vfpfcnvrt 0144                          map@in_max 0038  
                        map@in_min 0036                   ??_stopIrrigation 0076  
                       _ADCON0bits 001F                        __stringbase 0418  
                       _ADCON1bits 009F                           _WDT_init 0B22  
                 ??_Lcd_Write_Char 0073                          _stopTimer 0C99  
                     ??_draw_Index 0079                           _Lcd_Init 0699  
                       ?_readLight 0070                           _Lcd_Port 0C77  
        ??_interrupt_IRRIG_timeout 0076                         vfpfcnvrt@c 0035  
                ___lmul@multiplier 0072               _lastRightButtonState 0068  
        __end_of_interruption_init 0B32           __end_of_Lcd_Write_String 0F73  
                 _old_soilMoisture 00D2               __end_of_startFilling 0BFB  
                       ?_pins_init 0072                         vfprintf@ap 0039  
                       vfprintf@fp 0036                        _minHumidity 0067  
       __end_of_print_SoilMoisture 05D6                 __end_of_draw_Index 0C77  
                       ?_vfpfcnvrt 0029                 __end_of__stringtab 0419  
               _run_waterTankLogic 0DC8                     fp__ADC_readAll 004E  
                       sprintf@fmt 003C                           __fptable 0045  
                       ?_stopTimer 0072                      ??_stopFilling 0076  
                         __ptext10 0BB2                           __ptext11 0B32  
                         __ptext20 0B7A                           __ptext12 0BD5  
                         __ptext21 0D25                           __ptext13 0C22  
                         __ptext30 0233                           __ptext22 0BA3  
                         __ptext14 0C99                           __ptext31 07FE  
                         __ptext23 0E68                           __ptext15 0D73  
                         __ptext40 074D                           __ptext32 0BC2  
                         __ptext24 0506                           __ptext16 0D49  
                         __ptext41 0B6D                           __ptext33 06F6  
                         __ptext25 0EA4                           __ptext17 0054  
                         __ptext50 0B60                           __ptext42 0D9D  
                         __ptext34 05D6                           __ptext26 0571  
                         __ptext18 079B                           __ptext51 0D01  
                         __ptext43 0B95                           __ptext35 0F73  
                         __ptext27 0CDE                           __ptext19 0370  
              ?_run_waterTankLogic 0070                           __ptext44 0B87  
                         __ptext36 0639                           __ptext28 0CBB  
                         __ptext45 0B2A                           __ptext37 0C56  
                         __ptext29 0144                           __ptext46 0B22  
                         __ptext38 0F2D                           __ptext47 0699  
                         __ptext39 0DFC                           __ptext48 07E3  
                         __ptext49 0C77                runTimer@elapsedTime 0058  
              _interruptionHandler 0D01                       ?_ADC_readAll 0070  
                ?_readSoilMoisture 0070               ??_run_waterTankLogic 0076  
                 ?_print_TankState 0070    __end_of_interrupt_IRRIG_timeout 0B55  
                         map@delta 004A                           _runTimer 048B  
                  _old_temperature 00D0                 ??_readSoilMoisture 007A  
                         _vfprintf 0CBB               ?_interruptionHandler 0070  
                       _INTCONbits 000B                   _check_TankStatus 0FB9  
                         init_ram0 0BFF                        ??_readLight 0076  
    __end_of_print_ArtificialLight 0699                       ??_startTimer 0074  
      __end_of_run_IrrigationLogic 0F2D                 Lcd_Write_Char@temp 0074  
                         intlevel1 0045                          sprintf@ap 0040  
                     _timerCounter 005C                      _lcd_lastIndex 0065  
              __end_of_stopFilling 0BE8                  ??_readTemperature 007A  
                        stringcode 0413                        ??_pins_init 0075  
                      ??_vfpfcnvrt 002D           ?_interrupt_WTANK_timeout 0070  
                     _soilMoisture 0062                 Lcd_Set_Cursor@temp 0023  
               __end_of_startTimer 0E68                _lastIrrigationState 006C  
            ??_interruptionHandler 0070                        _temperature 005E  
                         sprintf@f 0041                           sprintf@s 003B  
                      ??_stopTimer 0074                           stringdir 0413  
                         stringtab 0409                       ___aldiv@sign 002F  
                  _timer1_1ms_init 0B55        __end_of_lcd_debounceButtons 0DC8  
                    _lcd_turnRight 0B95  
