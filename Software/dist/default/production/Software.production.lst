

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Thu Dec 12 00:12:32 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     6                           	psect	idataBANK1,global,class=CODE,space=0,delta=2,noexec
     7                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     8                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1,noexec
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	inittext,global,class=CODE,space=0,delta=2
    16                           	psect	clrtext,global,class=CODE,space=0,delta=2
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    20                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2,group=2
    38                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2,group=2
    39                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,space=0,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,space=0,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,space=0,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,space=0,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,space=0,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,space=0,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,space=0,merge=1,delta=2,group=3
    47                           	psect	text28,local,class=CODE,space=0,merge=1,delta=2,group=1
    48                           	psect	text29,local,class=CODE,space=0,merge=1,delta=2,group=1
    49                           	psect	text30,local,class=CODE,space=0,merge=1,delta=2,group=3
    50                           	psect	text31,local,class=CODE,space=0,merge=1,delta=2,group=3
    51                           	psect	text32,local,class=CODE,space=0,merge=1,delta=2,group=3
    52                           	psect	text33,local,class=CODE,space=0,merge=1,delta=2,group=2
    53                           	psect	text34,local,class=CODE,space=0,merge=1,delta=2,group=2
    54                           	psect	text35,local,class=CODE,space=0,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,space=0,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,space=0,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,space=0,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,space=0,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,space=0,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,space=0,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,space=0,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,space=0,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,space=0,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,space=0,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,space=0,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,space=0,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,space=0,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,space=0,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,space=0,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,space=0,merge=1,delta=2
    71                           	psect	intentry,global,class=CODE,space=0,delta=2
    72                           	psect	functab,global,class=ENTRY,space=0,delta=2
    73                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    74                           	dabs	1,0x7E,2
    75     0000                     
    76                           ; Generated 12/10/2023 GMT
    77                           ; 
    78                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    79                           ; All rights reserved.
    80                           ; 
    81                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    82                           ; 
    83                           ; Redistribution and use in source and binary forms, with or without modification, are
    84                           ; permitted provided that the following conditions are met:
    85                           ; 
    86                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    87                           ;        conditions and the following disclaimer.
    88                           ; 
    89                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    90                           ;        of conditions and the following disclaimer in the documentation and/or other
    91                           ;        materials provided with the distribution. Publication is not required when
    92                           ;        this file is used in an embedded application.
    93                           ; 
    94                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    95                           ;        software without specific prior written permission.
    96                           ; 
    97                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    98                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    99                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   100                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   101                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   102                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   103                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   104                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   105                           ; 
   106                           ; 
   107                           ; Code-generator required, PIC16F877A Definitions
   108                           ; 
   109                           ; SFR Addresses
   110     0004                     fsr             equ	4
   111     0004                     fsr0            equ	4
   112     0000                     indf            equ	0
   113     0000                     indf0           equ	0
   114     0002                     pc              equ	2
   115     0002                     pcl             equ	2
   116     000A                     pclath          equ	10
   117     0003                     status          equ	3
   118     0000                     INDF            equ	0	;# 
   119     0001                     TMR0            equ	1	;# 
   120     0002                     PCL             equ	2	;# 
   121     0003                     STATUS          equ	3	;# 
   122     0004                     FSR             equ	4	;# 
   123     0005                     PORTA           equ	5	;# 
   124     0006                     PORTB           equ	6	;# 
   125     0007                     PORTC           equ	7	;# 
   126     0008                     PORTD           equ	8	;# 
   127     0009                     PORTE           equ	9	;# 
   128     000A                     PCLATH          equ	10	;# 
   129     000B                     INTCON          equ	11	;# 
   130     000C                     PIR1            equ	12	;# 
   131     000D                     PIR2            equ	13	;# 
   132     000E                     TMR1            equ	14	;# 
   133     000E                     TMR1L           equ	14	;# 
   134     000F                     TMR1H           equ	15	;# 
   135     0010                     T1CON           equ	16	;# 
   136     0011                     TMR2            equ	17	;# 
   137     0012                     T2CON           equ	18	;# 
   138     0013                     SSPBUF          equ	19	;# 
   139     0014                     SSPCON          equ	20	;# 
   140     0015                     CCPR1           equ	21	;# 
   141     0015                     CCPR1L          equ	21	;# 
   142     0016                     CCPR1H          equ	22	;# 
   143     0017                     CCP1CON         equ	23	;# 
   144     0018                     RCSTA           equ	24	;# 
   145     0019                     TXREG           equ	25	;# 
   146     001A                     RCREG           equ	26	;# 
   147     001B                     CCPR2           equ	27	;# 
   148     001B                     CCPR2L          equ	27	;# 
   149     001C                     CCPR2H          equ	28	;# 
   150     001D                     CCP2CON         equ	29	;# 
   151     001E                     ADRESH          equ	30	;# 
   152     001F                     ADCON0          equ	31	;# 
   153     0081                     OPTION_REG      equ	129	;# 
   154     0085                     TRISA           equ	133	;# 
   155     0086                     TRISB           equ	134	;# 
   156     0087                     TRISC           equ	135	;# 
   157     0088                     TRISD           equ	136	;# 
   158     0089                     TRISE           equ	137	;# 
   159     008C                     PIE1            equ	140	;# 
   160     008D                     PIE2            equ	141	;# 
   161     008E                     PCON            equ	142	;# 
   162     0091                     SSPCON2         equ	145	;# 
   163     0092                     PR2             equ	146	;# 
   164     0093                     SSPADD          equ	147	;# 
   165     0094                     SSPSTAT         equ	148	;# 
   166     0098                     TXSTA           equ	152	;# 
   167     0099                     SPBRG           equ	153	;# 
   168     009C                     CMCON           equ	156	;# 
   169     009D                     CVRCON          equ	157	;# 
   170     009E                     ADRESL          equ	158	;# 
   171     009F                     ADCON1          equ	159	;# 
   172     010C                     EEDATA          equ	268	;# 
   173     010D                     EEADR           equ	269	;# 
   174     010E                     EEDATH          equ	270	;# 
   175     010F                     EEADRH          equ	271	;# 
   176     018C                     EECON1          equ	396	;# 
   177     018D                     EECON2          equ	397	;# 
   178     0000                     INDF            equ	0	;# 
   179     0001                     TMR0            equ	1	;# 
   180     0002                     PCL             equ	2	;# 
   181     0003                     STATUS          equ	3	;# 
   182     0004                     FSR             equ	4	;# 
   183     0005                     PORTA           equ	5	;# 
   184     0006                     PORTB           equ	6	;# 
   185     0007                     PORTC           equ	7	;# 
   186     0008                     PORTD           equ	8	;# 
   187     0009                     PORTE           equ	9	;# 
   188     000A                     PCLATH          equ	10	;# 
   189     000B                     INTCON          equ	11	;# 
   190     000C                     PIR1            equ	12	;# 
   191     000D                     PIR2            equ	13	;# 
   192     000E                     TMR1            equ	14	;# 
   193     000E                     TMR1L           equ	14	;# 
   194     000F                     TMR1H           equ	15	;# 
   195     0010                     T1CON           equ	16	;# 
   196     0011                     TMR2            equ	17	;# 
   197     0012                     T2CON           equ	18	;# 
   198     0013                     SSPBUF          equ	19	;# 
   199     0014                     SSPCON          equ	20	;# 
   200     0015                     CCPR1           equ	21	;# 
   201     0015                     CCPR1L          equ	21	;# 
   202     0016                     CCPR1H          equ	22	;# 
   203     0017                     CCP1CON         equ	23	;# 
   204     0018                     RCSTA           equ	24	;# 
   205     0019                     TXREG           equ	25	;# 
   206     001A                     RCREG           equ	26	;# 
   207     001B                     CCPR2           equ	27	;# 
   208     001B                     CCPR2L          equ	27	;# 
   209     001C                     CCPR2H          equ	28	;# 
   210     001D                     CCP2CON         equ	29	;# 
   211     001E                     ADRESH          equ	30	;# 
   212     001F                     ADCON0          equ	31	;# 
   213     0081                     OPTION_REG      equ	129	;# 
   214     0085                     TRISA           equ	133	;# 
   215     0086                     TRISB           equ	134	;# 
   216     0087                     TRISC           equ	135	;# 
   217     0088                     TRISD           equ	136	;# 
   218     0089                     TRISE           equ	137	;# 
   219     008C                     PIE1            equ	140	;# 
   220     008D                     PIE2            equ	141	;# 
   221     008E                     PCON            equ	142	;# 
   222     0091                     SSPCON2         equ	145	;# 
   223     0092                     PR2             equ	146	;# 
   224     0093                     SSPADD          equ	147	;# 
   225     0094                     SSPSTAT         equ	148	;# 
   226     0098                     TXSTA           equ	152	;# 
   227     0099                     SPBRG           equ	153	;# 
   228     009C                     CMCON           equ	156	;# 
   229     009D                     CVRCON          equ	157	;# 
   230     009E                     ADRESL          equ	158	;# 
   231     009F                     ADCON1          equ	159	;# 
   232     010C                     EEDATA          equ	268	;# 
   233     010D                     EEADR           equ	269	;# 
   234     010E                     EEDATH          equ	270	;# 
   235     010F                     EEADRH          equ	271	;# 
   236     018C                     EECON1          equ	396	;# 
   237     018D                     EECON2          equ	397	;# 
   238     0000                     INDF            equ	0	;# 
   239     0001                     TMR0            equ	1	;# 
   240     0002                     PCL             equ	2	;# 
   241     0003                     STATUS          equ	3	;# 
   242     0004                     FSR             equ	4	;# 
   243     0005                     PORTA           equ	5	;# 
   244     0006                     PORTB           equ	6	;# 
   245     0007                     PORTC           equ	7	;# 
   246     0008                     PORTD           equ	8	;# 
   247     0009                     PORTE           equ	9	;# 
   248     000A                     PCLATH          equ	10	;# 
   249     000B                     INTCON          equ	11	;# 
   250     000C                     PIR1            equ	12	;# 
   251     000D                     PIR2            equ	13	;# 
   252     000E                     TMR1            equ	14	;# 
   253     000E                     TMR1L           equ	14	;# 
   254     000F                     TMR1H           equ	15	;# 
   255     0010                     T1CON           equ	16	;# 
   256     0011                     TMR2            equ	17	;# 
   257     0012                     T2CON           equ	18	;# 
   258     0013                     SSPBUF          equ	19	;# 
   259     0014                     SSPCON          equ	20	;# 
   260     0015                     CCPR1           equ	21	;# 
   261     0015                     CCPR1L          equ	21	;# 
   262     0016                     CCPR1H          equ	22	;# 
   263     0017                     CCP1CON         equ	23	;# 
   264     0018                     RCSTA           equ	24	;# 
   265     0019                     TXREG           equ	25	;# 
   266     001A                     RCREG           equ	26	;# 
   267     001B                     CCPR2           equ	27	;# 
   268     001B                     CCPR2L          equ	27	;# 
   269     001C                     CCPR2H          equ	28	;# 
   270     001D                     CCP2CON         equ	29	;# 
   271     001E                     ADRESH          equ	30	;# 
   272     001F                     ADCON0          equ	31	;# 
   273     0081                     OPTION_REG      equ	129	;# 
   274     0085                     TRISA           equ	133	;# 
   275     0086                     TRISB           equ	134	;# 
   276     0087                     TRISC           equ	135	;# 
   277     0088                     TRISD           equ	136	;# 
   278     0089                     TRISE           equ	137	;# 
   279     008C                     PIE1            equ	140	;# 
   280     008D                     PIE2            equ	141	;# 
   281     008E                     PCON            equ	142	;# 
   282     0091                     SSPCON2         equ	145	;# 
   283     0092                     PR2             equ	146	;# 
   284     0093                     SSPADD          equ	147	;# 
   285     0094                     SSPSTAT         equ	148	;# 
   286     0098                     TXSTA           equ	152	;# 
   287     0099                     SPBRG           equ	153	;# 
   288     009C                     CMCON           equ	156	;# 
   289     009D                     CVRCON          equ	157	;# 
   290     009E                     ADRESL          equ	158	;# 
   291     009F                     ADCON1          equ	159	;# 
   292     010C                     EEDATA          equ	268	;# 
   293     010D                     EEADR           equ	269	;# 
   294     010E                     EEDATH          equ	270	;# 
   295     010F                     EEADRH          equ	271	;# 
   296     018C                     EECON1          equ	396	;# 
   297     018D                     EECON2          equ	397	;# 
   298     0000                     INDF            equ	0	;# 
   299     0001                     TMR0            equ	1	;# 
   300     0002                     PCL             equ	2	;# 
   301     0003                     STATUS          equ	3	;# 
   302     0004                     FSR             equ	4	;# 
   303     0005                     PORTA           equ	5	;# 
   304     0006                     PORTB           equ	6	;# 
   305     0007                     PORTC           equ	7	;# 
   306     0008                     PORTD           equ	8	;# 
   307     0009                     PORTE           equ	9	;# 
   308     000A                     PCLATH          equ	10	;# 
   309     000B                     INTCON          equ	11	;# 
   310     000C                     PIR1            equ	12	;# 
   311     000D                     PIR2            equ	13	;# 
   312     000E                     TMR1            equ	14	;# 
   313     000E                     TMR1L           equ	14	;# 
   314     000F                     TMR1H           equ	15	;# 
   315     0010                     T1CON           equ	16	;# 
   316     0011                     TMR2            equ	17	;# 
   317     0012                     T2CON           equ	18	;# 
   318     0013                     SSPBUF          equ	19	;# 
   319     0014                     SSPCON          equ	20	;# 
   320     0015                     CCPR1           equ	21	;# 
   321     0015                     CCPR1L          equ	21	;# 
   322     0016                     CCPR1H          equ	22	;# 
   323     0017                     CCP1CON         equ	23	;# 
   324     0018                     RCSTA           equ	24	;# 
   325     0019                     TXREG           equ	25	;# 
   326     001A                     RCREG           equ	26	;# 
   327     001B                     CCPR2           equ	27	;# 
   328     001B                     CCPR2L          equ	27	;# 
   329     001C                     CCPR2H          equ	28	;# 
   330     001D                     CCP2CON         equ	29	;# 
   331     001E                     ADRESH          equ	30	;# 
   332     001F                     ADCON0          equ	31	;# 
   333     0081                     OPTION_REG      equ	129	;# 
   334     0085                     TRISA           equ	133	;# 
   335     0086                     TRISB           equ	134	;# 
   336     0087                     TRISC           equ	135	;# 
   337     0088                     TRISD           equ	136	;# 
   338     0089                     TRISE           equ	137	;# 
   339     008C                     PIE1            equ	140	;# 
   340     008D                     PIE2            equ	141	;# 
   341     008E                     PCON            equ	142	;# 
   342     0091                     SSPCON2         equ	145	;# 
   343     0092                     PR2             equ	146	;# 
   344     0093                     SSPADD          equ	147	;# 
   345     0094                     SSPSTAT         equ	148	;# 
   346     0098                     TXSTA           equ	152	;# 
   347     0099                     SPBRG           equ	153	;# 
   348     009C                     CMCON           equ	156	;# 
   349     009D                     CVRCON          equ	157	;# 
   350     009E                     ADRESL          equ	158	;# 
   351     009F                     ADCON1          equ	159	;# 
   352     010C                     EEDATA          equ	268	;# 
   353     010D                     EEADR           equ	269	;# 
   354     010E                     EEDATH          equ	270	;# 
   355     010F                     EEADRH          equ	271	;# 
   356     018C                     EECON1          equ	396	;# 
   357     018D                     EECON2          equ	397	;# 
   358                           
   359                           	psect	idataCOMMON
   360     0003                     __pidataCOMMON:
   361                           
   362                           ;initializer for _tankState
   363     0003  3401               	retlw	1
   364                           
   365                           	psect	idataBANK0
   366     0B94                     __pidataBANK0:
   367                           
   368                           ;initializer for _idealHumidity
   369     0B94  3432               	retlw	50
   370                           
   371                           ;initializer for _minHumidity
   372     0B95  341E               	retlw	30
   373                           
   374                           ;initializer for _lastRightButtonState
   375     0B96  3401               	retlw	1
   376                           
   377                           ;initializer for _lastLeftButtonState
   378     0B97  3401               	retlw	1
   379                           
   380                           ;initializer for _lcd_index
   381     0B98  3401               	retlw	1
   382                           
   383                           ;initializer for _lcd_maxIndex
   384     0B99  3405               	retlw	5
   385                           
   386                           ;initializer for _lastIrrigationState
   387     0B9A  34FF               	retlw	-1
   388                           
   389                           ;initializer for _irrigationState
   390     0B9B  3401               	retlw	1
   391                           
   392                           ;initializer for _lastTankState
   393     0B9C  34FF               	retlw	-1
   394                           
   395                           	psect	idataBANK1
   396     0C7E                     __pidataBANK1:
   397                           
   398                           ;initializer for _TankStateString
   399     0C7E  344D               	retlw	low ((STR_1-__stringbase)| (0+32768))
   400     0C7F  345F               	retlw	low ((STR_2-__stringbase)| (0+32768))
   401     0C80  3453               	retlw	low ((STR_3-__stringbase)| (0+32768))
   402     0C81  3464               	retlw	low ((STR_4-__stringbase)| (0+32768))
   403                           
   404                           ;initializer for _IrrigationStateString
   405     0C82  346D               	retlw	low ((STR_5-__stringbase)| (0+32768))
   406     0C83  3469               	retlw	low ((STR_6-__stringbase)| (0+32768))
   407     0C84  3459               	retlw	low ((STR_7-__stringbase)| (0+32768))
   408                           
   409                           ;initializer for _old_light
   410     0C85  34FF               	retlw	255
   411     0C86  34FF               	retlw	255
   412                           
   413                           ;initializer for _old_temperature
   414     0C87  34FF               	retlw	255
   415     0C88  34FF               	retlw	255
   416                           
   417                           ;initializer for _old_soilMoisture
   418     0C89  34FF               	retlw	255
   419     0C8A  34FF               	retlw	255
   420                           
   421                           ;initializer for _timer_ADCReadAll
   422     0C8B  3402               	retlw	2
   423     0C8C  3400               	retlw	0
   424     0C8D  3401               	retlw	1
   425     0C8E  3404               	retlw	low (fp__ADC_readAll-fpbase)
   426                           
   427                           ;initializer for _timer_IRRIG_Timeout
   428     0C8F  3414               	retlw	20
   429     0C90  3400               	retlw	0
   430     0C91  3400               	retlw	0
   431     0C92  3407               	retlw	low (fp__interrupt_IRRIG_timeout-fpbase)
   432                           
   433                           ;initializer for _timer_WTANK_Timeout
   434     0C93  341E               	retlw	30
   435     0C94  3400               	retlw	0
   436     0C95  3400               	retlw	0
   437     0C96  3401               	retlw	low (fp__interrupt_WTANK_timeout-fpbase)
   438     000C                     _PIR1bits       set	12
   439     0006                     _PORTBbits      set	6
   440     0007                     _PORTCbits      set	7
   441     001E                     _ADRESH         set	30
   442     001F                     _ADCON0bits     set	31
   443     000B                     _INTCONbits     set	11
   444     000E                     _TMR1L          set	14
   445     000F                     _TMR1H          set	15
   446     0010                     _T1CONbits      set	16
   447     0043                     _RD3            set	67
   448     0042                     _RD2            set	66
   449     0047                     _RD7            set	71
   450     0046                     _RD6            set	70
   451     0045                     _RD5            set	69
   452     0044                     _RD4            set	68
   453     009E                     _ADRESL         set	158
   454     009F                     _ADCON1bits     set	159
   455     008C                     _PIE1bits       set	140
   456     0087                     _TRISCbits      set	135
   457     0088                     _TRISD          set	136
   458     0087                     _TRISC          set	135
   459     0086                     _TRISB          set	134
   460     0085                     _TRISA          set	133
   461     0081                     _OPTION_REGbits set	129
   462                           
   463                           	psect	strings
   464     0400                     __pstrings:
   465     0400                     stringtab:
   466     0400                     __stringtab:
   467                           
   468                           ;	String table - string pointers are 1 byte each
   469     0400  1BFF               	btfsc	btemp+1,7
   470     0401  2C0A               	ljmp	stringcode
   471     0402  1383               	bcf	3,7
   472     0403  187F               	btfsc	btemp+1,0
   473     0404  1783               	bsf	3,7
   474     0405  0800               	movf	0,w
   475     0406  0A84               	incf	4,f
   476     0407  1903               	skipnz
   477     0408  0AFF               	incf	btemp+1,f
   478     0409  0008               	return
   479     040A                     stringcode:
   480     040A                     stringdir:
   481     040A  3004               	movlw	high stringdir
   482     040B  008A               	movwf	10
   483     040C  0804               	movf	4,w
   484     040D  0A84               	incf	4,f
   485     040E  0782               	addwf	2,f
   486     040F                     __stringbase:
   487     040F  3400               	retlw	0
   488     0410                     __end_of__stringtab:
   489     0410                     STR_12:
   490     0410  344C               	retlw	76	;'L'
   491     0411  3455               	retlw	85	;'U'
   492     0412  345A               	retlw	90	;'Z'
   493     0413  3420               	retlw	32	;' '
   494     0414  3441               	retlw	65	;'A'
   495     0415  3452               	retlw	82	;'R'
   496     0416  3454               	retlw	84	;'T'
   497     0417  3449               	retlw	73	;'I'
   498     0418  3446               	retlw	70	;'F'
   499     0419  3449               	retlw	73	;'I'
   500     041A  3443               	retlw	67	;'C'
   501     041B  3449               	retlw	73	;'I'
   502     041C  3441               	retlw	65	;'A'
   503     041D  344C               	retlw	76	;'L'
   504     041E  3400               	retlw	0
   505     041F                     STR_8:
   506     041F  3445               	retlw	69	;'E'
   507     0420  3453               	retlw	83	;'S'
   508     0421  3454               	retlw	84	;'T'
   509     0422  3441               	retlw	65	;'A'
   510     0423  3444               	retlw	68	;'D'
   511     0424  344F               	retlw	79	;'O'
   512     0425  3420               	retlw	32	;' '
   513     0426  3454               	retlw	84	;'T'
   514     0427  3441               	retlw	65	;'A'
   515     0428  344E               	retlw	78	;'N'
   516     0429  3451               	retlw	81	;'Q'
   517     042A  3455               	retlw	85	;'U'
   518     042B  3445               	retlw	69	;'E'
   519     042C  3400               	retlw	0
   520     042D                     STR_15:
   521     042D  3454               	retlw	84	;'T'
   522     042E  3445               	retlw	69	;'E'
   523     042F  344D               	retlw	77	;'M'
   524     0430  3450               	retlw	80	;'P'
   525     0431  3445               	retlw	69	;'E'
   526     0432  3452               	retlw	82	;'R'
   527     0433  3441               	retlw	65	;'A'
   528     0434  3454               	retlw	84	;'T'
   529     0435  3455               	retlw	85	;'U'
   530     0436  3452               	retlw	82	;'R'
   531     0437  3441               	retlw	65	;'A'
   532     0438  343A               	retlw	58	;':'
   533     0439  3400               	retlw	0
   534     043A                     STR_10:
   535     043A  3455               	retlw	85	;'U'
   536     043B  344D               	retlw	77	;'M'
   537     043C  3449               	retlw	73	;'I'
   538     043D  3444               	retlw	68	;'D'
   539     043E  3441               	retlw	65	;'A'
   540     043F  3444               	retlw	68	;'D'
   541     0440  3445               	retlw	69	;'E'
   542     0441  3420               	retlw	32	;' '
   543     0442  3453               	retlw	83	;'S'
   544     0443  344F               	retlw	79	;'O'
   545     0444  344C               	retlw	76	;'L'
   546     0445  344F               	retlw	79	;'O'
   547     0446  3400               	retlw	0
   548     0447                     STR_9:
   549     0447  3449               	retlw	73	;'I'
   550     0448  3452               	retlw	82	;'R'
   551     0449  3452               	retlw	82	;'R'
   552     044A  3449               	retlw	73	;'I'
   553     044B  3447               	retlw	71	;'G'
   554     044C  3441               	retlw	65	;'A'
   555     044D  3443               	retlw	67	;'C'
   556     044E  3441               	retlw	65	;'A'
   557     044F  344F               	retlw	79	;'O'
   558     0450  343A               	retlw	58	;':'
   559     0451  3400               	retlw	0
   560     0452                     STR_14:
   561     0452  3444               	retlw	68	;'D'
   562     0453  3445               	retlw	69	;'E'
   563     0454  3453               	retlw	83	;'S'
   564     0455  344C               	retlw	76	;'L'
   565     0456  3449               	retlw	73	;'I'
   566     0457  3447               	retlw	71	;'G'
   567     0458  3441               	retlw	65	;'A'
   568     0459  3444               	retlw	68	;'D'
   569     045A  3441               	retlw	65	;'A'
   570     045B  3400               	retlw	0
   571     045C                     STR_1:
   572     045C  3443               	retlw	67	;'C'
   573     045D  3448               	retlw	72	;'H'
   574     045E  3445               	retlw	69	;'E'
   575     045F  3449               	retlw	73	;'I'
   576     0460  344F               	retlw	79	;'O'
   577     0461  3400               	retlw	0
   578     0462                     STR_3:
   579     0462  3456               	retlw	86	;'V'
   580     0463  3441               	retlw	65	;'A'
   581     0464  345A               	retlw	90	;'Z'
   582     0465  3449               	retlw	73	;'I'
   583     0466  344F               	retlw	79	;'O'
   584     0467  3400               	retlw	0
   585     0468                     STR_7:
   586     0468  3445               	retlw	69	;'E'
   587     0469  3452               	retlw	82	;'R'
   588     046A  3452               	retlw	82	;'R'
   589     046B  344F               	retlw	79	;'O'
   590     046C  3452               	retlw	82	;'R'
   591     046D  3400               	retlw	0
   592     046E                     STR_2:
   593     046E  344D               	retlw	77	;'M'
   594     046F  3445               	retlw	69	;'E'
   595     0470  3449               	retlw	73	;'I'
   596     0471  344F               	retlw	79	;'O'
   597     0472  3400               	retlw	0
   598     0473                     STR_4:
   599     0473  3445               	retlw	69	;'E'
   600     0474  3452               	retlw	82	;'R'
   601     0475  3452               	retlw	82	;'R'
   602     0476  344F               	retlw	79	;'O'
   603     0477  3400               	retlw	0
   604     0478                     STR_6:
   605     0478  344F               	retlw	79	;'O'
   606     0479  3446               	retlw	70	;'F'
   607     047A  3446               	retlw	70	;'F'
   608     047B  3400               	retlw	0
   609     047C                     STR_5:
   610     047C  344F               	retlw	79	;'O'
   611     047D  344E               	retlw	78	;'N'
   612     047E  3400               	retlw	0
   613     047F                     STR_11:
   614     047F  3425               	retlw	37	;'%'
   615     0480  3464               	retlw	100	;'d'
   616     0481  3400               	retlw	0
   617     047F                     STR_16          equ	STR_11
   618     0455                     STR_13          equ	STR_14+3
   619                           
   620                           	psect	cinit
   621     000F                     start_initialization:	
   622                           ; #config settings
   623                           
   624     000F                     __initialization:
   625                           
   626                           ; Initialize objects allocated to BANK1
   627     000F  1383               	bcf	3,7	;select IRP bank0
   628     0010  30E0               	movlw	low (__pdataBANK1+25)
   629     0011  00FD               	movwf	btemp+-1
   630     0012  300C               	movlw	high __pidataBANK1
   631     0013  00FE               	movwf	btemp
   632     0014  307E               	movlw	low __pidataBANK1
   633     0015  00FF               	movwf	btemp+1
   634     0016  30C7               	movlw	low __pdataBANK1
   635     0017  0084               	movwf	4
   636     0018  120A  158A  2446  120A  118A  	fcall	init_ram0
   637                           
   638                           ; Initialize objects allocated to BANK0
   639     001D  306F               	movlw	low (__pdataBANK0+9)
   640     001E  00FD               	movwf	btemp+-1
   641     001F  300B               	movlw	high __pidataBANK0
   642     0020  00FE               	movwf	btemp
   643     0021  3094               	movlw	low __pidataBANK0
   644     0022  00FF               	movwf	btemp+1
   645     0023  3066               	movlw	low __pdataBANK0
   646     0024  0084               	movwf	4
   647     0025  120A  158A  2446  120A  118A  	fcall	init_ram0
   648                           
   649                           ; Initialize objects allocated to COMMON
   650     002A  120A  118A  2003  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   651     002F  00FB               	movwf	__pdataCOMMON& (0+127)
   652                           
   653                           ; Clear objects allocated to BANK1
   654     0030  30A0               	movlw	low __pbssBANK1
   655     0031  0084               	movwf	4
   656     0032  30C7               	movlw	low (__pbssBANK1+39)
   657     0033  120A  158A  238C  120A  118A  	fcall	clear_ram0
   658                           
   659                           ; Clear objects allocated to BANK0
   660     0038  305C               	movlw	low __pbssBANK0
   661     0039  0084               	movwf	4
   662     003A  3066               	movlw	low (__pbssBANK0+10)
   663     003B  120A  158A  238C  120A  118A  	fcall	clear_ram0
   664                           
   665                           ; Clear objects allocated to BITCOMMON
   666     0040  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   667     0041                     end_of_initialization:	
   668                           ;End of C runtime variable initialization code
   669                           
   670     0041                     __end_of__initialization:
   671     0041  0183               	clrf	3
   672     0042  120A  118A  2B6C   	ljmp	_main	;jump to C main() function
   673                           
   674                           	psect	bitbssCOMMON
   675     03D0                     __pbitbssCOMMON:
   676     03D0                     _isIrrigating:
   677     03D0                     	ds	1
   678     03D1                     _isFilling:
   679     03D1                     	ds	1
   680     03D2                     _rightButtonPressed:
   681     03D2                     	ds	1
   682     03D3                     _leftButtonPressed:
   683     03D3                     	ds	1
   684                           
   685                           	psect	dataCOMMON
   686     007B                     __pdataCOMMON:
   687     007B                     _tankState:
   688     007B                     	ds	1
   689                           
   690                           	psect	bssBANK0
   691     005C                     __pbssBANK0:
   692     005C                     _timerCounter:
   693     005C                     	ds	2
   694     005E                     _temperature:
   695     005E                     	ds	2
   696     0060                     _light:
   697     0060                     	ds	2
   698     0062                     _soilMoisture:
   699     0062                     	ds	2
   700     0064                     _flags:
   701     0064                     	ds	1
   702     0065                     _lcd_lastIndex:
   703     0065                     	ds	1
   704                           
   705                           	psect	dataBANK0
   706     0066                     __pdataBANK0:
   707     0066                     _idealHumidity:
   708     0066                     	ds	1
   709     0067                     _minHumidity:
   710     0067                     	ds	1
   711     0068                     _lastRightButtonState:
   712     0068                     	ds	1
   713     0069                     _lastLeftButtonState:
   714     0069                     	ds	1
   715     006A                     _lcd_index:
   716     006A                     	ds	1
   717     006B                     _lcd_maxIndex:
   718     006B                     	ds	1
   719     006C                     _lastIrrigationState:
   720     006C                     	ds	1
   721     006D                     _irrigationState:
   722     006D                     	ds	1
   723     006E                     _lastTankState:
   724     006E                     	ds	1
   725                           
   726                           	psect	bssBANK1
   727     00A0                     __pbssBANK1:
   728     00A0                     _dbuf:
   729     00A0                     	ds	32
   730     00C0                     draw_Index@F1443:
   731     00C0                     	ds	3
   732     00C3                     _width:
   733     00C3                     	ds	2
   734     00C5                     _prec:
   735     00C5                     	ds	2
   736                           
   737                           	psect	dataBANK1
   738     00C7                     __pdataBANK1:
   739     00C7                     _TankStateString:
   740     00C7                     	ds	4
   741     00CB                     _IrrigationStateString:
   742     00CB                     	ds	3
   743     00CE                     _old_light:
   744     00CE                     	ds	2
   745     00D0                     _old_temperature:
   746     00D0                     	ds	2
   747     00D2                     _old_soilMoisture:
   748     00D2                     	ds	2
   749     00D4                     _timer_ADCReadAll:
   750     00D4                     	ds	4
   751     00D8                     _timer_IRRIG_Timeout:
   752     00D8                     	ds	4
   753     00DC                     _timer_WTANK_Timeout:
   754     00DC                     	ds	4
   755                           
   756                           	psect	inittext
   757     0C42                     init_fetch0:	
   758                           ;	Called with low address in FSR and high address in W
   759                           
   760     0C42  087E               	movf	btemp,w
   761     0C43  008A               	movwf	10
   762     0C44  087F               	movf	btemp+1,w
   763     0C45  0082               	movwf	2
   764     0C46                     init_ram0:	
   765                           ;Called with:
   766                           ;	high address of idata address in btemp 
   767                           ;	low address of idata address in btemp+1 
   768                           ;	low address of data in FSR
   769                           ;	high address + 1 of data in btemp-1
   770                           
   771     0C46  120A  158A  2442  120A  158A  	fcall	init_fetch0
   772     0C4B  0080               	movwf	0
   773     0C4C  0A84               	incf	4,f
   774     0C4D  0804               	movf	4,w
   775     0C4E  067D               	xorwf	btemp+-1,w
   776     0C4F  1903               	btfsc	3,2
   777     0C50  3400               	retlw	0
   778     0C51  0AFF               	incf	btemp+1,f
   779     0C52  1903               	btfsc	3,2
   780     0C53  0AFE               	incf	btemp,f
   781     0C54  2C46               	goto	init_ram0
   782                           
   783                           	psect	clrtext
   784     0B8C                     clear_ram0:	
   785                           ;	Called with FSR containing the base address, and
   786                           ;	W with the last address+1
   787                           
   788     0B8C  0064               	clrwdt	;clear the watchdog before getting into this loop
   789     0B8D                     clrloop0:
   790     0B8D  0180               	clrf	0	;clear RAM location pointed to by FSR
   791     0B8E  0A84               	incf	4,f	;increment pointer
   792     0B8F  0604               	xorwf	4,w	;XOR with final address
   793     0B90  1903               	btfsc	3,2	;have we reached the end yet?
   794     0B91  3400               	retlw	0	;all done for this memory range, return
   795     0B92  0604               	xorwf	4,w	;XOR again to restore value
   796     0B93  2B8D               	goto	clrloop0	;do the next byte
   797                           
   798                           	psect	cstackCOMMON
   799     0070                     __pcstackCOMMON:
   800     0070                     ?_lcd_turnLeft:
   801     0070                     ?_lcd_turnRight:	
   802                           ; 1 bytes @ 0x0
   803                           
   804     0070                     ?_run_waterTankLogic:	
   805                           ; 1 bytes @ 0x0
   806                           
   807     0070                     ?_interrupt_WTANK_timeout:	
   808                           ; 1 bytes @ 0x0
   809                           
   810     0070                     ?_stopFilling:	
   811                           ; 1 bytes @ 0x0
   812                           
   813     0070                     ?_startFilling:	
   814                           ; 1 bytes @ 0x0
   815                           
   816     0070                     ?_interrupt_IRRIG_timeout:	
   817                           ; 1 bytes @ 0x0
   818                           
   819     0070                     ?_stopIrrigation:	
   820                           ; 1 bytes @ 0x0
   821                           
   822     0070                     ?_startIrrigation:	
   823                           ; 1 bytes @ 0x0
   824                           
   825     0070                     ?_putch:	
   826                           ; 1 bytes @ 0x0
   827                           
   828     0070                     ?_WDT_init:	
   829                           ; 1 bytes @ 0x0
   830                           
   831     0070                     ?_timer1_1ms_init:	
   832                           ; 1 bytes @ 0x0
   833                           
   834     0070                     ?_interruption_init:	
   835                           ; 1 bytes @ 0x0
   836                           
   837     0070                     ?_ADC_init:	
   838                           ; 1 bytes @ 0x0
   839                           
   840     0070                     ?_readSoilMoisture:	
   841                           ; 1 bytes @ 0x0
   842                           
   843     0070                     ?_readTemperature:	
   844                           ; 1 bytes @ 0x0
   845                           
   846     0070                     ?_readLight:	
   847                           ; 1 bytes @ 0x0
   848                           
   849     0070                     ?_ADC_readAll:	
   850                           ; 1 bytes @ 0x0
   851                           
   852     0070                     ?_Lcd_Port:	
   853                           ; 1 bytes @ 0x0
   854                           
   855     0070                     ?_Lcd_Cmd:	
   856                           ; 1 bytes @ 0x0
   857                           
   858     0070                     ?_Lcd_Clear:	
   859                           ; 1 bytes @ 0x0
   860                           
   861     0070                     ?_Lcd_Init:	
   862                           ; 1 bytes @ 0x0
   863                           
   864     0070                     ?_Lcd_Write_Char:	
   865                           ; 1 bytes @ 0x0
   866                           
   867     0070                     ?_draw_Index:	
   868                           ; 1 bytes @ 0x0
   869                           
   870     0070                     ?_print_TankState:	
   871                           ; 1 bytes @ 0x0
   872                           
   873     0070                     ?_print_Irrigation:	
   874                           ; 1 bytes @ 0x0
   875                           
   876     0070                     ?_print_SoilMoisture:	
   877                           ; 1 bytes @ 0x0
   878                           
   879     0070                     ?_print_ArtificialLight:	
   880                           ; 1 bytes @ 0x0
   881                           
   882     0070                     ?_print_Temperature:	
   883                           ; 1 bytes @ 0x0
   884                           
   885     0070                     ?_lcd_debounceButtons:	
   886                           ; 1 bytes @ 0x0
   887                           
   888     0070                     ?_lcd_run:	
   889                           ; 1 bytes @ 0x0
   890                           
   891     0070                     ?_interruptionHandler:	
   892                           ; 1 bytes @ 0x0
   893                           
   894     0070                     ?_main:	
   895                           ; 1 bytes @ 0x0
   896                           
   897     0070                     ?_check_TankStatus:	
   898                           ; 1 bytes @ 0x0
   899                           
   900     0070                     putch@c:	
   901                           ; 1 bytes @ 0x0
   902                           
   903     0070                     ??_interruptionHandler:	
   904                           ; 1 bytes @ 0x0
   905                           
   906                           
   907                           ; 1 bytes @ 0x0
   908     0070                     	ds	2
   909     0072                     ?_startTimer:
   910     0072                     ?_stopTimer:	
   911                           ; 1 bytes @ 0x2
   912                           
   913     0072                     ?_pins_init:	
   914                           ; 1 bytes @ 0x2
   915                           
   916     0072                     ?_fputc:	
   917                           ; 1 bytes @ 0x2
   918                           
   919     0072                     ?_ADC_Read:	
   920                           ; 2 bytes @ 0x2
   921                           
   922     0072                     ?___awdiv:	
   923                           ; 2 bytes @ 0x2
   924                           
   925     0072                     ?___awmod:	
   926                           ; 2 bytes @ 0x2
   927                           
   928     0072                     ?___lmul:	
   929                           ; 2 bytes @ 0x2
   930                           
   931     0072                     pins_init@_TRISB:	
   932                           ; 4 bytes @ 0x2
   933                           
   934     0072                     Lcd_Port@a:	
   935                           ; 1 bytes @ 0x2
   936                           
   937     0072                     startTimer@timer:	
   938                           ; 1 bytes @ 0x2
   939                           
   940     0072                     stopTimer@timer:	
   941                           ; 2 bytes @ 0x2
   942                           
   943     0072                     ___awdiv@divisor:	
   944                           ; 2 bytes @ 0x2
   945                           
   946     0072                     ___awmod@divisor:	
   947                           ; 2 bytes @ 0x2
   948                           
   949     0072                     fputc@c:	
   950                           ; 2 bytes @ 0x2
   951                           
   952     0072                     ___lmul@multiplier:	
   953                           ; 2 bytes @ 0x2
   954                           
   955     0072                     ??_lcd_turnLeft:	
   956                           ; 4 bytes @ 0x2
   957                           
   958     0072                     ??_lcd_turnRight:	
   959                           ; 1 bytes @ 0x2
   960                           
   961     0072                     ??_putch:	
   962                           ; 1 bytes @ 0x2
   963                           
   964     0072                     ??_WDT_init:	
   965                           ; 1 bytes @ 0x2
   966                           
   967     0072                     ??_timer1_1ms_init:	
   968                           ; 1 bytes @ 0x2
   969                           
   970     0072                     ??_interruption_init:	
   971                           ; 1 bytes @ 0x2
   972                           
   973     0072                     ??_ADC_init:	
   974                           ; 1 bytes @ 0x2
   975                           
   976     0072                     ??_Lcd_Port:	
   977                           ; 1 bytes @ 0x2
   978                           
   979     0072                     ??_lcd_debounceButtons:	
   980                           ; 1 bytes @ 0x2
   981                           
   982     0072                     ??_check_TankStatus:	
   983                           ; 1 bytes @ 0x2
   984                           
   985                           
   986                           ; 1 bytes @ 0x2
   987     0072                     	ds	1
   988     0073                     pins_init@_TRISC:
   989     0073                     check_TankStatus@top:	
   990                           ; 1 bytes @ 0x3
   991                           
   992     0073                     ??_Lcd_Cmd:	
   993                           ; 1 bytes @ 0x3
   994                           
   995     0073                     ??_Lcd_Write_Char:	
   996                           ; 1 bytes @ 0x3
   997                           
   998                           
   999                           ; 1 bytes @ 0x3
  1000     0073                     	ds	1
  1001     0074                     pins_init@_TRISD:
  1002     0074                     Lcd_Write_Char@temp:	
  1003                           ; 1 bytes @ 0x4
  1004                           
  1005     0074                     check_TankStatus@bot:	
  1006                           ; 1 bytes @ 0x4
  1007                           
  1008     0074                     ___awdiv@dividend:	
  1009                           ; 1 bytes @ 0x4
  1010                           
  1011     0074                     ___awmod@dividend:	
  1012                           ; 2 bytes @ 0x4
  1013                           
  1014     0074                     fputc@fp:	
  1015                           ; 2 bytes @ 0x4
  1016                           
  1017     0074                     ??_startTimer:	
  1018                           ; 2 bytes @ 0x4
  1019                           
  1020     0074                     ??_stopTimer:	
  1021                           ; 1 bytes @ 0x4
  1022                           
  1023     0074                     ??_ADC_Read:	
  1024                           ; 1 bytes @ 0x4
  1025                           
  1026                           
  1027                           ; 1 bytes @ 0x4
  1028     0074                     	ds	1
  1029     0075                     pins_init@_TRISA:
  1030     0075                     ADC_Read@channel:	
  1031                           ; 1 bytes @ 0x5
  1032                           
  1033     0075                     Lcd_Cmd@a:	
  1034                           ; 1 bytes @ 0x5
  1035                           
  1036     0075                     Lcd_Write_Char@y:	
  1037                           ; 1 bytes @ 0x5
  1038                           
  1039     0075                     ??_pins_init:	
  1040                           ; 1 bytes @ 0x5
  1041                           
  1042                           
  1043                           ; 1 bytes @ 0x5
  1044     0075                     	ds	1
  1045     0076                     ?_run_IrrigationLogic:
  1046     0076                     ?_Lcd_Set_Cursor:	
  1047                           ; 1 bytes @ 0x6
  1048                           
  1049     0076                     Lcd_Set_Cursor@b:	
  1050                           ; 1 bytes @ 0x6
  1051                           
  1052     0076                     Lcd_Write_Char@a:	
  1053                           ; 1 bytes @ 0x6
  1054                           
  1055     0076                     ___awdiv@counter:	
  1056                           ; 1 bytes @ 0x6
  1057                           
  1058     0076                     ___awmod@counter:	
  1059                           ; 1 bytes @ 0x6
  1060                           
  1061     0076                     run_IrrigationLogic@sMoistureValue:	
  1062                           ; 1 bytes @ 0x6
  1063                           
  1064     0076                     ___lmul@multiplicand:	
  1065                           ; 2 bytes @ 0x6
  1066                           
  1067     0076                     ??_run_waterTankLogic:	
  1068                           ; 4 bytes @ 0x6
  1069                           
  1070     0076                     ??_interrupt_WTANK_timeout:	
  1071                           ; 1 bytes @ 0x6
  1072                           
  1073     0076                     ??_stopFilling:	
  1074                           ; 1 bytes @ 0x6
  1075                           
  1076     0076                     ??_startFilling:	
  1077                           ; 1 bytes @ 0x6
  1078                           
  1079     0076                     ??_interrupt_IRRIG_timeout:	
  1080                           ; 1 bytes @ 0x6
  1081                           
  1082     0076                     ??_stopIrrigation:	
  1083                           ; 1 bytes @ 0x6
  1084                           
  1085     0076                     ??_startIrrigation:	
  1086                           ; 1 bytes @ 0x6
  1087                           
  1088     0076                     ??_readLight:	
  1089                           ; 1 bytes @ 0x6
  1090                           
  1091     0076                     ??_Lcd_Clear:	
  1092                           ; 1 bytes @ 0x6
  1093                           
  1094     0076                     ??_Lcd_Init:	
  1095                           ; 1 bytes @ 0x6
  1096                           
  1097     0076                     ??___awdiv:	
  1098                           ; 1 bytes @ 0x6
  1099                           
  1100     0076                     ??___awmod:	
  1101                           ; 1 bytes @ 0x6
  1102                           
  1103                           
  1104                           ; 1 bytes @ 0x6
  1105     0076                     	ds	1
  1106     0077                     ?_Lcd_Write_String:
  1107     0077                     ___awdiv@sign:	
  1108                           ; 1 bytes @ 0x7
  1109                           
  1110     0077                     ___awmod@sign:	
  1111                           ; 1 bytes @ 0x7
  1112                           
  1113     0077                     Lcd_Write_String@a:	
  1114                           ; 1 bytes @ 0x7
  1115                           
  1116     0077                     ??_Lcd_Set_Cursor:	
  1117                           ; 2 bytes @ 0x7
  1118                           
  1119                           
  1120                           ; 1 bytes @ 0x7
  1121     0077                     	ds	1
  1122     0078                     ?_abs:
  1123     0078                     ___awdiv@quotient:	
  1124                           ; 2 bytes @ 0x8
  1125                           
  1126     0078                     abs@a:	
  1127                           ; 2 bytes @ 0x8
  1128                           
  1129     0078                     ??_run_IrrigationLogic:	
  1130                           ; 2 bytes @ 0x8
  1131                           
  1132                           
  1133                           ; 1 bytes @ 0x8
  1134     0078                     	ds	1
  1135     0079                     ??_draw_Index:
  1136     0079                     ??_print_TankState:	
  1137                           ; 1 bytes @ 0x9
  1138                           
  1139     0079                     ??_print_Irrigation:	
  1140                           ; 1 bytes @ 0x9
  1141                           
  1142     0079                     ??_print_ArtificialLight:	
  1143                           ; 1 bytes @ 0x9
  1144                           
  1145                           
  1146                           ; 1 bytes @ 0x9
  1147     0079                     	ds	1
  1148     007A                     ??_vfprintf:
  1149     007A                     ??_readSoilMoisture:	
  1150                           ; 1 bytes @ 0xA
  1151                           
  1152     007A                     ??_readTemperature:	
  1153                           ; 1 bytes @ 0xA
  1154                           
  1155     007A                     ??_ADC_readAll:	
  1156                           ; 1 bytes @ 0xA
  1157                           
  1158     007A                     ??_print_SoilMoisture:	
  1159                           ; 1 bytes @ 0xA
  1160                           
  1161     007A                     ??_print_Temperature:	
  1162                           ; 1 bytes @ 0xA
  1163                           
  1164     007A                     ??_lcd_run:	
  1165                           ; 1 bytes @ 0xA
  1166                           
  1167     007A                     ??_main:	
  1168                           ; 1 bytes @ 0xA
  1169                           
  1170                           
  1171                           	psect	cstackBANK0
  1172     0020                     __pcstackBANK0:	
  1173                           ; 1 bytes @ 0xA
  1174                           
  1175     0020                     Lcd_Set_Cursor@a:
  1176     0020                     ??_fputc:	
  1177                           ; 1 bytes @ 0x0
  1178                           
  1179     0020                     ??_abs:	
  1180                           ; 1 bytes @ 0x0
  1181                           
  1182     0020                     ??_Lcd_Write_String:	
  1183                           ; 1 bytes @ 0x0
  1184                           
  1185     0020                     ??___lmul:	
  1186                           ; 1 bytes @ 0x0
  1187                           
  1188                           
  1189                           ; 1 bytes @ 0x0
  1190     0020                     	ds	1
  1191     0021                     Lcd_Set_Cursor@z:
  1192     0021                     ___lmul@product:	
  1193                           ; 1 bytes @ 0x1
  1194                           
  1195                           
  1196                           ; 4 bytes @ 0x1
  1197     0021                     	ds	1
  1198     0022                     Lcd_Set_Cursor@y:
  1199                           
  1200                           ; 1 bytes @ 0x2
  1201     0022                     	ds	1
  1202     0023                     Lcd_Set_Cursor@temp:
  1203     0023                     Lcd_Write_String@i:	
  1204                           ; 1 bytes @ 0x3
  1205                           
  1206                           
  1207                           ; 2 bytes @ 0x3
  1208     0023                     	ds	2
  1209     0025                     ?___aldiv:
  1210     0025                     draw_Index@temp_index:	
  1211                           ; 4 bytes @ 0x5
  1212                           
  1213     0025                     ___aldiv@divisor:	
  1214                           ; 3 bytes @ 0x5
  1215                           
  1216                           
  1217                           ; 4 bytes @ 0x5
  1218     0025                     	ds	4
  1219     0029                     ?_vfpfcnvrt:
  1220     0029                     vfpfcnvrt@fp:	
  1221                           ; 1 bytes @ 0x9
  1222                           
  1223     0029                     ___aldiv@dividend:	
  1224                           ; 2 bytes @ 0x9
  1225                           
  1226                           
  1227                           ; 4 bytes @ 0x9
  1228     0029                     	ds	2
  1229     002B                     vfpfcnvrt@fmt:
  1230                           
  1231                           ; 1 bytes @ 0xB
  1232     002B                     	ds	1
  1233     002C                     vfpfcnvrt@ap:
  1234                           
  1235                           ; 1 bytes @ 0xC
  1236     002C                     	ds	1
  1237     002D                     ??___aldiv:
  1238     002D                     ??_vfpfcnvrt:	
  1239                           ; 1 bytes @ 0xD
  1240                           
  1241                           
  1242                           ; 1 bytes @ 0xD
  1243     002D                     	ds	1
  1244     002E                     ___aldiv@counter:
  1245                           
  1246                           ; 1 bytes @ 0xE
  1247     002E                     	ds	1
  1248     002F                     ___aldiv@sign:
  1249     002F                     vfpfcnvrt@done:	
  1250                           ; 1 bytes @ 0xF
  1251                           
  1252                           
  1253                           ; 1 bytes @ 0xF
  1254     002F                     	ds	1
  1255     0030                     vfpfcnvrt@cp:
  1256     0030                     ___aldiv@quotient:	
  1257                           ; 1 bytes @ 0x10
  1258                           
  1259                           
  1260                           ; 4 bytes @ 0x10
  1261     0030                     	ds	1
  1262     0031                     vfpfcnvrt@convarg:
  1263                           
  1264                           ; 4 bytes @ 0x11
  1265     0031                     	ds	3
  1266     0034                     ?_map:
  1267     0034                     map@x:	
  1268                           ; 4 bytes @ 0x14
  1269                           
  1270                           
  1271                           ; 2 bytes @ 0x14
  1272     0034                     	ds	1
  1273     0035                     vfpfcnvrt@c:
  1274                           
  1275                           ; 1 bytes @ 0x15
  1276     0035                     	ds	1
  1277     0036                     ?_vfprintf:
  1278     0036                     map@in_min:	
  1279                           ; 2 bytes @ 0x16
  1280                           
  1281     0036                     vfprintf@fp:	
  1282                           ; 2 bytes @ 0x16
  1283                           
  1284                           
  1285                           ; 2 bytes @ 0x16
  1286     0036                     	ds	2
  1287     0038                     vfprintf@fmt:
  1288     0038                     map@in_max:	
  1289                           ; 1 bytes @ 0x18
  1290                           
  1291                           
  1292                           ; 2 bytes @ 0x18
  1293     0038                     	ds	1
  1294     0039                     vfprintf@ap:
  1295                           
  1296                           ; 1 bytes @ 0x19
  1297     0039                     	ds	1
  1298     003A                     vfprintf@cfmt:
  1299     003A                     map@out_min:	
  1300                           ; 1 bytes @ 0x1A
  1301                           
  1302                           
  1303                           ; 2 bytes @ 0x1A
  1304     003A                     	ds	1
  1305     003B                     ?_sprintf:
  1306     003B                     sprintf@s:	
  1307                           ; 2 bytes @ 0x1B
  1308                           
  1309                           
  1310                           ; 1 bytes @ 0x1B
  1311     003B                     	ds	1
  1312     003C                     sprintf@fmt:
  1313     003C                     map@out_max:	
  1314                           ; 1 bytes @ 0x1C
  1315                           
  1316                           
  1317                           ; 2 bytes @ 0x1C
  1318     003C                     	ds	2
  1319     003E                     ??_map:
  1320                           
  1321                           ; 1 bytes @ 0x1E
  1322     003E                     	ds	1
  1323     003F                     ??_sprintf:
  1324                           
  1325                           ; 1 bytes @ 0x1F
  1326     003F                     	ds	1
  1327     0040                     sprintf@ap:
  1328                           
  1329                           ; 1 bytes @ 0x20
  1330     0040                     	ds	1
  1331     0041                     sprintf@f:
  1332                           
  1333                           ; 11 bytes @ 0x21
  1334     0041                     	ds	5
  1335     0046                     map@rise:
  1336                           
  1337                           ; 4 bytes @ 0x26
  1338     0046                     	ds	4
  1339     004A                     map@delta:
  1340                           
  1341                           ; 4 bytes @ 0x2A
  1342     004A                     	ds	2
  1343     004C                     print_SoilMoisture@buffer:
  1344     004C                     print_Temperature@buffer:	
  1345                           ; 16 bytes @ 0x2C
  1346                           
  1347                           
  1348                           ; 16 bytes @ 0x2C
  1349     004C                     	ds	2
  1350     004E                     map@run:
  1351                           
  1352                           ; 4 bytes @ 0x2E
  1353     004E                     	ds	4
  1354     0052                     ?_runTimer:
  1355     0052                     runTimer@timer:	
  1356                           ; 1 bytes @ 0x32
  1357                           
  1358                           
  1359                           ; 2 bytes @ 0x32
  1360     0052                     	ds	2
  1361     0054                     ??_runTimer:
  1362                           
  1363                           ; 1 bytes @ 0x34
  1364     0054                     	ds	8
  1365                           
  1366                           	psect	maintext
  1367     036C                     __pmaintext:	
  1368 ;;
  1369 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1370 ;;
  1371 ;; *************** function _main *****************
  1372 ;; Defined at:
  1373 ;;		line 45 in file "main.c"
  1374 ;; Parameters:    Size  Location     Type
  1375 ;;		None
  1376 ;; Auto vars:     Size  Location     Type
  1377 ;;		None
  1378 ;; Return value:  Size  Location     Type
  1379 ;;                  1    wreg      void 
  1380 ;; Registers used:
  1381 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1382 ;; Tracked objects:
  1383 ;;		On entry : B00/0
  1384 ;;		On exit  : 0/0
  1385 ;;		Unchanged: 0/0
  1386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1387 ;;      Params:         0       0       0       0       0
  1388 ;;      Locals:         0       0       0       0       0
  1389 ;;      Temps:          0       0       0       0       0
  1390 ;;      Totals:         0       0       0       0       0
  1391 ;;Total ram usage:        0 bytes
  1392 ;; Hardware stack levels required when called: 8
  1393 ;; This function calls:
  1394 ;;		_ADC_init
  1395 ;;		_ADC_readAll
  1396 ;;		_Lcd_Init
  1397 ;;		_WDT_init
  1398 ;;		_interruption_init
  1399 ;;		_lcd_run
  1400 ;;		_pins_init
  1401 ;;		_runTimer
  1402 ;;		_run_IrrigationLogic
  1403 ;;		_run_waterTankLogic
  1404 ;;		_timer1_1ms_init
  1405 ;; This function is called by:
  1406 ;;		Startup code after reset
  1407 ;; This function uses a non-reentrant model
  1408 ;;
  1409                           
  1410     036C                     _main:	
  1411                           ;psect for function _main
  1412                           
  1413     036C                     l2809:	
  1414                           ;incstack = 0
  1415                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1416                           
  1417                           
  1418                           ;main.c: 48:   pins_init(0xFF ,0xFF ,0x00 ,0x00);
  1419     036C  30FF               	movlw	255
  1420     036D  00F2               	movwf	pins_init@_TRISB
  1421     036E  01F3               	clrf	pins_init@_TRISC
  1422     036F  01F4               	clrf	pins_init@_TRISD
  1423     0370  30FF               	movlw	255
  1424     0371  120A  158A  23EA  120A  118A  	fcall	_pins_init
  1425     0376                     l2811:
  1426                           
  1427                           ;main.c: 52:   PORTCbits.RC0 = 1;
  1428     0376  1283               	bcf	3,5	;RP0=0, select bank0
  1429     0377  1303               	bcf	3,6	;RP1=0, select bank0
  1430     0378  1407               	bsf	7,0	;volatile
  1431     0379                     l2813:
  1432                           
  1433                           ;main.c: 53:   PORTCbits.RC1 = 1;
  1434     0379  1487               	bsf	7,1	;volatile
  1435     037A                     l2815:
  1436                           
  1437                           ;main.c: 54:   PORTCbits.RC4 = 1;
  1438     037A  1607               	bsf	7,4	;volatile
  1439     037B                     l2817:
  1440                           
  1441                           ;main.c: 55:   PORTCbits.RC2 = 1;
  1442     037B  1507               	bsf	7,2	;volatile
  1443     037C                     l2819:
  1444                           
  1445                           ;main.c: 57:   PORTCbits.RC3 = 1;
  1446     037C  1587               	bsf	7,3	;volatile
  1447     037D                     l2821:
  1448                           
  1449                           ;main.c: 61:   WDT_init();
  1450     037D  120A  158A  2374  120A  118A  	fcall	_WDT_init
  1451     0382                     l2823:
  1452                           
  1453                           ;main.c: 62:   interruption_init();
  1454     0382  120A  158A  237C  120A  118A  	fcall	_interruption_init
  1455     0387                     l2825:
  1456                           
  1457                           ;main.c: 63:   timer1_1ms_init();
  1458     0387  120A  118A  27F5  120A  118A  	fcall	_timer1_1ms_init
  1459     038C                     l2827:
  1460                           
  1461                           ;main.c: 64:   ADC_init();
  1462     038C  120A  158A  23A7  120A  118A  	fcall	_ADC_init
  1463                           
  1464                           ;main.c: 65:   Lcd_Init();
  1465     0391  120A  118A  2615  120A  118A  	fcall	_Lcd_Init
  1466                           
  1467                           ;main.c: 68:   ADC_readAll();
  1468     0396  120A  158A  23F9  120A  118A  	fcall	_ADC_readAll
  1469     039B                     l255:	
  1470                           ;main.c: 70:   while(1)
  1471                           
  1472     039B  0064               	clrwdt	;# 
  1473     039C                     l2829:
  1474                           
  1475                           ;main.c: 73:     run_waterTankLogic();
  1476     039C  120A  158A  2646  120A  118A  	fcall	_run_waterTankLogic
  1477     03A1                     l2831:
  1478                           
  1479                           ;main.c: 74:     run_IrrigationLogic(soilMoisture);
  1480     03A1  1283               	bcf	3,5	;RP0=0, select bank0
  1481     03A2  1303               	bcf	3,6	;RP1=0, select bank0
  1482     03A3  0863               	movf	_soilMoisture+1,w
  1483     03A4  00F7               	movwf	run_IrrigationLogic@sMoistureValue+1
  1484     03A5  0862               	movf	_soilMoisture,w
  1485     03A6  00F6               	movwf	run_IrrigationLogic@sMoistureValue
  1486     03A7  120A  158A  272F  120A  118A  	fcall	_run_IrrigationLogic
  1487     03AC                     l2833:
  1488                           
  1489                           ;main.c: 75:     lcd_run();
  1490     03AC  120A  158A  26AF  120A  118A  	fcall	_lcd_run
  1491     03B1                     l2835:
  1492                           
  1493                           ;main.c: 78:     runTimer(&timer_WTANK_Timeout);
  1494     03B1  30DC               	movlw	low _timer_WTANK_Timeout
  1495     03B2  1283               	bcf	3,5	;RP0=0, select bank0
  1496     03B3  1303               	bcf	3,6	;RP1=0, select bank0
  1497     03B4  00D2               	movwf	runTimer@timer
  1498     03B5  3000               	movlw	high _timer_WTANK_Timeout
  1499     03B6  00D3               	movwf	runTimer@timer+1
  1500     03B7  120A  118A  26C9  120A  118A  	fcall	_runTimer
  1501     03BC                     l2837:
  1502                           
  1503                           ;main.c: 79:     runTimer(&timer_IRRIG_Timeout);
  1504     03BC  30D8               	movlw	low _timer_IRRIG_Timeout
  1505     03BD  1283               	bcf	3,5	;RP0=0, select bank0
  1506     03BE  1303               	bcf	3,6	;RP1=0, select bank0
  1507     03BF  00D2               	movwf	runTimer@timer
  1508     03C0  3000               	movlw	high _timer_IRRIG_Timeout
  1509     03C1  00D3               	movwf	runTimer@timer+1
  1510     03C2  120A  118A  26C9  120A  118A  	fcall	_runTimer
  1511     03C7                     l2839:
  1512                           
  1513                           ;main.c: 80:     runTimer(&timer_ADCReadAll);
  1514     03C7  30D4               	movlw	low _timer_ADCReadAll
  1515     03C8  1283               	bcf	3,5	;RP0=0, select bank0
  1516     03C9  1303               	bcf	3,6	;RP1=0, select bank0
  1517     03CA  00D2               	movwf	runTimer@timer
  1518     03CB  3000               	movlw	high _timer_ADCReadAll
  1519     03CC  00D3               	movwf	runTimer@timer+1
  1520     03CD  120A  118A  26C9  120A  118A  	fcall	_runTimer
  1521     03D2                     l2841:
  1522                           
  1523                           ;main.c: 84:     if(light >= 900)
  1524     03D2  1283               	bcf	3,5	;RP0=0, select bank0
  1525     03D3  1303               	bcf	3,6	;RP1=0, select bank0
  1526     03D4  0861               	movf	_light+1,w
  1527     03D5  3A80               	xorlw	128
  1528     03D6  00FF               	movwf	btemp+1
  1529     03D7  3083               	movlw	131
  1530     03D8  027F               	subwf	btemp+1,w
  1531     03D9  1D03               	skipz
  1532     03DA  2BDD               	goto	u2765
  1533     03DB  3084               	movlw	132
  1534     03DC  0260               	subwf	_light,w
  1535     03DD                     u2765:
  1536     03DD  1C03               	skipc
  1537     03DE  2BE0               	goto	u2761
  1538     03DF  2BE1               	goto	u2760
  1539     03E0                     u2761:
  1540     03E0  2BE5               	goto	l256
  1541     03E1                     u2760:
  1542     03E1                     l2843:
  1543                           
  1544                           ;main.c: 85:       PORTCbits.RC3 = 0;
  1545     03E1  1283               	bcf	3,5	;RP0=0, select bank0
  1546     03E2  1303               	bcf	3,6	;RP1=0, select bank0
  1547     03E3  1187               	bcf	7,3	;volatile
  1548     03E4  2BE8               	goto	l2845
  1549     03E5                     l256:	
  1550                           ;main.c: 86:     else
  1551                           
  1552                           
  1553                           ;main.c: 87:       PORTCbits.RC3 = 1;
  1554     03E5  1283               	bcf	3,5	;RP0=0, select bank0
  1555     03E6  1303               	bcf	3,6	;RP1=0, select bank0
  1556     03E7  1587               	bsf	7,3	;volatile
  1557     03E8                     l2845:
  1558                           
  1559                           ;main.c: 89:     if(temperature >= 30)
  1560     03E8  085F               	movf	_temperature+1,w
  1561     03E9  3A80               	xorlw	128
  1562     03EA  00FF               	movwf	btemp+1
  1563     03EB  3080               	movlw	128
  1564     03EC  027F               	subwf	btemp+1,w
  1565     03ED  1D03               	skipz
  1566     03EE  2BF1               	goto	u2775
  1567     03EF  301E               	movlw	30
  1568     03F0  025E               	subwf	_temperature,w
  1569     03F1                     u2775:
  1570     03F1  1C03               	skipc
  1571     03F2  2BF4               	goto	u2771
  1572     03F3  2BF5               	goto	u2770
  1573     03F4                     u2771:
  1574     03F4  2BF9               	goto	l258
  1575     03F5                     u2770:
  1576     03F5                     l2847:
  1577                           
  1578                           ;main.c: 90:       PORTCbits.RC4 = 0;
  1579     03F5  1283               	bcf	3,5	;RP0=0, select bank0
  1580     03F6  1303               	bcf	3,6	;RP1=0, select bank0
  1581     03F7  1207               	bcf	7,4	;volatile
  1582     03F8  2B9B               	goto	l255
  1583     03F9                     l258:	
  1584                           ;main.c: 91:     else
  1585                           
  1586                           
  1587                           ;main.c: 92:       PORTCbits.RC4 = 1;
  1588     03F9  1283               	bcf	3,5	;RP0=0, select bank0
  1589     03FA  1303               	bcf	3,6	;RP1=0, select bank0
  1590     03FB  1607               	bsf	7,4	;volatile
  1591     03FC  2B9B               	goto	l255
  1592     03FD  120A  118A  280C   	ljmp	start
  1593     0400                     __end_of_main:
  1594                           
  1595                           	psect	text1
  1596     07F5                     __ptext1:	
  1597 ;; *************** function _timer1_1ms_init *****************
  1598 ;; Defined at:
  1599 ;;		line 51 in file "./config.h"
  1600 ;; Parameters:    Size  Location     Type
  1601 ;;		None
  1602 ;; Auto vars:     Size  Location     Type
  1603 ;;		None
  1604 ;; Return value:  Size  Location     Type
  1605 ;;                  1    wreg      void 
  1606 ;; Registers used:
  1607 ;;		None
  1608 ;; Tracked objects:
  1609 ;;		On entry : 0/0
  1610 ;;		On exit  : 0/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1613 ;;      Params:         0       0       0       0       0
  1614 ;;      Locals:         0       0       0       0       0
  1615 ;;      Temps:          0       0       0       0       0
  1616 ;;      Totals:         0       0       0       0       0
  1617 ;;Total ram usage:        0 bytes
  1618 ;; Hardware stack levels used: 1
  1619 ;; Hardware stack levels required when called: 1
  1620 ;; This function calls:
  1621 ;;		Nothing
  1622 ;; This function is called by:
  1623 ;;		_main
  1624 ;; This function uses a non-reentrant model
  1625 ;;
  1626                           
  1627     07F5                     _timer1_1ms_init:	
  1628                           ;psect for function _timer1_1ms_init
  1629                           
  1630     07F5                     l2251:	
  1631                           ;incstack = 0
  1632                           ; Regs used in _timer1_1ms_init: []
  1633                           
  1634     07F5  1283               	bcf	3,5	;RP0=0, select bank0
  1635     07F6  1303               	bcf	3,6	;RP1=0, select bank0
  1636     07F7  1090               	bcf	16,1	;volatile
  1637     07F8  1610               	bsf	16,4	;volatile
  1638     07F9  1690               	bsf	16,5	;volatile
  1639     07FA  300B               	movlw	11
  1640     07FB  008F               	movwf	15	;volatile
  1641     07FC  30DB               	movlw	219
  1642     07FD  008E               	movwf	14	;volatile
  1643                           
  1644                           ;./config.h: 75:   T1CONbits.TMR1ON = 1;
  1645     07FE  1410               	bsf	16,0	;volatile
  1646     07FF                     l98:
  1647     07FF  0008               	return
  1648     0800                     __end_of_timer1_1ms_init:
  1649                           
  1650                           	psect	text2
  1651     0E46                     __ptext2:	
  1652 ;; *************** function _run_waterTankLogic *****************
  1653 ;; Defined at:
  1654 ;;		line 44 in file "waterTankManager.c"
  1655 ;; Parameters:    Size  Location     Type
  1656 ;;		None
  1657 ;; Auto vars:     Size  Location     Type
  1658 ;;		None
  1659 ;; Return value:  Size  Location     Type
  1660 ;;                  1    wreg      void 
  1661 ;; Registers used:
  1662 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1663 ;; Tracked objects:
  1664 ;;		On entry : 0/0
  1665 ;;		On exit  : 0/0
  1666 ;;		Unchanged: 0/0
  1667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1668 ;;      Params:         0       0       0       0       0
  1669 ;;      Locals:         0       0       0       0       0
  1670 ;;      Temps:          2       0       0       0       0
  1671 ;;      Totals:         2       0       0       0       0
  1672 ;;Total ram usage:        2 bytes
  1673 ;; Hardware stack levels used: 1
  1674 ;; Hardware stack levels required when called: 3
  1675 ;; This function calls:
  1676 ;;		_check_TankStatus
  1677 ;;		_startFilling
  1678 ;;		_stopFilling
  1679 ;; This function is called by:
  1680 ;;		_main
  1681 ;; This function uses a non-reentrant model
  1682 ;;
  1683                           
  1684     0E46                     _run_waterTankLogic:	
  1685                           ;psect for function _run_waterTankLogic
  1686                           
  1687     0E46                     l2293:	
  1688                           ;incstack = 0
  1689                           ; Regs used in _run_waterTankLogic: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1690                           
  1691                           
  1692                           ;waterTankManager.c: 47:   check_TankStatus();
  1693     0E46  120A  118A  27AE  120A  158A  	fcall	_check_TankStatus
  1694                           
  1695                           ;waterTankManager.c: 49:   switch (tankState)
  1696     0E4B  2E61               	goto	l2305
  1697     0E4C                     l2295:
  1698                           
  1699                           ;waterTankManager.c: 52:     stopFilling();
  1700     0E4C  120A  158A  241C  120A  158A  	fcall	_stopFilling
  1701     0E51                     l2297:
  1702                           
  1703                           ;waterTankManager.c: 53:     PORTCbits.RC2 = 0;
  1704     0E51  1283               	bcf	3,5	;RP0=0, select bank0
  1705     0E52  1303               	bcf	3,6	;RP1=0, select bank0
  1706     0E53  1107               	bcf	7,2	;volatile
  1707                           
  1708                           ;waterTankManager.c: 54:     break;
  1709     0E54  2E79               	goto	l306
  1710     0E55                     l2299:
  1711                           
  1712                           ;waterTankManager.c: 57:     startFilling();
  1713     0E55  120A  158A  242F  120A  158A  	fcall	_startFilling
  1714                           
  1715                           ;waterTankManager.c: 58:     break;
  1716     0E5A  2E79               	goto	l306
  1717     0E5B                     l2301:
  1718                           
  1719                           ;waterTankManager.c: 61:     stopFilling();
  1720     0E5B  120A  158A  241C  120A  158A  	fcall	_stopFilling
  1721                           
  1722                           ;waterTankManager.c: 62:     break;
  1723     0E60  2E79               	goto	l306
  1724     0E61                     l2305:
  1725     0E61  087B               	movf	_tankState,w
  1726     0E62  00F6               	movwf	??_run_waterTankLogic
  1727     0E63  01F7               	clrf	??_run_waterTankLogic+1
  1728     0E64  1BF6               	btfsc	??_run_waterTankLogic,7
  1729     0E65  03F7               	decf	??_run_waterTankLogic+1,f
  1730                           
  1731                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1732                           ; Switch size 1, requested type "simple"
  1733                           ; Number of cases is 1, Range of values is 0 to 0
  1734                           ; switch strategies available:
  1735                           ; Name         Instructions Cycles
  1736                           ; simple_byte            4     3 (average)
  1737                           ; direct_byte           11     8 (fixed)
  1738                           ; jumptable            260     6 (fixed)
  1739                           ;	Chosen strategy is simple_byte
  1740     0E66  0877               	movf	??_run_waterTankLogic+1,w
  1741     0E67  3A00               	xorlw	0	; case 0
  1742     0E68  1903               	skipnz
  1743     0E69  2E6B               	goto	l2869
  1744     0E6A  2E5B               	goto	l2301
  1745     0E6B                     l2869:
  1746                           
  1747                           ; Switch size 1, requested type "simple"
  1748                           ; Number of cases is 4, Range of values is 0 to 3
  1749                           ; switch strategies available:
  1750                           ; Name         Instructions Cycles
  1751                           ; simple_byte           13     7 (average)
  1752                           ; direct_byte           20     8 (fixed)
  1753                           ; jumptable            260     6 (fixed)
  1754                           ;	Chosen strategy is simple_byte
  1755     0E6B  0876               	movf	??_run_waterTankLogic,w
  1756     0E6C  3A00               	xorlw	0	; case 0
  1757     0E6D  1903               	skipnz
  1758     0E6E  2E5B               	goto	l2301
  1759     0E6F  3A01               	xorlw	1	; case 1
  1760     0E70  1903               	skipnz
  1761     0E71  2E79               	goto	l306
  1762     0E72  3A03               	xorlw	3	; case 2
  1763     0E73  1903               	skipnz
  1764     0E74  2E55               	goto	l2299
  1765     0E75  3A01               	xorlw	1	; case 3
  1766     0E76  1903               	skipnz
  1767     0E77  2E4C               	goto	l2295
  1768     0E78  2E5B               	goto	l2301
  1769     0E79                     l306:
  1770     0E79  0008               	return
  1771     0E7A                     __end_of_run_waterTankLogic:
  1772                           
  1773                           	psect	text3
  1774     0C2F                     __ptext3:	
  1775 ;; *************** function _startFilling *****************
  1776 ;; Defined at:
  1777 ;;		line 73 in file "waterTankManager.c"
  1778 ;; Parameters:    Size  Location     Type
  1779 ;;		None
  1780 ;; Auto vars:     Size  Location     Type
  1781 ;;		None
  1782 ;; Return value:  Size  Location     Type
  1783 ;;                  1    wreg      void 
  1784 ;; Registers used:
  1785 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1786 ;; Tracked objects:
  1787 ;;		On entry : 0/0
  1788 ;;		On exit  : 0/0
  1789 ;;		Unchanged: 0/0
  1790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1791 ;;      Params:         0       0       0       0       0
  1792 ;;      Locals:         0       0       0       0       0
  1793 ;;      Temps:          0       0       0       0       0
  1794 ;;      Totals:         0       0       0       0       0
  1795 ;;Total ram usage:        0 bytes
  1796 ;; Hardware stack levels used: 1
  1797 ;; Hardware stack levels required when called: 2
  1798 ;; This function calls:
  1799 ;;		_startTimer
  1800 ;; This function is called by:
  1801 ;;		_run_waterTankLogic
  1802 ;; This function uses a non-reentrant model
  1803 ;;
  1804                           
  1805     0C2F                     _startFilling:	
  1806                           ;psect for function _startFilling
  1807                           
  1808     0C2F                     l2225:	
  1809                           ;incstack = 0
  1810                           ; Regs used in _startFilling: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1811                           
  1812                           
  1813                           ;waterTankManager.c: 75:   if(isFilling)
  1814     0C2F  1CFA               	btfss	_isFilling/(0+8),_isFilling& (0+7)
  1815     0C30  2C32               	goto	u2041
  1816     0C31  2C33               	goto	u2040
  1817     0C32                     u2041:
  1818     0C32  2C34               	goto	l309
  1819     0C33                     u2040:
  1820     0C33  2C41               	goto	l310
  1821     0C34                     l309:
  1822                           
  1823                           ;waterTankManager.c: 78:   isFilling = 1;
  1824     0C34  14FA               	bsf	_isFilling/(0+8),_isFilling& (0+7)
  1825                           
  1826                           ;waterTankManager.c: 79:   PORTCbits.RC0 = 0;
  1827     0C35  1283               	bcf	3,5	;RP0=0, select bank0
  1828     0C36  1303               	bcf	3,6	;RP1=0, select bank0
  1829     0C37  1007               	bcf	7,0	;volatile
  1830     0C38                     l2229:
  1831                           
  1832                           ;waterTankManager.c: 80:   startTimer(&timer_WTANK_Timeout);
  1833     0C38  30DC               	movlw	low _timer_WTANK_Timeout
  1834     0C39  00F2               	movwf	startTimer@timer
  1835     0C3A  3000               	movlw	high _timer_WTANK_Timeout
  1836     0C3B  00F3               	movwf	startTimer@timer+1
  1837     0C3C  120A  158A  255C  120A  158A  	fcall	_startTimer
  1838     0C41                     l310:
  1839     0C41  0008               	return
  1840     0C42                     __end_of_startFilling:
  1841                           
  1842                           	psect	text4
  1843     07AE                     __ptext4:	
  1844 ;; *************** function _check_TankStatus *****************
  1845 ;; Defined at:
  1846 ;;		line 15 in file "waterTankManager.c"
  1847 ;; Parameters:    Size  Location     Type
  1848 ;;		None
  1849 ;; Auto vars:     Size  Location     Type
  1850 ;;  bot             1    4[COMMON] unsigned char 
  1851 ;;  top             1    3[COMMON] unsigned char 
  1852 ;; Return value:  Size  Location     Type
  1853 ;;                  1    wreg      void 
  1854 ;; Registers used:
  1855 ;;		wreg, status,2, status,0
  1856 ;; Tracked objects:
  1857 ;;		On entry : 0/0
  1858 ;;		On exit  : 0/0
  1859 ;;		Unchanged: 0/0
  1860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1861 ;;      Params:         0       0       0       0       0
  1862 ;;      Locals:         2       0       0       0       0
  1863 ;;      Temps:          1       0       0       0       0
  1864 ;;      Totals:         3       0       0       0       0
  1865 ;;Total ram usage:        3 bytes
  1866 ;; Hardware stack levels used: 1
  1867 ;; Hardware stack levels required when called: 1
  1868 ;; This function calls:
  1869 ;;		Nothing
  1870 ;; This function is called by:
  1871 ;;		_run_waterTankLogic
  1872 ;; This function uses a non-reentrant model
  1873 ;;
  1874                           
  1875     07AE                     _check_TankStatus:	
  1876                           ;psect for function _check_TankStatus
  1877                           
  1878     07AE                     l2197:	
  1879                           ;incstack = 0
  1880                           ; Regs used in _check_TankStatus: [wreg+status,2+status,0]
  1881                           
  1882                           
  1883                           ;waterTankManager.c: 18:   unsigned char top = PORTCbits.RC6;
  1884     07AE  1283               	bcf	3,5	;RP0=0, select bank0
  1885     07AF  1303               	bcf	3,6	;RP1=0, select bank0
  1886     07B0  0E07               	swapf	7,w	;volatile
  1887     07B1  00F2               	movwf	??_check_TankStatus
  1888     07B2  0CF2               	rrf	??_check_TankStatus,f
  1889     07B3  0C72               	rrf	??_check_TankStatus,w
  1890     07B4  3901               	andlw	1
  1891     07B5  00F3               	movwf	check_TankStatus@top
  1892                           
  1893                           ;waterTankManager.c: 19:   unsigned char bot = PORTCbits.RC7;
  1894     07B6  0D07               	rlf	7,w	;volatile
  1895     07B7  0D07               	rlf	7,w	;volatile
  1896     07B8  3901               	andlw	1
  1897     07B9  00F4               	movwf	check_TankStatus@bot
  1898                           
  1899                           ;waterTankManager.c: 21:   if(tankState == WTANK_ERROR)
  1900     07BA  3003               	movlw	3
  1901     07BB  067B               	xorwf	_tankState,w
  1902     07BC  1D03               	btfss	3,2
  1903     07BD  2FBF               	goto	u1951
  1904     07BE  2FC0               	goto	u1950
  1905     07BF                     u1951:
  1906     07BF  2FC3               	goto	l2201
  1907     07C0                     u1950:
  1908     07C0                     l2199:
  1909                           
  1910                           ;waterTankManager.c: 22:     tankState = WTANK_ERROR;
  1911     07C0  3003               	movlw	3
  1912     07C1  00FB               	movwf	_tankState
  1913     07C2  2FF4               	goto	l296
  1914     07C3                     l2201:
  1915     07C3  0373               	decf	check_TankStatus@top,w
  1916     07C4  1D03               	btfss	3,2
  1917     07C5  2FC7               	goto	u1961
  1918     07C6  2FC8               	goto	u1960
  1919     07C7                     u1961:
  1920     07C7  2FCE               	goto	l2207
  1921     07C8                     u1960:
  1922     07C8                     l2203:
  1923     07C8  0874               	movf	check_TankStatus@bot,w
  1924     07C9  1D03               	btfss	3,2
  1925     07CA  2FCC               	goto	u1971
  1926     07CB  2FCD               	goto	u1970
  1927     07CC                     u1971:
  1928     07CC  2FCE               	goto	l2207
  1929     07CD                     u1970:
  1930     07CD  2FC0               	goto	l2199
  1931     07CE                     l2207:
  1932     07CE  0873               	movf	check_TankStatus@top,w
  1933     07CF  1D03               	btfss	3,2
  1934     07D0  2FD2               	goto	u1981
  1935     07D1  2FD3               	goto	u1980
  1936     07D2                     u1981:
  1937     07D2  2FDB               	goto	l2213
  1938     07D3                     u1980:
  1939     07D3                     l2209:
  1940     07D3  0374               	decf	check_TankStatus@bot,w
  1941     07D4  1D03               	btfss	3,2
  1942     07D5  2FD7               	goto	u1991
  1943     07D6  2FD8               	goto	u1990
  1944     07D7                     u1991:
  1945     07D7  2FDB               	goto	l2213
  1946     07D8                     u1990:
  1947     07D8                     l2211:
  1948                           
  1949                           ;waterTankManager.c: 30:     tankState = WTANK_MID;
  1950     07D8  3001               	movlw	1
  1951     07D9  00FB               	movwf	_tankState
  1952     07DA  2FF4               	goto	l296
  1953     07DB                     l2213:
  1954     07DB  0373               	decf	check_TankStatus@top,w
  1955     07DC  1D03               	btfss	3,2
  1956     07DD  2FDF               	goto	u2001
  1957     07DE  2FE0               	goto	u2000
  1958     07DF                     u2001:
  1959     07DF  2FE7               	goto	l2219
  1960     07E0                     u2000:
  1961     07E0                     l2215:
  1962     07E0  0374               	decf	check_TankStatus@bot,w
  1963     07E1  1D03               	btfss	3,2
  1964     07E2  2FE4               	goto	u2011
  1965     07E3  2FE5               	goto	u2010
  1966     07E4                     u2011:
  1967     07E4  2FE7               	goto	l2219
  1968     07E5                     u2010:
  1969     07E5                     l2217:
  1970                           
  1971                           ;waterTankManager.c: 34:     tankState = WTANK_FULL;
  1972     07E5  01FB               	clrf	_tankState
  1973     07E6  2FF4               	goto	l296
  1974     07E7                     l2219:
  1975     07E7  0873               	movf	check_TankStatus@top,w
  1976     07E8  1D03               	btfss	3,2
  1977     07E9  2FEB               	goto	u2021
  1978     07EA  2FEC               	goto	u2020
  1979     07EB                     u2021:
  1980     07EB  2FF4               	goto	l290
  1981     07EC                     u2020:
  1982     07EC                     l2221:
  1983     07EC  0874               	movf	check_TankStatus@bot,w
  1984     07ED  1D03               	btfss	3,2
  1985     07EE  2FF0               	goto	u2031
  1986     07EF  2FF1               	goto	u2030
  1987     07F0                     u2031:
  1988     07F0  2FF4               	goto	l290
  1989     07F1                     u2030:
  1990     07F1                     l2223:
  1991                           
  1992                           ;waterTankManager.c: 38:     tankState = WTANK_LOW;
  1993     07F1  3002               	movlw	2
  1994     07F2  00FB               	movwf	_tankState
  1995     07F3  2FF4               	goto	l296
  1996     07F4                     l290:
  1997     07F4                     l296:
  1998     07F4  0008               	return
  1999     07F5                     __end_of_check_TankStatus:
  2000                           
  2001                           	psect	text5
  2002     0F2F                     __ptext5:	
  2003 ;; *************** function _run_IrrigationLogic *****************
  2004 ;; Defined at:
  2005 ;;		line 18 in file "irrigation.c"
  2006 ;; Parameters:    Size  Location     Type
  2007 ;;  sMoistureVal    2    6[COMMON] int 
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;		None
  2010 ;; Return value:  Size  Location     Type
  2011 ;;                  1    wreg      void 
  2012 ;; Registers used:
  2013 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2014 ;; Tracked objects:
  2015 ;;		On entry : 0/0
  2016 ;;		On exit  : 0/0
  2017 ;;		Unchanged: 0/0
  2018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2019 ;;      Params:         2       0       0       0       0
  2020 ;;      Locals:         0       0       0       0       0
  2021 ;;      Temps:          0       0       0       0       0
  2022 ;;      Totals:         2       0       0       0       0
  2023 ;;Total ram usage:        2 bytes
  2024 ;; Hardware stack levels used: 1
  2025 ;; Hardware stack levels required when called: 3
  2026 ;; This function calls:
  2027 ;;		_startIrrigation
  2028 ;;		_stopIrrigation
  2029 ;; This function is called by:
  2030 ;;		_main
  2031 ;; This function uses a non-reentrant model
  2032 ;;
  2033                           
  2034     0F2F                     _run_IrrigationLogic:	
  2035                           ;psect for function _run_IrrigationLogic
  2036                           
  2037     0F2F                     l2311:	
  2038                           ;incstack = 0
  2039                           ; Regs used in _run_IrrigationLogic: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  2040                           
  2041                           
  2042                           ;irrigation.c: 18: void run_IrrigationLogic(int sMoistureValue);irrigation.c: 19: {;irri
      +                          gation.c: 21:   if(irrigationState == IRRIG_ERROR)
  2043     0F2F  3002               	movlw	2
  2044     0F30  1283               	bcf	3,5	;RP0=0, select bank0
  2045     0F31  1303               	bcf	3,6	;RP1=0, select bank0
  2046     0F32  066D               	xorwf	_irrigationState,w
  2047     0F33  1D03               	btfss	3,2
  2048     0F34  2F36               	goto	u2061
  2049     0F35  2F37               	goto	u2060
  2050     0F36                     u2061:
  2051     0F36  2F40               	goto	l2317
  2052     0F37                     u2060:
  2053     0F37                     l2313:
  2054                           
  2055                           ;irrigation.c: 22:   {;irrigation.c: 23:     stopIrrigation();
  2056     0F37  120A  158A  2469  120A  158A  	fcall	_stopIrrigation
  2057     0F3C                     l2315:
  2058                           
  2059                           ;irrigation.c: 24:     PORTCbits.RC2 = 0;
  2060     0F3C  1283               	bcf	3,5	;RP0=0, select bank0
  2061     0F3D  1303               	bcf	3,6	;RP1=0, select bank0
  2062     0F3E  1107               	bcf	7,2	;volatile
  2063                           
  2064                           ;irrigation.c: 25:   }
  2065     0F3F  2F73               	goto	l375
  2066     0F40                     l2317:
  2067     0F40  3002               	movlw	2
  2068     0F41  067B               	xorwf	_tankState,w
  2069     0F42  1903               	btfsc	3,2
  2070     0F43  2F45               	goto	u2071
  2071     0F44  2F46               	goto	u2070
  2072     0F45                     u2071:
  2073     0F45  2F4C               	goto	l2321
  2074     0F46                     u2070:
  2075     0F46                     l2319:
  2076     0F46  3003               	movlw	3
  2077     0F47  067B               	xorwf	_tankState,w
  2078     0F48  1D03               	btfss	3,2
  2079     0F49  2F4B               	goto	u2081
  2080     0F4A  2F4C               	goto	u2080
  2081     0F4B                     u2081:
  2082     0F4B  2F52               	goto	l2323
  2083     0F4C                     u2080:
  2084     0F4C                     l2321:
  2085                           
  2086                           ;irrigation.c: 28:   stopIrrigation();
  2087     0F4C  120A  158A  2469  120A  158A  	fcall	_stopIrrigation
  2088     0F51  2F73               	goto	l375
  2089     0F52                     l2323:
  2090     0F52  0877               	movf	run_IrrigationLogic@sMoistureValue+1,w
  2091     0F53  3A80               	xorlw	128
  2092     0F54  00FF               	movwf	btemp+1
  2093     0F55  3080               	movlw	128
  2094     0F56  027F               	subwf	btemp+1,w
  2095     0F57  1D03               	skipz
  2096     0F58  2F5B               	goto	u2095
  2097     0F59  301F               	movlw	31
  2098     0F5A  0276               	subwf	run_IrrigationLogic@sMoistureValue,w
  2099     0F5B                     u2095:
  2100     0F5B  1803               	skipnc
  2101     0F5C  2F5E               	goto	u2091
  2102     0F5D  2F5F               	goto	u2090
  2103     0F5E                     u2091:
  2104     0F5E  2F65               	goto	l2327
  2105     0F5F                     u2090:
  2106     0F5F                     l2325:
  2107                           
  2108                           ;irrigation.c: 31:     startIrrigation();
  2109     0F5F  120A  158A  2455  120A  158A  	fcall	_startIrrigation
  2110     0F64  2F73               	goto	l375
  2111     0F65                     l2327:
  2112     0F65  0877               	movf	run_IrrigationLogic@sMoistureValue+1,w
  2113     0F66  3A80               	xorlw	128
  2114     0F67  00FF               	movwf	btemp+1
  2115     0F68  3080               	movlw	128
  2116     0F69  027F               	subwf	btemp+1,w
  2117     0F6A  1D03               	skipz
  2118     0F6B  2F6E               	goto	u2105
  2119     0F6C  3032               	movlw	50
  2120     0F6D  0276               	subwf	run_IrrigationLogic@sMoistureValue,w
  2121     0F6E                     u2105:
  2122     0F6E  1C03               	skipc
  2123     0F6F  2F71               	goto	u2101
  2124     0F70  2F72               	goto	u2100
  2125     0F71                     u2101:
  2126     0F71  2F73               	goto	l371
  2127     0F72                     u2100:
  2128     0F72  2F4C               	goto	l2321
  2129     0F73                     l371:
  2130     0F73                     l375:
  2131     0F73  0008               	return
  2132     0F74                     __end_of_run_IrrigationLogic:
  2133                           
  2134                           	psect	text6
  2135     0C55                     __ptext6:	
  2136 ;; *************** function _startIrrigation *****************
  2137 ;; Defined at:
  2138 ;;		line 37 in file "irrigation.c"
  2139 ;; Parameters:    Size  Location     Type
  2140 ;;		None
  2141 ;; Auto vars:     Size  Location     Type
  2142 ;;		None
  2143 ;; Return value:  Size  Location     Type
  2144 ;;                  1    wreg      void 
  2145 ;; Registers used:
  2146 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2147 ;; Tracked objects:
  2148 ;;		On entry : 0/0
  2149 ;;		On exit  : 0/0
  2150 ;;		Unchanged: 0/0
  2151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2152 ;;      Params:         0       0       0       0       0
  2153 ;;      Locals:         0       0       0       0       0
  2154 ;;      Temps:          0       0       0       0       0
  2155 ;;      Totals:         0       0       0       0       0
  2156 ;;Total ram usage:        0 bytes
  2157 ;; Hardware stack levels used: 1
  2158 ;; Hardware stack levels required when called: 2
  2159 ;; This function calls:
  2160 ;;		_startTimer
  2161 ;; This function is called by:
  2162 ;;		_run_IrrigationLogic
  2163 ;; This function uses a non-reentrant model
  2164 ;;
  2165                           
  2166     0C55                     _startIrrigation:	
  2167                           ;psect for function _startIrrigation
  2168                           
  2169     0C55                     l2235:	
  2170                           ;incstack = 0
  2171                           ; Regs used in _startIrrigation: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2172                           
  2173                           
  2174                           ;irrigation.c: 39:   if(isIrrigating)
  2175     0C55  1C7A               	btfss	_isIrrigating/(0+8),_isIrrigating& (0+7)
  2176     0C56  2C58               	goto	u2051
  2177     0C57  2C59               	goto	u2050
  2178     0C58                     u2051:
  2179     0C58  2C5A               	goto	l378
  2180     0C59                     u2050:
  2181     0C59  2C68               	goto	l379
  2182     0C5A                     l378:
  2183                           
  2184                           ;irrigation.c: 42:   PORTCbits.RC1 = 0;
  2185     0C5A  1283               	bcf	3,5	;RP0=0, select bank0
  2186     0C5B  1303               	bcf	3,6	;RP1=0, select bank0
  2187     0C5C  1087               	bcf	7,1	;volatile
  2188     0C5D                     l2239:
  2189                           
  2190                           ;irrigation.c: 43:   irrigationState = IRRIG_ON;
  2191     0C5D  01ED               	clrf	_irrigationState
  2192     0C5E                     l2241:
  2193                           
  2194                           ;irrigation.c: 44:   isIrrigating = 1;
  2195     0C5E  147A               	bsf	_isIrrigating/(0+8),_isIrrigating& (0+7)
  2196     0C5F                     l2243:
  2197                           
  2198                           ;irrigation.c: 45:   startTimer(&timer_IRRIG_Timeout);
  2199     0C5F  30D8               	movlw	low _timer_IRRIG_Timeout
  2200     0C60  00F2               	movwf	startTimer@timer
  2201     0C61  3000               	movlw	high _timer_IRRIG_Timeout
  2202     0C62  00F3               	movwf	startTimer@timer+1
  2203     0C63  120A  158A  255C  120A  158A  	fcall	_startTimer
  2204     0C68                     l379:
  2205     0C68  0008               	return
  2206     0C69                     __end_of_startIrrigation:
  2207                           
  2208                           	psect	text7
  2209     0D5C                     __ptext7:	
  2210 ;; *************** function _startTimer *****************
  2211 ;; Defined at:
  2212 ;;		line 24 in file "virtualTimer.c"
  2213 ;; Parameters:    Size  Location     Type
  2214 ;;  timer           2    2[COMMON] PTR struct .
  2215 ;;		 -> timer_IRRIG_Timeout(4), timer_WTANK_Timeout(4), 
  2216 ;; Auto vars:     Size  Location     Type
  2217 ;;		None
  2218 ;; Return value:  Size  Location     Type
  2219 ;;                  1    wreg      void 
  2220 ;; Registers used:
  2221 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2222 ;; Tracked objects:
  2223 ;;		On entry : 0/0
  2224 ;;		On exit  : 0/0
  2225 ;;		Unchanged: 0/0
  2226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2227 ;;      Params:         2       0       0       0       0
  2228 ;;      Locals:         0       0       0       0       0
  2229 ;;      Temps:          2       0       0       0       0
  2230 ;;      Totals:         4       0       0       0       0
  2231 ;;Total ram usage:        4 bytes
  2232 ;; Hardware stack levels used: 1
  2233 ;; Hardware stack levels required when called: 1
  2234 ;; This function calls:
  2235 ;;		Nothing
  2236 ;; This function is called by:
  2237 ;;		_startFilling
  2238 ;;		_startIrrigation
  2239 ;; This function uses a non-reentrant model
  2240 ;;
  2241                           
  2242     0D5C                     _startTimer:	
  2243                           ;psect for function _startTimer
  2244                           
  2245     0D5C                     l2055:	
  2246                           ;incstack = 0
  2247                           ; Regs used in _startTimer: [wreg-fsr0h+status,2+status,0]
  2248                           
  2249                           
  2250                           ;virtualTimer.c: 24: void startTimer(virtualTimer *timer);virtualTimer.c: 25: {;virtualT
      +                          imer.c: 26:   if(timer->active)
  2251     0D5C  0872               	movf	startTimer@timer,w
  2252     0D5D  3E02               	addlw	2
  2253     0D5E  00F4               	movwf	??_startTimer
  2254     0D5F  0873               	movf	startTimer@timer+1,w
  2255     0D60  1803               	skipnc
  2256     0D61  3E01               	addlw	1
  2257     0D62  3E00               	addlw	0
  2258     0D63  00F5               	movwf	??_startTimer+1
  2259     0D64  0874               	movf	??_startTimer,w
  2260     0D65  0084               	movwf	4
  2261     0D66  1783               	bsf	3,7
  2262     0D67  1C75               	btfss	??_startTimer+1,0
  2263     0D68  1383               	bcf	3,7
  2264     0D69  0800               	movf	0,w
  2265     0D6A  1903               	btfsc	3,2
  2266     0D6B  2D6D               	goto	u1781
  2267     0D6C  2D6E               	goto	u1780
  2268     0D6D                     u1781:
  2269     0D6D  2D6F               	goto	l2059
  2270     0D6E                     u1780:
  2271     0D6E  2D7E               	goto	l331
  2272     0D6F                     l2059:
  2273                           
  2274                           ;virtualTimer.c: 29:   timer->active = 1;
  2275     0D6F  0872               	movf	startTimer@timer,w
  2276     0D70  3E02               	addlw	2
  2277     0D71  00F4               	movwf	??_startTimer
  2278     0D72  0873               	movf	startTimer@timer+1,w
  2279     0D73  1803               	skipnc
  2280     0D74  3E01               	addlw	1
  2281     0D75  3E00               	addlw	0
  2282     0D76  00F5               	movwf	??_startTimer+1
  2283     0D77  0874               	movf	??_startTimer,w
  2284     0D78  0084               	movwf	4
  2285     0D79  1783               	bsf	3,7
  2286     0D7A  1C75               	btfss	??_startTimer+1,0
  2287     0D7B  1383               	bcf	3,7
  2288     0D7C  3001               	movlw	1
  2289     0D7D  0080               	movwf	0
  2290     0D7E                     l331:
  2291     0D7E  0008               	return
  2292     0D7F                     __end_of_startTimer:
  2293                           
  2294                           	psect	text8
  2295     06C9                     __ptext8:	
  2296 ;; *************** function _runTimer *****************
  2297 ;; Defined at:
  2298 ;;		line 5 in file "virtualTimer.c"
  2299 ;; Parameters:    Size  Location     Type
  2300 ;;  timer           2   50[BANK0 ] PTR struct .
  2301 ;;		 -> timer_IRRIG_Timeout(4), timer_WTANK_Timeout(4), timer_ADCReadAll(4), 
  2302 ;; Auto vars:     Size  Location     Type
  2303 ;;		None
  2304 ;; Return value:  Size  Location     Type
  2305 ;;                  1    wreg      void 
  2306 ;; Registers used:
  2307 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2308 ;; Tracked objects:
  2309 ;;		On entry : 0/0
  2310 ;;		On exit  : 0/0
  2311 ;;		Unchanged: 0/0
  2312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2313 ;;      Params:         0       2       0       0       0
  2314 ;;      Locals:         0       0       0       0       0
  2315 ;;      Temps:          0       2       0       0       0
  2316 ;;      Totals:         0       4       0       0       0
  2317 ;;Total ram usage:        4 bytes
  2318 ;; Hardware stack levels used: 1
  2319 ;; Hardware stack levels required when called: 5
  2320 ;; This function calls:
  2321 ;;		_ADC_readAll
  2322 ;;		_interrupt_IRRIG_timeout
  2323 ;;		_interrupt_WTANK_timeout
  2324 ;; This function is called by:
  2325 ;;		_main
  2326 ;; This function uses a non-reentrant model
  2327 ;;
  2328                           
  2329     06C9                     _runTimer:	
  2330                           ;psect for function _runTimer
  2331                           
  2332     06C9                     l2797:	
  2333                           ;incstack = 0
  2334                           ; Regs used in _runTimer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2335                           
  2336                           
  2337                           ;virtualTimer.c: 5: void runTimer(virtualTimer *timer);virtualTimer.c: 6: {;virtualTimer
      +                          .c: 7:   if(timer->active == 0)
  2338     06C9  1283               	bcf	3,5	;RP0=0, select bank0
  2339     06CA  1303               	bcf	3,6	;RP1=0, select bank0
  2340     06CB  0852               	movf	runTimer@timer,w
  2341     06CC  3E02               	addlw	2
  2342     06CD  00D4               	movwf	??_runTimer
  2343     06CE  0853               	movf	runTimer@timer+1,w
  2344     06CF  1803               	skipnc
  2345     06D0  3E01               	addlw	1
  2346     06D1  3E00               	addlw	0
  2347     06D2  00D5               	movwf	??_runTimer+1
  2348     06D3  0854               	movf	??_runTimer,w
  2349     06D4  0084               	movwf	4
  2350     06D5  1783               	bsf	3,7
  2351     06D6  1C55               	btfss	??_runTimer+1,0
  2352     06D7  1383               	bcf	3,7
  2353     06D8  0800               	movf	0,w
  2354     06D9  1D03               	btfss	3,2
  2355     06DA  2EDC               	goto	u2731
  2356     06DB  2EDD               	goto	u2730
  2357     06DC                     u2731:
  2358     06DC  2EDE               	goto	l2801
  2359     06DD                     u2730:
  2360     06DD  2F17               	goto	l325
  2361     06DE                     l2801:
  2362                           
  2363                           ;virtualTimer.c: 11:   if(timerCounter >= timer->targetTime)
  2364     06DE  0852               	movf	runTimer@timer,w
  2365     06DF  0084               	movwf	4
  2366     06E0  1783               	bsf	3,7
  2367     06E1  1C53               	btfss	runTimer@timer+1,0
  2368     06E2  1383               	bcf	3,7
  2369     06E3  0800               	movf	0,w
  2370     06E4  00D4               	movwf	??_runTimer
  2371     06E5  0A84               	incf	4,f
  2372     06E6  0800               	movf	0,w
  2373     06E7  00D5               	movwf	??_runTimer+1
  2374     06E8  0855               	movf	??_runTimer+1,w
  2375     06E9  025D               	subwf	_timerCounter+1,w	;volatile
  2376     06EA  1D03               	skipz
  2377     06EB  2EEE               	goto	u2745
  2378     06EC  0854               	movf	??_runTimer,w
  2379     06ED  025C               	subwf	_timerCounter,w	;volatile
  2380     06EE                     u2745:
  2381     06EE  1C03               	skipc
  2382     06EF  2EF1               	goto	u2741
  2383     06F0  2EF2               	goto	u2740
  2384     06F1                     u2741:
  2385     06F1  2F17               	goto	l325
  2386     06F2                     u2740:
  2387     06F2                     l2803:
  2388                           
  2389                           ;virtualTimer.c: 12:   {;virtualTimer.c: 15:     if(timer->callback != 0)
  2390     06F2  0852               	movf	runTimer@timer,w
  2391     06F3  3E03               	addlw	3
  2392     06F4  00D4               	movwf	??_runTimer
  2393     06F5  0853               	movf	runTimer@timer+1,w
  2394     06F6  1803               	skipnc
  2395     06F7  3E01               	addlw	1
  2396     06F8  3E00               	addlw	0
  2397     06F9  00D5               	movwf	??_runTimer+1
  2398     06FA  0854               	movf	??_runTimer,w
  2399     06FB  0084               	movwf	4
  2400     06FC  1783               	bsf	3,7
  2401     06FD  1C55               	btfss	??_runTimer+1,0
  2402     06FE  1383               	bcf	3,7
  2403     06FF  0800               	movf	0,w
  2404     0700  1903               	btfsc	3,2
  2405     0701  2F03               	goto	u2751
  2406     0702  2F04               	goto	u2750
  2407     0703                     u2751:
  2408     0703  2F17               	goto	l325
  2409     0704                     u2750:
  2410     0704                     l2805:
  2411                           
  2412                           ;virtualTimer.c: 16:       timer->callback();
  2413     0704  0852               	movf	runTimer@timer,w
  2414     0705  3E03               	addlw	3
  2415     0706  00D4               	movwf	??_runTimer
  2416     0707  0853               	movf	runTimer@timer+1,w
  2417     0708  1803               	skipnc
  2418     0709  3E01               	addlw	1
  2419     070A  3E00               	addlw	0
  2420     070B  00D5               	movwf	??_runTimer+1
  2421     070C  0854               	movf	??_runTimer,w
  2422     070D  0084               	movwf	4
  2423     070E  1783               	bsf	3,7
  2424     070F  1C55               	btfss	??_runTimer+1,0
  2425     0710  1383               	bcf	3,7
  2426     0711  0800               	movf	0,w
  2427     0712  120A  118A  2045  120A  118A  	fcall	fptable
  2428     0717                     l325:
  2429     0717  0008               	return
  2430     0718                     __end_of_runTimer:
  2431                           
  2432                           	psect	text9
  2433     0B9D                     __ptext9:	
  2434 ;; *************** function _interrupt_IRRIG_timeout *****************
  2435 ;; Defined at:
  2436 ;;		line 59 in file "irrigation.c"
  2437 ;; Parameters:    Size  Location     Type
  2438 ;;		None
  2439 ;; Auto vars:     Size  Location     Type
  2440 ;;		None
  2441 ;; Return value:  Size  Location     Type
  2442 ;;                  1    wreg      void 
  2443 ;; Registers used:
  2444 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2445 ;; Tracked objects:
  2446 ;;		On entry : 0/0
  2447 ;;		On exit  : 0/0
  2448 ;;		Unchanged: 0/0
  2449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2450 ;;      Params:         0       0       0       0       0
  2451 ;;      Locals:         0       0       0       0       0
  2452 ;;      Temps:          0       0       0       0       0
  2453 ;;      Totals:         0       0       0       0       0
  2454 ;;Total ram usage:        0 bytes
  2455 ;; Hardware stack levels used: 1
  2456 ;; Hardware stack levels required when called: 3
  2457 ;; This function calls:
  2458 ;;		_stopIrrigation
  2459 ;; This function is called by:
  2460 ;;		_runTimer
  2461 ;; This function uses a non-reentrant model
  2462 ;;
  2463                           
  2464     0B9D                     _interrupt_IRRIG_timeout:	
  2465                           ;psect for function _interrupt_IRRIG_timeout
  2466                           
  2467     0B9D                     l2245:	
  2468                           ;incstack = 0
  2469                           ; Regs used in _interrupt_IRRIG_timeout: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2470                           
  2471                           
  2472                           ;irrigation.c: 61:   stopIrrigation();
  2473     0B9D  120A  158A  2469  120A  158A  	fcall	_stopIrrigation
  2474     0BA2                     l2247:
  2475                           
  2476                           ;irrigation.c: 62:   irrigationState = IRRIG_ERROR;
  2477     0BA2  3002               	movlw	2
  2478     0BA3  1283               	bcf	3,5	;RP0=0, select bank0
  2479     0BA4  1303               	bcf	3,6	;RP1=0, select bank0
  2480     0BA5  00ED               	movwf	_irrigationState
  2481     0BA6                     l386:
  2482     0BA6  0008               	return
  2483     0BA7                     __end_of_interrupt_IRRIG_timeout:
  2484                           
  2485                           	psect	text10
  2486     0BF9                     __ptext10:	
  2487 ;; *************** function _ADC_readAll *****************
  2488 ;; Defined at:
  2489 ;;		line 196 in file "./config.h"
  2490 ;; Parameters:    Size  Location     Type
  2491 ;;		None
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;		None
  2494 ;; Return value:  Size  Location     Type
  2495 ;;                  1    wreg      void 
  2496 ;; Registers used:
  2497 ;;		wreg, status,2, status,0, pclath, cstack
  2498 ;; Tracked objects:
  2499 ;;		On entry : 0/0
  2500 ;;		On exit  : 0/0
  2501 ;;		Unchanged: 0/0
  2502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2503 ;;      Params:         0       0       0       0       0
  2504 ;;      Locals:         0       0       0       0       0
  2505 ;;      Temps:          0       0       0       0       0
  2506 ;;      Totals:         0       0       0       0       0
  2507 ;;Total ram usage:        0 bytes
  2508 ;; Hardware stack levels used: 1
  2509 ;; Hardware stack levels required when called: 4
  2510 ;; This function calls:
  2511 ;;		_readLight
  2512 ;;		_readSoilMoisture
  2513 ;;		_readTemperature
  2514 ;; This function is called by:
  2515 ;;		_main
  2516 ;;		_runTimer
  2517 ;; This function uses a non-reentrant model
  2518 ;;
  2519                           
  2520     0BF9                     _ADC_readAll:	
  2521                           ;psect for function _ADC_readAll
  2522                           
  2523     0BF9                     l2655:	
  2524                           ;incstack = 0
  2525                           ; Regs used in _ADC_readAll: [wreg+status,2+status,0+pclath+cstack]
  2526                           
  2527                           
  2528                           ;./config.h: 198:   readTemperature();
  2529     0BF9  120A  158A  25F1  120A  158A  	fcall	_readTemperature
  2530                           
  2531                           ;./config.h: 199:   readSoilMoisture();
  2532     0BFE  120A  158A  25C7  120A  158A  	fcall	_readSoilMoisture
  2533                           
  2534                           ;./config.h: 200:   readLight();
  2535     0C03  120A  158A  23C1  120A  158A  	fcall	_readLight
  2536     0C08                     l132:
  2537     0C08  0008               	return
  2538     0C09                     __end_of_ADC_readAll:
  2539                           
  2540                           	psect	text11
  2541     0B84                     __ptext11:	
  2542 ;; *************** function _interrupt_WTANK_timeout *****************
  2543 ;; Defined at:
  2544 ;;		line 101 in file "waterTankManager.c"
  2545 ;; Parameters:    Size  Location     Type
  2546 ;;		None
  2547 ;; Auto vars:     Size  Location     Type
  2548 ;;		None
  2549 ;; Return value:  Size  Location     Type
  2550 ;;                  1    wreg      void 
  2551 ;; Registers used:
  2552 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2553 ;; Tracked objects:
  2554 ;;		On entry : 0/0
  2555 ;;		On exit  : 0/0
  2556 ;;		Unchanged: 0/0
  2557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2558 ;;      Params:         0       0       0       0       0
  2559 ;;      Locals:         0       0       0       0       0
  2560 ;;      Temps:          0       0       0       0       0
  2561 ;;      Totals:         0       0       0       0       0
  2562 ;;Total ram usage:        0 bytes
  2563 ;; Hardware stack levels used: 1
  2564 ;; Hardware stack levels required when called: 3
  2565 ;; This function calls:
  2566 ;;		_stopFilling
  2567 ;; This function is called by:
  2568 ;;		_runTimer
  2569 ;; This function uses a non-reentrant model
  2570 ;;
  2571                           
  2572     0B84                     _interrupt_WTANK_timeout:	
  2573                           ;psect for function _interrupt_WTANK_timeout
  2574                           
  2575     0B84                     l2231:	
  2576                           ;incstack = 0
  2577                           ; Regs used in _interrupt_WTANK_timeout: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2578                           
  2579                           
  2580                           ;waterTankManager.c: 103:   stopFilling();
  2581     0B84  120A  158A  241C  120A  158A  	fcall	_stopFilling
  2582     0B89                     l2233:
  2583                           
  2584                           ;waterTankManager.c: 104:   tankState = WTANK_ERROR;
  2585     0B89  3003               	movlw	3
  2586     0B8A  00FB               	movwf	_tankState
  2587     0B8B                     l317:
  2588     0B8B  0008               	return
  2589     0B8C                     __end_of_interrupt_WTANK_timeout:
  2590                           
  2591                           	psect	text12
  2592     0C1C                     __ptext12:	
  2593 ;; *************** function _stopFilling *****************
  2594 ;; Defined at:
  2595 ;;		line 84 in file "waterTankManager.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;		None
  2598 ;; Auto vars:     Size  Location     Type
  2599 ;;		None
  2600 ;; Return value:  Size  Location     Type
  2601 ;;                  1    wreg      void 
  2602 ;; Registers used:
  2603 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2604 ;; Tracked objects:
  2605 ;;		On entry : 0/0
  2606 ;;		On exit  : 0/0
  2607 ;;		Unchanged: 0/0
  2608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2609 ;;      Params:         0       0       0       0       0
  2610 ;;      Locals:         0       0       0       0       0
  2611 ;;      Temps:          0       0       0       0       0
  2612 ;;      Totals:         0       0       0       0       0
  2613 ;;Total ram usage:        0 bytes
  2614 ;; Hardware stack levels used: 1
  2615 ;; Hardware stack levels required when called: 2
  2616 ;; This function calls:
  2617 ;;		_stopTimer
  2618 ;; This function is called by:
  2619 ;;		_run_waterTankLogic
  2620 ;;		_interrupt_WTANK_timeout
  2621 ;; This function uses a non-reentrant model
  2622 ;;
  2623                           
  2624     0C1C                     _stopFilling:	
  2625                           ;psect for function _stopFilling
  2626                           
  2627     0C1C                     l2049:	
  2628                           ;incstack = 0
  2629                           ; Regs used in _stopFilling: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2630                           
  2631                           
  2632                           ;waterTankManager.c: 86:   if(!isFilling)
  2633     0C1C  18FA               	btfsc	_isFilling/(0+8),_isFilling& (0+7)
  2634     0C1D  2C1F               	goto	u1771
  2635     0C1E  2C20               	goto	u1770
  2636     0C1F                     u1771:
  2637     0C1F  2C21               	goto	l313
  2638     0C20                     u1770:
  2639     0C20  2C2E               	goto	l314
  2640     0C21                     l313:
  2641                           
  2642                           ;waterTankManager.c: 89:   isFilling = 0;
  2643     0C21  10FA               	bcf	_isFilling/(0+8),_isFilling& (0+7)
  2644                           
  2645                           ;waterTankManager.c: 90:   PORTCbits.RC0 = 1;
  2646     0C22  1283               	bcf	3,5	;RP0=0, select bank0
  2647     0C23  1303               	bcf	3,6	;RP1=0, select bank0
  2648     0C24  1407               	bsf	7,0	;volatile
  2649     0C25                     l2053:
  2650                           
  2651                           ;waterTankManager.c: 91:   stopTimer(&timer_WTANK_Timeout);
  2652     0C25  30DC               	movlw	low _timer_WTANK_Timeout
  2653     0C26  00F2               	movwf	stopTimer@timer
  2654     0C27  3000               	movlw	high _timer_WTANK_Timeout
  2655     0C28  00F3               	movwf	stopTimer@timer+1
  2656     0C29  120A  158A  24F4  120A  158A  	fcall	_stopTimer
  2657     0C2E                     l314:
  2658     0C2E  0008               	return
  2659     0C2F                     __end_of_stopFilling:
  2660                           
  2661                           	psect	text13
  2662     0C69                     __ptext13:	
  2663 ;; *************** function _stopIrrigation *****************
  2664 ;; Defined at:
  2665 ;;		line 48 in file "irrigation.c"
  2666 ;; Parameters:    Size  Location     Type
  2667 ;;		None
  2668 ;; Auto vars:     Size  Location     Type
  2669 ;;		None
  2670 ;; Return value:  Size  Location     Type
  2671 ;;                  1    wreg      void 
  2672 ;; Registers used:
  2673 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2674 ;; Tracked objects:
  2675 ;;		On entry : 0/0
  2676 ;;		On exit  : 0/0
  2677 ;;		Unchanged: 0/0
  2678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2679 ;;      Params:         0       0       0       0       0
  2680 ;;      Locals:         0       0       0       0       0
  2681 ;;      Temps:          0       0       0       0       0
  2682 ;;      Totals:         0       0       0       0       0
  2683 ;;Total ram usage:        0 bytes
  2684 ;; Hardware stack levels used: 1
  2685 ;; Hardware stack levels required when called: 2
  2686 ;; This function calls:
  2687 ;;		_stopTimer
  2688 ;; This function is called by:
  2689 ;;		_run_IrrigationLogic
  2690 ;;		_interrupt_IRRIG_timeout
  2691 ;; This function uses a non-reentrant model
  2692 ;;
  2693                           
  2694     0C69                     _stopIrrigation:	
  2695                           ;psect for function _stopIrrigation
  2696                           
  2697     0C69                     l2061:	
  2698                           ;incstack = 0
  2699                           ; Regs used in _stopIrrigation: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2700                           
  2701                           
  2702                           ;irrigation.c: 50:   if(!isIrrigating)
  2703     0C69  187A               	btfsc	_isIrrigating/(0+8),_isIrrigating& (0+7)
  2704     0C6A  2C6C               	goto	u1791
  2705     0C6B  2C6D               	goto	u1790
  2706     0C6C                     u1791:
  2707     0C6C  2C6E               	goto	l382
  2708     0C6D                     u1790:
  2709     0C6D  2C7D               	goto	l383
  2710     0C6E                     l382:
  2711                           
  2712                           ;irrigation.c: 53:   PORTCbits.RC1 = 1;
  2713     0C6E  1283               	bcf	3,5	;RP0=0, select bank0
  2714     0C6F  1303               	bcf	3,6	;RP1=0, select bank0
  2715     0C70  1487               	bsf	7,1	;volatile
  2716                           
  2717                           ;irrigation.c: 54:   isIrrigating = 0;
  2718     0C71  107A               	bcf	_isIrrigating/(0+8),_isIrrigating& (0+7)
  2719                           
  2720                           ;irrigation.c: 55:   irrigationState = IRRIG_OFF;
  2721     0C72  3001               	movlw	1
  2722     0C73  00ED               	movwf	_irrigationState
  2723     0C74                     l2065:
  2724                           
  2725                           ;irrigation.c: 56:   stopTimer(&timer_IRRIG_Timeout);
  2726     0C74  30D8               	movlw	low _timer_IRRIG_Timeout
  2727     0C75  00F2               	movwf	stopTimer@timer
  2728     0C76  3000               	movlw	high _timer_IRRIG_Timeout
  2729     0C77  00F3               	movwf	stopTimer@timer+1
  2730     0C78  120A  158A  24F4  120A  158A  	fcall	_stopTimer
  2731     0C7D                     l383:
  2732     0C7D  0008               	return
  2733     0C7E                     __end_of_stopIrrigation:
  2734                           
  2735                           	psect	text14
  2736     0CF4                     __ptext14:	
  2737 ;; *************** function _stopTimer *****************
  2738 ;; Defined at:
  2739 ;;		line 33 in file "virtualTimer.c"
  2740 ;; Parameters:    Size  Location     Type
  2741 ;;  timer           2    2[COMMON] PTR struct .
  2742 ;;		 -> timer_IRRIG_Timeout(4), timer_WTANK_Timeout(4), 
  2743 ;; Auto vars:     Size  Location     Type
  2744 ;;		None
  2745 ;; Return value:  Size  Location     Type
  2746 ;;                  1    wreg      void 
  2747 ;; Registers used:
  2748 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2749 ;; Tracked objects:
  2750 ;;		On entry : 0/0
  2751 ;;		On exit  : 0/0
  2752 ;;		Unchanged: 0/0
  2753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2754 ;;      Params:         2       0       0       0       0
  2755 ;;      Locals:         0       0       0       0       0
  2756 ;;      Temps:          2       0       0       0       0
  2757 ;;      Totals:         4       0       0       0       0
  2758 ;;Total ram usage:        4 bytes
  2759 ;; Hardware stack levels used: 1
  2760 ;; Hardware stack levels required when called: 1
  2761 ;; This function calls:
  2762 ;;		Nothing
  2763 ;; This function is called by:
  2764 ;;		_stopFilling
  2765 ;;		_stopIrrigation
  2766 ;; This function uses a non-reentrant model
  2767 ;;
  2768                           
  2769     0CF4                     _stopTimer:	
  2770                           ;psect for function _stopTimer
  2771                           
  2772     0CF4                     l1987:	
  2773                           ;incstack = 0
  2774                           ; Regs used in _stopTimer: [wreg-fsr0h+status,2+status,0]
  2775                           
  2776                           
  2777                           ;virtualTimer.c: 33: void stopTimer(virtualTimer *timer);virtualTimer.c: 34: {;virtualTi
      +                          mer.c: 35:   if(timer->active == 0)
  2778     0CF4  0872               	movf	stopTimer@timer,w
  2779     0CF5  3E02               	addlw	2
  2780     0CF6  00F4               	movwf	??_stopTimer
  2781     0CF7  0873               	movf	stopTimer@timer+1,w
  2782     0CF8  1803               	skipnc
  2783     0CF9  3E01               	addlw	1
  2784     0CFA  3E00               	addlw	0
  2785     0CFB  00F5               	movwf	??_stopTimer+1
  2786     0CFC  0874               	movf	??_stopTimer,w
  2787     0CFD  0084               	movwf	4
  2788     0CFE  1783               	bsf	3,7
  2789     0CFF  1C75               	btfss	??_stopTimer+1,0
  2790     0D00  1383               	bcf	3,7
  2791     0D01  0800               	movf	0,w
  2792     0D02  1D03               	btfss	3,2
  2793     0D03  2D05               	goto	u1731
  2794     0D04  2D06               	goto	u1730
  2795     0D05                     u1731:
  2796     0D05  2D07               	goto	l1991
  2797     0D06                     u1730:
  2798     0D06  2D15               	goto	l335
  2799     0D07                     l1991:
  2800                           
  2801                           ;virtualTimer.c: 38:   timer->active = 0;
  2802     0D07  0872               	movf	stopTimer@timer,w
  2803     0D08  3E02               	addlw	2
  2804     0D09  00F4               	movwf	??_stopTimer
  2805     0D0A  0873               	movf	stopTimer@timer+1,w
  2806     0D0B  1803               	skipnc
  2807     0D0C  3E01               	addlw	1
  2808     0D0D  3E00               	addlw	0
  2809     0D0E  00F5               	movwf	??_stopTimer+1
  2810     0D0F  0874               	movf	??_stopTimer,w
  2811     0D10  0084               	movwf	4
  2812     0D11  1783               	bsf	3,7
  2813     0D12  1C75               	btfss	??_stopTimer+1,0
  2814     0D13  1383               	bcf	3,7
  2815     0D14  0180               	clrf	0
  2816     0D15                     l335:
  2817     0D15  0008               	return
  2818     0D16                     __end_of_stopTimer:
  2819                           
  2820                           	psect	text15
  2821     0DF1                     __ptext15:	
  2822 ;; *************** function _readTemperature *****************
  2823 ;; Defined at:
  2824 ;;		line 185 in file "./config.h"
  2825 ;; Parameters:    Size  Location     Type
  2826 ;;		None
  2827 ;; Auto vars:     Size  Location     Type
  2828 ;;		None
  2829 ;; Return value:  Size  Location     Type
  2830 ;;                  1    wreg      void 
  2831 ;; Registers used:
  2832 ;;		wreg, status,2, status,0, pclath, cstack
  2833 ;; Tracked objects:
  2834 ;;		On entry : 0/0
  2835 ;;		On exit  : 0/0
  2836 ;;		Unchanged: 0/0
  2837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2838 ;;      Params:         0       0       0       0       0
  2839 ;;      Locals:         0       0       0       0       0
  2840 ;;      Temps:          0       0       0       0       0
  2841 ;;      Totals:         0       0       0       0       0
  2842 ;;Total ram usage:        0 bytes
  2843 ;; Hardware stack levels used: 1
  2844 ;; Hardware stack levels required when called: 3
  2845 ;; This function calls:
  2846 ;;		_ADC_Read
  2847 ;;		_map
  2848 ;; This function is called by:
  2849 ;;		_ADC_readAll
  2850 ;; This function uses a non-reentrant model
  2851 ;;
  2852                           
  2853     0DF1                     _readTemperature:	
  2854                           ;psect for function _readTemperature
  2855                           
  2856     0DF1                     l2625:	
  2857                           ;incstack = 0
  2858                           ; Regs used in _readTemperature: [wreg+status,2+status,0+pclath+cstack]
  2859                           
  2860                           
  2861                           ;./config.h: 187:   temperature = ADC_Read(1);
  2862     0DF1  3001               	movlw	1
  2863     0DF2  120A  158A  25A3  120A  158A  	fcall	_ADC_Read
  2864     0DF7  0873               	movf	?_ADC_Read+1,w
  2865     0DF8  1283               	bcf	3,5	;RP0=0, select bank0
  2866     0DF9  1303               	bcf	3,6	;RP1=0, select bank0
  2867     0DFA  00DF               	movwf	_temperature+1
  2868     0DFB  0872               	movf	?_ADC_Read,w
  2869     0DFC  00DE               	movwf	_temperature
  2870                           
  2871                           ;./config.h: 188:   temperature = (int)map(temperature,0,1023,0,500);
  2872     0DFD  085F               	movf	_temperature+1,w
  2873     0DFE  00B5               	movwf	map@x+1
  2874     0DFF  085E               	movf	_temperature,w
  2875     0E00  00B4               	movwf	map@x
  2876     0E01  3000               	movlw	0
  2877     0E02  00B6               	movwf	map@in_min
  2878     0E03  00B7               	movwf	map@in_min+1
  2879     0E04  30FF               	movlw	255
  2880     0E05  00B8               	movwf	map@in_max
  2881     0E06  3003               	movlw	3
  2882     0E07  00B9               	movwf	map@in_max+1
  2883     0E08  3000               	movlw	0
  2884     0E09  00BA               	movwf	map@out_min
  2885     0E0A  00BB               	movwf	map@out_min+1
  2886     0E0B  30F4               	movlw	244
  2887     0E0C  00BC               	movwf	map@out_max
  2888     0E0D  3001               	movlw	1
  2889     0E0E  00BD               	movwf	map@out_max+1
  2890     0E0F  120A  118A  2054  120A  158A  	fcall	_map
  2891     0E14  1283               	bcf	3,5	;RP0=0, select bank0
  2892     0E15  1303               	bcf	3,6	;RP1=0, select bank0
  2893     0E16  0835               	movf	?_map+1,w
  2894     0E17  00DF               	movwf	_temperature+1
  2895     0E18  0834               	movf	?_map,w
  2896     0E19  00DE               	movwf	_temperature
  2897     0E1A                     l126:
  2898     0E1A  0008               	return
  2899     0E1B                     __end_of_readTemperature:
  2900                           
  2901                           	psect	text16
  2902     0DC7                     __ptext16:	
  2903 ;; *************** function _readSoilMoisture *****************
  2904 ;; Defined at:
  2905 ;;		line 173 in file "./config.h"
  2906 ;; Parameters:    Size  Location     Type
  2907 ;;		None
  2908 ;; Auto vars:     Size  Location     Type
  2909 ;;		None
  2910 ;; Return value:  Size  Location     Type
  2911 ;;                  1    wreg      void 
  2912 ;; Registers used:
  2913 ;;		wreg, status,2, status,0, pclath, cstack
  2914 ;; Tracked objects:
  2915 ;;		On entry : 0/0
  2916 ;;		On exit  : 0/0
  2917 ;;		Unchanged: 0/0
  2918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2919 ;;      Params:         0       0       0       0       0
  2920 ;;      Locals:         0       0       0       0       0
  2921 ;;      Temps:          0       0       0       0       0
  2922 ;;      Totals:         0       0       0       0       0
  2923 ;;Total ram usage:        0 bytes
  2924 ;; Hardware stack levels used: 1
  2925 ;; Hardware stack levels required when called: 3
  2926 ;; This function calls:
  2927 ;;		_ADC_Read
  2928 ;;		_map
  2929 ;; This function is called by:
  2930 ;;		_ADC_readAll
  2931 ;; This function uses a non-reentrant model
  2932 ;;
  2933                           
  2934     0DC7                     _readSoilMoisture:	
  2935                           ;psect for function _readSoilMoisture
  2936                           
  2937     0DC7                     l2623:	
  2938                           ;incstack = 0
  2939                           ; Regs used in _readSoilMoisture: [wreg+status,2+status,0+pclath+cstack]
  2940                           
  2941                           
  2942                           ;./config.h: 175:   soilMoisture = ADC_Read(0);
  2943     0DC7  3000               	movlw	0
  2944     0DC8  120A  158A  25A3  120A  158A  	fcall	_ADC_Read
  2945     0DCD  0873               	movf	?_ADC_Read+1,w
  2946     0DCE  1283               	bcf	3,5	;RP0=0, select bank0
  2947     0DCF  1303               	bcf	3,6	;RP1=0, select bank0
  2948     0DD0  00E3               	movwf	_soilMoisture+1
  2949     0DD1  0872               	movf	?_ADC_Read,w
  2950     0DD2  00E2               	movwf	_soilMoisture
  2951                           
  2952                           ;./config.h: 176:   soilMoisture = (int)map(soilMoisture,0,1023,0,100);
  2953     0DD3  0863               	movf	_soilMoisture+1,w
  2954     0DD4  00B5               	movwf	map@x+1
  2955     0DD5  0862               	movf	_soilMoisture,w
  2956     0DD6  00B4               	movwf	map@x
  2957     0DD7  3000               	movlw	0
  2958     0DD8  00B6               	movwf	map@in_min
  2959     0DD9  00B7               	movwf	map@in_min+1
  2960     0DDA  30FF               	movlw	255
  2961     0DDB  00B8               	movwf	map@in_max
  2962     0DDC  3003               	movlw	3
  2963     0DDD  00B9               	movwf	map@in_max+1
  2964     0DDE  3000               	movlw	0
  2965     0DDF  00BA               	movwf	map@out_min
  2966     0DE0  00BB               	movwf	map@out_min+1
  2967     0DE1  3064               	movlw	100
  2968     0DE2  00BC               	movwf	map@out_max
  2969     0DE3  3000               	movlw	0
  2970     0DE4  00BD               	movwf	map@out_max+1
  2971     0DE5  120A  118A  2054  120A  158A  	fcall	_map
  2972     0DEA  1283               	bcf	3,5	;RP0=0, select bank0
  2973     0DEB  1303               	bcf	3,6	;RP1=0, select bank0
  2974     0DEC  0835               	movf	?_map+1,w
  2975     0DED  00E3               	movwf	_soilMoisture+1
  2976     0DEE  0834               	movf	?_map,w
  2977     0DEF  00E2               	movwf	_soilMoisture
  2978     0DF0                     l123:
  2979     0DF0  0008               	return
  2980     0DF1                     __end_of_readSoilMoisture:
  2981                           
  2982                           	psect	text17
  2983     0054                     __ptext17:	
  2984 ;; *************** function _map *****************
  2985 ;; Defined at:
  2986 ;;		line 160 in file "./config.h"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;  x               2   20[BANK0 ] int 
  2989 ;;  in_min          2   22[BANK0 ] int 
  2990 ;;  in_max          2   24[BANK0 ] int 
  2991 ;;  out_min         2   26[BANK0 ] int 
  2992 ;;  out_max         2   28[BANK0 ] int 
  2993 ;; Auto vars:     Size  Location     Type
  2994 ;;  run             4   46[BANK0 ] long 
  2995 ;;  delta           4   42[BANK0 ] long 
  2996 ;;  rise            4   38[BANK0 ] long 
  2997 ;; Return value:  Size  Location     Type
  2998 ;;                  4   20[BANK0 ] long 
  2999 ;; Registers used:
  3000 ;;		wreg, status,2, status,0, pclath, cstack
  3001 ;; Tracked objects:
  3002 ;;		On entry : 0/0
  3003 ;;		On exit  : 0/0
  3004 ;;		Unchanged: 0/0
  3005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3006 ;;      Params:         0      10       0       0       0
  3007 ;;      Locals:         0      12       0       0       0
  3008 ;;      Temps:          0       8       0       0       0
  3009 ;;      Totals:         0      30       0       0       0
  3010 ;;Total ram usage:       30 bytes
  3011 ;; Hardware stack levels used: 1
  3012 ;; Hardware stack levels required when called: 2
  3013 ;; This function calls:
  3014 ;;		___aldiv
  3015 ;;		___lmul
  3016 ;; This function is called by:
  3017 ;;		_readSoilMoisture
  3018 ;;		_readTemperature
  3019 ;; This function uses a non-reentrant model
  3020 ;;
  3021                           
  3022     0054                     _map:	
  3023                           ;psect for function _map
  3024                           
  3025     0054                     l2569:	
  3026                           ;incstack = 0
  3027                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  3028                           
  3029                           
  3030                           ;./config.h: 162:     long run = (long)in_max - (long)in_min;
  3031     0054  1283               	bcf	3,5	;RP0=0, select bank0
  3032     0055  1303               	bcf	3,6	;RP1=0, select bank0
  3033     0056  0836               	movf	map@in_min,w
  3034     0057  00BE               	movwf	??_map
  3035     0058  0837               	movf	map@in_min+1,w
  3036     0059  00BF               	movwf	??_map+1
  3037     005A  3000               	movlw	0
  3038     005B  1BBF               	btfsc	??_map+1,7
  3039     005C  30FF               	movlw	255
  3040     005D  00C0               	movwf	??_map+2
  3041     005E  00C1               	movwf	??_map+3
  3042     005F  0838               	movf	map@in_max,w
  3043     0060  00C2               	movwf	??_map+4
  3044     0061  0839               	movf	map@in_max+1,w
  3045     0062  00C3               	movwf	??_map+5
  3046     0063  3000               	movlw	0
  3047     0064  1BC3               	btfsc	??_map+5,7
  3048     0065  30FF               	movlw	255
  3049     0066  00C4               	movwf	??_map+6
  3050     0067  00C5               	movwf	??_map+7
  3051     0068  083E               	movf	??_map,w
  3052     0069  02C2               	subwf	??_map+4,f
  3053     006A  083F               	movf	??_map+1,w
  3054     006B  1C03               	skipc
  3055     006C  0F3F               	incfsz	??_map+1,w
  3056     006D  286F               	goto	u2491
  3057     006E  2870               	goto	u2492
  3058     006F                     u2491:
  3059     006F  02C3               	subwf	??_map+5,f
  3060     0070                     u2492:
  3061     0070  0840               	movf	??_map+2,w
  3062     0071  1C03               	skipc
  3063     0072  0F40               	incfsz	??_map+2,w
  3064     0073  2875               	goto	u2493
  3065     0074  2876               	goto	u2494
  3066     0075                     u2493:
  3067     0075  02C4               	subwf	??_map+6,f
  3068     0076                     u2494:
  3069     0076  0841               	movf	??_map+3,w
  3070     0077  1C03               	skipc
  3071     0078  0F41               	incfsz	??_map+3,w
  3072     0079  287B               	goto	u2495
  3073     007A  287C               	goto	u2496
  3074     007B                     u2495:
  3075     007B  02C5               	subwf	??_map+7,f
  3076     007C                     u2496:
  3077     007C  0845               	movf	??_map+7,w
  3078     007D  00D1               	movwf	map@run+3
  3079     007E  0844               	movf	??_map+6,w
  3080     007F  00D0               	movwf	map@run+2
  3081     0080  0843               	movf	??_map+5,w
  3082     0081  00CF               	movwf	map@run+1
  3083     0082  0842               	movf	??_map+4,w
  3084     0083  00CE               	movwf	map@run
  3085                           
  3086                           ;./config.h: 164:     if (run == 0)
  3087     0084  0851               	movf	map@run+3,w
  3088     0085  0450               	iorwf	map@run+2,w
  3089     0086  044F               	iorwf	map@run+1,w
  3090     0087  044E               	iorwf	map@run,w
  3091     0088  1D03               	skipz
  3092     0089  288B               	goto	u2501
  3093     008A  288C               	goto	u2500
  3094     008B                     u2501:
  3095     008B  2896               	goto	l2575
  3096     008C                     u2500:
  3097     008C                     l2571:
  3098                           
  3099                           ;./config.h: 165:         return out_min;
  3100     008C  083A               	movf	map@out_min,w
  3101     008D  00B4               	movwf	?_map
  3102     008E  083B               	movf	map@out_min+1,w
  3103     008F  00B5               	movwf	?_map+1
  3104     0090  3000               	movlw	0
  3105     0091  1BB5               	btfsc	?_map+1,7
  3106     0092  30FF               	movlw	255
  3107     0093  00B6               	movwf	?_map+2
  3108     0094  00B7               	movwf	?_map+3
  3109     0095  2943               	goto	l120
  3110     0096                     l2575:
  3111                           
  3112                           ;./config.h: 167:     long rise = (long)out_max - (long)out_min;
  3113     0096  083A               	movf	map@out_min,w
  3114     0097  00BE               	movwf	??_map
  3115     0098  083B               	movf	map@out_min+1,w
  3116     0099  00BF               	movwf	??_map+1
  3117     009A  3000               	movlw	0
  3118     009B  1BBF               	btfsc	??_map+1,7
  3119     009C  30FF               	movlw	255
  3120     009D  00C0               	movwf	??_map+2
  3121     009E  00C1               	movwf	??_map+3
  3122     009F  083C               	movf	map@out_max,w
  3123     00A0  00C2               	movwf	??_map+4
  3124     00A1  083D               	movf	map@out_max+1,w
  3125     00A2  00C3               	movwf	??_map+5
  3126     00A3  3000               	movlw	0
  3127     00A4  1BC3               	btfsc	??_map+5,7
  3128     00A5  30FF               	movlw	255
  3129     00A6  00C4               	movwf	??_map+6
  3130     00A7  00C5               	movwf	??_map+7
  3131     00A8  083E               	movf	??_map,w
  3132     00A9  02C2               	subwf	??_map+4,f
  3133     00AA  083F               	movf	??_map+1,w
  3134     00AB  1C03               	skipc
  3135     00AC  0F3F               	incfsz	??_map+1,w
  3136     00AD  28AF               	goto	u2511
  3137     00AE  28B0               	goto	u2512
  3138     00AF                     u2511:
  3139     00AF  02C3               	subwf	??_map+5,f
  3140     00B0                     u2512:
  3141     00B0  0840               	movf	??_map+2,w
  3142     00B1  1C03               	skipc
  3143     00B2  0F40               	incfsz	??_map+2,w
  3144     00B3  28B5               	goto	u2513
  3145     00B4  28B6               	goto	u2514
  3146     00B5                     u2513:
  3147     00B5  02C4               	subwf	??_map+6,f
  3148     00B6                     u2514:
  3149     00B6  0841               	movf	??_map+3,w
  3150     00B7  1C03               	skipc
  3151     00B8  0F41               	incfsz	??_map+3,w
  3152     00B9  28BB               	goto	u2515
  3153     00BA  28BC               	goto	u2516
  3154     00BB                     u2515:
  3155     00BB  02C5               	subwf	??_map+7,f
  3156     00BC                     u2516:
  3157     00BC  0845               	movf	??_map+7,w
  3158     00BD  00C9               	movwf	map@rise+3
  3159     00BE  0844               	movf	??_map+6,w
  3160     00BF  00C8               	movwf	map@rise+2
  3161     00C0  0843               	movf	??_map+5,w
  3162     00C1  00C7               	movwf	map@rise+1
  3163     00C2  0842               	movf	??_map+4,w
  3164     00C3  00C6               	movwf	map@rise
  3165                           
  3166                           ;./config.h: 168:     long delta = (long)x - (long)in_min;
  3167     00C4  0836               	movf	map@in_min,w
  3168     00C5  00BE               	movwf	??_map
  3169     00C6  0837               	movf	map@in_min+1,w
  3170     00C7  00BF               	movwf	??_map+1
  3171     00C8  3000               	movlw	0
  3172     00C9  1BBF               	btfsc	??_map+1,7
  3173     00CA  30FF               	movlw	255
  3174     00CB  00C0               	movwf	??_map+2
  3175     00CC  00C1               	movwf	??_map+3
  3176     00CD  0834               	movf	map@x,w
  3177     00CE  00C2               	movwf	??_map+4
  3178     00CF  0835               	movf	map@x+1,w
  3179     00D0  00C3               	movwf	??_map+5
  3180     00D1  3000               	movlw	0
  3181     00D2  1BC3               	btfsc	??_map+5,7
  3182     00D3  30FF               	movlw	255
  3183     00D4  00C4               	movwf	??_map+6
  3184     00D5  00C5               	movwf	??_map+7
  3185     00D6  083E               	movf	??_map,w
  3186     00D7  02C2               	subwf	??_map+4,f
  3187     00D8  083F               	movf	??_map+1,w
  3188     00D9  1C03               	skipc
  3189     00DA  0F3F               	incfsz	??_map+1,w
  3190     00DB  28DD               	goto	u2521
  3191     00DC  28DE               	goto	u2522
  3192     00DD                     u2521:
  3193     00DD  02C3               	subwf	??_map+5,f
  3194     00DE                     u2522:
  3195     00DE  0840               	movf	??_map+2,w
  3196     00DF  1C03               	skipc
  3197     00E0  0F40               	incfsz	??_map+2,w
  3198     00E1  28E3               	goto	u2523
  3199     00E2  28E4               	goto	u2524
  3200     00E3                     u2523:
  3201     00E3  02C4               	subwf	??_map+6,f
  3202     00E4                     u2524:
  3203     00E4  0841               	movf	??_map+3,w
  3204     00E5  1C03               	skipc
  3205     00E6  0F41               	incfsz	??_map+3,w
  3206     00E7  28E9               	goto	u2525
  3207     00E8  28EA               	goto	u2526
  3208     00E9                     u2525:
  3209     00E9  02C5               	subwf	??_map+7,f
  3210     00EA                     u2526:
  3211     00EA  0845               	movf	??_map+7,w
  3212     00EB  00CD               	movwf	map@delta+3
  3213     00EC  0844               	movf	??_map+6,w
  3214     00ED  00CC               	movwf	map@delta+2
  3215     00EE  0843               	movf	??_map+5,w
  3216     00EF  00CB               	movwf	map@delta+1
  3217     00F0  0842               	movf	??_map+4,w
  3218     00F1  00CA               	movwf	map@delta
  3219     00F2                     l2577:
  3220                           
  3221                           ;./config.h: 170:     return (delta * rise) / run + out_min;
  3222     00F2  083A               	movf	map@out_min,w
  3223     00F3  00BE               	movwf	??_map
  3224     00F4  083B               	movf	map@out_min+1,w
  3225     00F5  00BF               	movwf	??_map+1
  3226     00F6  3000               	movlw	0
  3227     00F7  1BBF               	btfsc	??_map+1,7
  3228     00F8  30FF               	movlw	255
  3229     00F9  00C0               	movwf	??_map+2
  3230     00FA  00C1               	movwf	??_map+3
  3231     00FB  0851               	movf	map@run+3,w
  3232     00FC  00A8               	movwf	___aldiv@divisor+3
  3233     00FD  0850               	movf	map@run+2,w
  3234     00FE  00A7               	movwf	___aldiv@divisor+2
  3235     00FF  084F               	movf	map@run+1,w
  3236     0100  00A6               	movwf	___aldiv@divisor+1
  3237     0101  084E               	movf	map@run,w
  3238     0102  00A5               	movwf	___aldiv@divisor
  3239     0103  084D               	movf	map@delta+3,w
  3240     0104  00F5               	movwf	___lmul@multiplier+3
  3241     0105  084C               	movf	map@delta+2,w
  3242     0106  00F4               	movwf	___lmul@multiplier+2
  3243     0107  084B               	movf	map@delta+1,w
  3244     0108  00F3               	movwf	___lmul@multiplier+1
  3245     0109  084A               	movf	map@delta,w
  3246     010A  00F2               	movwf	___lmul@multiplier
  3247     010B  0849               	movf	map@rise+3,w
  3248     010C  00F9               	movwf	___lmul@multiplicand+3
  3249     010D  0848               	movf	map@rise+2,w
  3250     010E  00F8               	movwf	___lmul@multiplicand+2
  3251     010F  0847               	movf	map@rise+1,w
  3252     0110  00F7               	movwf	___lmul@multiplicand+1
  3253     0111  0846               	movf	map@rise,w
  3254     0112  00F6               	movwf	___lmul@multiplicand
  3255     0113  120A  118A  2766  120A  118A  	fcall	___lmul
  3256     0118  0875               	movf	?___lmul+3,w
  3257     0119  1283               	bcf	3,5	;RP0=0, select bank0
  3258     011A  1303               	bcf	3,6	;RP1=0, select bank0
  3259     011B  00AC               	movwf	___aldiv@dividend+3
  3260     011C  0874               	movf	?___lmul+2,w
  3261     011D  00AB               	movwf	___aldiv@dividend+2
  3262     011E  0873               	movf	?___lmul+1,w
  3263     011F  00AA               	movwf	___aldiv@dividend+1
  3264     0120  0872               	movf	?___lmul,w
  3265     0121  00A9               	movwf	___aldiv@dividend
  3266     0122  120A  118A  22D3  120A  118A  	fcall	___aldiv
  3267     0127  1283               	bcf	3,5	;RP0=0, select bank0
  3268     0128  1303               	bcf	3,6	;RP1=0, select bank0
  3269     0129  0825               	movf	?___aldiv,w
  3270     012A  07BE               	addwf	??_map,f
  3271     012B  0826               	movf	?___aldiv+1,w
  3272     012C  1803               	skipnc
  3273     012D  0F26               	incfsz	?___aldiv+1,w
  3274     012E  2930               	goto	u2530
  3275     012F  2931               	goto	u2531
  3276     0130                     u2530:
  3277     0130  07BF               	addwf	??_map+1,f
  3278     0131                     u2531:
  3279     0131  0827               	movf	?___aldiv+2,w
  3280     0132  1803               	skipnc
  3281     0133  0F27               	incfsz	?___aldiv+2,w
  3282     0134  2936               	goto	u2532
  3283     0135  2937               	goto	u2533
  3284     0136                     u2532:
  3285     0136  07C0               	addwf	??_map+2,f
  3286     0137                     u2533:
  3287     0137  0828               	movf	?___aldiv+3,w
  3288     0138  1803               	skipnc
  3289     0139  0A28               	incf	?___aldiv+3,w
  3290     013A  07C1               	addwf	??_map+3,f
  3291     013B  0841               	movf	??_map+3,w
  3292     013C  00B7               	movwf	?_map+3
  3293     013D  0840               	movf	??_map+2,w
  3294     013E  00B6               	movwf	?_map+2
  3295     013F  083F               	movf	??_map+1,w
  3296     0140  00B5               	movwf	?_map+1
  3297     0141  083E               	movf	??_map,w
  3298     0142  00B4               	movwf	?_map
  3299     0143                     l120:
  3300     0143  0008               	return
  3301     0144                     __end_of_map:
  3302                           
  3303                           	psect	text18
  3304     0766                     __ptext18:	
  3305 ;; *************** function ___lmul *****************
  3306 ;; Defined at:
  3307 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\Umul32.c"
  3308 ;; Parameters:    Size  Location     Type
  3309 ;;  multiplier      4    2[COMMON] unsigned long 
  3310 ;;  multiplicand    4    6[COMMON] unsigned long 
  3311 ;; Auto vars:     Size  Location     Type
  3312 ;;  product         4    1[BANK0 ] unsigned long 
  3313 ;; Return value:  Size  Location     Type
  3314 ;;                  4    2[COMMON] unsigned long 
  3315 ;; Registers used:
  3316 ;;		wreg, status,2, status,0
  3317 ;; Tracked objects:
  3318 ;;		On entry : 0/0
  3319 ;;		On exit  : 0/0
  3320 ;;		Unchanged: 0/0
  3321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3322 ;;      Params:         8       0       0       0       0
  3323 ;;      Locals:         0       4       0       0       0
  3324 ;;      Temps:          0       1       0       0       0
  3325 ;;      Totals:         8       5       0       0       0
  3326 ;;Total ram usage:       13 bytes
  3327 ;; Hardware stack levels used: 1
  3328 ;; Hardware stack levels required when called: 1
  3329 ;; This function calls:
  3330 ;;		Nothing
  3331 ;; This function is called by:
  3332 ;;		_map
  3333 ;; This function uses a non-reentrant model
  3334 ;;
  3335                           
  3336     0766                     ___lmul:	
  3337                           ;psect for function ___lmul
  3338                           
  3339     0766                     l2463:	
  3340                           ;incstack = 0
  3341                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3342                           
  3343     0766  3000               	movlw	0
  3344     0767  1283               	bcf	3,5	;RP0=0, select bank0
  3345     0768  1303               	bcf	3,6	;RP1=0, select bank0
  3346     0769  00A4               	movwf	___lmul@product+3
  3347     076A  3000               	movlw	0
  3348     076B  00A3               	movwf	___lmul@product+2
  3349     076C  3000               	movlw	0
  3350     076D  00A2               	movwf	___lmul@product+1
  3351     076E  3000               	movlw	0
  3352     076F  00A1               	movwf	___lmul@product
  3353     0770                     l2465:
  3354     0770  1C72               	btfss	___lmul@multiplier,0
  3355     0771  2F73               	goto	u2241
  3356     0772  2F74               	goto	u2240
  3357     0773                     u2241:
  3358     0773  2F8B               	goto	l2469
  3359     0774                     u2240:
  3360     0774                     l2467:
  3361     0774  0876               	movf	___lmul@multiplicand,w
  3362     0775  07A1               	addwf	___lmul@product,f
  3363     0776  0877               	movf	___lmul@multiplicand+1,w
  3364     0777  1103               	clrz
  3365     0778  1803               	skipnc
  3366     0779  3E01               	addlw	1
  3367     077A  1903               	skipnz
  3368     077B  2F7D               	goto	u2251
  3369     077C  07A2               	addwf	___lmul@product+1,f
  3370     077D                     u2251:
  3371     077D  0878               	movf	___lmul@multiplicand+2,w
  3372     077E  1103               	clrz
  3373     077F  1803               	skipnc
  3374     0780  3E01               	addlw	1
  3375     0781  1903               	skipnz
  3376     0782  2F84               	goto	u2252
  3377     0783  07A3               	addwf	___lmul@product+2,f
  3378     0784                     u2252:
  3379     0784  0879               	movf	___lmul@multiplicand+3,w
  3380     0785  1103               	clrz
  3381     0786  1803               	skipnc
  3382     0787  3E01               	addlw	1
  3383     0788  1903               	skipnz
  3384     0789  2F8B               	goto	u2253
  3385     078A  07A4               	addwf	___lmul@product+3,f
  3386     078B                     u2253:
  3387     078B                     l2469:
  3388     078B  3001               	movlw	1
  3389     078C  00A0               	movwf	??___lmul
  3390     078D                     u2265:
  3391     078D  1003               	clrc
  3392     078E  0DF6               	rlf	___lmul@multiplicand,f
  3393     078F  0DF7               	rlf	___lmul@multiplicand+1,f
  3394     0790  0DF8               	rlf	___lmul@multiplicand+2,f
  3395     0791  0DF9               	rlf	___lmul@multiplicand+3,f
  3396     0792  0BA0               	decfsz	??___lmul,f
  3397     0793  2F8D               	goto	u2265
  3398     0794                     l2471:
  3399     0794  3001               	movlw	1
  3400     0795                     u2275:
  3401     0795  1003               	clrc
  3402     0796  0CF5               	rrf	___lmul@multiplier+3,f
  3403     0797  0CF4               	rrf	___lmul@multiplier+2,f
  3404     0798  0CF3               	rrf	___lmul@multiplier+1,f
  3405     0799  0CF2               	rrf	___lmul@multiplier,f
  3406     079A  3EFF               	addlw	-1
  3407     079B  1D03               	skipz
  3408     079C  2F95               	goto	u2275
  3409     079D  0875               	movf	___lmul@multiplier+3,w
  3410     079E  0474               	iorwf	___lmul@multiplier+2,w
  3411     079F  0473               	iorwf	___lmul@multiplier+1,w
  3412     07A0  0472               	iorwf	___lmul@multiplier,w
  3413     07A1  1D03               	skipz
  3414     07A2  2FA4               	goto	u2281
  3415     07A3  2FA5               	goto	u2280
  3416     07A4                     u2281:
  3417     07A4  2F70               	goto	l2465
  3418     07A5                     u2280:
  3419     07A5                     l2473:
  3420     07A5  0824               	movf	___lmul@product+3,w
  3421     07A6  00F5               	movwf	?___lmul+3
  3422     07A7  0823               	movf	___lmul@product+2,w
  3423     07A8  00F4               	movwf	?___lmul+2
  3424     07A9  0822               	movf	___lmul@product+1,w
  3425     07AA  00F3               	movwf	?___lmul+1
  3426     07AB  0821               	movf	___lmul@product,w
  3427     07AC  00F2               	movwf	?___lmul
  3428     07AD                     l486:
  3429     07AD  0008               	return
  3430     07AE                     __end_of___lmul:
  3431                           
  3432                           	psect	text19
  3433     02D3                     __ptext19:	
  3434 ;; *************** function ___aldiv *****************
  3435 ;; Defined at:
  3436 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\aldiv.c"
  3437 ;; Parameters:    Size  Location     Type
  3438 ;;  divisor         4    5[BANK0 ] long 
  3439 ;;  dividend        4    9[BANK0 ] long 
  3440 ;; Auto vars:     Size  Location     Type
  3441 ;;  quotient        4   16[BANK0 ] long 
  3442 ;;  sign            1   15[BANK0 ] unsigned char 
  3443 ;;  counter         1   14[BANK0 ] unsigned char 
  3444 ;; Return value:  Size  Location     Type
  3445 ;;                  4    5[BANK0 ] long 
  3446 ;; Registers used:
  3447 ;;		wreg, status,2, status,0
  3448 ;; Tracked objects:
  3449 ;;		On entry : 0/0
  3450 ;;		On exit  : 0/0
  3451 ;;		Unchanged: 0/0
  3452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3453 ;;      Params:         0       8       0       0       0
  3454 ;;      Locals:         0       6       0       0       0
  3455 ;;      Temps:          0       1       0       0       0
  3456 ;;      Totals:         0      15       0       0       0
  3457 ;;Total ram usage:       15 bytes
  3458 ;; Hardware stack levels used: 1
  3459 ;; Hardware stack levels required when called: 1
  3460 ;; This function calls:
  3461 ;;		Nothing
  3462 ;; This function is called by:
  3463 ;;		_map
  3464 ;; This function uses a non-reentrant model
  3465 ;;
  3466                           
  3467     02D3                     ___aldiv:	
  3468                           ;psect for function ___aldiv
  3469                           
  3470     02D3                     l2477:	
  3471                           ;incstack = 0
  3472                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3473                           
  3474     02D3  1283               	bcf	3,5	;RP0=0, select bank0
  3475     02D4  1303               	bcf	3,6	;RP1=0, select bank0
  3476     02D5  01AF               	clrf	___aldiv@sign
  3477     02D6                     l2479:
  3478     02D6  1FA8               	btfss	___aldiv@divisor+3,7
  3479     02D7  2AD9               	goto	u2291
  3480     02D8  2ADA               	goto	u2290
  3481     02D9                     u2291:
  3482     02D9  2AE7               	goto	l537
  3483     02DA                     u2290:
  3484     02DA                     l2481:
  3485     02DA  09A5               	comf	___aldiv@divisor,f
  3486     02DB  09A6               	comf	___aldiv@divisor+1,f
  3487     02DC  09A7               	comf	___aldiv@divisor+2,f
  3488     02DD  09A8               	comf	___aldiv@divisor+3,f
  3489     02DE  0AA5               	incf	___aldiv@divisor,f
  3490     02DF  1903               	skipnz
  3491     02E0  0AA6               	incf	___aldiv@divisor+1,f
  3492     02E1  1903               	skipnz
  3493     02E2  0AA7               	incf	___aldiv@divisor+2,f
  3494     02E3  1903               	skipnz
  3495     02E4  0AA8               	incf	___aldiv@divisor+3,f
  3496     02E5  3001               	movlw	1
  3497     02E6  00AF               	movwf	___aldiv@sign
  3498     02E7                     l537:
  3499     02E7  1FAC               	btfss	___aldiv@dividend+3,7
  3500     02E8  2AEA               	goto	u2301
  3501     02E9  2AEB               	goto	u2300
  3502     02EA                     u2301:
  3503     02EA  2AF8               	goto	l2487
  3504     02EB                     u2300:
  3505     02EB                     l2483:
  3506     02EB  09A9               	comf	___aldiv@dividend,f
  3507     02EC  09AA               	comf	___aldiv@dividend+1,f
  3508     02ED  09AB               	comf	___aldiv@dividend+2,f
  3509     02EE  09AC               	comf	___aldiv@dividend+3,f
  3510     02EF  0AA9               	incf	___aldiv@dividend,f
  3511     02F0  1903               	skipnz
  3512     02F1  0AAA               	incf	___aldiv@dividend+1,f
  3513     02F2  1903               	skipnz
  3514     02F3  0AAB               	incf	___aldiv@dividend+2,f
  3515     02F4  1903               	skipnz
  3516     02F5  0AAC               	incf	___aldiv@dividend+3,f
  3517     02F6                     l2485:
  3518     02F6  3001               	movlw	1
  3519     02F7  06AF               	xorwf	___aldiv@sign,f
  3520     02F8                     l2487:
  3521     02F8  3000               	movlw	0
  3522     02F9  00B3               	movwf	___aldiv@quotient+3
  3523     02FA  3000               	movlw	0
  3524     02FB  00B2               	movwf	___aldiv@quotient+2
  3525     02FC  3000               	movlw	0
  3526     02FD  00B1               	movwf	___aldiv@quotient+1
  3527     02FE  3000               	movlw	0
  3528     02FF  00B0               	movwf	___aldiv@quotient
  3529     0300                     l2489:
  3530     0300  0828               	movf	___aldiv@divisor+3,w
  3531     0301  0427               	iorwf	___aldiv@divisor+2,w
  3532     0302  0426               	iorwf	___aldiv@divisor+1,w
  3533     0303  0425               	iorwf	___aldiv@divisor,w
  3534     0304  1903               	skipnz
  3535     0305  2B07               	goto	u2311
  3536     0306  2B08               	goto	u2310
  3537     0307                     u2311:
  3538     0307  2B53               	goto	l2509
  3539     0308                     u2310:
  3540     0308                     l2491:
  3541     0308  3001               	movlw	1
  3542     0309  00AE               	movwf	___aldiv@counter
  3543     030A  2B16               	goto	l2495
  3544     030B                     l2493:
  3545     030B  3001               	movlw	1
  3546     030C  00AD               	movwf	??___aldiv
  3547     030D                     u2325:
  3548     030D  1003               	clrc
  3549     030E  0DA5               	rlf	___aldiv@divisor,f
  3550     030F  0DA6               	rlf	___aldiv@divisor+1,f
  3551     0310  0DA7               	rlf	___aldiv@divisor+2,f
  3552     0311  0DA8               	rlf	___aldiv@divisor+3,f
  3553     0312  0BAD               	decfsz	??___aldiv,f
  3554     0313  2B0D               	goto	u2325
  3555     0314  3001               	movlw	1
  3556     0315  07AE               	addwf	___aldiv@counter,f
  3557     0316                     l2495:
  3558     0316  1FA8               	btfss	___aldiv@divisor+3,7
  3559     0317  2B19               	goto	u2331
  3560     0318  2B1A               	goto	u2330
  3561     0319                     u2331:
  3562     0319  2B0B               	goto	l2493
  3563     031A                     u2330:
  3564     031A                     l2497:
  3565     031A  3001               	movlw	1
  3566     031B  00AD               	movwf	??___aldiv
  3567     031C                     u2345:
  3568     031C  1003               	clrc
  3569     031D  0DB0               	rlf	___aldiv@quotient,f
  3570     031E  0DB1               	rlf	___aldiv@quotient+1,f
  3571     031F  0DB2               	rlf	___aldiv@quotient+2,f
  3572     0320  0DB3               	rlf	___aldiv@quotient+3,f
  3573     0321  0BAD               	decfsz	??___aldiv,f
  3574     0322  2B1C               	goto	u2345
  3575     0323                     l2499:
  3576     0323  0828               	movf	___aldiv@divisor+3,w
  3577     0324  022C               	subwf	___aldiv@dividend+3,w
  3578     0325  1D03               	skipz
  3579     0326  2B31               	goto	u2355
  3580     0327  0827               	movf	___aldiv@divisor+2,w
  3581     0328  022B               	subwf	___aldiv@dividend+2,w
  3582     0329  1D03               	skipz
  3583     032A  2B31               	goto	u2355
  3584     032B  0826               	movf	___aldiv@divisor+1,w
  3585     032C  022A               	subwf	___aldiv@dividend+1,w
  3586     032D  1D03               	skipz
  3587     032E  2B31               	goto	u2355
  3588     032F  0825               	movf	___aldiv@divisor,w
  3589     0330  0229               	subwf	___aldiv@dividend,w
  3590     0331                     u2355:
  3591     0331  1C03               	skipc
  3592     0332  2B34               	goto	u2351
  3593     0333  2B35               	goto	u2350
  3594     0334                     u2351:
  3595     0334  2B44               	goto	l2505
  3596     0335                     u2350:
  3597     0335                     l2501:
  3598     0335  0825               	movf	___aldiv@divisor,w
  3599     0336  02A9               	subwf	___aldiv@dividend,f
  3600     0337  0826               	movf	___aldiv@divisor+1,w
  3601     0338  1C03               	skipc
  3602     0339  0F26               	incfsz	___aldiv@divisor+1,w
  3603     033A  02AA               	subwf	___aldiv@dividend+1,f
  3604     033B  0827               	movf	___aldiv@divisor+2,w
  3605     033C  1C03               	skipc
  3606     033D  0F27               	incfsz	___aldiv@divisor+2,w
  3607     033E  02AB               	subwf	___aldiv@dividend+2,f
  3608     033F  0828               	movf	___aldiv@divisor+3,w
  3609     0340  1C03               	skipc
  3610     0341  0F28               	incfsz	___aldiv@divisor+3,w
  3611     0342  02AC               	subwf	___aldiv@dividend+3,f
  3612     0343                     l2503:
  3613     0343  1430               	bsf	___aldiv@quotient,0
  3614     0344                     l2505:
  3615     0344  3001               	movlw	1
  3616     0345                     u2365:
  3617     0345  1003               	clrc
  3618     0346  0CA8               	rrf	___aldiv@divisor+3,f
  3619     0347  0CA7               	rrf	___aldiv@divisor+2,f
  3620     0348  0CA6               	rrf	___aldiv@divisor+1,f
  3621     0349  0CA5               	rrf	___aldiv@divisor,f
  3622     034A  3EFF               	addlw	-1
  3623     034B  1D03               	skipz
  3624     034C  2B45               	goto	u2365
  3625     034D                     l2507:
  3626     034D  3001               	movlw	1
  3627     034E  02AE               	subwf	___aldiv@counter,f
  3628     034F  1D03               	btfss	3,2
  3629     0350  2B52               	goto	u2371
  3630     0351  2B53               	goto	u2370
  3631     0352                     u2371:
  3632     0352  2B1A               	goto	l2497
  3633     0353                     u2370:
  3634     0353                     l2509:
  3635     0353  082F               	movf	___aldiv@sign,w
  3636     0354  1903               	btfsc	3,2
  3637     0355  2B57               	goto	u2381
  3638     0356  2B58               	goto	u2380
  3639     0357                     u2381:
  3640     0357  2B63               	goto	l2513
  3641     0358                     u2380:
  3642     0358                     l2511:
  3643     0358  09B0               	comf	___aldiv@quotient,f
  3644     0359  09B1               	comf	___aldiv@quotient+1,f
  3645     035A  09B2               	comf	___aldiv@quotient+2,f
  3646     035B  09B3               	comf	___aldiv@quotient+3,f
  3647     035C  0AB0               	incf	___aldiv@quotient,f
  3648     035D  1903               	skipnz
  3649     035E  0AB1               	incf	___aldiv@quotient+1,f
  3650     035F  1903               	skipnz
  3651     0360  0AB2               	incf	___aldiv@quotient+2,f
  3652     0361  1903               	skipnz
  3653     0362  0AB3               	incf	___aldiv@quotient+3,f
  3654     0363                     l2513:
  3655     0363  0833               	movf	___aldiv@quotient+3,w
  3656     0364  00A8               	movwf	?___aldiv+3
  3657     0365  0832               	movf	___aldiv@quotient+2,w
  3658     0366  00A7               	movwf	?___aldiv+2
  3659     0367  0831               	movf	___aldiv@quotient+1,w
  3660     0368  00A6               	movwf	?___aldiv+1
  3661     0369  0830               	movf	___aldiv@quotient,w
  3662     036A  00A5               	movwf	?___aldiv
  3663     036B                     l547:
  3664     036B  0008               	return
  3665     036C                     __end_of___aldiv:
  3666                           
  3667                           	psect	text20
  3668     0BC1                     __ptext20:	
  3669 ;; *************** function _readLight *****************
  3670 ;; Defined at:
  3671 ;;		line 191 in file "./config.h"
  3672 ;; Parameters:    Size  Location     Type
  3673 ;;		None
  3674 ;; Auto vars:     Size  Location     Type
  3675 ;;		None
  3676 ;; Return value:  Size  Location     Type
  3677 ;;                  1    wreg      void 
  3678 ;; Registers used:
  3679 ;;		wreg, status,2, status,0, pclath, cstack
  3680 ;; Tracked objects:
  3681 ;;		On entry : 0/0
  3682 ;;		On exit  : 0/0
  3683 ;;		Unchanged: 0/0
  3684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3685 ;;      Params:         0       0       0       0       0
  3686 ;;      Locals:         0       0       0       0       0
  3687 ;;      Temps:          0       0       0       0       0
  3688 ;;      Totals:         0       0       0       0       0
  3689 ;;Total ram usage:        0 bytes
  3690 ;; Hardware stack levels used: 1
  3691 ;; Hardware stack levels required when called: 2
  3692 ;; This function calls:
  3693 ;;		_ADC_Read
  3694 ;; This function is called by:
  3695 ;;		_ADC_readAll
  3696 ;; This function uses a non-reentrant model
  3697 ;;
  3698                           
  3699     0BC1                     _readLight:	
  3700                           ;psect for function _readLight
  3701                           
  3702     0BC1                     l2007:	
  3703                           ;incstack = 0
  3704                           ; Regs used in _readLight: [wreg+status,2+status,0+pclath+cstack]
  3705                           
  3706                           
  3707                           ;./config.h: 193:   light = ADC_Read(2);
  3708     0BC1  3002               	movlw	2
  3709     0BC2  120A  158A  25A3  120A  158A  	fcall	_ADC_Read
  3710     0BC7  0873               	movf	?_ADC_Read+1,w
  3711     0BC8  1283               	bcf	3,5	;RP0=0, select bank0
  3712     0BC9  1303               	bcf	3,6	;RP1=0, select bank0
  3713     0BCA  00E1               	movwf	_light+1
  3714     0BCB  0872               	movf	?_ADC_Read,w
  3715     0BCC  00E0               	movwf	_light
  3716     0BCD                     l129:
  3717     0BCD  0008               	return
  3718     0BCE                     __end_of_readLight:
  3719                           
  3720                           	psect	text21
  3721     0DA3                     __ptext21:	
  3722 ;; *************** function _ADC_Read *****************
  3723 ;; Defined at:
  3724 ;;		line 140 in file "./config.h"
  3725 ;; Parameters:    Size  Location     Type
  3726 ;;  channel         1    wreg     unsigned char 
  3727 ;; Auto vars:     Size  Location     Type
  3728 ;;  channel         1    5[COMMON] unsigned char 
  3729 ;; Return value:  Size  Location     Type
  3730 ;;                  2    2[COMMON] int 
  3731 ;; Registers used:
  3732 ;;		wreg, status,2, status,0
  3733 ;; Tracked objects:
  3734 ;;		On entry : 0/0
  3735 ;;		On exit  : 0/0
  3736 ;;		Unchanged: 0/0
  3737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3738 ;;      Params:         2       0       0       0       0
  3739 ;;      Locals:         1       0       0       0       0
  3740 ;;      Temps:          1       0       0       0       0
  3741 ;;      Totals:         4       0       0       0       0
  3742 ;;Total ram usage:        4 bytes
  3743 ;; Hardware stack levels used: 1
  3744 ;; Hardware stack levels required when called: 1
  3745 ;; This function calls:
  3746 ;;		Nothing
  3747 ;; This function is called by:
  3748 ;;		_readSoilMoisture
  3749 ;;		_readTemperature
  3750 ;;		_readLight
  3751 ;; This function uses a non-reentrant model
  3752 ;;
  3753                           
  3754     0DA3                     _ADC_Read:	
  3755                           ;psect for function _ADC_Read
  3756                           
  3757                           
  3758                           ;incstack = 0
  3759                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  3760                           ;ADC_Read@channel stored from wreg
  3761     0DA3  00F5               	movwf	ADC_Read@channel
  3762     0DA4                     l1935:
  3763                           
  3764                           ;./config.h: 143:   ADCON0bits.CHS = channel;
  3765     0DA4  0875               	movf	ADC_Read@channel,w
  3766     0DA5  00F4               	movwf	??_ADC_Read
  3767     0DA6  0DF4               	rlf	??_ADC_Read,f
  3768     0DA7  0DF4               	rlf	??_ADC_Read,f
  3769     0DA8  0DF4               	rlf	??_ADC_Read,f
  3770     0DA9  1283               	bcf	3,5	;RP0=0, select bank0
  3771     0DAA  1303               	bcf	3,6	;RP1=0, select bank0
  3772     0DAB  081F               	movf	31,w	;volatile
  3773     0DAC  0674               	xorwf	??_ADC_Read,w
  3774     0DAD  39C7               	andlw	-57
  3775     0DAE  0674               	xorwf	??_ADC_Read,w
  3776     0DAF  009F               	movwf	31	;volatile
  3777     0DB0                     l1937:
  3778                           
  3779                           ;./config.h: 146:   _delay((unsigned long)((20)*(4000000/4000000.0)));
  3780     0DB0  3006               	movlw	6
  3781     0DB1  00F4               	movwf	??_ADC_Read
  3782     0DB2                     u2787:
  3783     0DB2  0BF4               	decfsz	??_ADC_Read,f
  3784     0DB3  2DB2               	goto	u2787
  3785     0DB4  0000               	nop
  3786     0DB5                     l110:	
  3787                           ;./config.h: 148:   while (ADCON0bits.nDONE) {};
  3788                           
  3789     0DB5  1283               	bcf	3,5	;RP0=0, select bank0
  3790     0DB6  1303               	bcf	3,6	;RP1=0, select bank0
  3791     0DB7  191F               	btfsc	31,2	;volatile
  3792     0DB8  2DBA               	goto	u1591
  3793     0DB9  2DBB               	goto	u1590
  3794     0DBA                     u1591:
  3795     0DBA  2DB5               	goto	l110
  3796     0DBB                     u1590:
  3797     0DBB                     l112:
  3798                           
  3799                           ;./config.h: 151:   ADCON0bits.GO = 1;
  3800     0DBB  151F               	bsf	31,2	;volatile
  3801     0DBC                     l113:	
  3802                           ;./config.h: 154:     {};
  3803                           
  3804                           
  3805                           ;./config.h: 153:   while (ADCON0bits.nDONE)
  3806     0DBC  191F               	btfsc	31,2	;volatile
  3807     0DBD  2DBF               	goto	u1601
  3808     0DBE  2DC0               	goto	u1600
  3809     0DBF                     u1601:
  3810     0DBF  2DBC               	goto	l113
  3811     0DC0                     u1600:
  3812     0DC0                     l1939:
  3813                           
  3814                           ;./config.h: 156:   return((ADRESH<<8) + ADRESL);
  3815     0DC0  081E               	movf	30,w	;volatile
  3816     0DC1  00F3               	movwf	?_ADC_Read+1
  3817     0DC2  1683               	bsf	3,5	;RP0=1, select bank1
  3818     0DC3  1303               	bcf	3,6	;RP1=0, select bank1
  3819     0DC4  081E               	movf	30,w	;volatile
  3820     0DC5  00F2               	movwf	?_ADC_Read
  3821     0DC6                     l116:
  3822     0DC6  0008               	return
  3823     0DC7                     __end_of_ADC_Read:
  3824                           
  3825                           	psect	text22
  3826     0BEA                     __ptext22:	
  3827 ;; *************** function _pins_init *****************
  3828 ;; Defined at:
  3829 ;;		line 99 in file "./config.h"
  3830 ;; Parameters:    Size  Location     Type
  3831 ;;  _TRISA          1    wreg     unsigned char 
  3832 ;;  _TRISB          1    2[COMMON] unsigned char 
  3833 ;;  _TRISC          1    3[COMMON] unsigned char 
  3834 ;;  _TRISD          1    4[COMMON] unsigned char 
  3835 ;; Auto vars:     Size  Location     Type
  3836 ;;  _TRISA          1    5[COMMON] unsigned char 
  3837 ;; Return value:  Size  Location     Type
  3838 ;;                  1    wreg      void 
  3839 ;; Registers used:
  3840 ;;		wreg
  3841 ;; Tracked objects:
  3842 ;;		On entry : 0/0
  3843 ;;		On exit  : 0/0
  3844 ;;		Unchanged: 0/0
  3845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3846 ;;      Params:         3       0       0       0       0
  3847 ;;      Locals:         1       0       0       0       0
  3848 ;;      Temps:          0       0       0       0       0
  3849 ;;      Totals:         4       0       0       0       0
  3850 ;;Total ram usage:        4 bytes
  3851 ;; Hardware stack levels used: 1
  3852 ;; Hardware stack levels required when called: 1
  3853 ;; This function calls:
  3854 ;;		Nothing
  3855 ;; This function is called by:
  3856 ;;		_main
  3857 ;; This function uses a non-reentrant model
  3858 ;;
  3859                           
  3860     0BEA                     _pins_init:	
  3861                           ;psect for function _pins_init
  3862                           
  3863                           
  3864                           ;incstack = 0
  3865                           ; Regs used in _pins_init: [wreg]
  3866                           ;pins_init@_TRISA stored from wreg
  3867     0BEA  00F5               	movwf	pins_init@_TRISA
  3868     0BEB                     l2253:
  3869                           
  3870                           ;./config.h: 100:   TRISA = _TRISA;
  3871     0BEB  0875               	movf	pins_init@_TRISA,w
  3872     0BEC  1683               	bsf	3,5	;RP0=1, select bank1
  3873     0BED  1303               	bcf	3,6	;RP1=0, select bank1
  3874     0BEE  0085               	movwf	5	;volatile
  3875                           
  3876                           ;./config.h: 101:   TRISB = _TRISB;
  3877     0BEF  0872               	movf	pins_init@_TRISB,w
  3878     0BF0  0086               	movwf	6	;volatile
  3879                           
  3880                           ;./config.h: 102:   TRISC = _TRISC;
  3881     0BF1  0873               	movf	pins_init@_TRISC,w
  3882     0BF2  0087               	movwf	7	;volatile
  3883                           
  3884                           ;./config.h: 103:   TRISD = _TRISD;
  3885     0BF3  0874               	movf	pins_init@_TRISD,w
  3886     0BF4  0088               	movwf	8	;volatile
  3887     0BF5                     l2255:
  3888                           
  3889                           ;./config.h: 105:   OPTION_REGbits.nRBPU = 0;
  3890     0BF5  1381               	bcf	1,7	;volatile
  3891     0BF6                     l2257:
  3892                           
  3893                           ;./config.h: 107:   TRISCbits.TRISC6 = 1;
  3894     0BF6  1707               	bsf	7,6	;volatile
  3895     0BF7                     l2259:
  3896                           
  3897                           ;./config.h: 108:   TRISCbits.TRISC7 = 1;
  3898     0BF7  1787               	bsf	7,7	;volatile
  3899     0BF8                     l101:
  3900     0BF8  0008               	return
  3901     0BF9                     __end_of_pins_init:
  3902                           
  3903                           	psect	text23
  3904     0EAF                     __ptext23:	
  3905 ;; *************** function _lcd_run *****************
  3906 ;; Defined at:
  3907 ;;		line 188 in file "./lcdFunctions.h"
  3908 ;; Parameters:    Size  Location     Type
  3909 ;;		None
  3910 ;; Auto vars:     Size  Location     Type
  3911 ;;		None
  3912 ;; Return value:  Size  Location     Type
  3913 ;;                  1    wreg      void 
  3914 ;; Registers used:
  3915 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3916 ;; Tracked objects:
  3917 ;;		On entry : 0/0
  3918 ;;		On exit  : 0/0
  3919 ;;		Unchanged: 0/0
  3920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3921 ;;      Params:         0       0       0       0       0
  3922 ;;      Locals:         0       0       0       0       0
  3923 ;;      Temps:          0       0       0       0       0
  3924 ;;      Totals:         0       0       0       0       0
  3925 ;;Total ram usage:        0 bytes
  3926 ;; Hardware stack levels used: 1
  3927 ;; Hardware stack levels required when called: 7
  3928 ;; This function calls:
  3929 ;;		_lcd_debounceButtons
  3930 ;;		_print_ArtificialLight
  3931 ;;		_print_Irrigation
  3932 ;;		_print_SoilMoisture
  3933 ;;		_print_TankState
  3934 ;;		_print_Temperature
  3935 ;; This function is called by:
  3936 ;;		_main
  3937 ;; This function uses a non-reentrant model
  3938 ;;
  3939                           
  3940     0EAF                     _lcd_run:	
  3941                           ;psect for function _lcd_run
  3942                           
  3943     0EAF                     l2779:	
  3944                           ;incstack = 0
  3945                           ; Regs used in _lcd_run: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3946                           
  3947                           
  3948                           ;./lcdFunctions.h: 191:   lcd_debounceButtons();
  3949     0EAF  120A  158A  261B  120A  158A  	fcall	_lcd_debounceButtons
  3950                           
  3951                           ;./lcdFunctions.h: 193:   switch(lcd_index)
  3952     0EB4  2ED3               	goto	l2793
  3953     0EB5                     l2781:
  3954                           
  3955                           ;./lcdFunctions.h: 196:     print_TankState();
  3956     0EB5  120A  158A  26EB  120A  158A  	fcall	_print_TankState
  3957                           
  3958                           ;./lcdFunctions.h: 197:     break;
  3959     0EBA  2EE6               	goto	l2795
  3960     0EBB                     l2783:
  3961                           
  3962                           ;./lcdFunctions.h: 199:     print_Irrigation();
  3963     0EBB  120A  158A  27BA  120A  158A  	fcall	_print_Irrigation
  3964                           
  3965                           ;./lcdFunctions.h: 200:     break;
  3966     0EC0  2EE6               	goto	l2795
  3967     0EC1                     l2785:
  3968                           
  3969                           ;./lcdFunctions.h: 202:     print_SoilMoisture();
  3970     0EC1  120A  118A  24ED  120A  158A  	fcall	_print_SoilMoisture
  3971                           
  3972                           ;./lcdFunctions.h: 203:     break;
  3973     0EC6  2EE6               	goto	l2795
  3974     0EC7                     l2787:
  3975                           
  3976                           ;./lcdFunctions.h: 205:     print_Temperature();
  3977     0EC7  120A  118A  2482  120A  158A  	fcall	_print_Temperature
  3978                           
  3979                           ;./lcdFunctions.h: 206:     break;
  3980     0ECC  2EE6               	goto	l2795
  3981     0ECD                     l2789:
  3982                           
  3983                           ;./lcdFunctions.h: 208:     print_ArtificialLight();
  3984     0ECD  120A  118A  25B5  120A  158A  	fcall	_print_ArtificialLight
  3985     0ED2  2EE6               	goto	l2795
  3986     0ED3                     l2793:
  3987     0ED3  1283               	bcf	3,5	;RP0=0, select bank0
  3988     0ED4  1303               	bcf	3,6	;RP1=0, select bank0
  3989     0ED5  086A               	movf	_lcd_index,w
  3990                           
  3991                           ; Switch size 1, requested type "simple"
  3992                           ; Number of cases is 5, Range of values is 1 to 5
  3993                           ; switch strategies available:
  3994                           ; Name         Instructions Cycles
  3995                           ; simple_byte           16     9 (average)
  3996                           ; direct_byte           26    11 (fixed)
  3997                           ; jumptable            263     9 (fixed)
  3998                           ;	Chosen strategy is simple_byte
  3999     0ED6  3A01               	xorlw	1	; case 1
  4000     0ED7  1903               	skipnz
  4001     0ED8  2EB5               	goto	l2781
  4002     0ED9  3A03               	xorlw	3	; case 2
  4003     0EDA  1903               	skipnz
  4004     0EDB  2EBB               	goto	l2783
  4005     0EDC  3A01               	xorlw	1	; case 3
  4006     0EDD  1903               	skipnz
  4007     0EDE  2EC1               	goto	l2785
  4008     0EDF  3A07               	xorlw	7	; case 4
  4009     0EE0  1903               	skipnz
  4010     0EE1  2EC7               	goto	l2787
  4011     0EE2  3A01               	xorlw	1	; case 5
  4012     0EE3  1903               	skipnz
  4013     0EE4  2ECD               	goto	l2789
  4014     0EE5  2EE6               	goto	l2795
  4015     0EE6                     l2795:
  4016                           
  4017                           ;./lcdFunctions.h: 213:   lcd_lastIndex = lcd_index;
  4018     0EE6  1283               	bcf	3,5	;RP0=0, select bank0
  4019     0EE7  1303               	bcf	3,6	;RP1=0, select bank0
  4020     0EE8  086A               	movf	_lcd_index,w
  4021     0EE9  00E5               	movwf	_lcd_lastIndex
  4022     0EEA                     l230:
  4023     0EEA  0008               	return
  4024     0EEB                     __end_of_lcd_run:
  4025                           
  4026                           	psect	text24
  4027     0482                     __ptext24:	
  4028 ;; *************** function _print_Temperature *****************
  4029 ;; Defined at:
  4030 ;;		line 145 in file "./lcdFunctions.h"
  4031 ;; Parameters:    Size  Location     Type
  4032 ;;		None
  4033 ;; Auto vars:     Size  Location     Type
  4034 ;;  buffer         16   44[BANK0 ] unsigned char [16]
  4035 ;; Return value:  Size  Location     Type
  4036 ;;                  1    wreg      void 
  4037 ;; Registers used:
  4038 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4039 ;; Tracked objects:
  4040 ;;		On entry : 0/0
  4041 ;;		On exit  : 0/0
  4042 ;;		Unchanged: 0/0
  4043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4044 ;;      Params:         0       0       0       0       0
  4045 ;;      Locals:         0      16       0       0       0
  4046 ;;      Temps:          0       0       0       0       0
  4047 ;;      Totals:         0      16       0       0       0
  4048 ;;Total ram usage:       16 bytes
  4049 ;; Hardware stack levels used: 1
  4050 ;; Hardware stack levels required when called: 6
  4051 ;; This function calls:
  4052 ;;		_Lcd_Clear
  4053 ;;		_Lcd_Set_Cursor
  4054 ;;		_Lcd_Write_Char
  4055 ;;		_Lcd_Write_String
  4056 ;;		_draw_Index
  4057 ;;		_sprintf
  4058 ;; This function is called by:
  4059 ;;		_lcd_run
  4060 ;; This function uses a non-reentrant model
  4061 ;;
  4062                           
  4063     0482                     _print_Temperature:	
  4064                           ;psect for function _print_Temperature
  4065                           
  4066     0482                     l2743:	
  4067                           ;incstack = 0
  4068                           ; Regs used in _print_Temperature: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4069                           
  4070                           
  4071                           ;./lcdFunctions.h: 147:   if(temperature == old_temperature && lcd_lastIndex == lcd_inde
      +                          x)
  4072     0482  1683               	bsf	3,5	;RP0=1, select bank1
  4073     0483  1303               	bcf	3,6	;RP1=0, select bank1
  4074     0484  0851               	movf	(_old_temperature+1)^(0+128),w
  4075     0485  1283               	bcf	3,5	;RP0=0, select bank0
  4076     0486  1303               	bcf	3,6	;RP1=0, select bank0
  4077     0487  065F               	xorwf	_temperature+1,w
  4078     0488  1D03               	skipz
  4079     0489  2C90               	goto	u2715
  4080     048A  1683               	bsf	3,5	;RP0=1, select bank1
  4081     048B  1303               	bcf	3,6	;RP1=0, select bank1
  4082     048C  0850               	movf	_old_temperature^(0+128),w
  4083     048D  1283               	bcf	3,5	;RP0=0, select bank0
  4084     048E  1303               	bcf	3,6	;RP1=0, select bank0
  4085     048F  065E               	xorwf	_temperature,w
  4086     0490                     u2715:
  4087     0490  1D03               	skipz
  4088     0491  2C93               	goto	u2711
  4089     0492  2C94               	goto	u2710
  4090     0493                     u2711:
  4091     0493  2C9B               	goto	l2749
  4092     0494                     u2710:
  4093     0494                     l2745:
  4094     0494  0865               	movf	_lcd_lastIndex,w
  4095     0495  066A               	xorwf	_lcd_index,w
  4096     0496  1D03               	skipz
  4097     0497  2C99               	goto	u2721
  4098     0498  2C9A               	goto	u2720
  4099     0499                     u2721:
  4100     0499  2C9B               	goto	l2749
  4101     049A                     u2720:
  4102     049A  2CEC               	goto	l214
  4103     049B                     l2749:
  4104                           
  4105                           ;./lcdFunctions.h: 150:   old_temperature = temperature;
  4106     049B  085F               	movf	_temperature+1,w
  4107     049C  1683               	bsf	3,5	;RP0=1, select bank1
  4108     049D  1303               	bcf	3,6	;RP1=0, select bank1
  4109     049E  00D1               	movwf	(_old_temperature+1)^(0+128)
  4110     049F  1283               	bcf	3,5	;RP0=0, select bank0
  4111     04A0  1303               	bcf	3,6	;RP1=0, select bank0
  4112     04A1  085E               	movf	_temperature,w
  4113     04A2  1683               	bsf	3,5	;RP0=1, select bank1
  4114     04A3  1303               	bcf	3,6	;RP1=0, select bank1
  4115     04A4  00D0               	movwf	_old_temperature^(0+128)
  4116     04A5                     l2751:
  4117                           
  4118                           ;./lcdFunctions.h: 152:   Lcd_Clear();
  4119     04A5  120A  158A  23B4  120A  118A  	fcall	_Lcd_Clear
  4120     04AA                     l2753:
  4121                           
  4122                           ;./lcdFunctions.h: 154:   char buffer[16];;./lcdFunctions.h: 156:   Lcd_Set_Cursor(1,3);
  4123     04AA  3003               	movlw	3
  4124     04AB  00F6               	movwf	Lcd_Set_Cursor@b
  4125     04AC  3001               	movlw	1
  4126     04AD  120A  118A  2718  120A  118A  	fcall	_Lcd_Set_Cursor
  4127     04B2                     l2755:
  4128                           
  4129                           ;./lcdFunctions.h: 157:   Lcd_Write_String("TEMPERATURA:");
  4130     04B2  301E               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  4131     04B3  00F7               	movwf	Lcd_Write_String@a
  4132     04B4  3080               	movlw	128
  4133     04B5  00F8               	movwf	Lcd_Write_String@a+1
  4134     04B6  120A  158A  2774  120A  118A  	fcall	_Lcd_Write_String
  4135     04BB                     l2757:
  4136                           
  4137                           ;./lcdFunctions.h: 159:   Lcd_Set_Cursor(2,7);
  4138     04BB  3007               	movlw	7
  4139     04BC  00F6               	movwf	Lcd_Set_Cursor@b
  4140     04BD  3002               	movlw	2
  4141     04BE  120A  118A  2718  120A  118A  	fcall	_Lcd_Set_Cursor
  4142     04C3                     l2759:
  4143                           
  4144                           ;./lcdFunctions.h: 161:   sprintf(buffer,"%d",temperature);
  4145     04C3  304C               	movlw	(low (print_Temperature@buffer| 0))& (0+255)
  4146     04C4  1283               	bcf	3,5	;RP0=0, select bank0
  4147     04C5  1303               	bcf	3,6	;RP1=0, select bank0
  4148     04C6  00BB               	movwf	sprintf@s
  4149     04C7  3070               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  4150     04C8  00BC               	movwf	sprintf@fmt
  4151     04C9  085F               	movf	_temperature+1,w
  4152     04CA  00BE               	movwf	?_sprintf+3
  4153     04CB  085E               	movf	_temperature,w
  4154     04CC  00BD               	movwf	?_sprintf+2
  4155     04CD  120A  158A  2539  120A  118A  	fcall	_sprintf
  4156     04D2                     l2761:
  4157                           
  4158                           ;./lcdFunctions.h: 162:   Lcd_Write_String(buffer);
  4159     04D2  304C               	movlw	(low (print_Temperature@buffer| 0))& (0+255)
  4160     04D3  00F7               	movwf	Lcd_Write_String@a
  4161     04D4  3000               	movlw	0
  4162     04D5  00F8               	movwf	Lcd_Write_String@a+1
  4163     04D6  120A  158A  2774  120A  118A  	fcall	_Lcd_Write_String
  4164     04DB                     l2763:
  4165                           
  4166                           ;./lcdFunctions.h: 163:   Lcd_Write_Char((char)223);
  4167     04DB  30DF               	movlw	223
  4168     04DC  120A  158A  267A  120A  118A  	fcall	_Lcd_Write_Char
  4169     04E1                     l2765:
  4170                           
  4171                           ;./lcdFunctions.h: 164:   Lcd_Write_Char('C');
  4172     04E1  3043               	movlw	67
  4173     04E2  120A  158A  267A  120A  118A  	fcall	_Lcd_Write_Char
  4174     04E7                     l2767:
  4175                           
  4176                           ;./lcdFunctions.h: 167:   draw_Index();
  4177     04E7  120A  158A  24B1  120A  118A  	fcall	_draw_Index
  4178     04EC                     l214:
  4179     04EC  0008               	return
  4180     04ED                     __end_of_print_Temperature:
  4181                           
  4182                           	psect	text25
  4183     0EEB                     __ptext25:	
  4184 ;; *************** function _print_TankState *****************
  4185 ;; Defined at:
  4186 ;;		line 64 in file "./lcdFunctions.h"
  4187 ;; Parameters:    Size  Location     Type
  4188 ;;		None
  4189 ;; Auto vars:     Size  Location     Type
  4190 ;;		None
  4191 ;; Return value:  Size  Location     Type
  4192 ;;                  1    wreg      void 
  4193 ;; Registers used:
  4194 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4195 ;; Tracked objects:
  4196 ;;		On entry : 0/0
  4197 ;;		On exit  : 0/0
  4198 ;;		Unchanged: 0/0
  4199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4200 ;;      Params:         0       0       0       0       0
  4201 ;;      Locals:         0       0       0       0       0
  4202 ;;      Temps:          0       0       0       0       0
  4203 ;;      Totals:         0       0       0       0       0
  4204 ;;Total ram usage:        0 bytes
  4205 ;; Hardware stack levels used: 1
  4206 ;; Hardware stack levels required when called: 5
  4207 ;; This function calls:
  4208 ;;		_Lcd_Clear
  4209 ;;		_Lcd_Set_Cursor
  4210 ;;		_Lcd_Write_String
  4211 ;;		_draw_Index
  4212 ;; This function is called by:
  4213 ;;		_lcd_run
  4214 ;; This function uses a non-reentrant model
  4215 ;;
  4216                           
  4217     0EEB                     _print_TankState:	
  4218                           ;psect for function _print_TankState
  4219                           
  4220     0EEB                     l2657:	
  4221                           ;incstack = 0
  4222                           ; Regs used in _print_TankState: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4223                           
  4224                           
  4225                           ;./lcdFunctions.h: 67:   if(tankState == lastTankState && lcd_lastIndex == lcd_index)
  4226     0EEB  087B               	movf	_tankState,w
  4227     0EEC  1283               	bcf	3,5	;RP0=0, select bank0
  4228     0EED  1303               	bcf	3,6	;RP1=0, select bank0
  4229     0EEE  066E               	xorwf	_lastTankState,w
  4230     0EEF  1D03               	skipz
  4231     0EF0  2EF2               	goto	u2621
  4232     0EF1  2EF3               	goto	u2620
  4233     0EF2                     u2621:
  4234     0EF2  2EFA               	goto	l2663
  4235     0EF3                     u2620:
  4236     0EF3                     l2659:
  4237     0EF3  0865               	movf	_lcd_lastIndex,w
  4238     0EF4  066A               	xorwf	_lcd_index,w
  4239     0EF5  1D03               	skipz
  4240     0EF6  2EF8               	goto	u2631
  4241     0EF7  2EF9               	goto	u2630
  4242     0EF8                     u2631:
  4243     0EF8  2EFA               	goto	l2663
  4244     0EF9                     u2630:
  4245     0EF9  2F2E               	goto	l196
  4246     0EFA                     l2663:
  4247                           
  4248                           ;./lcdFunctions.h: 70:   lastTankState = tankState;
  4249     0EFA  087B               	movf	_tankState,w
  4250     0EFB  00EE               	movwf	_lastTankState
  4251     0EFC                     l2665:
  4252                           
  4253                           ;./lcdFunctions.h: 72:   Lcd_Clear();
  4254     0EFC  120A  158A  23B4  120A  158A  	fcall	_Lcd_Clear
  4255     0F01                     l2667:
  4256                           
  4257                           ;./lcdFunctions.h: 74:   Lcd_Set_Cursor(1,2);
  4258     0F01  3002               	movlw	2
  4259     0F02  00F6               	movwf	Lcd_Set_Cursor@b
  4260     0F03  3001               	movlw	1
  4261     0F04  120A  118A  2718  120A  158A  	fcall	_Lcd_Set_Cursor
  4262     0F09                     l2669:
  4263                           
  4264                           ;./lcdFunctions.h: 75:   Lcd_Write_String("ESTADO TANQUE");
  4265     0F09  3010               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  4266     0F0A  00F7               	movwf	Lcd_Write_String@a
  4267     0F0B  3080               	movlw	128
  4268     0F0C  00F8               	movwf	Lcd_Write_String@a+1
  4269     0F0D  120A  158A  2774  120A  158A  	fcall	_Lcd_Write_String
  4270     0F12                     l2671:
  4271                           
  4272                           ;./lcdFunctions.h: 77:   Lcd_Set_Cursor(2,6);
  4273     0F12  3006               	movlw	6
  4274     0F13  00F6               	movwf	Lcd_Set_Cursor@b
  4275     0F14  3002               	movlw	2
  4276     0F15  120A  118A  2718  120A  158A  	fcall	_Lcd_Set_Cursor
  4277     0F1A                     l2673:
  4278                           
  4279                           ;./lcdFunctions.h: 78:   Lcd_Write_String( TankStateString[tankState] );
  4280     0F1A  087B               	movf	_tankState,w
  4281     0F1B  3EC7               	addlw	(low (_TankStateString| 0))& (0+255)
  4282     0F1C  0084               	movwf	4
  4283     0F1D  1383               	bcf	3,7	;select IRP bank1
  4284     0F1E  0800               	movf	0,w
  4285     0F1F  00F7               	movwf	Lcd_Write_String@a
  4286     0F20  3000               	movlw	0
  4287     0F21  1D03               	btfss	3,2
  4288     0F22  3080               	movlw	128
  4289     0F23  00F8               	movwf	Lcd_Write_String@a+1
  4290     0F24  120A  158A  2774  120A  158A  	fcall	_Lcd_Write_String
  4291     0F29                     l2675:
  4292                           
  4293                           ;./lcdFunctions.h: 80:   draw_Index();
  4294     0F29  120A  158A  24B1  120A  158A  	fcall	_draw_Index
  4295     0F2E                     l196:
  4296     0F2E  0008               	return
  4297     0F2F                     __end_of_print_TankState:
  4298                           
  4299                           	psect	text26
  4300     04ED                     __ptext26:	
  4301 ;; *************** function _print_SoilMoisture *****************
  4302 ;; Defined at:
  4303 ;;		line 102 in file "./lcdFunctions.h"
  4304 ;; Parameters:    Size  Location     Type
  4305 ;;		None
  4306 ;; Auto vars:     Size  Location     Type
  4307 ;;  buffer         16   44[BANK0 ] unsigned char [16]
  4308 ;; Return value:  Size  Location     Type
  4309 ;;                  1    wreg      void 
  4310 ;; Registers used:
  4311 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4312 ;; Tracked objects:
  4313 ;;		On entry : 0/0
  4314 ;;		On exit  : 0/0
  4315 ;;		Unchanged: 0/0
  4316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4317 ;;      Params:         0       0       0       0       0
  4318 ;;      Locals:         0      16       0       0       0
  4319 ;;      Temps:          0       0       0       0       0
  4320 ;;      Totals:         0      16       0       0       0
  4321 ;;Total ram usage:       16 bytes
  4322 ;; Hardware stack levels used: 1
  4323 ;; Hardware stack levels required when called: 6
  4324 ;; This function calls:
  4325 ;;		_Lcd_Clear
  4326 ;;		_Lcd_Set_Cursor
  4327 ;;		_Lcd_Write_Char
  4328 ;;		_Lcd_Write_String
  4329 ;;		_draw_Index
  4330 ;;		_sprintf
  4331 ;; This function is called by:
  4332 ;;		_lcd_run
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336     04ED                     _print_SoilMoisture:	
  4337                           ;psect for function _print_SoilMoisture
  4338                           
  4339     04ED                     l2697:	
  4340                           ;incstack = 0
  4341                           ; Regs used in _print_SoilMoisture: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4342                           
  4343                           
  4344                           ;./lcdFunctions.h: 104:   if(soilMoisture == old_soilMoisture && lcd_lastIndex == lcd_in
      +                          dex)
  4345     04ED  1683               	bsf	3,5	;RP0=1, select bank1
  4346     04EE  1303               	bcf	3,6	;RP1=0, select bank1
  4347     04EF  0853               	movf	(_old_soilMoisture+1)^(0+128),w
  4348     04F0  1283               	bcf	3,5	;RP0=0, select bank0
  4349     04F1  1303               	bcf	3,6	;RP1=0, select bank0
  4350     04F2  0663               	xorwf	_soilMoisture+1,w
  4351     04F3  1D03               	skipz
  4352     04F4  2CFB               	goto	u2665
  4353     04F5  1683               	bsf	3,5	;RP0=1, select bank1
  4354     04F6  1303               	bcf	3,6	;RP1=0, select bank1
  4355     04F7  0852               	movf	_old_soilMoisture^(0+128),w
  4356     04F8  1283               	bcf	3,5	;RP0=0, select bank0
  4357     04F9  1303               	bcf	3,6	;RP1=0, select bank0
  4358     04FA  0662               	xorwf	_soilMoisture,w
  4359     04FB                     u2665:
  4360     04FB  1D03               	skipz
  4361     04FC  2CFE               	goto	u2661
  4362     04FD  2CFF               	goto	u2660
  4363     04FE                     u2661:
  4364     04FE  2D06               	goto	l2703
  4365     04FF                     u2660:
  4366     04FF                     l2699:
  4367     04FF  0865               	movf	_lcd_lastIndex,w
  4368     0500  066A               	xorwf	_lcd_index,w
  4369     0501  1D03               	skipz
  4370     0502  2D04               	goto	u2671
  4371     0503  2D05               	goto	u2670
  4372     0504                     u2671:
  4373     0504  2D06               	goto	l2703
  4374     0505                     u2670:
  4375     0505  2D51               	goto	l204
  4376     0506                     l2703:
  4377                           
  4378                           ;./lcdFunctions.h: 107:   old_soilMoisture = soilMoisture;
  4379     0506  0863               	movf	_soilMoisture+1,w
  4380     0507  1683               	bsf	3,5	;RP0=1, select bank1
  4381     0508  1303               	bcf	3,6	;RP1=0, select bank1
  4382     0509  00D3               	movwf	(_old_soilMoisture+1)^(0+128)
  4383     050A  1283               	bcf	3,5	;RP0=0, select bank0
  4384     050B  1303               	bcf	3,6	;RP1=0, select bank0
  4385     050C  0862               	movf	_soilMoisture,w
  4386     050D  1683               	bsf	3,5	;RP0=1, select bank1
  4387     050E  1303               	bcf	3,6	;RP1=0, select bank1
  4388     050F  00D2               	movwf	_old_soilMoisture^(0+128)
  4389     0510                     l2705:
  4390                           
  4391                           ;./lcdFunctions.h: 109:   Lcd_Clear();
  4392     0510  120A  158A  23B4  120A  118A  	fcall	_Lcd_Clear
  4393     0515                     l2707:
  4394                           
  4395                           ;./lcdFunctions.h: 111:   char buffer[16];;./lcdFunctions.h: 114:   Lcd_Set_Cursor(1,2);
  4396     0515  3002               	movlw	2
  4397     0516  00F6               	movwf	Lcd_Set_Cursor@b
  4398     0517  3001               	movlw	1
  4399     0518  120A  118A  2718  120A  118A  	fcall	_Lcd_Set_Cursor
  4400     051D                     l2709:
  4401                           
  4402                           ;./lcdFunctions.h: 115:   Lcd_Write_String("UMIDADE SOLO");
  4403     051D  302B               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  4404     051E  00F7               	movwf	Lcd_Write_String@a
  4405     051F  3080               	movlw	128
  4406     0520  00F8               	movwf	Lcd_Write_String@a+1
  4407     0521  120A  158A  2774  120A  118A  	fcall	_Lcd_Write_String
  4408     0526                     l2711:
  4409                           
  4410                           ;./lcdFunctions.h: 117:   Lcd_Set_Cursor(2,6);
  4411     0526  3006               	movlw	6
  4412     0527  00F6               	movwf	Lcd_Set_Cursor@b
  4413     0528  3002               	movlw	2
  4414     0529  120A  118A  2718  120A  118A  	fcall	_Lcd_Set_Cursor
  4415     052E                     l2713:
  4416                           
  4417                           ;./lcdFunctions.h: 118:   sprintf(buffer,"%d",soilMoisture);
  4418     052E  304C               	movlw	(low (print_SoilMoisture@buffer| 0))& (0+255)
  4419     052F  1283               	bcf	3,5	;RP0=0, select bank0
  4420     0530  1303               	bcf	3,6	;RP1=0, select bank0
  4421     0531  00BB               	movwf	sprintf@s
  4422     0532  3070               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  4423     0533  00BC               	movwf	sprintf@fmt
  4424     0534  0863               	movf	_soilMoisture+1,w
  4425     0535  00BE               	movwf	?_sprintf+3
  4426     0536  0862               	movf	_soilMoisture,w
  4427     0537  00BD               	movwf	?_sprintf+2
  4428     0538  120A  158A  2539  120A  118A  	fcall	_sprintf
  4429     053D                     l2715:
  4430                           
  4431                           ;./lcdFunctions.h: 119:   Lcd_Write_String(buffer);
  4432     053D  304C               	movlw	(low (print_SoilMoisture@buffer| 0))& (0+255)
  4433     053E  00F7               	movwf	Lcd_Write_String@a
  4434     053F  3000               	movlw	0
  4435     0540  00F8               	movwf	Lcd_Write_String@a+1
  4436     0541  120A  158A  2774  120A  118A  	fcall	_Lcd_Write_String
  4437     0546                     l2717:
  4438                           
  4439                           ;./lcdFunctions.h: 120:   Lcd_Write_Char('%');
  4440     0546  3025               	movlw	37
  4441     0547  120A  158A  267A  120A  118A  	fcall	_Lcd_Write_Char
  4442     054C                     l2719:
  4443                           
  4444                           ;./lcdFunctions.h: 122:   draw_Index();
  4445     054C  120A  158A  24B1  120A  118A  	fcall	_draw_Index
  4446     0551                     l204:
  4447     0551  0008               	return
  4448     0552                     __end_of_print_SoilMoisture:
  4449                           
  4450                           	psect	text27
  4451     0D39                     __ptext27:	
  4452 ;; *************** function _sprintf *****************
  4453 ;; Defined at:
  4454 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_sprintf.c"
  4455 ;; Parameters:    Size  Location     Type
  4456 ;;  s               1   27[BANK0 ] PTR unsigned char 
  4457 ;;		 -> print_Temperature@buffer(16), print_SoilMoisture@buffer(16), 
  4458 ;;  fmt             1   28[BANK0 ] PTR const unsigned char 
  4459 ;;		 -> STR_16(3), STR_11(3), 
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;  f              11   33[BANK0 ] struct _IO_FILE
  4462 ;;  ret             2    0        int 
  4463 ;;  ap              1   32[BANK0 ] PTR void [1]
  4464 ;;		 -> ?_sprintf(2), 
  4465 ;; Return value:  Size  Location     Type
  4466 ;;                  2   27[BANK0 ] int 
  4467 ;; Registers used:
  4468 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4469 ;; Tracked objects:
  4470 ;;		On entry : 0/0
  4471 ;;		On exit  : 0/0
  4472 ;;		Unchanged: 0/0
  4473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4474 ;;      Params:         0       4       0       0       0
  4475 ;;      Locals:         0      12       0       0       0
  4476 ;;      Temps:          0       1       0       0       0
  4477 ;;      Totals:         0      17       0       0       0
  4478 ;;Total ram usage:       17 bytes
  4479 ;; Hardware stack levels used: 1
  4480 ;; Hardware stack levels required when called: 5
  4481 ;; This function calls:
  4482 ;;		_vfprintf
  4483 ;; This function is called by:
  4484 ;;		_print_SoilMoisture
  4485 ;;		_print_Temperature
  4486 ;; This function uses a non-reentrant model
  4487 ;;
  4488                           
  4489     0D39                     _sprintf:	
  4490                           ;psect for function _sprintf
  4491                           
  4492     0D39                     l2641:	
  4493                           ;incstack = 0
  4494                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4495                           
  4496     0D39  303D               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  4497     0D3A  1283               	bcf	3,5	;RP0=0, select bank0
  4498     0D3B  1303               	bcf	3,6	;RP1=0, select bank0
  4499     0D3C  00C0               	movwf	sprintf@ap
  4500     0D3D                     l2643:
  4501     0D3D  083B               	movf	sprintf@s,w
  4502     0D3E  00C1               	movwf	sprintf@f
  4503     0D3F  3000               	movlw	0
  4504     0D40  00C2               	movwf	sprintf@f+1
  4505     0D41                     l2645:
  4506     0D41  01C3               	clrf	sprintf@f+2
  4507     0D42  01C4               	clrf	sprintf@f+3
  4508     0D43                     l2647:
  4509     0D43  01CA               	clrf	sprintf@f+9
  4510     0D44  01CB               	clrf	sprintf@f+10
  4511     0D45                     l2649:
  4512     0D45  3041               	movlw	low sprintf@f
  4513     0D46  00B6               	movwf	vfprintf@fp
  4514     0D47  3000               	movlw	high sprintf@f
  4515     0D48  00B7               	movwf	vfprintf@fp+1
  4516     0D49  083C               	movf	sprintf@fmt,w
  4517     0D4A  00B8               	movwf	vfprintf@fmt
  4518     0D4B  3040               	movlw	(low (sprintf@ap| 0))& (0+255)
  4519     0D4C  00B9               	movwf	vfprintf@ap
  4520     0D4D  120A  158A  2516  120A  158A  	fcall	_vfprintf
  4521     0D52                     l2651:
  4522     0D52  1283               	bcf	3,5	;RP0=0, select bank0
  4523     0D53  1303               	bcf	3,6	;RP1=0, select bank0
  4524     0D54  0843               	movf	sprintf@f+2,w
  4525     0D55  073B               	addwf	sprintf@s,w
  4526     0D56  00BF               	movwf	??_sprintf
  4527     0D57  083F               	movf	??_sprintf,w
  4528     0D58  0084               	movwf	4
  4529     0D59  1383               	bcf	3,7	;select IRP bank0
  4530     0D5A  0180               	clrf	0
  4531     0D5B                     l935:
  4532     0D5B  0008               	return
  4533     0D5C                     __end_of_sprintf:
  4534                           
  4535                           	psect	text28
  4536     0D16                     __ptext28:	
  4537 ;; *************** function _vfprintf *****************
  4538 ;; Defined at:
  4539 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  4540 ;; Parameters:    Size  Location     Type
  4541 ;;  fp              2   22[BANK0 ] PTR struct _IO_FILE
  4542 ;;		 -> sprintf@f(11), 
  4543 ;;  fmt             1   24[BANK0 ] PTR const unsigned char 
  4544 ;;		 -> STR_16(3), STR_11(3), 
  4545 ;;  ap              1   25[BANK0 ] PTR PTR void 
  4546 ;;		 -> sprintf@ap(1), 
  4547 ;; Auto vars:     Size  Location     Type
  4548 ;;  cfmt            1   26[BANK0 ] PTR unsigned char 
  4549 ;;		 -> STR_16(3), STR_11(3), 
  4550 ;; Return value:  Size  Location     Type
  4551 ;;                  2   22[BANK0 ] int 
  4552 ;; Registers used:
  4553 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4554 ;; Tracked objects:
  4555 ;;		On entry : 0/0
  4556 ;;		On exit  : 0/0
  4557 ;;		Unchanged: 0/0
  4558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4559 ;;      Params:         0       4       0       0       0
  4560 ;;      Locals:         0       1       0       0       0
  4561 ;;      Temps:          0       0       0       0       0
  4562 ;;      Totals:         0       5       0       0       0
  4563 ;;Total ram usage:        5 bytes
  4564 ;; Hardware stack levels used: 1
  4565 ;; Hardware stack levels required when called: 4
  4566 ;; This function calls:
  4567 ;;		_vfpfcnvrt
  4568 ;; This function is called by:
  4569 ;;		_sprintf
  4570 ;; This function uses a non-reentrant model
  4571 ;;
  4572                           
  4573     0D16                     _vfprintf:	
  4574                           ;psect for function _vfprintf
  4575                           
  4576     0D16                     l2613:	
  4577                           ;incstack = 0
  4578 ;; using string table level
  4579                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4580                           
  4581                           
  4582                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  4583     0D16  1283               	bcf	3,5	;RP0=0, select bank0
  4584     0D17  1303               	bcf	3,6	;RP1=0, select bank0
  4585     0D18  0838               	movf	vfprintf@fmt,w
  4586     0D19  00BA               	movwf	vfprintf@cfmt
  4587                           
  4588                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  4589     0D1A  2D28               	goto	l2617
  4590     0D1B                     l2615:
  4591                           
  4592                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  4593     0D1B  0836               	movf	vfprintf@fp,w
  4594     0D1C  00A9               	movwf	vfpfcnvrt@fp
  4595     0D1D  0837               	movf	vfprintf@fp+1,w
  4596     0D1E  00AA               	movwf	vfpfcnvrt@fp+1
  4597     0D1F  303A               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  4598     0D20  00AB               	movwf	vfpfcnvrt@fmt
  4599     0D21  0839               	movf	vfprintf@ap,w
  4600     0D22  00AC               	movwf	vfpfcnvrt@ap
  4601     0D23  120A  118A  2144  120A  158A  	fcall	_vfpfcnvrt
  4602     0D28                     l2617:
  4603                           
  4604                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  4605     0D28  1283               	bcf	3,5	;RP0=0, select bank0
  4606     0D29  1303               	bcf	3,6	;RP1=0, select bank0
  4607     0D2A  083A               	movf	vfprintf@cfmt,w
  4608     0D2B  0084               	movwf	4
  4609     0D2C  120A  118A  240A  120A  158A  	fcall	stringdir
  4610     0D31  3A00               	xorlw	0
  4611     0D32  1D03               	skipz
  4612     0D33  2D35               	goto	u2611
  4613     0D34  2D36               	goto	u2610
  4614     0D35                     u2611:
  4615     0D35  2D1B               	goto	l2615
  4616     0D36                     u2610:
  4617     0D36                     l2619:
  4618                           
  4619                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  4620     0D36  01B6               	clrf	?_vfprintf
  4621     0D37  01B7               	clrf	?_vfprintf+1
  4622     0D38                     l979:
  4623     0D38  0008               	return
  4624     0D39                     __end_of_vfprintf:
  4625                           
  4626                           	psect	text29
  4627     0144                     __ptext29:	
  4628 ;; *************** function _vfpfcnvrt *****************
  4629 ;; Defined at:
  4630 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  4631 ;; Parameters:    Size  Location     Type
  4632 ;;  fp              2    9[BANK0 ] PTR struct _IO_FILE
  4633 ;;		 -> sprintf@f(11), 
  4634 ;;  fmt             1   11[BANK0 ] PTR PTR unsigned char 
  4635 ;;		 -> vfprintf@cfmt(1), 
  4636 ;;  ap              1   12[BANK0 ] PTR PTR void 
  4637 ;;		 -> sprintf@ap(1), 
  4638 ;; Auto vars:     Size  Location     Type
  4639 ;;  convarg         4   17[BANK0 ] struct .
  4640 ;;  c               1   21[BANK0 ] unsigned char 
  4641 ;;  cp              1   16[BANK0 ] PTR unsigned char 
  4642 ;;		 -> STR_16(3), STR_11(3), 
  4643 ;;  done            1   15[BANK0 ] _Bool 
  4644 ;; Return value:  Size  Location     Type
  4645 ;;                  1    wreg      void 
  4646 ;; Registers used:
  4647 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4648 ;; Tracked objects:
  4649 ;;		On entry : 0/0
  4650 ;;		On exit  : 0/0
  4651 ;;		Unchanged: 0/0
  4652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4653 ;;      Params:         0       4       0       0       0
  4654 ;;      Locals:         0       7       0       0       0
  4655 ;;      Temps:          0       2       0       0       0
  4656 ;;      Totals:         0      13       0       0       0
  4657 ;;Total ram usage:       13 bytes
  4658 ;; Hardware stack levels used: 1
  4659 ;; Hardware stack levels required when called: 3
  4660 ;; This function calls:
  4661 ;;		___awdiv
  4662 ;;		___awmod
  4663 ;;		_abs
  4664 ;;		_fputc
  4665 ;; This function is called by:
  4666 ;;		_vfprintf
  4667 ;; This function uses a non-reentrant model
  4668 ;;
  4669                           
  4670     0144                     _vfpfcnvrt:	
  4671                           ;psect for function _vfpfcnvrt
  4672                           
  4673     0144                     l2517:	
  4674                           ;incstack = 0
  4675 ;; using string table level
  4676                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4677                           
  4678                           
  4679                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  4680     0144  1283               	bcf	3,5	;RP0=0, select bank0
  4681     0145  1303               	bcf	3,6	;RP1=0, select bank0
  4682     0146  082B               	movf	vfpfcnvrt@fmt,w
  4683     0147  0084               	movwf	4
  4684     0148  1383               	bcf	3,7	;select IRP bank0
  4685     0149  0800               	movf	0,w
  4686     014A  0084               	movwf	4
  4687     014B  120A  118A  240A  120A  118A  	fcall	stringdir
  4688     0150  3A25               	xorlw	37
  4689     0151  1D03               	skipz
  4690     0152  2954               	goto	u2391
  4691     0153  2955               	goto	u2390
  4692     0154                     u2391:
  4693     0154  2A19               	goto	l2563
  4694     0155                     u2390:
  4695     0155                     l2519:
  4696                           
  4697                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  4698     0155  082B               	movf	vfpfcnvrt@fmt,w
  4699     0156  0084               	movwf	4
  4700     0157  3001               	movlw	1
  4701     0158  0780               	addwf	0,f
  4702     0159                     l2521:
  4703                           
  4704                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  4705     0159  1683               	bsf	3,5	;RP0=1, select bank1
  4706     015A  1303               	bcf	3,6	;RP1=0, select bank1
  4707     015B  01C3               	clrf	_width^(0+128)
  4708     015C  01C4               	clrf	(_width+1)^(0+128)
  4709     015D  3000               	movlw	0
  4710     015E  1283               	bcf	3,5	;RP0=0, select bank0
  4711     015F  1303               	bcf	3,6	;RP1=0, select bank0
  4712     0160  00E4               	movwf	_flags
  4713     0161                     l2523:
  4714                           
  4715                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  4716     0161  30FF               	movlw	255
  4717     0162  1683               	bsf	3,5	;RP0=1, select bank1
  4718     0163  1303               	bcf	3,6	;RP1=0, select bank1
  4719     0164  00C5               	movwf	_prec^(0+128)
  4720     0165  30FF               	movlw	255
  4721     0166  00C6               	movwf	(_prec^(0+128)+1)
  4722     0167                     l2525:
  4723                           
  4724                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  4725     0167  1283               	bcf	3,5	;RP0=0, select bank0
  4726     0168  1303               	bcf	3,6	;RP1=0, select bank0
  4727     0169  082B               	movf	vfpfcnvrt@fmt,w
  4728     016A  0084               	movwf	4
  4729     016B  0800               	movf	0,w
  4730     016C  00B0               	movwf	vfpfcnvrt@cp
  4731     016D                     l2527:
  4732                           
  4733                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  4734     016D  0830               	movf	vfpfcnvrt@cp,w
  4735     016E  0084               	movwf	4
  4736     016F  120A  118A  240A  120A  118A  	fcall	stringdir
  4737     0174  3A64               	xorlw	100
  4738     0175  1903               	skipnz
  4739     0176  2978               	goto	u2401
  4740     0177  2979               	goto	u2400
  4741     0178                     u2401:
  4742     0178  2985               	goto	l2531
  4743     0179                     u2400:
  4744     0179                     l2529:
  4745     0179  0830               	movf	vfpfcnvrt@cp,w
  4746     017A  0084               	movwf	4
  4747     017B  120A  118A  240A  120A  118A  	fcall	stringdir
  4748     0180  3A69               	xorlw	105
  4749     0181  1D03               	skipz
  4750     0182  2984               	goto	u2411
  4751     0183  2985               	goto	u2410
  4752     0184                     u2411:
  4753     0184  2A11               	goto	l2559
  4754     0185                     u2410:
  4755     0185                     l2531:
  4756                           
  4757                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  4758     0185  082C               	movf	vfpfcnvrt@ap,w
  4759     0186  0084               	movwf	4
  4760     0187  0800               	movf	0,w
  4761     0188  00FF               	movwf	btemp+1
  4762     0189  3002               	movlw	2
  4763     018A  0780               	addwf	0,f
  4764     018B  087F               	movf	btemp+1,w
  4765     018C  0084               	movwf	4
  4766     018D  0800               	movf	0,w
  4767     018E  00B1               	movwf	vfpfcnvrt@convarg
  4768     018F  0A84               	incf	4,f
  4769     0190  0800               	movf	0,w
  4770     0191  00B2               	movwf	vfpfcnvrt@convarg+1
  4771     0192                     l2533:
  4772                           
  4773                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  4774     0192  082B               	movf	vfpfcnvrt@fmt,w
  4775     0193  0084               	movwf	4
  4776     0194  0830               	movf	vfpfcnvrt@cp,w
  4777     0195  3E01               	addlw	1
  4778     0196  0080               	movwf	0
  4779     0197                     l2535:
  4780                           
  4781                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  4782     0197  3020               	movlw	32
  4783     0198  00B5               	movwf	vfpfcnvrt@c
  4784     0199                     l2537:
  4785                           
  4786                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  4787     0199  1BB2               	btfsc	vfpfcnvrt@convarg+1,7
  4788     019A  299C               	goto	u2421
  4789     019B  299E               	goto	u2420
  4790     019C                     u2421:
  4791     019C  3001               	movlw	1
  4792     019D  299F               	goto	u2430
  4793     019E                     u2420:
  4794     019E  3000               	movlw	0
  4795     019F                     u2430:
  4796     019F  00AF               	movwf	vfpfcnvrt@done
  4797     01A0                     l2539:
  4798                           
  4799                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  4800     01A0  3001               	movlw	1
  4801     01A1  02B5               	subwf	vfpfcnvrt@c,f
  4802     01A2  0835               	movf	vfpfcnvrt@c,w
  4803     01A3  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  4804     01A4  0084               	movwf	4
  4805     01A5  300A               	movlw	10
  4806     01A6  00F2               	movwf	___awmod@divisor
  4807     01A7  3000               	movlw	0
  4808     01A8  00F3               	movwf	___awmod@divisor+1
  4809     01A9  0832               	movf	vfpfcnvrt@convarg+1,w
  4810     01AA  00F5               	movwf	___awmod@dividend+1
  4811     01AB  0831               	movf	vfpfcnvrt@convarg,w
  4812     01AC  00F4               	movwf	___awmod@dividend
  4813     01AD  120A  118A  2672  120A  118A  	fcall	___awmod
  4814     01B2  0873               	movf	?___awmod+1,w
  4815     01B3  00F9               	movwf	abs@a+1
  4816     01B4  0872               	movf	?___awmod,w
  4817     01B5  00F8               	movwf	abs@a
  4818     01B6  120A  158A  2409  120A  118A  	fcall	_abs
  4819     01BB  0878               	movf	?_abs,w
  4820     01BC  3E30               	addlw	48
  4821     01BD  1383               	bcf	3,7	;select IRP bank1
  4822     01BE  0080               	movwf	0
  4823     01BF                     l2541:
  4824                           
  4825                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  4826     01BF  300A               	movlw	10
  4827     01C0  00F2               	movwf	___awdiv@divisor
  4828     01C1  3000               	movlw	0
  4829     01C2  00F3               	movwf	___awdiv@divisor+1
  4830     01C3  1283               	bcf	3,5	;RP0=0, select bank0
  4831     01C4  1303               	bcf	3,6	;RP1=0, select bank0
  4832     01C5  0832               	movf	vfpfcnvrt@convarg+1,w
  4833     01C6  00F5               	movwf	___awdiv@dividend+1
  4834     01C7  0831               	movf	vfpfcnvrt@convarg,w
  4835     01C8  00F4               	movwf	___awdiv@dividend
  4836     01C9  120A  118A  2552  120A  118A  	fcall	___awdiv
  4837     01CE  0873               	movf	?___awdiv+1,w
  4838     01CF  1283               	bcf	3,5	;RP0=0, select bank0
  4839     01D0  1303               	bcf	3,6	;RP1=0, select bank0
  4840     01D1  00B2               	movwf	vfpfcnvrt@convarg+1
  4841     01D2  0872               	movf	?___awdiv,w
  4842     01D3  00B1               	movwf	vfpfcnvrt@convarg
  4843     01D4                     l2543:
  4844                           
  4845                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  4846     01D4  0831               	movf	vfpfcnvrt@convarg,w
  4847     01D5  0432               	iorwf	vfpfcnvrt@convarg+1,w
  4848     01D6  1903               	btfsc	3,2
  4849     01D7  29D9               	goto	u2441
  4850     01D8  29DA               	goto	u2440
  4851     01D9                     u2441:
  4852     01D9  29DF               	goto	l2547
  4853     01DA                     u2440:
  4854     01DA                     l2545:
  4855     01DA  0835               	movf	vfpfcnvrt@c,w
  4856     01DB  1D03               	btfss	3,2
  4857     01DC  29DE               	goto	u2451
  4858     01DD  29DF               	goto	u2450
  4859     01DE                     u2451:
  4860     01DE  29A0               	goto	l2539
  4861     01DF                     u2450:
  4862     01DF                     l2547:
  4863                           
  4864                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  4865     01DF  0835               	movf	vfpfcnvrt@c,w
  4866     01E0  1903               	btfsc	3,2
  4867     01E1  29E3               	goto	u2461
  4868     01E2  29E4               	goto	u2460
  4869     01E3                     u2461:
  4870     01E3  2A0A               	goto	l2557
  4871     01E4                     u2460:
  4872     01E4                     l2549:
  4873     01E4  082F               	movf	vfpfcnvrt@done,w
  4874     01E5  1903               	btfsc	3,2
  4875     01E6  29E8               	goto	u2471
  4876     01E7  29E9               	goto	u2470
  4877     01E8                     u2471:
  4878     01E8  2A0A               	goto	l2557
  4879     01E9                     u2470:
  4880     01E9                     l2551:
  4881                           
  4882                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  4883     01E9  3001               	movlw	1
  4884     01EA  02B5               	subwf	vfpfcnvrt@c,f
  4885     01EB  0835               	movf	vfpfcnvrt@c,w
  4886     01EC  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  4887     01ED  0084               	movwf	4
  4888     01EE  302D               	movlw	45
  4889     01EF  1383               	bcf	3,7	;select IRP bank1
  4890     01F0  0080               	movwf	0
  4891     01F1  2A0A               	goto	l2557
  4892     01F2                     l2553:
  4893                           
  4894                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  4895     01F2  0835               	movf	vfpfcnvrt@c,w
  4896     01F3  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  4897     01F4  0084               	movwf	4
  4898     01F5  1383               	bcf	3,7	;select IRP bank1
  4899     01F6  0800               	movf	0,w
  4900     01F7  00AD               	movwf	??_vfpfcnvrt
  4901     01F8  01AE               	clrf	??_vfpfcnvrt+1
  4902     01F9  082D               	movf	??_vfpfcnvrt,w
  4903     01FA  00F2               	movwf	fputc@c
  4904     01FB  082E               	movf	??_vfpfcnvrt+1,w
  4905     01FC  00F3               	movwf	fputc@c+1
  4906     01FD  0829               	movf	vfpfcnvrt@fp,w
  4907     01FE  00F4               	movwf	fputc@fp
  4908     01FF  082A               	movf	vfpfcnvrt@fp+1,w
  4909     0200  00F5               	movwf	fputc@fp+1
  4910     0201  120A  118A  2233  120A  118A  	fcall	_fputc
  4911     0206                     l2555:
  4912     0206  3001               	movlw	1
  4913     0207  1283               	bcf	3,5	;RP0=0, select bank0
  4914     0208  1303               	bcf	3,6	;RP1=0, select bank0
  4915     0209  07B5               	addwf	vfpfcnvrt@c,f
  4916     020A                     l2557:
  4917                           
  4918                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  4919     020A  3020               	movlw	32
  4920     020B  0635               	xorwf	vfpfcnvrt@c,w
  4921     020C  1D03               	btfss	3,2
  4922     020D  2A0F               	goto	u2481
  4923     020E  2A10               	goto	u2480
  4924     020F                     u2481:
  4925     020F  29F2               	goto	l2553
  4926     0210                     u2480:
  4927     0210  2A32               	goto	l973
  4928     0211                     l2559:
  4929                           
  4930                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  4931     0211  1283               	bcf	3,5	;RP0=0, select bank0
  4932     0212  1303               	bcf	3,6	;RP1=0, select bank0
  4933     0213  082B               	movf	vfpfcnvrt@fmt,w
  4934     0214  0084               	movwf	4
  4935     0215  3001               	movlw	1
  4936     0216  1383               	bcf	3,7	;select IRP bank0
  4937     0217  0780               	addwf	0,f
  4938     0218  2A32               	goto	l973
  4939     0219                     l2563:
  4940                           
  4941                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  4942     0219  082B               	movf	vfpfcnvrt@fmt,w
  4943     021A  0084               	movwf	4
  4944     021B  0800               	movf	0,w
  4945     021C  0084               	movwf	4
  4946     021D  120A  118A  240A  120A  118A  	fcall	stringdir
  4947     0222  00AD               	movwf	??_vfpfcnvrt
  4948     0223  01AE               	clrf	??_vfpfcnvrt+1
  4949     0224  082D               	movf	??_vfpfcnvrt,w
  4950     0225  00F2               	movwf	fputc@c
  4951     0226  082E               	movf	??_vfpfcnvrt+1,w
  4952     0227  00F3               	movwf	fputc@c+1
  4953     0228  0829               	movf	vfpfcnvrt@fp,w
  4954     0229  00F4               	movwf	fputc@fp
  4955     022A  082A               	movf	vfpfcnvrt@fp+1,w
  4956     022B  00F5               	movwf	fputc@fp+1
  4957     022C  120A  118A  2233  120A  118A  	fcall	_fputc
  4958     0231  2A11               	goto	l2559
  4959     0232                     l973:
  4960     0232  0008               	return
  4961     0233                     __end_of_vfpfcnvrt:
  4962                           
  4963                           	psect	text30
  4964     0233                     __ptext30:	
  4965 ;; *************** function _fputc *****************
  4966 ;; Defined at:
  4967 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_fputc.c"
  4968 ;; Parameters:    Size  Location     Type
  4969 ;;  c               2    2[COMMON] int 
  4970 ;;  fp              2    4[COMMON] PTR struct _IO_FILE
  4971 ;;		 -> sprintf@f(11), 
  4972 ;; Auto vars:     Size  Location     Type
  4973 ;;		None
  4974 ;; Return value:  Size  Location     Type
  4975 ;;                  2    2[COMMON] int 
  4976 ;; Registers used:
  4977 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4978 ;; Tracked objects:
  4979 ;;		On entry : 0/0
  4980 ;;		On exit  : 0/0
  4981 ;;		Unchanged: 0/0
  4982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4983 ;;      Params:         4       0       0       0       0
  4984 ;;      Locals:         0       0       0       0       0
  4985 ;;      Temps:          0       9       0       0       0
  4986 ;;      Totals:         4       9       0       0       0
  4987 ;;Total ram usage:       13 bytes
  4988 ;; Hardware stack levels used: 1
  4989 ;; Hardware stack levels required when called: 2
  4990 ;; This function calls:
  4991 ;;		_putch
  4992 ;; This function is called by:
  4993 ;;		_vfpfcnvrt
  4994 ;; This function uses a non-reentrant model
  4995 ;;
  4996                           
  4997     0233                     _fputc:	
  4998                           ;psect for function _fputc
  4999                           
  5000     0233                     l1773:	
  5001                           ;incstack = 0
  5002                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5003                           
  5004     0233  0874               	movf	fputc@fp,w
  5005     0234  0475               	iorwf	fputc@fp+1,w
  5006     0235  1903               	btfsc	3,2
  5007     0236  2A38               	goto	u1271
  5008     0237  2A39               	goto	u1270
  5009     0238                     u1271:
  5010     0238  2A3F               	goto	l1777
  5011     0239                     u1270:
  5012     0239                     l1775:
  5013     0239  0874               	movf	fputc@fp,w
  5014     023A  0475               	iorwf	fputc@fp+1,w
  5015     023B  1D03               	btfss	3,2
  5016     023C  2A3E               	goto	u1281
  5017     023D  2A3F               	goto	u1280
  5018     023E                     u1281:
  5019     023E  2A46               	goto	l1779
  5020     023F                     u1280:
  5021     023F                     l1777:
  5022     023F  0872               	movf	fputc@c,w
  5023     0240  120A  158A  2373  120A  118A  	fcall	_putch
  5024     0245  2AD2               	goto	l998
  5025     0246                     l1779:
  5026     0246  0874               	movf	fputc@fp,w
  5027     0247  3E09               	addlw	9
  5028     0248  1283               	bcf	3,5	;RP0=0, select bank0
  5029     0249  1303               	bcf	3,6	;RP1=0, select bank0
  5030     024A  00A0               	movwf	??_fputc
  5031     024B  0875               	movf	fputc@fp+1,w
  5032     024C  1803               	skipnc
  5033     024D  3E01               	addlw	1
  5034     024E  3E00               	addlw	0
  5035     024F  00A1               	movwf	??_fputc+1
  5036     0250  0820               	movf	??_fputc,w
  5037     0251  0084               	movwf	4
  5038     0252  1783               	bsf	3,7
  5039     0253  1C21               	btfss	??_fputc+1,0
  5040     0254  1383               	bcf	3,7
  5041     0255  0800               	movf	0,w
  5042     0256  00A2               	movwf	??_fputc+2
  5043     0257  0A84               	incf	4,f
  5044     0258  0800               	movf	0,w
  5045     0259  00A3               	movwf	??_fputc+3
  5046     025A  0822               	movf	??_fputc+2,w
  5047     025B  0423               	iorwf	??_fputc+3,w
  5048     025C  1903               	btfsc	3,2
  5049     025D  2A5F               	goto	u1291
  5050     025E  2A60               	goto	u1290
  5051     025F                     u1291:
  5052     025F  2A92               	goto	l1783
  5053     0260                     u1290:
  5054     0260                     l1781:
  5055     0260  0874               	movf	fputc@fp,w
  5056     0261  3E09               	addlw	9
  5057     0262  00A0               	movwf	??_fputc
  5058     0263  0875               	movf	fputc@fp+1,w
  5059     0264  1803               	skipnc
  5060     0265  3E01               	addlw	1
  5061     0266  3E00               	addlw	0
  5062     0267  00A1               	movwf	??_fputc+1
  5063     0268  0820               	movf	??_fputc,w
  5064     0269  0084               	movwf	4
  5065     026A  1783               	bsf	3,7
  5066     026B  1C21               	btfss	??_fputc+1,0
  5067     026C  1383               	bcf	3,7
  5068     026D  0800               	movf	0,w
  5069     026E  00A2               	movwf	??_fputc+2
  5070     026F  0A84               	incf	4,f
  5071     0270  0800               	movf	0,w
  5072     0271  00A3               	movwf	??_fputc+3
  5073     0272  0874               	movf	fputc@fp,w
  5074     0273  3E02               	addlw	2
  5075     0274  00A4               	movwf	??_fputc+4
  5076     0275  0875               	movf	fputc@fp+1,w
  5077     0276  1803               	skipnc
  5078     0277  3E01               	addlw	1
  5079     0278  3E00               	addlw	0
  5080     0279  00A5               	movwf	??_fputc+5
  5081     027A  0824               	movf	??_fputc+4,w
  5082     027B  0084               	movwf	4
  5083     027C  1783               	bsf	3,7
  5084     027D  1C25               	btfss	??_fputc+5,0
  5085     027E  1383               	bcf	3,7
  5086     027F  0800               	movf	0,w
  5087     0280  00A6               	movwf	??_fputc+6
  5088     0281  0A84               	incf	4,f
  5089     0282  0800               	movf	0,w
  5090     0283  00A7               	movwf	??_fputc+7
  5091     0284  0827               	movf	??_fputc+7,w
  5092     0285  3A80               	xorlw	128
  5093     0286  00A8               	movwf	??_fputc+8
  5094     0287  0823               	movf	??_fputc+3,w
  5095     0288  3A80               	xorlw	128
  5096     0289  0228               	subwf	??_fputc+8,w
  5097     028A  1D03               	skipz
  5098     028B  2A8E               	goto	u1305
  5099     028C  0822               	movf	??_fputc+2,w
  5100     028D  0226               	subwf	??_fputc+6,w
  5101     028E                     u1305:
  5102     028E  1803               	skipnc
  5103     028F  2A91               	goto	u1301
  5104     0290  2A92               	goto	u1300
  5105     0291                     u1301:
  5106     0291  2AD2               	goto	l998
  5107     0292                     u1300:
  5108     0292                     l1783:
  5109     0292  0874               	movf	fputc@fp,w
  5110     0293  0084               	movwf	4
  5111     0294  1783               	bsf	3,7
  5112     0295  1C75               	btfss	fputc@fp+1,0
  5113     0296  1383               	bcf	3,7
  5114     0297  0800               	movf	0,w
  5115     0298  1283               	bcf	3,5	;RP0=0, select bank0
  5116     0299  1303               	bcf	3,6	;RP1=0, select bank0
  5117     029A  00A0               	movwf	??_fputc
  5118     029B  0A84               	incf	4,f
  5119     029C  0800               	movf	0,w
  5120     029D  00A1               	movwf	??_fputc+1
  5121     029E  0874               	movf	fputc@fp,w
  5122     029F  3E02               	addlw	2
  5123     02A0  00A2               	movwf	??_fputc+2
  5124     02A1  0875               	movf	fputc@fp+1,w
  5125     02A2  1803               	skipnc
  5126     02A3  3E01               	addlw	1
  5127     02A4  3E00               	addlw	0
  5128     02A5  00A3               	movwf	??_fputc+3
  5129     02A6  0822               	movf	??_fputc+2,w
  5130     02A7  0084               	movwf	4
  5131     02A8  1783               	bsf	3,7
  5132     02A9  1C23               	btfss	??_fputc+3,0
  5133     02AA  1383               	bcf	3,7
  5134     02AB  0800               	movf	0,w
  5135     02AC  0720               	addwf	??_fputc,w
  5136     02AD  00A5               	movwf	??_fputc+5
  5137     02AE  0821               	movf	??_fputc+1,w
  5138     02AF  00A4               	movwf	??_fputc+4
  5139     02B0  1803               	skipnc
  5140     02B1  0AA4               	incf	??_fputc+4,f
  5141     02B2  1F80               	btfss	0,7
  5142     02B3  2AB5               	goto	u1310
  5143     02B4  03A4               	decf	??_fputc+4,f
  5144     02B5                     u1310:
  5145     02B5  1283               	bcf	3,5	;RP0=0, select bank0
  5146     02B6  1303               	bcf	3,6	;RP1=0, select bank0
  5147     02B7  0824               	movf	??_fputc+4,w
  5148     02B8  00A6               	movwf	??_fputc+6
  5149     02B9  0825               	movf	??_fputc+5,w
  5150     02BA  0084               	movwf	4
  5151     02BB  1783               	bsf	3,7
  5152     02BC  1C26               	btfss	??_fputc+6,0
  5153     02BD  1383               	bcf	3,7
  5154     02BE  0872               	movf	fputc@c,w
  5155     02BF  0080               	movwf	0
  5156     02C0  0874               	movf	fputc@fp,w
  5157     02C1  3E02               	addlw	2
  5158     02C2  00A0               	movwf	??_fputc
  5159     02C3  0875               	movf	fputc@fp+1,w
  5160     02C4  1803               	skipnc
  5161     02C5  3E01               	addlw	1
  5162     02C6  3E00               	addlw	0
  5163     02C7  00A1               	movwf	??_fputc+1
  5164     02C8  0820               	movf	??_fputc,w
  5165     02C9  0084               	movwf	4
  5166     02CA  1783               	bsf	3,7
  5167     02CB  1C21               	btfss	??_fputc+1,0
  5168     02CC  1383               	bcf	3,7
  5169     02CD  3001               	movlw	1
  5170     02CE  0780               	addwf	0,f
  5171     02CF  0A84               	incf	4,f
  5172     02D0  1803               	skipnc
  5173     02D1  0A80               	incf	0,f
  5174     02D2                     l998:
  5175     02D2  0008               	return
  5176     02D3                     __end_of_fputc:
  5177                           
  5178                           	psect	text31
  5179     0B73                     __ptext31:	
  5180 ;; *************** function _putch *****************
  5181 ;; Defined at:
  5182 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\putch.c"
  5183 ;; Parameters:    Size  Location     Type
  5184 ;;  c               1    wreg     unsigned char 
  5185 ;; Auto vars:     Size  Location     Type
  5186 ;;  c               1    0[COMMON] unsigned char 
  5187 ;; Return value:  Size  Location     Type
  5188 ;;                  1    wreg      void 
  5189 ;; Registers used:
  5190 ;;		wreg
  5191 ;; Tracked objects:
  5192 ;;		On entry : 0/0
  5193 ;;		On exit  : 0/0
  5194 ;;		Unchanged: 0/0
  5195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5196 ;;      Params:         0       0       0       0       0
  5197 ;;      Locals:         0       0       0       0       0
  5198 ;;      Temps:          0       0       0       0       0
  5199 ;;      Totals:         0       0       0       0       0
  5200 ;;Total ram usage:        0 bytes
  5201 ;; Hardware stack levels used: 1
  5202 ;; Hardware stack levels required when called: 1
  5203 ;; This function calls:
  5204 ;;		Nothing
  5205 ;; This function is called by:
  5206 ;;		_fputc
  5207 ;; This function uses a non-reentrant model
  5208 ;;
  5209                           
  5210     0B73                     _putch:	
  5211                           ;psect for function _putch
  5212                           
  5213     0B73                     l1009:	
  5214                           ;incstack = 0
  5215                           ; Regs used in _putch: [wreg]
  5216                           
  5217     0B73  0008               	return
  5218     0B74                     __end_of_putch:
  5219                           
  5220                           	psect	text32
  5221     0C09                     __ptext32:	
  5222 ;; *************** function _abs *****************
  5223 ;; Defined at:
  5224 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\abs.c"
  5225 ;; Parameters:    Size  Location     Type
  5226 ;;  a               2    8[COMMON] int 
  5227 ;; Auto vars:     Size  Location     Type
  5228 ;;		None
  5229 ;; Return value:  Size  Location     Type
  5230 ;;                  2    8[COMMON] int 
  5231 ;; Registers used:
  5232 ;;		wreg, status,2, status,0
  5233 ;; Tracked objects:
  5234 ;;		On entry : 0/0
  5235 ;;		On exit  : 0/0
  5236 ;;		Unchanged: 0/0
  5237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5238 ;;      Params:         2       0       0       0       0
  5239 ;;      Locals:         0       0       0       0       0
  5240 ;;      Temps:          0       2       0       0       0
  5241 ;;      Totals:         2       2       0       0       0
  5242 ;;Total ram usage:        4 bytes
  5243 ;; Hardware stack levels used: 1
  5244 ;; Hardware stack levels required when called: 1
  5245 ;; This function calls:
  5246 ;;		Nothing
  5247 ;; This function is called by:
  5248 ;;		_vfpfcnvrt
  5249 ;; This function uses a non-reentrant model
  5250 ;;
  5251                           
  5252     0C09                     _abs:	
  5253                           ;psect for function _abs
  5254                           
  5255     0C09                     l2421:	
  5256                           ;incstack = 0
  5257                           ; Regs used in _abs: [wreg+status,2+status,0]
  5258                           
  5259     0C09  1BF9               	btfsc	abs@a+1,7
  5260     0C0A  2C0C               	goto	u2221
  5261     0C0B  2C0D               	goto	u2220
  5262     0C0C                     u2221:
  5263     0C0C  2C0E               	goto	l2425
  5264     0C0D                     u2220:
  5265     0C0D                     l2423:
  5266     0C0D  2C1B               	goto	l986
  5267     0C0E                     l2425:
  5268     0C0E  0978               	comf	abs@a,w
  5269     0C0F  1283               	bcf	3,5	;RP0=0, select bank0
  5270     0C10  1303               	bcf	3,6	;RP1=0, select bank0
  5271     0C11  00A0               	movwf	??_abs
  5272     0C12  0979               	comf	abs@a+1,w
  5273     0C13  00A1               	movwf	??_abs+1
  5274     0C14  0AA0               	incf	??_abs,f
  5275     0C15  1903               	skipnz
  5276     0C16  0AA1               	incf	??_abs+1,f
  5277     0C17  0820               	movf	??_abs,w
  5278     0C18  00F8               	movwf	?_abs
  5279     0C19  0821               	movf	??_abs+1,w
  5280     0C1A  00F9               	movwf	?_abs+1
  5281     0C1B                     l986:
  5282     0C1B  0008               	return
  5283     0C1C                     __end_of_abs:
  5284                           
  5285                           	psect	text33
  5286     0672                     __ptext33:	
  5287 ;; *************** function ___awmod *****************
  5288 ;; Defined at:
  5289 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awmod.c"
  5290 ;; Parameters:    Size  Location     Type
  5291 ;;  divisor         2    2[COMMON] int 
  5292 ;;  dividend        2    4[COMMON] int 
  5293 ;; Auto vars:     Size  Location     Type
  5294 ;;  sign            1    7[COMMON] unsigned char 
  5295 ;;  counter         1    6[COMMON] unsigned char 
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  2    2[COMMON] int 
  5298 ;; Registers used:
  5299 ;;		wreg, status,2, status,0
  5300 ;; Tracked objects:
  5301 ;;		On entry : 0/0
  5302 ;;		On exit  : 0/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5305 ;;      Params:         4       0       0       0       0
  5306 ;;      Locals:         2       0       0       0       0
  5307 ;;      Temps:          0       0       0       0       0
  5308 ;;      Totals:         6       0       0       0       0
  5309 ;;Total ram usage:        6 bytes
  5310 ;; Hardware stack levels used: 1
  5311 ;; Hardware stack levels required when called: 1
  5312 ;; This function calls:
  5313 ;;		Nothing
  5314 ;; This function is called by:
  5315 ;;		_vfpfcnvrt
  5316 ;; This function uses a non-reentrant model
  5317 ;;
  5318                           
  5319     0672                     ___awmod:	
  5320                           ;psect for function ___awmod
  5321                           
  5322     0672                     l1735:	
  5323                           ;incstack = 0
  5324                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5325                           
  5326     0672  01F7               	clrf	___awmod@sign
  5327     0673                     l1737:
  5328     0673  1FF5               	btfss	___awmod@dividend+1,7
  5329     0674  2E76               	goto	u1181
  5330     0675  2E77               	goto	u1180
  5331     0676                     u1181:
  5332     0676  2E7E               	goto	l1743
  5333     0677                     u1180:
  5334     0677                     l1739:
  5335     0677  09F4               	comf	___awmod@dividend,f
  5336     0678  09F5               	comf	___awmod@dividend+1,f
  5337     0679  0AF4               	incf	___awmod@dividend,f
  5338     067A  1903               	skipnz
  5339     067B  0AF5               	incf	___awmod@dividend+1,f
  5340     067C                     l1741:
  5341     067C  3001               	movlw	1
  5342     067D  00F7               	movwf	___awmod@sign
  5343     067E                     l1743:
  5344     067E  1FF3               	btfss	___awmod@divisor+1,7
  5345     067F  2E81               	goto	u1191
  5346     0680  2E82               	goto	u1190
  5347     0681                     u1191:
  5348     0681  2E87               	goto	l1747
  5349     0682                     u1190:
  5350     0682                     l1745:
  5351     0682  09F2               	comf	___awmod@divisor,f
  5352     0683  09F3               	comf	___awmod@divisor+1,f
  5353     0684  0AF2               	incf	___awmod@divisor,f
  5354     0685  1903               	skipnz
  5355     0686  0AF3               	incf	___awmod@divisor+1,f
  5356     0687                     l1747:
  5357     0687  0872               	movf	___awmod@divisor,w
  5358     0688  0473               	iorwf	___awmod@divisor+1,w
  5359     0689  1903               	btfsc	3,2
  5360     068A  2E8C               	goto	u1201
  5361     068B  2E8D               	goto	u1200
  5362     068C                     u1201:
  5363     068C  2EBA               	goto	l1765
  5364     068D                     u1200:
  5365     068D                     l1749:
  5366     068D  3001               	movlw	1
  5367     068E  00F6               	movwf	___awmod@counter
  5368     068F  2E99               	goto	l1755
  5369     0690                     l1751:
  5370     0690  3001               	movlw	1
  5371     0691                     u1215:
  5372     0691  1003               	clrc
  5373     0692  0DF2               	rlf	___awmod@divisor,f
  5374     0693  0DF3               	rlf	___awmod@divisor+1,f
  5375     0694  3EFF               	addlw	-1
  5376     0695  1D03               	skipz
  5377     0696  2E91               	goto	u1215
  5378     0697                     l1753:
  5379     0697  3001               	movlw	1
  5380     0698  07F6               	addwf	___awmod@counter,f
  5381     0699                     l1755:
  5382     0699  1FF3               	btfss	___awmod@divisor+1,7
  5383     069A  2E9C               	goto	u1221
  5384     069B  2E9D               	goto	u1220
  5385     069C                     u1221:
  5386     069C  2E90               	goto	l1751
  5387     069D                     u1220:
  5388     069D                     l1757:
  5389     069D  0873               	movf	___awmod@divisor+1,w
  5390     069E  0275               	subwf	___awmod@dividend+1,w
  5391     069F  1D03               	skipz
  5392     06A0  2EA3               	goto	u1235
  5393     06A1  0872               	movf	___awmod@divisor,w
  5394     06A2  0274               	subwf	___awmod@dividend,w
  5395     06A3                     u1235:
  5396     06A3  1C03               	skipc
  5397     06A4  2EA6               	goto	u1231
  5398     06A5  2EA7               	goto	u1230
  5399     06A6                     u1231:
  5400     06A6  2EAD               	goto	l1761
  5401     06A7                     u1230:
  5402     06A7                     l1759:
  5403     06A7  0872               	movf	___awmod@divisor,w
  5404     06A8  02F4               	subwf	___awmod@dividend,f
  5405     06A9  0873               	movf	___awmod@divisor+1,w
  5406     06AA  1C03               	skipc
  5407     06AB  03F5               	decf	___awmod@dividend+1,f
  5408     06AC  02F5               	subwf	___awmod@dividend+1,f
  5409     06AD                     l1761:
  5410     06AD  3001               	movlw	1
  5411     06AE                     u1245:
  5412     06AE  1003               	clrc
  5413     06AF  0CF3               	rrf	___awmod@divisor+1,f
  5414     06B0  0CF2               	rrf	___awmod@divisor,f
  5415     06B1  3EFF               	addlw	-1
  5416     06B2  1D03               	skipz
  5417     06B3  2EAE               	goto	u1245
  5418     06B4                     l1763:
  5419     06B4  3001               	movlw	1
  5420     06B5  02F6               	subwf	___awmod@counter,f
  5421     06B6  1D03               	btfss	3,2
  5422     06B7  2EB9               	goto	u1251
  5423     06B8  2EBA               	goto	u1250
  5424     06B9                     u1251:
  5425     06B9  2E9D               	goto	l1757
  5426     06BA                     u1250:
  5427     06BA                     l1765:
  5428     06BA  0877               	movf	___awmod@sign,w
  5429     06BB  1903               	btfsc	3,2
  5430     06BC  2EBE               	goto	u1261
  5431     06BD  2EBF               	goto	u1260
  5432     06BE                     u1261:
  5433     06BE  2EC4               	goto	l1769
  5434     06BF                     u1260:
  5435     06BF                     l1767:
  5436     06BF  09F4               	comf	___awmod@dividend,f
  5437     06C0  09F5               	comf	___awmod@dividend+1,f
  5438     06C1  0AF4               	incf	___awmod@dividend,f
  5439     06C2  1903               	skipnz
  5440     06C3  0AF5               	incf	___awmod@dividend+1,f
  5441     06C4                     l1769:
  5442     06C4  0875               	movf	___awmod@dividend+1,w
  5443     06C5  00F3               	movwf	?___awmod+1
  5444     06C6  0874               	movf	___awmod@dividend,w
  5445     06C7  00F2               	movwf	?___awmod
  5446     06C8                     l638:
  5447     06C8  0008               	return
  5448     06C9                     __end_of___awmod:
  5449                           
  5450                           	psect	text34
  5451     0552                     __ptext34:	
  5452 ;; *************** function ___awdiv *****************
  5453 ;; Defined at:
  5454 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awdiv.c"
  5455 ;; Parameters:    Size  Location     Type
  5456 ;;  divisor         2    2[COMMON] int 
  5457 ;;  dividend        2    4[COMMON] int 
  5458 ;; Auto vars:     Size  Location     Type
  5459 ;;  quotient        2    8[COMMON] int 
  5460 ;;  sign            1    7[COMMON] unsigned char 
  5461 ;;  counter         1    6[COMMON] unsigned char 
  5462 ;; Return value:  Size  Location     Type
  5463 ;;                  2    2[COMMON] int 
  5464 ;; Registers used:
  5465 ;;		wreg, status,2, status,0
  5466 ;; Tracked objects:
  5467 ;;		On entry : 0/0
  5468 ;;		On exit  : 0/0
  5469 ;;		Unchanged: 0/0
  5470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5471 ;;      Params:         4       0       0       0       0
  5472 ;;      Locals:         4       0       0       0       0
  5473 ;;      Temps:          0       0       0       0       0
  5474 ;;      Totals:         8       0       0       0       0
  5475 ;;Total ram usage:        8 bytes
  5476 ;; Hardware stack levels used: 1
  5477 ;; Hardware stack levels required when called: 1
  5478 ;; This function calls:
  5479 ;;		Nothing
  5480 ;; This function is called by:
  5481 ;;		_vfpfcnvrt
  5482 ;; This function uses a non-reentrant model
  5483 ;;
  5484                           
  5485     0552                     ___awdiv:	
  5486                           ;psect for function ___awdiv
  5487                           
  5488     0552                     l1691:	
  5489                           ;incstack = 0
  5490                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5491                           
  5492     0552  01F7               	clrf	___awdiv@sign
  5493     0553                     l1693:
  5494     0553  1FF3               	btfss	___awdiv@divisor+1,7
  5495     0554  2D56               	goto	u1081
  5496     0555  2D57               	goto	u1080
  5497     0556                     u1081:
  5498     0556  2D5E               	goto	l1699
  5499     0557                     u1080:
  5500     0557                     l1695:
  5501     0557  09F2               	comf	___awdiv@divisor,f
  5502     0558  09F3               	comf	___awdiv@divisor+1,f
  5503     0559  0AF2               	incf	___awdiv@divisor,f
  5504     055A  1903               	skipnz
  5505     055B  0AF3               	incf	___awdiv@divisor+1,f
  5506     055C                     l1697:
  5507     055C  3001               	movlw	1
  5508     055D  00F7               	movwf	___awdiv@sign
  5509     055E                     l1699:
  5510     055E  1FF5               	btfss	___awdiv@dividend+1,7
  5511     055F  2D61               	goto	u1091
  5512     0560  2D62               	goto	u1090
  5513     0561                     u1091:
  5514     0561  2D69               	goto	l1705
  5515     0562                     u1090:
  5516     0562                     l1701:
  5517     0562  09F4               	comf	___awdiv@dividend,f
  5518     0563  09F5               	comf	___awdiv@dividend+1,f
  5519     0564  0AF4               	incf	___awdiv@dividend,f
  5520     0565  1903               	skipnz
  5521     0566  0AF5               	incf	___awdiv@dividend+1,f
  5522     0567                     l1703:
  5523     0567  3001               	movlw	1
  5524     0568  06F7               	xorwf	___awdiv@sign,f
  5525     0569                     l1705:
  5526     0569  01F8               	clrf	___awdiv@quotient
  5527     056A  01F9               	clrf	___awdiv@quotient+1
  5528     056B                     l1707:
  5529     056B  0872               	movf	___awdiv@divisor,w
  5530     056C  0473               	iorwf	___awdiv@divisor+1,w
  5531     056D  1903               	btfsc	3,2
  5532     056E  2D70               	goto	u1101
  5533     056F  2D71               	goto	u1100
  5534     0570                     u1101:
  5535     0570  2DA6               	goto	l1727
  5536     0571                     u1100:
  5537     0571                     l1709:
  5538     0571  3001               	movlw	1
  5539     0572  00F6               	movwf	___awdiv@counter
  5540     0573  2D7D               	goto	l1715
  5541     0574                     l1711:
  5542     0574  3001               	movlw	1
  5543     0575                     u1115:
  5544     0575  1003               	clrc
  5545     0576  0DF2               	rlf	___awdiv@divisor,f
  5546     0577  0DF3               	rlf	___awdiv@divisor+1,f
  5547     0578  3EFF               	addlw	-1
  5548     0579  1D03               	skipz
  5549     057A  2D75               	goto	u1115
  5550     057B                     l1713:
  5551     057B  3001               	movlw	1
  5552     057C  07F6               	addwf	___awdiv@counter,f
  5553     057D                     l1715:
  5554     057D  1FF3               	btfss	___awdiv@divisor+1,7
  5555     057E  2D80               	goto	u1121
  5556     057F  2D81               	goto	u1120
  5557     0580                     u1121:
  5558     0580  2D74               	goto	l1711
  5559     0581                     u1120:
  5560     0581                     l1717:
  5561     0581  3001               	movlw	1
  5562     0582                     u1135:
  5563     0582  1003               	clrc
  5564     0583  0DF8               	rlf	___awdiv@quotient,f
  5565     0584  0DF9               	rlf	___awdiv@quotient+1,f
  5566     0585  3EFF               	addlw	-1
  5567     0586  1D03               	skipz
  5568     0587  2D82               	goto	u1135
  5569     0588  0873               	movf	___awdiv@divisor+1,w
  5570     0589  0275               	subwf	___awdiv@dividend+1,w
  5571     058A  1D03               	skipz
  5572     058B  2D8E               	goto	u1145
  5573     058C  0872               	movf	___awdiv@divisor,w
  5574     058D  0274               	subwf	___awdiv@dividend,w
  5575     058E                     u1145:
  5576     058E  1C03               	skipc
  5577     058F  2D91               	goto	u1141
  5578     0590  2D92               	goto	u1140
  5579     0591                     u1141:
  5580     0591  2D99               	goto	l1723
  5581     0592                     u1140:
  5582     0592                     l1719:
  5583     0592  0872               	movf	___awdiv@divisor,w
  5584     0593  02F4               	subwf	___awdiv@dividend,f
  5585     0594  0873               	movf	___awdiv@divisor+1,w
  5586     0595  1C03               	skipc
  5587     0596  03F5               	decf	___awdiv@dividend+1,f
  5588     0597  02F5               	subwf	___awdiv@dividend+1,f
  5589     0598                     l1721:
  5590     0598  1478               	bsf	___awdiv@quotient,0
  5591     0599                     l1723:
  5592     0599  3001               	movlw	1
  5593     059A                     u1155:
  5594     059A  1003               	clrc
  5595     059B  0CF3               	rrf	___awdiv@divisor+1,f
  5596     059C  0CF2               	rrf	___awdiv@divisor,f
  5597     059D  3EFF               	addlw	-1
  5598     059E  1D03               	skipz
  5599     059F  2D9A               	goto	u1155
  5600     05A0                     l1725:
  5601     05A0  3001               	movlw	1
  5602     05A1  02F6               	subwf	___awdiv@counter,f
  5603     05A2  1D03               	btfss	3,2
  5604     05A3  2DA5               	goto	u1161
  5605     05A4  2DA6               	goto	u1160
  5606     05A5                     u1161:
  5607     05A5  2D81               	goto	l1717
  5608     05A6                     u1160:
  5609     05A6                     l1727:
  5610     05A6  0877               	movf	___awdiv@sign,w
  5611     05A7  1903               	btfsc	3,2
  5612     05A8  2DAA               	goto	u1171
  5613     05A9  2DAB               	goto	u1170
  5614     05AA                     u1171:
  5615     05AA  2DB0               	goto	l1731
  5616     05AB                     u1170:
  5617     05AB                     l1729:
  5618     05AB  09F8               	comf	___awdiv@quotient,f
  5619     05AC  09F9               	comf	___awdiv@quotient+1,f
  5620     05AD  0AF8               	incf	___awdiv@quotient,f
  5621     05AE  1903               	skipnz
  5622     05AF  0AF9               	incf	___awdiv@quotient+1,f
  5623     05B0                     l1731:
  5624     05B0  0879               	movf	___awdiv@quotient+1,w
  5625     05B1  00F3               	movwf	?___awdiv+1
  5626     05B2  0878               	movf	___awdiv@quotient,w
  5627     05B3  00F2               	movwf	?___awdiv
  5628     05B4                     l625:
  5629     05B4  0008               	return
  5630     05B5                     __end_of___awdiv:
  5631                           
  5632                           	psect	text35
  5633     0FBA                     __ptext35:	
  5634 ;; *************** function _print_Irrigation *****************
  5635 ;; Defined at:
  5636 ;;		line 83 in file "./lcdFunctions.h"
  5637 ;; Parameters:    Size  Location     Type
  5638 ;;		None
  5639 ;; Auto vars:     Size  Location     Type
  5640 ;;		None
  5641 ;; Return value:  Size  Location     Type
  5642 ;;                  1    wreg      void 
  5643 ;; Registers used:
  5644 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5645 ;; Tracked objects:
  5646 ;;		On entry : 0/0
  5647 ;;		On exit  : 0/0
  5648 ;;		Unchanged: 0/0
  5649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5650 ;;      Params:         0       0       0       0       0
  5651 ;;      Locals:         0       0       0       0       0
  5652 ;;      Temps:          0       0       0       0       0
  5653 ;;      Totals:         0       0       0       0       0
  5654 ;;Total ram usage:        0 bytes
  5655 ;; Hardware stack levels used: 1
  5656 ;; Hardware stack levels required when called: 5
  5657 ;; This function calls:
  5658 ;;		_Lcd_Clear
  5659 ;;		_Lcd_Set_Cursor
  5660 ;;		_Lcd_Write_String
  5661 ;;		_draw_Index
  5662 ;; This function is called by:
  5663 ;;		_lcd_run
  5664 ;; This function uses a non-reentrant model
  5665 ;;
  5666                           
  5667     0FBA                     _print_Irrigation:	
  5668                           ;psect for function _print_Irrigation
  5669                           
  5670     0FBA                     l2677:	
  5671                           ;incstack = 0
  5672                           ; Regs used in _print_Irrigation: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5673                           
  5674                           
  5675                           ;./lcdFunctions.h: 86:   if(irrigationState == lastIrrigationState && lcd_lastIndex == l
      +                          cd_index)
  5676     0FBA  1283               	bcf	3,5	;RP0=0, select bank0
  5677     0FBB  1303               	bcf	3,6	;RP1=0, select bank0
  5678     0FBC  086D               	movf	_irrigationState,w
  5679     0FBD  066C               	xorwf	_lastIrrigationState,w
  5680     0FBE  1D03               	skipz
  5681     0FBF  2FC1               	goto	u2641
  5682     0FC0  2FC2               	goto	u2640
  5683     0FC1                     u2641:
  5684     0FC1  2FC9               	goto	l2683
  5685     0FC2                     u2640:
  5686     0FC2                     l2679:
  5687     0FC2  0865               	movf	_lcd_lastIndex,w
  5688     0FC3  066A               	xorwf	_lcd_index,w
  5689     0FC4  1D03               	skipz
  5690     0FC5  2FC7               	goto	u2651
  5691     0FC6  2FC8               	goto	u2650
  5692     0FC7                     u2651:
  5693     0FC7  2FC9               	goto	l2683
  5694     0FC8                     u2650:
  5695     0FC8  2FFF               	goto	l200
  5696     0FC9                     l2683:
  5697                           
  5698                           ;./lcdFunctions.h: 89:   lastIrrigationState = irrigationState;
  5699     0FC9  086D               	movf	_irrigationState,w
  5700     0FCA  00EC               	movwf	_lastIrrigationState
  5701     0FCB                     l2685:
  5702                           
  5703                           ;./lcdFunctions.h: 91:   Lcd_Clear();
  5704     0FCB  120A  158A  23B4  120A  158A  	fcall	_Lcd_Clear
  5705     0FD0                     l2687:
  5706                           
  5707                           ;./lcdFunctions.h: 93:   Lcd_Set_Cursor(1,2);
  5708     0FD0  3002               	movlw	2
  5709     0FD1  00F6               	movwf	Lcd_Set_Cursor@b
  5710     0FD2  3001               	movlw	1
  5711     0FD3  120A  118A  2718  120A  158A  	fcall	_Lcd_Set_Cursor
  5712     0FD8                     l2689:
  5713                           
  5714                           ;./lcdFunctions.h: 94:   Lcd_Write_String("IRRIGACAO:");
  5715     0FD8  3038               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  5716     0FD9  00F7               	movwf	Lcd_Write_String@a
  5717     0FDA  3080               	movlw	128
  5718     0FDB  00F8               	movwf	Lcd_Write_String@a+1
  5719     0FDC  120A  158A  2774  120A  158A  	fcall	_Lcd_Write_String
  5720     0FE1                     l2691:
  5721                           
  5722                           ;./lcdFunctions.h: 96:   Lcd_Set_Cursor(2,4);
  5723     0FE1  3004               	movlw	4
  5724     0FE2  00F6               	movwf	Lcd_Set_Cursor@b
  5725     0FE3  3002               	movlw	2
  5726     0FE4  120A  118A  2718  120A  158A  	fcall	_Lcd_Set_Cursor
  5727     0FE9                     l2693:
  5728                           
  5729                           ;./lcdFunctions.h: 97:   Lcd_Write_String( IrrigationStateString[irrigationState] );
  5730     0FE9  1283               	bcf	3,5	;RP0=0, select bank0
  5731     0FEA  1303               	bcf	3,6	;RP1=0, select bank0
  5732     0FEB  086D               	movf	_irrigationState,w
  5733     0FEC  3ECB               	addlw	(low (_IrrigationStateString| 0))& (0+255)
  5734     0FED  0084               	movwf	4
  5735     0FEE  1383               	bcf	3,7	;select IRP bank1
  5736     0FEF  0800               	movf	0,w
  5737     0FF0  00F7               	movwf	Lcd_Write_String@a
  5738     0FF1  3000               	movlw	0
  5739     0FF2  1D03               	btfss	3,2
  5740     0FF3  3080               	movlw	128
  5741     0FF4  00F8               	movwf	Lcd_Write_String@a+1
  5742     0FF5  120A  158A  2774  120A  158A  	fcall	_Lcd_Write_String
  5743     0FFA                     l2695:
  5744                           
  5745                           ;./lcdFunctions.h: 99:   draw_Index();
  5746     0FFA  120A  158A  24B1  120A  158A  	fcall	_draw_Index
  5747     0FFF                     l200:
  5748     0FFF  0008               	return
  5749     1000                     __end_of_print_Irrigation:
  5750                           
  5751                           	psect	text36
  5752     05B5                     __ptext36:	
  5753 ;; *************** function _print_ArtificialLight *****************
  5754 ;; Defined at:
  5755 ;;		line 124 in file "./lcdFunctions.h"
  5756 ;; Parameters:    Size  Location     Type
  5757 ;;		None
  5758 ;; Auto vars:     Size  Location     Type
  5759 ;;		None
  5760 ;; Return value:  Size  Location     Type
  5761 ;;                  1    wreg      void 
  5762 ;; Registers used:
  5763 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5764 ;; Tracked objects:
  5765 ;;		On entry : 0/0
  5766 ;;		On exit  : 0/0
  5767 ;;		Unchanged: 0/0
  5768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5769 ;;      Params:         0       0       0       0       0
  5770 ;;      Locals:         0       0       0       0       0
  5771 ;;      Temps:          0       0       0       0       0
  5772 ;;      Totals:         0       0       0       0       0
  5773 ;;Total ram usage:        0 bytes
  5774 ;; Hardware stack levels used: 1
  5775 ;; Hardware stack levels required when called: 5
  5776 ;; This function calls:
  5777 ;;		_Lcd_Clear
  5778 ;;		_Lcd_Set_Cursor
  5779 ;;		_Lcd_Write_String
  5780 ;;		_draw_Index
  5781 ;; This function is called by:
  5782 ;;		_lcd_run
  5783 ;; This function uses a non-reentrant model
  5784 ;;
  5785                           
  5786     05B5                     _print_ArtificialLight:	
  5787                           ;psect for function _print_ArtificialLight
  5788                           
  5789     05B5                     l2721:	
  5790                           ;incstack = 0
  5791                           ; Regs used in _print_ArtificialLight: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  5792                           
  5793                           
  5794                           ;./lcdFunctions.h: 126:   if(light == old_light && lcd_lastIndex == lcd_index )
  5795     05B5  1683               	bsf	3,5	;RP0=1, select bank1
  5796     05B6  1303               	bcf	3,6	;RP1=0, select bank1
  5797     05B7  084F               	movf	(_old_light+1)^(0+128),w
  5798     05B8  1283               	bcf	3,5	;RP0=0, select bank0
  5799     05B9  1303               	bcf	3,6	;RP1=0, select bank0
  5800     05BA  0661               	xorwf	_light+1,w
  5801     05BB  1D03               	skipz
  5802     05BC  2DC3               	goto	u2685
  5803     05BD  1683               	bsf	3,5	;RP0=1, select bank1
  5804     05BE  1303               	bcf	3,6	;RP1=0, select bank1
  5805     05BF  084E               	movf	_old_light^(0+128),w
  5806     05C0  1283               	bcf	3,5	;RP0=0, select bank0
  5807     05C1  1303               	bcf	3,6	;RP1=0, select bank0
  5808     05C2  0660               	xorwf	_light,w
  5809     05C3                     u2685:
  5810     05C3  1D03               	skipz
  5811     05C4  2DC6               	goto	u2681
  5812     05C5  2DC7               	goto	u2680
  5813     05C6                     u2681:
  5814     05C6  2DCE               	goto	l2727
  5815     05C7                     u2680:
  5816     05C7                     l2723:
  5817     05C7  0865               	movf	_lcd_lastIndex,w
  5818     05C8  066A               	xorwf	_lcd_index,w
  5819     05C9  1D03               	skipz
  5820     05CA  2DCC               	goto	u2691
  5821     05CB  2DCD               	goto	u2690
  5822     05CC                     u2691:
  5823     05CC  2DCE               	goto	l2727
  5824     05CD                     u2690:
  5825     05CD  2E14               	goto	l208
  5826     05CE                     l2727:
  5827                           
  5828                           ;./lcdFunctions.h: 129:   old_light = light;
  5829     05CE  0861               	movf	_light+1,w
  5830     05CF  1683               	bsf	3,5	;RP0=1, select bank1
  5831     05D0  1303               	bcf	3,6	;RP1=0, select bank1
  5832     05D1  00CF               	movwf	(_old_light+1)^(0+128)
  5833     05D2  1283               	bcf	3,5	;RP0=0, select bank0
  5834     05D3  1303               	bcf	3,6	;RP1=0, select bank0
  5835     05D4  0860               	movf	_light,w
  5836     05D5  1683               	bsf	3,5	;RP0=1, select bank1
  5837     05D6  1303               	bcf	3,6	;RP1=0, select bank1
  5838     05D7  00CE               	movwf	_old_light^(0+128)
  5839     05D8                     l2729:
  5840                           
  5841                           ;./lcdFunctions.h: 131:   Lcd_Clear();
  5842     05D8  120A  158A  23B4  120A  118A  	fcall	_Lcd_Clear
  5843     05DD                     l2731:
  5844                           
  5845                           ;./lcdFunctions.h: 133:   Lcd_Set_Cursor(1,2);
  5846     05DD  3002               	movlw	2
  5847     05DE  00F6               	movwf	Lcd_Set_Cursor@b
  5848     05DF  3001               	movlw	1
  5849     05E0  120A  118A  2718  120A  118A  	fcall	_Lcd_Set_Cursor
  5850     05E5                     l2733:
  5851                           
  5852                           ;./lcdFunctions.h: 134:   Lcd_Write_String("LUZ ARTIFICIAL");
  5853     05E5  3001               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  5854     05E6  00F7               	movwf	Lcd_Write_String@a
  5855     05E7  3080               	movlw	128
  5856     05E8  00F8               	movwf	Lcd_Write_String@a+1
  5857     05E9  120A  158A  2774  120A  118A  	fcall	_Lcd_Write_String
  5858     05EE                     l2735:
  5859                           
  5860                           ;./lcdFunctions.h: 136:   Lcd_Set_Cursor(2,4);
  5861     05EE  3004               	movlw	4
  5862     05EF  00F6               	movwf	Lcd_Set_Cursor@b
  5863     05F0  3002               	movlw	2
  5864     05F1  120A  118A  2718  120A  118A  	fcall	_Lcd_Set_Cursor
  5865     05F6                     l2737:
  5866                           
  5867                           ;./lcdFunctions.h: 137:   if(PORTCbits.RC3 == 0)
  5868     05F6  1283               	bcf	3,5	;RP0=0, select bank0
  5869     05F7  1303               	bcf	3,6	;RP1=0, select bank0
  5870     05F8  1987               	btfsc	7,3	;volatile
  5871     05F9  2DFB               	goto	u2701
  5872     05FA  2DFC               	goto	u2700
  5873     05FB                     u2701:
  5874     05FB  2E06               	goto	l2741
  5875     05FC                     u2700:
  5876     05FC                     l2739:
  5877                           
  5878                           ;./lcdFunctions.h: 138:     Lcd_Write_String("LIGADA");
  5879     05FC  3046               	movlw	(low (((STR_14+3)-__stringbase)| (0+32768)))& (0+255)
  5880     05FD  00F7               	movwf	Lcd_Write_String@a
  5881     05FE  3080               	movlw	128
  5882     05FF  00F8               	movwf	Lcd_Write_String@a+1
  5883     0600  120A  158A  2774  120A  118A  	fcall	_Lcd_Write_String
  5884     0605  2E0F               	goto	l210
  5885     0606                     l2741:
  5886                           
  5887                           ;./lcdFunctions.h: 140:     Lcd_Write_String("DESLIGADA");
  5888     0606  3043               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  5889     0607  00F7               	movwf	Lcd_Write_String@a
  5890     0608  3080               	movlw	128
  5891     0609  00F8               	movwf	Lcd_Write_String@a+1
  5892     060A  120A  158A  2774  120A  118A  	fcall	_Lcd_Write_String
  5893     060F                     l210:
  5894                           
  5895                           ;./lcdFunctions.h: 142:   draw_Index();
  5896     060F  120A  158A  24B1  120A  118A  	fcall	_draw_Index
  5897     0614                     l208:
  5898     0614  0008               	return
  5899     0615                     __end_of_print_ArtificialLight:
  5900                           
  5901                           	psect	text37
  5902     0CB1                     __ptext37:	
  5903 ;; *************** function _draw_Index *****************
  5904 ;; Defined at:
  5905 ;;		line 56 in file "./lcdFunctions.h"
  5906 ;; Parameters:    Size  Location     Type
  5907 ;;		None
  5908 ;; Auto vars:     Size  Location     Type
  5909 ;;  temp_index      3    5[BANK0 ] unsigned char [3]
  5910 ;; Return value:  Size  Location     Type
  5911 ;;                  1    wreg      void 
  5912 ;; Registers used:
  5913 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5914 ;; Tracked objects:
  5915 ;;		On entry : 0/0
  5916 ;;		On exit  : 0/0
  5917 ;;		Unchanged: 0/0
  5918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5919 ;;      Params:         0       0       0       0       0
  5920 ;;      Locals:         0       3       0       0       0
  5921 ;;      Temps:          0       0       0       0       0
  5922 ;;      Totals:         0       3       0       0       0
  5923 ;;Total ram usage:        3 bytes
  5924 ;; Hardware stack levels used: 1
  5925 ;; Hardware stack levels required when called: 4
  5926 ;; This function calls:
  5927 ;;		_Lcd_Set_Cursor
  5928 ;;		_Lcd_Write_String
  5929 ;; This function is called by:
  5930 ;;		_print_TankState
  5931 ;;		_print_Irrigation
  5932 ;;		_print_SoilMoisture
  5933 ;;		_print_ArtificialLight
  5934 ;;		_print_Temperature
  5935 ;; This function uses a non-reentrant model
  5936 ;;
  5937                           
  5938     0CB1                     _draw_Index:	
  5939                           ;psect for function _draw_Index
  5940                           
  5941     0CB1                     l2629:	
  5942                           ;incstack = 0
  5943                           ; Regs used in _draw_Index: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5944                           
  5945                           
  5946                           ;./lcdFunctions.h: 58:   char temp_index[3] = {lcd_index + '0' , '/' , lcd_maxIndex + '0
      +                          ' };
  5947     0CB1  3000               	movlw	0
  5948     0CB2  1283               	bcf	3,5	;RP0=0, select bank0
  5949     0CB3  1303               	bcf	3,6	;RP1=0, select bank0
  5950     0CB4  00A5               	movwf	draw_Index@temp_index
  5951     0CB5  3000               	movlw	0
  5952     0CB6  00A6               	movwf	draw_Index@temp_index+1
  5953     0CB7  3000               	movlw	0
  5954     0CB8  00A7               	movwf	draw_Index@temp_index+2
  5955     0CB9                     l2631:
  5956     0CB9  086A               	movf	_lcd_index,w
  5957     0CBA  3E30               	addlw	48
  5958     0CBB  00A5               	movwf	draw_Index@temp_index
  5959     0CBC                     l2633:
  5960     0CBC  302F               	movlw	47
  5961     0CBD  00A6               	movwf	draw_Index@temp_index+1
  5962     0CBE                     l2635:
  5963     0CBE  3035               	movlw	53
  5964     0CBF  00A7               	movwf	draw_Index@temp_index+2
  5965     0CC0                     l2637:
  5966                           
  5967                           ;./lcdFunctions.h: 59:   Lcd_Set_Cursor(2,14);
  5968     0CC0  300E               	movlw	14
  5969     0CC1  00F6               	movwf	Lcd_Set_Cursor@b
  5970     0CC2  3002               	movlw	2
  5971     0CC3  120A  118A  2718  120A  158A  	fcall	_Lcd_Set_Cursor
  5972     0CC8                     l2639:
  5973                           
  5974                           ;./lcdFunctions.h: 60:   Lcd_Write_String(temp_index);
  5975     0CC8  3025               	movlw	(low (draw_Index@temp_index| 0))& (0+255)
  5976     0CC9  00F7               	movwf	Lcd_Write_String@a
  5977     0CCA  3000               	movlw	0
  5978     0CCB  00F8               	movwf	Lcd_Write_String@a+1
  5979     0CCC  120A  158A  2774  120A  158A  	fcall	_Lcd_Write_String
  5980     0CD1                     l192:
  5981     0CD1  0008               	return
  5982     0CD2                     __end_of_draw_Index:
  5983                           
  5984                           	psect	text38
  5985     0F74                     __ptext38:	
  5986 ;; *************** function _Lcd_Write_String *****************
  5987 ;; Defined at:
  5988 ;;		line 105 in file "./lcd.h"
  5989 ;; Parameters:    Size  Location     Type
  5990 ;;  a               2    7[COMMON] PTR unsigned char 
  5991 ;;		 -> print_Temperature@buffer(16), STR_15(13), STR_14(10), STR_13(7), 
  5992 ;;		 -> STR_12(15), print_SoilMoisture@buffer(16), STR_10(13), STR_9(11), 
  5993 ;;		 -> STR_8(14), draw_Index@temp_index(3), STR_7(6), STR_6(4), 
  5994 ;;		 -> STR_5(3), STR_4(5), STR_3(6), STR_2(5), 
  5995 ;;		 -> STR_1(6), 
  5996 ;; Auto vars:     Size  Location     Type
  5997 ;;  i               2    3[BANK0 ] int 
  5998 ;; Return value:  Size  Location     Type
  5999 ;;                  1    wreg      void 
  6000 ;; Registers used:
  6001 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6002 ;; Tracked objects:
  6003 ;;		On entry : 0/0
  6004 ;;		On exit  : 0/0
  6005 ;;		Unchanged: 0/0
  6006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6007 ;;      Params:         2       0       0       0       0
  6008 ;;      Locals:         0       2       0       0       0
  6009 ;;      Temps:          0       3       0       0       0
  6010 ;;      Totals:         2       5       0       0       0
  6011 ;;Total ram usage:        7 bytes
  6012 ;; Hardware stack levels used: 1
  6013 ;; Hardware stack levels required when called: 3
  6014 ;; This function calls:
  6015 ;;		_Lcd_Write_Char
  6016 ;; This function is called by:
  6017 ;;		_draw_Index
  6018 ;;		_print_TankState
  6019 ;;		_print_Irrigation
  6020 ;;		_print_SoilMoisture
  6021 ;;		_print_ArtificialLight
  6022 ;;		_print_Temperature
  6023 ;; This function uses a non-reentrant model
  6024 ;;
  6025                           
  6026     0F74                     _Lcd_Write_String:	
  6027                           ;psect for function _Lcd_Write_String
  6028                           
  6029     0F74                     l2605:	
  6030                           ;incstack = 0
  6031                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6032                           
  6033                           
  6034                           ;./lcd.h: 105: void Lcd_Write_String(char *a);./lcd.h: 106: {;./lcd.h: 107:  int i;;./lc
      +                          d.h: 108:  for(i=0;a[i]!='\0';i++)
  6035     0F74  1283               	bcf	3,5	;RP0=0, select bank0
  6036     0F75  1303               	bcf	3,6	;RP1=0, select bank0
  6037     0F76  01A3               	clrf	Lcd_Write_String@i
  6038     0F77  01A4               	clrf	Lcd_Write_String@i+1
  6039     0F78  2F9D               	goto	l2611
  6040     0F79                     l2607:
  6041                           
  6042                           ;./lcd.h: 109:     Lcd_Write_Char(a[i]);
  6043     0F79  0823               	movf	Lcd_Write_String@i,w
  6044     0F7A  0777               	addwf	Lcd_Write_String@a,w
  6045     0F7B  00A1               	movwf	??_Lcd_Write_String+1
  6046     0F7C  0878               	movf	Lcd_Write_String@a+1,w
  6047     0F7D  00A0               	movwf	??_Lcd_Write_String
  6048     0F7E  1803               	skipnc
  6049     0F7F  0AA0               	incf	??_Lcd_Write_String,f
  6050     0F80  1FA3               	btfss	Lcd_Write_String@i,7
  6051     0F81  2F83               	goto	u2580
  6052     0F82  03A0               	decf	??_Lcd_Write_String,f
  6053     0F83                     u2580:
  6054     0F83  1283               	bcf	3,5	;RP0=0, select bank0
  6055     0F84  1303               	bcf	3,6	;RP1=0, select bank0
  6056     0F85  0820               	movf	??_Lcd_Write_String,w
  6057     0F86  00A2               	movwf	??_Lcd_Write_String+2
  6058     0F87  0822               	movf	??_Lcd_Write_String+2,w
  6059     0F88  00FF               	movwf	btemp+1
  6060     0F89  0821               	movf	??_Lcd_Write_String+1,w
  6061     0F8A  0084               	movwf	4
  6062     0F8B  120A  118A  2400  120A  158A  	fcall	stringtab
  6063     0F90  120A  158A  267A  120A  158A  	fcall	_Lcd_Write_Char
  6064     0F95                     l2609:
  6065     0F95  3001               	movlw	1
  6066     0F96  1283               	bcf	3,5	;RP0=0, select bank0
  6067     0F97  1303               	bcf	3,6	;RP1=0, select bank0
  6068     0F98  07A3               	addwf	Lcd_Write_String@i,f
  6069     0F99  1803               	skipnc
  6070     0F9A  0AA4               	incf	Lcd_Write_String@i+1,f
  6071     0F9B  3000               	movlw	0
  6072     0F9C  07A4               	addwf	Lcd_Write_String@i+1,f
  6073     0F9D                     l2611:
  6074     0F9D  0823               	movf	Lcd_Write_String@i,w
  6075     0F9E  0777               	addwf	Lcd_Write_String@a,w
  6076     0F9F  00A1               	movwf	??_Lcd_Write_String+1
  6077     0FA0  0878               	movf	Lcd_Write_String@a+1,w
  6078     0FA1  00A0               	movwf	??_Lcd_Write_String
  6079     0FA2  1803               	skipnc
  6080     0FA3  0AA0               	incf	??_Lcd_Write_String,f
  6081     0FA4  1FA3               	btfss	Lcd_Write_String@i,7
  6082     0FA5  2FA7               	goto	u2590
  6083     0FA6  03A0               	decf	??_Lcd_Write_String,f
  6084     0FA7                     u2590:
  6085     0FA7  1283               	bcf	3,5	;RP0=0, select bank0
  6086     0FA8  1303               	bcf	3,6	;RP1=0, select bank0
  6087     0FA9  0820               	movf	??_Lcd_Write_String,w
  6088     0FAA  00A2               	movwf	??_Lcd_Write_String+2
  6089     0FAB  0822               	movf	??_Lcd_Write_String+2,w
  6090     0FAC  00FF               	movwf	btemp+1
  6091     0FAD  0821               	movf	??_Lcd_Write_String+1,w
  6092     0FAE  0084               	movwf	4
  6093     0FAF  120A  118A  2400  120A  158A  	fcall	stringtab
  6094     0FB4  3A00               	xorlw	0
  6095     0FB5  1D03               	skipz
  6096     0FB6  2FB8               	goto	u2601
  6097     0FB7  2FB9               	goto	u2600
  6098     0FB8                     u2601:
  6099     0FB8  2F79               	goto	l2607
  6100     0FB9                     u2600:
  6101     0FB9                     l167:
  6102     0FB9  0008               	return
  6103     0FBA                     __end_of_Lcd_Write_String:
  6104                           
  6105                           	psect	text39
  6106     0E7A                     __ptext39:	
  6107 ;; *************** function _Lcd_Write_Char *****************
  6108 ;; Defined at:
  6109 ;;		line 89 in file "./lcd.h"
  6110 ;; Parameters:    Size  Location     Type
  6111 ;;  a               1    wreg     unsigned char 
  6112 ;; Auto vars:     Size  Location     Type
  6113 ;;  a               1    6[COMMON] unsigned char 
  6114 ;;  y               1    5[COMMON] unsigned char 
  6115 ;;  temp            1    4[COMMON] unsigned char 
  6116 ;; Return value:  Size  Location     Type
  6117 ;;                  1    wreg      void 
  6118 ;; Registers used:
  6119 ;;		wreg, status,2, status,0, pclath, cstack
  6120 ;; Tracked objects:
  6121 ;;		On entry : 0/0
  6122 ;;		On exit  : 0/0
  6123 ;;		Unchanged: 0/0
  6124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6125 ;;      Params:         0       0       0       0       0
  6126 ;;      Locals:         3       0       0       0       0
  6127 ;;      Temps:          1       0       0       0       0
  6128 ;;      Totals:         4       0       0       0       0
  6129 ;;Total ram usage:        4 bytes
  6130 ;; Hardware stack levels used: 1
  6131 ;; Hardware stack levels required when called: 2
  6132 ;; This function calls:
  6133 ;;		_Lcd_Port
  6134 ;; This function is called by:
  6135 ;;		_Lcd_Write_String
  6136 ;;		_print_SoilMoisture
  6137 ;;		_print_Temperature
  6138 ;; This function uses a non-reentrant model
  6139 ;;
  6140                           
  6141     0E7A                     _Lcd_Write_Char:	
  6142                           ;psect for function _Lcd_Write_Char
  6143                           
  6144                           
  6145                           ;incstack = 0
  6146                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  6147                           ;Lcd_Write_Char@a stored from wreg
  6148     0E7A  00F6               	movwf	Lcd_Write_Char@a
  6149     0E7B                     l2439:
  6150                           
  6151                           ;./lcd.h: 89: void Lcd_Write_Char(char a);./lcd.h: 90: {;./lcd.h: 91:    char temp,y;;./
      +                          lcd.h: 92:    temp = a&0x0F;
  6152     0E7B  0876               	movf	Lcd_Write_Char@a,w
  6153     0E7C  00F4               	movwf	Lcd_Write_Char@temp
  6154     0E7D                     l2441:
  6155     0E7D  300F               	movlw	15
  6156     0E7E  05F4               	andwf	Lcd_Write_Char@temp,f
  6157     0E7F                     l2443:
  6158                           
  6159                           ;./lcd.h: 93:    y = a&0xF0;
  6160     0E7F  0876               	movf	Lcd_Write_Char@a,w
  6161     0E80  00F5               	movwf	Lcd_Write_Char@y
  6162     0E81  30F0               	movlw	240
  6163     0E82  05F5               	andwf	Lcd_Write_Char@y,f
  6164     0E83                     l2445:
  6165                           
  6166                           ;./lcd.h: 94:    RD2 = 1;
  6167     0E83  1283               	bcf	3,5	;RP0=0, select bank0
  6168     0E84  1303               	bcf	3,6	;RP1=0, select bank0
  6169     0E85  1508               	bsf	8,2	;volatile
  6170     0E86                     l2447:
  6171                           
  6172                           ;./lcd.h: 95:    Lcd_Port(y>>4);
  6173     0E86  0875               	movf	Lcd_Write_Char@y,w
  6174     0E87  00F3               	movwf	??_Lcd_Write_Char
  6175     0E88  3004               	movlw	4
  6176     0E89                     u2235:
  6177     0E89  1003               	clrc
  6178     0E8A  0CF3               	rrf	??_Lcd_Write_Char,f
  6179     0E8B  3EFF               	addlw	-1
  6180     0E8C  1D03               	skipz
  6181     0E8D  2E89               	goto	u2235
  6182     0E8E  0873               	movf	??_Lcd_Write_Char,w
  6183     0E8F  120A  158A  24D2  120A  158A  	fcall	_Lcd_Port
  6184     0E94                     l2449:
  6185                           
  6186                           ;./lcd.h: 96:    RD3 = 1;
  6187     0E94  1283               	bcf	3,5	;RP0=0, select bank0
  6188     0E95  1303               	bcf	3,6	;RP1=0, select bank0
  6189     0E96  1588               	bsf	8,3	;volatile
  6190     0E97                     l2451:
  6191                           
  6192                           ;./lcd.h: 97:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  6193     0E97  300D               	movlw	13
  6194     0E98  00F3               	movwf	??_Lcd_Write_Char
  6195     0E99                     u2797:
  6196     0E99  0BF3               	decfsz	??_Lcd_Write_Char,f
  6197     0E9A  2E99               	goto	u2797
  6198     0E9B                     l2453:
  6199                           
  6200                           ;./lcd.h: 98:    RD3 = 0;
  6201     0E9B  1283               	bcf	3,5	;RP0=0, select bank0
  6202     0E9C  1303               	bcf	3,6	;RP1=0, select bank0
  6203     0E9D  1188               	bcf	8,3	;volatile
  6204     0E9E                     l2455:
  6205                           
  6206                           ;./lcd.h: 99:    Lcd_Port(temp);
  6207     0E9E  0874               	movf	Lcd_Write_Char@temp,w
  6208     0E9F  120A  158A  24D2  120A  158A  	fcall	_Lcd_Port
  6209     0EA4                     l2457:
  6210                           
  6211                           ;./lcd.h: 100:    RD3 = 1;
  6212     0EA4  1283               	bcf	3,5	;RP0=0, select bank0
  6213     0EA5  1303               	bcf	3,6	;RP1=0, select bank0
  6214     0EA6  1588               	bsf	8,3	;volatile
  6215     0EA7                     l2459:
  6216                           
  6217                           ;./lcd.h: 101:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  6218     0EA7  300D               	movlw	13
  6219     0EA8  00F3               	movwf	??_Lcd_Write_Char
  6220     0EA9                     u2807:
  6221     0EA9  0BF3               	decfsz	??_Lcd_Write_Char,f
  6222     0EAA  2EA9               	goto	u2807
  6223     0EAB                     l2461:
  6224                           
  6225                           ;./lcd.h: 102:    RD3 = 0;
  6226     0EAB  1283               	bcf	3,5	;RP0=0, select bank0
  6227     0EAC  1303               	bcf	3,6	;RP1=0, select bank0
  6228     0EAD  1188               	bcf	8,3	;volatile
  6229     0EAE                     l161:
  6230     0EAE  0008               	return
  6231     0EAF                     __end_of_Lcd_Write_Char:
  6232                           
  6233                           	psect	text40
  6234     0718                     __ptext40:	
  6235 ;; *************** function _Lcd_Set_Cursor *****************
  6236 ;; Defined at:
  6237 ;;		line 49 in file "./lcd.h"
  6238 ;; Parameters:    Size  Location     Type
  6239 ;;  a               1    wreg     unsigned char 
  6240 ;;  b               1    6[COMMON] unsigned char 
  6241 ;; Auto vars:     Size  Location     Type
  6242 ;;  a               1    0[BANK0 ] unsigned char 
  6243 ;;  temp            1    3[BANK0 ] unsigned char 
  6244 ;;  y               1    2[BANK0 ] unsigned char 
  6245 ;;  z               1    1[BANK0 ] unsigned char 
  6246 ;; Return value:  Size  Location     Type
  6247 ;;                  1    wreg      void 
  6248 ;; Registers used:
  6249 ;;		wreg, status,2, status,0, pclath, cstack
  6250 ;; Tracked objects:
  6251 ;;		On entry : 0/0
  6252 ;;		On exit  : 0/0
  6253 ;;		Unchanged: 0/0
  6254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6255 ;;      Params:         1       0       0       0       0
  6256 ;;      Locals:         0       4       0       0       0
  6257 ;;      Temps:          1       0       0       0       0
  6258 ;;      Totals:         2       4       0       0       0
  6259 ;;Total ram usage:        6 bytes
  6260 ;; Hardware stack levels used: 1
  6261 ;; Hardware stack levels required when called: 3
  6262 ;; This function calls:
  6263 ;;		_Lcd_Cmd
  6264 ;; This function is called by:
  6265 ;;		_draw_Index
  6266 ;;		_print_TankState
  6267 ;;		_print_Irrigation
  6268 ;;		_print_SoilMoisture
  6269 ;;		_print_ArtificialLight
  6270 ;;		_print_Temperature
  6271 ;; This function uses a non-reentrant model
  6272 ;;
  6273                           
  6274     0718                     _Lcd_Set_Cursor:	
  6275                           ;psect for function _Lcd_Set_Cursor
  6276                           
  6277                           
  6278                           ;incstack = 0
  6279                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  6280                           ;Lcd_Set_Cursor@a stored from wreg
  6281     0718  1283               	bcf	3,5	;RP0=0, select bank0
  6282     0719  1303               	bcf	3,6	;RP1=0, select bank0
  6283     071A  00A0               	movwf	Lcd_Set_Cursor@a
  6284     071B                     l2581:
  6285                           
  6286                           ;./lcd.h: 49: void Lcd_Set_Cursor(char a, char b);./lcd.h: 50: {;./lcd.h: 51:  char temp
      +                          ,z,y;;./lcd.h: 52:  if(a == 1)
  6287     071B  0320               	decf	Lcd_Set_Cursor@a,w
  6288     071C  1D03               	btfss	3,2
  6289     071D  2F1F               	goto	u2541
  6290     071E  2F20               	goto	u2540
  6291     071F                     u2541:
  6292     071F  2F40               	goto	l2593
  6293     0720                     u2540:
  6294     0720                     l2583:
  6295                           
  6296                           ;./lcd.h: 53:  {;./lcd.h: 54:    temp = 0x80 + b - 1;
  6297     0720  0876               	movf	Lcd_Set_Cursor@b,w
  6298     0721  3E7F               	addlw	127
  6299     0722  00A3               	movwf	Lcd_Set_Cursor@temp
  6300                           
  6301                           ;./lcd.h: 55:   z = temp>>4;
  6302     0723  0823               	movf	Lcd_Set_Cursor@temp,w
  6303     0724  00F7               	movwf	??_Lcd_Set_Cursor
  6304     0725  3004               	movlw	4
  6305     0726                     u2555:
  6306     0726  1003               	clrc
  6307     0727  0CF7               	rrf	??_Lcd_Set_Cursor,f
  6308     0728  3EFF               	addlw	-1
  6309     0729  1D03               	skipz
  6310     072A  2F26               	goto	u2555
  6311     072B  0877               	movf	??_Lcd_Set_Cursor,w
  6312     072C  00A1               	movwf	Lcd_Set_Cursor@z
  6313     072D                     l2585:
  6314                           
  6315                           ;./lcd.h: 56:   y = temp & 0x0F;
  6316     072D  0823               	movf	Lcd_Set_Cursor@temp,w
  6317     072E  00A2               	movwf	Lcd_Set_Cursor@y
  6318     072F                     l2587:
  6319     072F  300F               	movlw	15
  6320     0730  05A2               	andwf	Lcd_Set_Cursor@y,f
  6321     0731                     l2589:
  6322                           
  6323                           ;./lcd.h: 57:   Lcd_Cmd(z);
  6324     0731  0821               	movf	Lcd_Set_Cursor@z,w
  6325     0732  120A  158A  2497  120A  118A  	fcall	_Lcd_Cmd
  6326     0737                     l2591:
  6327                           
  6328                           ;./lcd.h: 58:   Lcd_Cmd(y);
  6329     0737  1283               	bcf	3,5	;RP0=0, select bank0
  6330     0738  1303               	bcf	3,6	;RP1=0, select bank0
  6331     0739  0822               	movf	Lcd_Set_Cursor@y,w
  6332     073A  120A  158A  2497  120A  118A  	fcall	_Lcd_Cmd
  6333                           
  6334                           ;./lcd.h: 59:  }
  6335     073F  2F65               	goto	l155
  6336     0740                     l2593:
  6337     0740  3002               	movlw	2
  6338     0741  0620               	xorwf	Lcd_Set_Cursor@a,w
  6339     0742  1D03               	btfss	3,2
  6340     0743  2F45               	goto	u2561
  6341     0744  2F46               	goto	u2560
  6342     0745                     u2561:
  6343     0745  2F65               	goto	l155
  6344     0746                     u2560:
  6345     0746                     l2595:
  6346                           
  6347                           ;./lcd.h: 61:  {;./lcd.h: 62:   temp = 0xC0 + b - 1;
  6348     0746  0876               	movf	Lcd_Set_Cursor@b,w
  6349     0747  3EBF               	addlw	191
  6350     0748  00A3               	movwf	Lcd_Set_Cursor@temp
  6351                           
  6352                           ;./lcd.h: 63:   z = temp>>4;
  6353     0749  0823               	movf	Lcd_Set_Cursor@temp,w
  6354     074A  00F7               	movwf	??_Lcd_Set_Cursor
  6355     074B  3004               	movlw	4
  6356     074C                     u2575:
  6357     074C  1003               	clrc
  6358     074D  0CF7               	rrf	??_Lcd_Set_Cursor,f
  6359     074E  3EFF               	addlw	-1
  6360     074F  1D03               	skipz
  6361     0750  2F4C               	goto	u2575
  6362     0751  0877               	movf	??_Lcd_Set_Cursor,w
  6363     0752  00A1               	movwf	Lcd_Set_Cursor@z
  6364     0753                     l2597:
  6365                           
  6366                           ;./lcd.h: 64:   y = temp & 0x0F;
  6367     0753  0823               	movf	Lcd_Set_Cursor@temp,w
  6368     0754  00A2               	movwf	Lcd_Set_Cursor@y
  6369     0755                     l2599:
  6370     0755  300F               	movlw	15
  6371     0756  05A2               	andwf	Lcd_Set_Cursor@y,f
  6372     0757                     l2601:
  6373                           
  6374                           ;./lcd.h: 65:   Lcd_Cmd(z);
  6375     0757  0821               	movf	Lcd_Set_Cursor@z,w
  6376     0758  120A  158A  2497  120A  118A  	fcall	_Lcd_Cmd
  6377     075D                     l2603:
  6378                           
  6379                           ;./lcd.h: 66:   Lcd_Cmd(y);
  6380     075D  1283               	bcf	3,5	;RP0=0, select bank0
  6381     075E  1303               	bcf	3,6	;RP1=0, select bank0
  6382     075F  0822               	movf	Lcd_Set_Cursor@y,w
  6383     0760  120A  158A  2497  120A  118A  	fcall	_Lcd_Cmd
  6384     0765                     l155:
  6385     0765  0008               	return
  6386     0766                     __end_of_Lcd_Set_Cursor:
  6387                           
  6388                           	psect	text41
  6389     0BB4                     __ptext41:	
  6390 ;; *************** function _Lcd_Clear *****************
  6391 ;; Defined at:
  6392 ;;		line 43 in file "./lcd.h"
  6393 ;; Parameters:    Size  Location     Type
  6394 ;;		None
  6395 ;; Auto vars:     Size  Location     Type
  6396 ;;		None
  6397 ;; Return value:  Size  Location     Type
  6398 ;;                  1    wreg      void 
  6399 ;; Registers used:
  6400 ;;		wreg, status,2, status,0, pclath, cstack
  6401 ;; Tracked objects:
  6402 ;;		On entry : 0/0
  6403 ;;		On exit  : 0/0
  6404 ;;		Unchanged: 0/0
  6405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6406 ;;      Params:         0       0       0       0       0
  6407 ;;      Locals:         0       0       0       0       0
  6408 ;;      Temps:          0       0       0       0       0
  6409 ;;      Totals:         0       0       0       0       0
  6410 ;;Total ram usage:        0 bytes
  6411 ;; Hardware stack levels used: 1
  6412 ;; Hardware stack levels required when called: 3
  6413 ;; This function calls:
  6414 ;;		_Lcd_Cmd
  6415 ;; This function is called by:
  6416 ;;		_print_TankState
  6417 ;;		_print_Irrigation
  6418 ;;		_print_SoilMoisture
  6419 ;;		_print_ArtificialLight
  6420 ;;		_print_Temperature
  6421 ;; This function uses a non-reentrant model
  6422 ;;
  6423                           
  6424     0BB4                     _Lcd_Clear:	
  6425                           ;psect for function _Lcd_Clear
  6426                           
  6427     0BB4                     l2627:	
  6428                           ;incstack = 0
  6429                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  6430                           
  6431                           
  6432                           ;./lcd.h: 45:  Lcd_Cmd(0);
  6433     0BB4  3000               	movlw	0
  6434     0BB5  120A  158A  2497  120A  158A  	fcall	_Lcd_Cmd
  6435                           
  6436                           ;./lcd.h: 46:  Lcd_Cmd(1);
  6437     0BBA  3001               	movlw	1
  6438     0BBB  120A  158A  2497  120A  158A  	fcall	_Lcd_Cmd
  6439     0BC0                     l149:
  6440     0BC0  0008               	return
  6441     0BC1                     __end_of_Lcd_Clear:
  6442                           
  6443                           	psect	text42
  6444     0E1B                     __ptext42:	
  6445 ;; *************** function _lcd_debounceButtons *****************
  6446 ;; Defined at:
  6447 ;;		line 170 in file "./lcdFunctions.h"
  6448 ;; Parameters:    Size  Location     Type
  6449 ;;		None
  6450 ;; Auto vars:     Size  Location     Type
  6451 ;;		None
  6452 ;; Return value:  Size  Location     Type
  6453 ;;                  1    wreg      void 
  6454 ;; Registers used:
  6455 ;;		wreg, status,2, status,0, pclath, cstack
  6456 ;; Tracked objects:
  6457 ;;		On entry : 0/0
  6458 ;;		On exit  : 0/0
  6459 ;;		Unchanged: 0/0
  6460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6461 ;;      Params:         0       0       0       0       0
  6462 ;;      Locals:         0       0       0       0       0
  6463 ;;      Temps:          1       0       0       0       0
  6464 ;;      Totals:         1       0       0       0       0
  6465 ;;Total ram usage:        1 bytes
  6466 ;; Hardware stack levels used: 1
  6467 ;; Hardware stack levels required when called: 2
  6468 ;; This function calls:
  6469 ;;		_lcd_turnLeft
  6470 ;;		_lcd_turnRight
  6471 ;; This function is called by:
  6472 ;;		_lcd_run
  6473 ;; This function uses a non-reentrant model
  6474 ;;
  6475                           
  6476     0E1B                     _lcd_debounceButtons:	
  6477                           ;psect for function _lcd_debounceButtons
  6478                           
  6479     0E1B                     l2181:	
  6480                           ;incstack = 0
  6481                           ; Regs used in _lcd_debounceButtons: [wreg+status,2+status,0+pclath+cstack]
  6482                           
  6483                           
  6484                           ;./lcdFunctions.h: 174:   if (PORTBbits.RB1 == 0 && lastLeftButtonState != 0) {
  6485     0E1B  1283               	bcf	3,5	;RP0=0, select bank0
  6486     0E1C  1303               	bcf	3,6	;RP1=0, select bank0
  6487     0E1D  1886               	btfsc	6,1	;volatile
  6488     0E1E  2E20               	goto	u1911
  6489     0E1F  2E21               	goto	u1910
  6490     0E20                     u1911:
  6491     0E20  2E2B               	goto	l2187
  6492     0E21                     u1910:
  6493     0E21                     l2183:
  6494     0E21  0869               	movf	_lastLeftButtonState,w
  6495     0E22  1903               	btfsc	3,2
  6496     0E23  2E25               	goto	u1921
  6497     0E24  2E26               	goto	u1920
  6498     0E25                     u1921:
  6499     0E25  2E2B               	goto	l2187
  6500     0E26                     u1920:
  6501     0E26                     l2185:
  6502                           
  6503                           ;./lcdFunctions.h: 175:       lcd_turnLeft();
  6504     0E26  120A  158A  23CE  120A  158A  	fcall	_lcd_turnLeft
  6505     0E2B                     l2187:
  6506                           
  6507                           ;./lcdFunctions.h: 179:   if (PORTBbits.RB2 == 0 && lastRightButtonState != 0) {
  6508     0E2B  1283               	bcf	3,5	;RP0=0, select bank0
  6509     0E2C  1303               	bcf	3,6	;RP1=0, select bank0
  6510     0E2D  1906               	btfsc	6,2	;volatile
  6511     0E2E  2E30               	goto	u1931
  6512     0E2F  2E31               	goto	u1930
  6513     0E30                     u1931:
  6514     0E30  2E3B               	goto	l2193
  6515     0E31                     u1930:
  6516     0E31                     l2189:
  6517     0E31  0868               	movf	_lastRightButtonState,w
  6518     0E32  1903               	btfsc	3,2
  6519     0E33  2E35               	goto	u1941
  6520     0E34  2E36               	goto	u1940
  6521     0E35                     u1941:
  6522     0E35  2E3B               	goto	l2193
  6523     0E36                     u1940:
  6524     0E36                     l2191:
  6525                           
  6526                           ;./lcdFunctions.h: 180:       lcd_turnRight();
  6527     0E36  120A  158A  23DC  120A  158A  	fcall	_lcd_turnRight
  6528     0E3B                     l2193:
  6529                           
  6530                           ;./lcdFunctions.h: 184:   lastLeftButtonState = PORTBbits.RB1;
  6531     0E3B  1283               	bcf	3,5	;RP0=0, select bank0
  6532     0E3C  1303               	bcf	3,6	;RP1=0, select bank0
  6533     0E3D  0C06               	rrf	6,w	;volatile
  6534     0E3E  3901               	andlw	1
  6535     0E3F  00E9               	movwf	_lastLeftButtonState
  6536     0E40                     l2195:
  6537                           
  6538                           ;./lcdFunctions.h: 185:   lastRightButtonState = PORTBbits.RB2;
  6539     0E40  0C06               	rrf	6,w	;volatile
  6540     0E41  00F2               	movwf	??_lcd_debounceButtons
  6541     0E42  0C72               	rrf	??_lcd_debounceButtons,w
  6542     0E43  3901               	andlw	1
  6543     0E44  00E8               	movwf	_lastRightButtonState
  6544     0E45                     l219:
  6545     0E45  0008               	return
  6546     0E46                     __end_of_lcd_debounceButtons:
  6547                           
  6548                           	psect	text43
  6549     0BDC                     __ptext43:	
  6550 ;; *************** function _lcd_turnRight *****************
  6551 ;; Defined at:
  6552 ;;		line 216 in file "./lcdFunctions.h"
  6553 ;; Parameters:    Size  Location     Type
  6554 ;;		None
  6555 ;; Auto vars:     Size  Location     Type
  6556 ;;		None
  6557 ;; Return value:  Size  Location     Type
  6558 ;;                  1    wreg      void 
  6559 ;; Registers used:
  6560 ;;		wreg, status,2, status,0
  6561 ;; Tracked objects:
  6562 ;;		On entry : 0/0
  6563 ;;		On exit  : 0/0
  6564 ;;		Unchanged: 0/0
  6565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6566 ;;      Params:         0       0       0       0       0
  6567 ;;      Locals:         0       0       0       0       0
  6568 ;;      Temps:          0       0       0       0       0
  6569 ;;      Totals:         0       0       0       0       0
  6570 ;;Total ram usage:        0 bytes
  6571 ;; Hardware stack levels used: 1
  6572 ;; Hardware stack levels required when called: 1
  6573 ;; This function calls:
  6574 ;;		Nothing
  6575 ;; This function is called by:
  6576 ;;		_lcd_debounceButtons
  6577 ;; This function uses a non-reentrant model
  6578 ;;
  6579                           
  6580     0BDC                     _lcd_turnRight:	
  6581                           ;psect for function _lcd_turnRight
  6582                           
  6583     0BDC                     l2043:	
  6584                           ;incstack = 0
  6585                           ; Regs used in _lcd_turnRight: [wreg+status,2+status,0]
  6586                           
  6587                           
  6588                           ;./lcdFunctions.h: 219:   if(lcd_index >= lcd_maxIndex)
  6589     0BDC  3005               	movlw	5
  6590     0BDD  1283               	bcf	3,5	;RP0=0, select bank0
  6591     0BDE  1303               	bcf	3,6	;RP1=0, select bank0
  6592     0BDF  026A               	subwf	_lcd_index,w
  6593     0BE0  1C03               	skipc
  6594     0BE1  2BE3               	goto	u1761
  6595     0BE2  2BE4               	goto	u1760
  6596     0BE3                     u1761:
  6597     0BE3  2BE7               	goto	l2047
  6598     0BE4                     u1760:
  6599     0BE4                     l2045:
  6600                           
  6601                           ;./lcdFunctions.h: 220:     lcd_index = 1;
  6602     0BE4  3001               	movlw	1
  6603     0BE5  00EA               	movwf	_lcd_index
  6604     0BE6  2BE9               	goto	l235
  6605     0BE7                     l2047:
  6606                           
  6607                           ;./lcdFunctions.h: 222:     lcd_index++;
  6608     0BE7  3001               	movlw	1
  6609     0BE8  07EA               	addwf	_lcd_index,f
  6610     0BE9                     l235:
  6611     0BE9  0008               	return
  6612     0BEA                     __end_of_lcd_turnRight:
  6613                           
  6614                           	psect	text44
  6615     0BCE                     __ptext44:	
  6616 ;; *************** function _lcd_turnLeft *****************
  6617 ;; Defined at:
  6618 ;;		line 225 in file "./lcdFunctions.h"
  6619 ;; Parameters:    Size  Location     Type
  6620 ;;		None
  6621 ;; Auto vars:     Size  Location     Type
  6622 ;;		None
  6623 ;; Return value:  Size  Location     Type
  6624 ;;                  1    wreg      void 
  6625 ;; Registers used:
  6626 ;;		wreg, status,2, status,0
  6627 ;; Tracked objects:
  6628 ;;		On entry : 0/0
  6629 ;;		On exit  : 0/0
  6630 ;;		Unchanged: 0/0
  6631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6632 ;;      Params:         0       0       0       0       0
  6633 ;;      Locals:         0       0       0       0       0
  6634 ;;      Temps:          0       0       0       0       0
  6635 ;;      Totals:         0       0       0       0       0
  6636 ;;Total ram usage:        0 bytes
  6637 ;; Hardware stack levels used: 1
  6638 ;; Hardware stack levels required when called: 1
  6639 ;; This function calls:
  6640 ;;		Nothing
  6641 ;; This function is called by:
  6642 ;;		_lcd_debounceButtons
  6643 ;; This function uses a non-reentrant model
  6644 ;;
  6645                           
  6646     0BCE                     _lcd_turnLeft:	
  6647                           ;psect for function _lcd_turnLeft
  6648                           
  6649     0BCE                     l2037:	
  6650                           ;incstack = 0
  6651                           ; Regs used in _lcd_turnLeft: [wreg+status,2+status,0]
  6652                           
  6653                           
  6654                           ;./lcdFunctions.h: 228:   if(lcd_index <= 1)
  6655     0BCE  3002               	movlw	2
  6656     0BCF  1283               	bcf	3,5	;RP0=0, select bank0
  6657     0BD0  1303               	bcf	3,6	;RP1=0, select bank0
  6658     0BD1  026A               	subwf	_lcd_index,w
  6659     0BD2  1803               	skipnc
  6660     0BD3  2BD5               	goto	u1751
  6661     0BD4  2BD6               	goto	u1750
  6662     0BD5                     u1751:
  6663     0BD5  2BD9               	goto	l2041
  6664     0BD6                     u1750:
  6665     0BD6                     l2039:
  6666                           
  6667                           ;./lcdFunctions.h: 229:     lcd_index = lcd_maxIndex;
  6668     0BD6  3005               	movlw	5
  6669     0BD7  00EA               	movwf	_lcd_index
  6670     0BD8  2BDB               	goto	l240
  6671     0BD9                     l2041:
  6672                           
  6673                           ;./lcdFunctions.h: 231:     lcd_index--;
  6674     0BD9  3001               	movlw	1
  6675     0BDA  02EA               	subwf	_lcd_index,f
  6676     0BDB                     l240:
  6677     0BDB  0008               	return
  6678     0BDC                     __end_of_lcd_turnLeft:
  6679                           
  6680                           	psect	text45
  6681     0B7C                     __ptext45:	
  6682 ;; *************** function _interruption_init *****************
  6683 ;; Defined at:
  6684 ;;		line 111 in file "./config.h"
  6685 ;; Parameters:    Size  Location     Type
  6686 ;;		None
  6687 ;; Auto vars:     Size  Location     Type
  6688 ;;		None
  6689 ;; Return value:  Size  Location     Type
  6690 ;;                  1    wreg      void 
  6691 ;; Registers used:
  6692 ;;		None
  6693 ;; Tracked objects:
  6694 ;;		On entry : 0/0
  6695 ;;		On exit  : 0/0
  6696 ;;		Unchanged: 0/0
  6697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6698 ;;      Params:         0       0       0       0       0
  6699 ;;      Locals:         0       0       0       0       0
  6700 ;;      Temps:          0       0       0       0       0
  6701 ;;      Totals:         0       0       0       0       0
  6702 ;;Total ram usage:        0 bytes
  6703 ;; Hardware stack levels used: 1
  6704 ;; Hardware stack levels required when called: 1
  6705 ;; This function calls:
  6706 ;;		Nothing
  6707 ;; This function is called by:
  6708 ;;		_main
  6709 ;; This function uses a non-reentrant model
  6710 ;;
  6711                           
  6712     0B7C                     _interruption_init:	
  6713                           ;psect for function _interruption_init
  6714                           
  6715     0B7C                     l2261:	
  6716                           ;incstack = 0
  6717                           ; Regs used in _interruption_init: []
  6718                           
  6719                           
  6720                           ;./config.h: 113:   INTCONbits.GIE=1;
  6721     0B7C  178B               	bsf	11,7	;volatile
  6722                           
  6723                           ;./config.h: 114:   OPTION_REGbits.INTEDG = 1;
  6724     0B7D  1683               	bsf	3,5	;RP0=1, select bank1
  6725     0B7E  1303               	bcf	3,6	;RP1=0, select bank1
  6726     0B7F  1701               	bsf	1,6	;volatile
  6727                           
  6728                           ;./config.h: 116:   INTCONbits.INTE = 1;
  6729     0B80  160B               	bsf	11,4	;volatile
  6730                           
  6731                           ;./config.h: 118:   INTCONbits.PEIE = 1;
  6732     0B81  170B               	bsf	11,6	;volatile
  6733                           
  6734                           ;./config.h: 120:   PIE1bits.TMR1IE = 1;
  6735     0B82  140C               	bsf	12,0	;volatile
  6736     0B83                     l104:
  6737     0B83  0008               	return
  6738     0B84                     __end_of_interruption_init:
  6739                           
  6740                           	psect	text46
  6741     0B74                     __ptext46:	
  6742 ;; *************** function _WDT_init *****************
  6743 ;; Defined at:
  6744 ;;		line 39 in file "./config.h"
  6745 ;; Parameters:    Size  Location     Type
  6746 ;;		None
  6747 ;; Auto vars:     Size  Location     Type
  6748 ;;		None
  6749 ;; Return value:  Size  Location     Type
  6750 ;;                  1    wreg      void 
  6751 ;; Registers used:
  6752 ;;		None
  6753 ;; Tracked objects:
  6754 ;;		On entry : 0/0
  6755 ;;		On exit  : 0/0
  6756 ;;		Unchanged: 0/0
  6757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6758 ;;      Params:         0       0       0       0       0
  6759 ;;      Locals:         0       0       0       0       0
  6760 ;;      Temps:          0       0       0       0       0
  6761 ;;      Totals:         0       0       0       0       0
  6762 ;;Total ram usage:        0 bytes
  6763 ;; Hardware stack levels used: 1
  6764 ;; Hardware stack levels required when called: 1
  6765 ;; This function calls:
  6766 ;;		Nothing
  6767 ;; This function is called by:
  6768 ;;		_main
  6769 ;; This function uses a non-reentrant model
  6770 ;;
  6771                           
  6772     0B74                     _WDT_init:	
  6773                           ;psect for function _WDT_init
  6774                           
  6775     0B74                     l2249:	
  6776                           ;incstack = 0
  6777                           ; Regs used in _WDT_init: []
  6778                           
  6779     0B74  1683               	bsf	3,5	;RP0=1, select bank1
  6780     0B75  1303               	bcf	3,6	;RP1=0, select bank1
  6781     0B76  1581               	bsf	1,3	;volatile
  6782     0B77  1401               	bsf	1,0	;volatile
  6783     0B78  1481               	bsf	1,1	;volatile
  6784     0B79  1501               	bsf	1,2	;volatile
  6785     0B7A  0064               	clrwdt	;# 
  6786     0B7B                     l95:
  6787     0B7B  0008               	return
  6788     0B7C                     __end_of_WDT_init:
  6789                           
  6790                           	psect	text47
  6791     0615                     __ptext47:	
  6792 ;; *************** function _Lcd_Init *****************
  6793 ;; Defined at:
  6794 ;;		line 70 in file "./lcd.h"
  6795 ;; Parameters:    Size  Location     Type
  6796 ;;		None
  6797 ;; Auto vars:     Size  Location     Type
  6798 ;;		None
  6799 ;; Return value:  Size  Location     Type
  6800 ;;                  1    wreg      void 
  6801 ;; Registers used:
  6802 ;;		wreg, status,2, status,0, pclath, cstack
  6803 ;; Tracked objects:
  6804 ;;		On entry : 0/0
  6805 ;;		On exit  : 0/0
  6806 ;;		Unchanged: 0/0
  6807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6808 ;;      Params:         0       0       0       0       0
  6809 ;;      Locals:         0       0       0       0       0
  6810 ;;      Temps:          2       0       0       0       0
  6811 ;;      Totals:         2       0       0       0       0
  6812 ;;Total ram usage:        2 bytes
  6813 ;; Hardware stack levels used: 1
  6814 ;; Hardware stack levels required when called: 3
  6815 ;; This function calls:
  6816 ;;		_Lcd_Cmd
  6817 ;;		_Lcd_Port
  6818 ;; This function is called by:
  6819 ;;		_main
  6820 ;; This function uses a non-reentrant model
  6821 ;;
  6822                           
  6823     0615                     _Lcd_Init:	
  6824                           ;psect for function _Lcd_Init
  6825                           
  6826     0615                     l2769:	
  6827                           ;incstack = 0
  6828                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  6829                           
  6830                           
  6831                           ;./lcd.h: 72:   Lcd_Port(0x00);
  6832     0615  3000               	movlw	0
  6833     0616  120A  158A  24D2  120A  118A  	fcall	_Lcd_Port
  6834     061B                     l2771:
  6835                           
  6836                           ;./lcd.h: 73:    _delay((unsigned long)((20)*(4000000/4000.0)));
  6837     061B  301A               	movlw	26
  6838     061C  00F7               	movwf	??_Lcd_Init+1
  6839     061D  30F8               	movlw	248
  6840     061E  00F6               	movwf	??_Lcd_Init
  6841     061F                     u2817:
  6842     061F  0BF6               	decfsz	??_Lcd_Init,f
  6843     0620  2E1F               	goto	u2817
  6844     0621  0BF7               	decfsz	??_Lcd_Init+1,f
  6845     0622  2E1F               	goto	u2817
  6846     0623  0000               	nop
  6847     0624                     l2773:
  6848                           
  6849                           ;./lcd.h: 74:   Lcd_Cmd(0x03);
  6850     0624  3003               	movlw	3
  6851     0625  120A  158A  2497  120A  118A  	fcall	_Lcd_Cmd
  6852                           
  6853                           ;./lcd.h: 75:  _delay((unsigned long)((5)*(4000000/4000.0)));
  6854     062A  3007               	movlw	7
  6855     062B  00F7               	movwf	??_Lcd_Init+1
  6856     062C  307D               	movlw	125
  6857     062D  00F6               	movwf	??_Lcd_Init
  6858     062E                     u2827:
  6859     062E  0BF6               	decfsz	??_Lcd_Init,f
  6860     062F  2E2E               	goto	u2827
  6861     0630  0BF7               	decfsz	??_Lcd_Init+1,f
  6862     0631  2E2E               	goto	u2827
  6863     0632                     l2775:
  6864                           
  6865                           ;./lcd.h: 76:   Lcd_Cmd(0x03);
  6866     0632  3003               	movlw	3
  6867     0633  120A  158A  2497  120A  118A  	fcall	_Lcd_Cmd
  6868     0638                     l2777:
  6869                           
  6870                           ;./lcd.h: 77:  _delay((unsigned long)((11)*(4000000/4000.0)));
  6871     0638  300F               	movlw	15
  6872     0639  00F7               	movwf	??_Lcd_Init+1
  6873     063A  3047               	movlw	71
  6874     063B  00F6               	movwf	??_Lcd_Init
  6875     063C                     u2837:
  6876     063C  0BF6               	decfsz	??_Lcd_Init,f
  6877     063D  2E3C               	goto	u2837
  6878     063E  0BF7               	decfsz	??_Lcd_Init+1,f
  6879     063F  2E3C               	goto	u2837
  6880     0640  2E41               	nop2
  6881                           
  6882                           ;./lcd.h: 78:   Lcd_Cmd(0x03);
  6883     0641  3003               	movlw	3
  6884     0642  120A  158A  2497  120A  118A  	fcall	_Lcd_Cmd
  6885                           
  6886                           ;./lcd.h: 80:   Lcd_Cmd(0x02);
  6887     0647  3002               	movlw	2
  6888     0648  120A  158A  2497  120A  118A  	fcall	_Lcd_Cmd
  6889                           
  6890                           ;./lcd.h: 81:   Lcd_Cmd(0x02);
  6891     064D  3002               	movlw	2
  6892     064E  120A  158A  2497  120A  118A  	fcall	_Lcd_Cmd
  6893                           
  6894                           ;./lcd.h: 82:   Lcd_Cmd(0x08);
  6895     0653  3008               	movlw	8
  6896     0654  120A  158A  2497  120A  118A  	fcall	_Lcd_Cmd
  6897                           
  6898                           ;./lcd.h: 83:   Lcd_Cmd(0x00);
  6899     0659  3000               	movlw	0
  6900     065A  120A  158A  2497  120A  118A  	fcall	_Lcd_Cmd
  6901                           
  6902                           ;./lcd.h: 84:   Lcd_Cmd(0x0C);
  6903     065F  300C               	movlw	12
  6904     0660  120A  158A  2497  120A  118A  	fcall	_Lcd_Cmd
  6905                           
  6906                           ;./lcd.h: 85:   Lcd_Cmd(0x00);
  6907     0665  3000               	movlw	0
  6908     0666  120A  158A  2497  120A  118A  	fcall	_Lcd_Cmd
  6909                           
  6910                           ;./lcd.h: 86:   Lcd_Cmd(0x06);
  6911     066B  3006               	movlw	6
  6912     066C  120A  158A  2497  120A  118A  	fcall	_Lcd_Cmd
  6913     0671                     l158:
  6914     0671  0008               	return
  6915     0672                     __end_of_Lcd_Init:
  6916                           
  6917                           	psect	text48
  6918     0C97                     __ptext48:	
  6919 ;; *************** function _Lcd_Cmd *****************
  6920 ;; Defined at:
  6921 ;;		line 34 in file "./lcd.h"
  6922 ;; Parameters:    Size  Location     Type
  6923 ;;  a               1    wreg     unsigned char 
  6924 ;; Auto vars:     Size  Location     Type
  6925 ;;  a               1    5[COMMON] unsigned char 
  6926 ;; Return value:  Size  Location     Type
  6927 ;;                  1    wreg      void 
  6928 ;; Registers used:
  6929 ;;		wreg, status,2, status,0, pclath, cstack
  6930 ;; Tracked objects:
  6931 ;;		On entry : 0/0
  6932 ;;		On exit  : 0/0
  6933 ;;		Unchanged: 0/0
  6934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6935 ;;      Params:         0       0       0       0       0
  6936 ;;      Locals:         1       0       0       0       0
  6937 ;;      Temps:          2       0       0       0       0
  6938 ;;      Totals:         3       0       0       0       0
  6939 ;;Total ram usage:        3 bytes
  6940 ;; Hardware stack levels used: 1
  6941 ;; Hardware stack levels required when called: 2
  6942 ;; This function calls:
  6943 ;;		_Lcd_Port
  6944 ;; This function is called by:
  6945 ;;		_Lcd_Clear
  6946 ;;		_Lcd_Set_Cursor
  6947 ;;		_Lcd_Init
  6948 ;; This function uses a non-reentrant model
  6949 ;;
  6950                           
  6951     0C97                     _Lcd_Cmd:	
  6952                           ;psect for function _Lcd_Cmd
  6953                           
  6954                           
  6955                           ;incstack = 0
  6956                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  6957                           ;Lcd_Cmd@a stored from wreg
  6958     0C97  00F5               	movwf	Lcd_Cmd@a
  6959     0C98                     l2429:
  6960                           
  6961                           ;./lcd.h: 34: void Lcd_Cmd(char a);./lcd.h: 35: {;./lcd.h: 36:  RD2 = 0;
  6962     0C98  1283               	bcf	3,5	;RP0=0, select bank0
  6963     0C99  1303               	bcf	3,6	;RP1=0, select bank0
  6964     0C9A  1108               	bcf	8,2	;volatile
  6965     0C9B                     l2431:
  6966                           
  6967                           ;./lcd.h: 37:  Lcd_Port(a);
  6968     0C9B  0875               	movf	Lcd_Cmd@a,w
  6969     0C9C  120A  158A  24D2  120A  158A  	fcall	_Lcd_Port
  6970     0CA1                     l2433:
  6971                           
  6972                           ;./lcd.h: 38:  RD3 = 1;
  6973     0CA1  1283               	bcf	3,5	;RP0=0, select bank0
  6974     0CA2  1303               	bcf	3,6	;RP1=0, select bank0
  6975     0CA3  1588               	bsf	8,3	;volatile
  6976     0CA4                     l2435:
  6977                           
  6978                           ;./lcd.h: 39:         _delay((unsigned long)((4)*(4000000/4000.0)));
  6979     0CA4  3006               	movlw	6
  6980     0CA5  00F4               	movwf	??_Lcd_Cmd+1
  6981     0CA6  3030               	movlw	48
  6982     0CA7  00F3               	movwf	??_Lcd_Cmd
  6983     0CA8                     u2847:
  6984     0CA8  0BF3               	decfsz	??_Lcd_Cmd,f
  6985     0CA9  2CA8               	goto	u2847
  6986     0CAA  0BF4               	decfsz	??_Lcd_Cmd+1,f
  6987     0CAB  2CA8               	goto	u2847
  6988     0CAC  0000               	nop
  6989     0CAD                     l2437:
  6990                           
  6991                           ;./lcd.h: 40:         RD3 = 0;
  6992     0CAD  1283               	bcf	3,5	;RP0=0, select bank0
  6993     0CAE  1303               	bcf	3,6	;RP1=0, select bank0
  6994     0CAF  1188               	bcf	8,3	;volatile
  6995     0CB0                     l146:
  6996     0CB0  0008               	return
  6997     0CB1                     __end_of_Lcd_Cmd:
  6998                           
  6999                           	psect	text49
  7000     0CD2                     __ptext49:	
  7001 ;; *************** function _Lcd_Port *****************
  7002 ;; Defined at:
  7003 ;;		line 12 in file "./lcd.h"
  7004 ;; Parameters:    Size  Location     Type
  7005 ;;  a               1    wreg     unsigned char 
  7006 ;; Auto vars:     Size  Location     Type
  7007 ;;  a               1    2[COMMON] unsigned char 
  7008 ;; Return value:  Size  Location     Type
  7009 ;;                  1    wreg      void 
  7010 ;; Registers used:
  7011 ;;		wreg
  7012 ;; Tracked objects:
  7013 ;;		On entry : 0/0
  7014 ;;		On exit  : 0/0
  7015 ;;		Unchanged: 0/0
  7016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7017 ;;      Params:         0       0       0       0       0
  7018 ;;      Locals:         1       0       0       0       0
  7019 ;;      Temps:          0       0       0       0       0
  7020 ;;      Totals:         1       0       0       0       0
  7021 ;;Total ram usage:        1 bytes
  7022 ;; Hardware stack levels used: 1
  7023 ;; Hardware stack levels required when called: 1
  7024 ;; This function calls:
  7025 ;;		Nothing
  7026 ;; This function is called by:
  7027 ;;		_Lcd_Cmd
  7028 ;;		_Lcd_Init
  7029 ;;		_Lcd_Write_Char
  7030 ;; This function uses a non-reentrant model
  7031 ;;
  7032                           
  7033     0CD2                     _Lcd_Port:	
  7034                           ;psect for function _Lcd_Port
  7035                           
  7036                           
  7037                           ;incstack = 0
  7038                           ; Regs used in _Lcd_Port: [wreg]
  7039                           ;Lcd_Port@a stored from wreg
  7040     0CD2  00F2               	movwf	Lcd_Port@a
  7041     0CD3                     l2411:
  7042                           
  7043                           ;./lcd.h: 12: void Lcd_Port(char a);./lcd.h: 13: {;./lcd.h: 14:  if(a & 1)
  7044     0CD3  1C72               	btfss	Lcd_Port@a,0
  7045     0CD4  2CD6               	goto	u2181
  7046     0CD5  2CD7               	goto	u2180
  7047     0CD6                     u2181:
  7048     0CD6  2CDB               	goto	l135
  7049     0CD7                     u2180:
  7050     0CD7                     l2413:
  7051                           
  7052                           ;./lcd.h: 15:   RD4 = 1;
  7053     0CD7  1283               	bcf	3,5	;RP0=0, select bank0
  7054     0CD8  1303               	bcf	3,6	;RP1=0, select bank0
  7055     0CD9  1608               	bsf	8,4	;volatile
  7056     0CDA  2CDE               	goto	l136
  7057     0CDB                     l135:	
  7058                           ;./lcd.h: 16:  else
  7059                           
  7060                           
  7061                           ;./lcd.h: 17:   RD4 = 0;
  7062     0CDB  1283               	bcf	3,5	;RP0=0, select bank0
  7063     0CDC  1303               	bcf	3,6	;RP1=0, select bank0
  7064     0CDD  1208               	bcf	8,4	;volatile
  7065     0CDE                     l136:
  7066                           
  7067                           ;./lcd.h: 19:  if(a & 2)
  7068     0CDE  1CF2               	btfss	Lcd_Port@a,1
  7069     0CDF  2CE1               	goto	u2191
  7070     0CE0  2CE2               	goto	u2190
  7071     0CE1                     u2191:
  7072     0CE1  2CE4               	goto	l137
  7073     0CE2                     u2190:
  7074     0CE2                     l2415:
  7075                           
  7076                           ;./lcd.h: 20:   RD5 = 1;
  7077     0CE2  1688               	bsf	8,5	;volatile
  7078     0CE3  2CE5               	goto	l138
  7079     0CE4                     l137:	
  7080                           ;./lcd.h: 21:  else
  7081                           
  7082                           
  7083                           ;./lcd.h: 22:   RD5 = 0;
  7084     0CE4  1288               	bcf	8,5	;volatile
  7085     0CE5                     l138:
  7086                           
  7087                           ;./lcd.h: 24:  if(a & 4)
  7088     0CE5  1D72               	btfss	Lcd_Port@a,2
  7089     0CE6  2CE8               	goto	u2201
  7090     0CE7  2CE9               	goto	u2200
  7091     0CE8                     u2201:
  7092     0CE8  2CEB               	goto	l139
  7093     0CE9                     u2200:
  7094     0CE9                     l2417:
  7095                           
  7096                           ;./lcd.h: 25:   RD6 = 1;
  7097     0CE9  1708               	bsf	8,6	;volatile
  7098     0CEA  2CEC               	goto	l140
  7099     0CEB                     l139:	
  7100                           ;./lcd.h: 26:  else
  7101                           
  7102                           
  7103                           ;./lcd.h: 27:   RD6 = 0;
  7104     0CEB  1308               	bcf	8,6	;volatile
  7105     0CEC                     l140:
  7106                           
  7107                           ;./lcd.h: 29:  if(a & 8)
  7108     0CEC  1DF2               	btfss	Lcd_Port@a,3
  7109     0CED  2CEF               	goto	u2211
  7110     0CEE  2CF0               	goto	u2210
  7111     0CEF                     u2211:
  7112     0CEF  2CF2               	goto	l141
  7113     0CF0                     u2210:
  7114     0CF0                     l2419:
  7115                           
  7116                           ;./lcd.h: 30:   RD7 = 1;
  7117     0CF0  1788               	bsf	8,7	;volatile
  7118     0CF1  2CF3               	goto	l143
  7119     0CF2                     l141:	
  7120                           ;./lcd.h: 31:  else
  7121                           
  7122                           
  7123                           ;./lcd.h: 32:   RD7 = 0;
  7124     0CF2  1388               	bcf	8,7	;volatile
  7125     0CF3                     l143:
  7126     0CF3  0008               	return
  7127     0CF4                     __end_of_Lcd_Port:
  7128                           
  7129                           	psect	text50
  7130     0BA7                     __ptext50:	
  7131 ;; *************** function _ADC_init *****************
  7132 ;; Defined at:
  7133 ;;		line 123 in file "./config.h"
  7134 ;; Parameters:    Size  Location     Type
  7135 ;;		None
  7136 ;; Auto vars:     Size  Location     Type
  7137 ;;		None
  7138 ;; Return value:  Size  Location     Type
  7139 ;;                  1    wreg      void 
  7140 ;; Registers used:
  7141 ;;		None
  7142 ;; Tracked objects:
  7143 ;;		On entry : 0/0
  7144 ;;		On exit  : 0/0
  7145 ;;		Unchanged: 0/0
  7146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7147 ;;      Params:         0       0       0       0       0
  7148 ;;      Locals:         0       0       0       0       0
  7149 ;;      Temps:          0       0       0       0       0
  7150 ;;      Totals:         0       0       0       0       0
  7151 ;;Total ram usage:        0 bytes
  7152 ;; Hardware stack levels used: 1
  7153 ;; Hardware stack levels required when called: 1
  7154 ;; This function calls:
  7155 ;;		Nothing
  7156 ;; This function is called by:
  7157 ;;		_main
  7158 ;; This function uses a non-reentrant model
  7159 ;;
  7160                           
  7161     0BA7                     _ADC_init:	
  7162                           ;psect for function _ADC_init
  7163                           
  7164     0BA7                     l2263:	
  7165                           ;incstack = 0
  7166                           ; Regs used in _ADC_init: []
  7167                           
  7168                           
  7169                           ;./config.h: 125:    ADCON1bits.PCFG0=0;
  7170     0BA7  1683               	bsf	3,5	;RP0=1, select bank1
  7171     0BA8  1303               	bcf	3,6	;RP1=0, select bank1
  7172     0BA9  101F               	bcf	31,0	;volatile
  7173                           
  7174                           ;./config.h: 126:    ADCON1bits.PCFG1=0;
  7175     0BAA  109F               	bcf	31,1	;volatile
  7176                           
  7177                           ;./config.h: 127:    ADCON1bits.PCFG2=0;
  7178     0BAB  111F               	bcf	31,2	;volatile
  7179                           
  7180                           ;./config.h: 128:    ADCON1bits.PCFG3=0;
  7181     0BAC  119F               	bcf	31,3	;volatile
  7182                           
  7183                           ;./config.h: 131:    ADCON1bits.ADFM = 1;
  7184     0BAD  179F               	bsf	31,7	;volatile
  7185                           
  7186                           ;./config.h: 134:    ADCON0bits.ADCS0 = 0 ;
  7187     0BAE  1283               	bcf	3,5	;RP0=0, select bank0
  7188     0BAF  1303               	bcf	3,6	;RP1=0, select bank0
  7189     0BB0  131F               	bcf	31,6	;volatile
  7190                           
  7191                           ;./config.h: 135:    ADCON0bits.ADCS1 = 0 ;
  7192     0BB1  139F               	bcf	31,7	;volatile
  7193                           
  7194                           ;./config.h: 137:    ADCON0bits.ADON = 1;
  7195     0BB2  141F               	bsf	31,0	;volatile
  7196     0BB3                     l107:
  7197     0BB3  0008               	return
  7198     0BB4                     __end_of_ADC_init:
  7199                           
  7200                           	psect	text51
  7201     0D7F                     __ptext51:	
  7202 ;; *************** function _interruptionHandler *****************
  7203 ;; Defined at:
  7204 ;;		line 25 in file "main.c"
  7205 ;; Parameters:    Size  Location     Type
  7206 ;;		None
  7207 ;; Auto vars:     Size  Location     Type
  7208 ;;		None
  7209 ;; Return value:  Size  Location     Type
  7210 ;;                  1    wreg      void 
  7211 ;; Registers used:
  7212 ;;		wreg
  7213 ;; Tracked objects:
  7214 ;;		On entry : 0/0
  7215 ;;		On exit  : 0/0
  7216 ;;		Unchanged: 0/0
  7217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7218 ;;      Params:         0       0       0       0       0
  7219 ;;      Locals:         0       0       0       0       0
  7220 ;;      Temps:          2       0       0       0       0
  7221 ;;      Totals:         2       0       0       0       0
  7222 ;;Total ram usage:        2 bytes
  7223 ;; Hardware stack levels used: 1
  7224 ;; This function calls:
  7225 ;;		Nothing
  7226 ;; This function is called by:
  7227 ;;		Interrupt level 1
  7228 ;; This function uses a non-reentrant model
  7229 ;;
  7230                           
  7231     0D7F                     _interruptionHandler:	
  7232                           ;psect for function _interruptionHandler
  7233                           
  7234     0D7F                     i1l2343:
  7235                           
  7236                           ;main.c: 27:   if(INTCONbits.INTF)
  7237     0D7F  1C8B               	btfss	11,1	;volatile
  7238     0D80  2D82               	goto	u214_21
  7239     0D81  2D83               	goto	u214_20
  7240     0D82                     u214_21:
  7241     0D82  2D8B               	goto	i1l247
  7242     0D83                     u214_20:
  7243     0D83                     i1l2345:
  7244                           
  7245                           ;main.c: 28:   {;main.c: 29:     INTCONbits.INTF = 0;
  7246     0D83  108B               	bcf	11,1	;volatile
  7247                           
  7248                           ;main.c: 30:     tankState = WTANK_ERROR;
  7249     0D84  3003               	movlw	3
  7250     0D85  00FB               	movwf	_tankState
  7251                           
  7252                           ;main.c: 31:     irrigationState = IRRIG_ERROR;
  7253     0D86  3002               	movlw	2
  7254     0D87  1283               	bcf	3,5	;RP0=0, select bank0
  7255     0D88  1303               	bcf	3,6	;RP1=0, select bank0
  7256     0D89  00ED               	movwf	_irrigationState
  7257                           
  7258                           ;main.c: 32:   }
  7259     0D8A  2D9C               	goto	i1l250
  7260     0D8B                     i1l247:	
  7261                           ;main.c: 33:   else if(PIR1bits.TMR1IF)
  7262                           
  7263     0D8B  1283               	bcf	3,5	;RP0=0, select bank0
  7264     0D8C  1303               	bcf	3,6	;RP1=0, select bank0
  7265     0D8D  1C0C               	btfss	12,0	;volatile
  7266     0D8E  2D90               	goto	u215_21
  7267     0D8F  2D91               	goto	u215_20
  7268     0D90                     u215_21:
  7269     0D90  2D9C               	goto	i1l250
  7270     0D91                     u215_20:
  7271     0D91                     i1l2347:
  7272                           
  7273                           ;main.c: 34:   {;main.c: 35:     PIR1bits.TMR1IF = 0;
  7274     0D91  100C               	bcf	12,0	;volatile
  7275                           
  7276                           ;main.c: 38:     TMR1L = 0xDC;
  7277     0D92  30DC               	movlw	220
  7278     0D93  008E               	movwf	14	;volatile
  7279                           
  7280                           ;main.c: 39:     TMR1H = 0x0B;
  7281     0D94  300B               	movlw	11
  7282     0D95  008F               	movwf	15	;volatile
  7283     0D96                     i1l2349:
  7284                           
  7285                           ;main.c: 41:     timerCounter++;
  7286     0D96  3001               	movlw	1
  7287     0D97  07DC               	addwf	_timerCounter,f	;volatile
  7288     0D98  1803               	skipnc
  7289     0D99  0ADD               	incf	_timerCounter+1,f	;volatile
  7290     0D9A  3000               	movlw	0
  7291     0D9B  07DD               	addwf	_timerCounter+1,f	;volatile
  7292     0D9C                     i1l250:
  7293     0D9C  0871               	movf	??_interruptionHandler+1,w
  7294     0D9D  008A               	movwf	10
  7295     0D9E  0E70               	swapf	??_interruptionHandler,w
  7296     0D9F  0083               	movwf	3
  7297     0DA0  0EFE               	swapf	btemp,f
  7298     0DA1  0E7E               	swapf	btemp,w
  7299     0DA2  0009               	retfie
  7300     0DA3                     __end_of_interruptionHandler:
  7301     0002                     ___latbits      equ	2
  7302     0006                     fptotal         equ	6
  7303                           
  7304                           	psect	intentry
  7305     0004                     __pintentry:	
  7306                           ;incstack = 0
  7307                           ; Regs used in _interruptionHandler: [wreg]
  7308                           
  7309     0004                     interrupt_function:
  7310     007E                     saved_w         set	btemp
  7311     0004  00FE               	movwf	btemp
  7312     0005  0E03               	swapf	3,w
  7313     0006  00F0               	movwf	??_interruptionHandler
  7314     0007  080A               	movf	10,w
  7315     0008  00F1               	movwf	??_interruptionHandler+1
  7316     0009  120A  158A  2D7F   	ljmp	_interruptionHandler
  7317                           
  7318                           	psect	functab
  7319     0045                     __pfunctab:
  7320     0045                     __fptable:
  7321     0045                     fptable:
  7322     0045  00FF               	movwf	(btemp+1)& (0+127)
  7323     0046  3000               	movlw	high fptable
  7324     0047  008A               	movwf	10
  7325     0048  087F               	movf	(btemp+1)& (0+127),w
  7326     0049  0782               	addwf	2,f
  7327     004A                     fpbase:
  7328     004A  284A               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  7329     004B                     fp__interrupt_WTANK_timeout:
  7330     004B  120A  158A  2B84   	ljmp	_interrupt_WTANK_timeout
  7331     004E                     fp__ADC_readAll:
  7332     004E                     entry__ADC_readAll:
  7333     004E  120A  158A  2BF9   	ljmp	_ADC_readAll
  7334     0051                     fp__interrupt_IRRIG_timeout:
  7335     0051  120A  158A  2B9D   	ljmp	_interrupt_IRRIG_timeout
  7336     0054                     __end_of__fptable:
  7337     000F                     __size_of__fptable equ	__end_of__fptable-__fptable
  7338     007E                     btemp           set	126	;btemp
  7339     007E                     wtemp0          set	126
  7340                           
  7341                           	psect	config
  7342                           
  7343                           ;Config register CONFIG @ 0x2007
  7344                           ;	Oscillator Selection bits
  7345                           ;	FOSC = HS, HS oscillator
  7346                           ;	Watchdog Timer Enable bit
  7347                           ;	WDTE = ON, WDT enabled
  7348                           ;	Power-up Timer Enable bit
  7349                           ;	PWRTE = ON, PWRT enabled
  7350                           ;	Brown-out Reset Enable bit
  7351                           ;	BOREN = ON, BOR enabled
  7352                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  7353                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  7354                           ;	Data EEPROM Memory Code Protection bit
  7355                           ;	CPD = OFF, Data EEPROM code protection off
  7356                           ;	Flash Program Memory Write Enable bits
  7357                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  7358                           ;	In-Circuit Debugger Mode bit
  7359                           ;	DEBUG = 0x1, unprogrammed default
  7360                           ;	Flash Program Memory Code Protection bit
  7361                           ;	CP = OFF, Code protection off
  7362     2007                     	org	8199
  7363     2007  3F76               	dw	16246

Data Sizes:
    Strings     114
    Constant    0
    Data        35
    BSS         53
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     60      79
    BANK1            80      0      64
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> print_SoilMoisture@buffer(BANK0[16]), print_Temperature@buffer(BANK0[16]), 

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> print_SoilMoisture@buffer(BANK0[16]), print_Temperature@buffer(BANK0[16]), 

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    IrrigationStateString	PTR unsigned char [3] size(1) Largest target is 6
		 -> STR_5(CODE[3]), STR_6(CODE[4]), STR_7(CODE[6]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 16
		 -> draw_Index@temp_index(BANK0[3]), print_SoilMoisture@buffer(BANK0[16]), print_Temperature@buffer(BANK0[16]), STR_1(CODE[6]), 
		 -> STR_10(CODE[13]), STR_12(CODE[15]), STR_13(CODE[7]), STR_14(CODE[10]), 
		 -> STR_15(CODE[13]), STR_2(CODE[5]), STR_3(CODE[6]), STR_4(CODE[5]), 
		 -> STR_5(CODE[3]), STR_6(CODE[4]), STR_7(CODE[6]), STR_8(CODE[14]), 
		 -> STR_9(CODE[11]), 

    runTimer@timer	PTR struct . size(2) Largest target is 4
		 -> timer_ADCReadAll(BANK1[4]), timer_IRRIG_Timeout(BANK1[4]), timer_WTANK_Timeout(BANK1[4]), 

    runTimer@timer$callback	PTR FTN()void  size(1) Largest target is 1
		 -> ADC_readAll(), interrupt_IRRIG_timeout(), interrupt_WTANK_timeout(), 

    S1147$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> print_SoilMoisture@buffer(BANK0[16]), print_Temperature@buffer(BANK0[16]), 

    S1147$source	PTR const unsigned char  size(1) Largest target is 0

    S319$callback	PTR FTN()void  size(1) Largest target is 1
		 -> ADC_readAll(), interrupt_IRRIG_timeout(), interrupt_WTANK_timeout(), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_11(CODE[3]), STR_16(CODE[3]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 16
		 -> print_SoilMoisture@buffer(BANK0[16]), print_Temperature@buffer(BANK0[16]), 

    startTimer@timer	PTR struct . size(2) Largest target is 4
		 -> timer_IRRIG_Timeout(BANK1[4]), timer_WTANK_Timeout(BANK1[4]), 

    startTimer@timer$callback	PTR FTN()void  size(1) Largest target is 1
		 -> ADC_readAll(), interrupt_IRRIG_timeout(), interrupt_WTANK_timeout(), 

    stopTimer@timer	PTR struct . size(2) Largest target is 4
		 -> timer_IRRIG_Timeout(BANK1[4]), timer_WTANK_Timeout(BANK1[4]), 

    stopTimer@timer$callback	PTR FTN()void  size(1) Largest target is 1
		 -> ADC_readAll(), interrupt_IRRIG_timeout(), interrupt_WTANK_timeout(), 

    TankStateString	PTR unsigned char [4] size(1) Largest target is 6
		 -> STR_1(CODE[6]), STR_2(CODE[5]), STR_3(CODE[6]), STR_4(CODE[5]), 

    timer_ADCReadAll$callback	PTR FTN()void  size(1) Largest target is 1
		 -> ADC_readAll(), interrupt_IRRIG_timeout(), interrupt_WTANK_timeout(), 

    timer_IRRIG_Timeout$callback	PTR FTN()void  size(1) Largest target is 1
		 -> ADC_readAll(), interrupt_IRRIG_timeout(), interrupt_WTANK_timeout(), 

    timer_WTANK_Timeout$callback	PTR FTN()void  size(1) Largest target is 1
		 -> ADC_readAll(), interrupt_IRRIG_timeout(), interrupt_WTANK_timeout(), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 3
		 -> STR_11(CODE[3]), STR_16(CODE[3]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 3
		 -> STR_11(CODE[3]), STR_16(CODE[3]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_11(CODE[3]), STR_16(CODE[3]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 


Critical Paths under _main in COMMON

    _startFilling->_startTimer
    _startIrrigation->_startTimer
    _stopFilling->_stopTimer
    _stopIrrigation->_stopTimer
    _map->___lmul
    ___aldiv->___lmul
    _readLight->_ADC_Read
    _print_TankState->_Lcd_Write_String
    _vfpfcnvrt->___awdiv
    _vfpfcnvrt->_abs
    _abs->___awmod
    _print_Irrigation->_Lcd_Write_String
    _print_ArtificialLight->_Lcd_Write_String
    _draw_Index->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _interruptionHandler in COMMON

    None.

Critical Paths under _main in BANK0

    _readTemperature->_map
    _readSoilMoisture->_map
    _map->___aldiv
    ___aldiv->___lmul
    _lcd_run->_print_SoilMoisture
    _lcd_run->_print_Temperature
    _print_Temperature->_sprintf
    _print_TankState->_draw_Index
    _print_SoilMoisture->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_fputc
    _print_Irrigation->_draw_Index
    _print_ArtificialLight->_draw_Index
    _draw_Index->_Lcd_Write_String

Critical Paths under _interruptionHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptionHandler in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptionHandler in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptionHandler in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   24585
                           _ADC_init
                        _ADC_readAll
                           _Lcd_Init
                           _WDT_init
                  _interruption_init
                            _lcd_run
                          _pins_init
                           _runTimer
                _run_IrrigationLogic
                 _run_waterTankLogic
                    _timer1_1ms_init
 ---------------------------------------------------------------------------------
 (1) _timer1_1ms_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _run_waterTankLogic                                   2     2      0     270
                                              6 COMMON     2     2      0
                   _check_TankStatus
                       _startFilling
                        _stopFilling
 ---------------------------------------------------------------------------------
 (2) _startFilling                                         0     0      0      46
                         _startTimer
 ---------------------------------------------------------------------------------
 (2) _check_TankStatus                                     3     3      0     178
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _run_IrrigationLogic                                  2     0      2     137
                                              6 COMMON     2     0      2
                    _startIrrigation
                     _stopIrrigation
 ---------------------------------------------------------------------------------
 (2) _startIrrigation                                      0     0      0      46
                         _startTimer
 ---------------------------------------------------------------------------------
 (3) _startTimer                                           4     2      2      46
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _runTimer                                             4     2      2    2320
                                             50 BANK0      4     2      2
                        _ADC_readAll *
            _interrupt_IRRIG_timeout *
            _interrupt_WTANK_timeout *
 ---------------------------------------------------------------------------------
 (2) _interrupt_WTANK_timeout                              0     0      0      46
                        _stopFilling
 ---------------------------------------------------------------------------------
 (2) _stopFilling                                          0     0      0      46
                          _stopTimer
 ---------------------------------------------------------------------------------
 (2) _interrupt_IRRIG_timeout                              0     0      0      46
                     _stopIrrigation
 ---------------------------------------------------------------------------------
 (2) _stopIrrigation                                       0     0      0      46
                          _stopTimer
 ---------------------------------------------------------------------------------
 (3) _stopTimer                                            4     2      2      46
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _ADC_readAll                                          0     0      0    2095
                          _readLight
                   _readSoilMoisture
                    _readTemperature
 ---------------------------------------------------------------------------------
 (3) _readTemperature                                      0     0      0    1033
                           _ADC_Read
                                _map
 ---------------------------------------------------------------------------------
 (3) _readSoilMoisture                                     0     0      0    1033
                           _ADC_Read
                                _map
 ---------------------------------------------------------------------------------
 (4) _map                                                 30    20     10    1004
                                             20 BANK0     30    20     10
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              13     5      8     142
                                              2 COMMON     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (5) ___aldiv                                             15     7      8     451
                                              5 BANK0     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _readLight                                            0     0      0      29
                           _ADC_Read
 ---------------------------------------------------------------------------------
 (4) _ADC_Read                                             4     2      2      29
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _pins_init                                            4     1      3      98
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _lcd_run                                              0     0      0   19242
                _lcd_debounceButtons
              _print_ArtificialLight
                   _print_Irrigation
                 _print_SoilMoisture
                    _print_TankState
                  _print_Temperature
 ---------------------------------------------------------------------------------
 (2) _print_Temperature                                   16    16      0    5439
                                             44 BANK0     16    16      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                         _draw_Index
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _print_TankState                                      0     0      0    2788
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _draw_Index
 ---------------------------------------------------------------------------------
 (2) _print_SoilMoisture                                  16    16      0    5439
                                             44 BANK0     16    16      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                         _draw_Index
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             19    15      4    2215
                                             27 BANK0     17    13      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             5     1      4    1897
                                             22 BANK0      5     1      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           13     9      4    1697
                                              9 BANK0     13     9      4
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                               13     9      4     230
                                              2 COMMON     4     0      4
                                              0 BANK0      9     9      0
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2      96
                                              8 COMMON     2     0      2
                                              0 BANK0      2     2      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     298
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     302
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _print_Irrigation                                     0     0      0    2788
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _draw_Index
 ---------------------------------------------------------------------------------
 (2) _print_ArtificialLight                                0     0      0    2788
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _draw_Index
 ---------------------------------------------------------------------------------
 (3) _draw_Index                                           3     3      0    1335
                                              5 BANK0      3     3      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (4) _Lcd_Write_String                                     7     5      2     522
                                              7 COMMON     2     0      2
                                              0 BANK0      5     5      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (5) _Lcd_Write_Char                                       4     4      0     356
                                              3 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Set_Cursor                                       6     5      1     696
                                              6 COMMON     2     1      1
                                              0 BANK0      4     4      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Clear                                            0     0      0     235
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_debounceButtons                                  1     1      0       0
                                              2 COMMON     1     1      0
                       _lcd_turnLeft
                      _lcd_turnRight
 ---------------------------------------------------------------------------------
 (3) _lcd_turnRight                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _lcd_turnLeft                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruption_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     423
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (5) _Lcd_Cmd                                              3     3      0     235
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (6) _Lcd_Port                                             1     1      0     188
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interruptionHandler                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _ADC_readAll
     _readLight
       _ADC_Read
     _readSoilMoisture
       _ADC_Read
       _map
         ___aldiv
           ___lmul (ARG)
         ___lmul
     _readTemperature
       _ADC_Read
       _map
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _WDT_init
   _interruption_init
   _lcd_run
     _lcd_debounceButtons
       _lcd_turnLeft
       _lcd_turnRight
     _print_ArtificialLight
       _Lcd_Clear
         _Lcd_Cmd
       _Lcd_Set_Cursor
         _Lcd_Cmd
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _draw_Index
         _Lcd_Set_Cursor
         _Lcd_Write_String
     _print_Irrigation
       _Lcd_Clear
       _Lcd_Set_Cursor
       _Lcd_Write_String
       _draw_Index
     _print_SoilMoisture
       _Lcd_Clear
       _Lcd_Set_Cursor
       _Lcd_Write_Char
       _Lcd_Write_String
       _draw_Index
       _sprintf
         _vfprintf
           _vfpfcnvrt
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _fputc
               _putch
     _print_TankState
       _Lcd_Clear
       _Lcd_Set_Cursor
       _Lcd_Write_String
       _draw_Index
     _print_Temperature
       _Lcd_Clear
       _Lcd_Set_Cursor
       _Lcd_Write_Char
       _Lcd_Write_String
       _draw_Index
       _sprintf
   _pins_init
   _runTimer
     _ADC_readAll *
     _interrupt_IRRIG_timeout *
       _stopIrrigation
         _stopTimer
     _interrupt_WTANK_timeout *
       _stopFilling
         _stopTimer
   _run_IrrigationLogic
     _startIrrigation
       _startTimer
     _stopIrrigation
   _run_waterTankLogic
     _check_TankStatus
     _startFilling
       _startTimer
     _stopFilling
   _timer1_1ms_init

 _interruptionHandler (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0      64     80.0%
BITBANK1            80      0       0      0.0%
BANK0               80     60      79     98.8%
BITBANK0            80      0       0      0.0%
COMMON              14     10      12     85.7%
BITCOMMON           14      0       1      7.1%
DATA                 0      0     157      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Thu Dec 12 00:12:32 2024

                                pc 0002                                 l95 0B7B  
                               l98 07FF                       ___awdiv@sign 0077  
                               fsr 0004                                l101 0BF8  
                              l110 0DB5                                l104 0B83  
                              l200 0FFF                                l112 0DBB  
                              l120 0143                                l113 0DBC  
                              l210 060F                                l107 0BB3  
                              l123 0DF0                                l140 0CEC  
                              l204 0551                                l116 0DC6  
                              l132 0C08                                l141 0CF2  
                              l214 04EC                                l230 0EEA  
                              l126 0E1A                                l310 0C41  
                              l143 0CF3                                l135 0CDB  
                              l136 0CDE                                l240 0BDB  
                              l208 0614                                l137 0CE4  
                              l161 0EAE                                l129 0BCD  
                              l313 0C21                                l138 0CE5  
                              l146 0CB0                                l314 0C2E  
                              l306 0E79                                l139 0CEB  
                              l235 0BE9                                l219 0E45  
                              l155 0765                                l331 0D7E  
                              l149 0BC0                                l317 0B8B  
                              l325 0717                                l309 0C34  
                              l158 0671                                l167 0FB9  
                              l335 0D15                                l255 039B  
                              l192 0CD1                                l256 03E5  
                              l290 07F4                                l258 03F9  
                              l371 0F73                                l196 0F2E  
                              l382 0C6E                                l383 0C7D  
                              l375 0F73                                l296 07F4  
                              l625 05B4                                l537 02E7  
                              l386 0BA6                                l378 0C5A  
                              l547 036B                                l379 0C68  
                              l638 06C8                                l486 07AD  
                              l935 0D5B                                l973 0232  
                              l986 0C1B                                l979 0D38  
                              l998 02D2                                _RD2 0042  
                              _RD3 0043                                _RD4 0044  
                              _RD5 0045                                _RD6 0046  
                              _RD7 0047                  ??_startIrrigation 0076  
                     _startFilling 0C2F                                _abs 0C09  
                              _map 0054                      ?_lcd_turnLeft 0070  
                              fsr0 0004                                indf 0000  
                     ___awmod@sign 0077                        _stopFilling 0C1C  
                             l1009 0B73                               ?_abs 0078  
                             l2007 0BC1                               l2041 0BD9  
                             l2201 07C3                               l2043 0BDC  
                             l2211 07D8                               l2203 07C8  
                             l2037 0BCE                               l2045 0BE4  
                             l2061 0C69                               l2053 0C25  
                             l2221 07EC                               l2213 07DB  
                             l2301 0E5B                               l2039 0BD6  
                             l2047 0BE7                               l2231 0B84  
                             l2055 0D5C                               l2311 0F2F  
                             l2223 07F1                               l2215 07E0  
                             l2207 07CE                               l2065 0C74  
                             l2049 0C1C                               l2233 0B89  
                             l2241 0C5E                               l2321 0F4C  
                             l2313 0F37                               l2217 07E5  
                             l2209 07D3                               l2225 0C2F  
                             l2305 0E61                               l2411 0CD3  
                             l2059 0D6F                               l2243 0C5F  
                             l2235 0C55                               l2323 0F52  
                             l2315 0F3C                               l2219 07E7  
                             l2251 07F5                               l2413 0CD7  
                             l2261 0B7C                               l2181 0E1B  
                             l1701 0562                               l2421 0C09  
                             l2253 0BEB                               l2501 0335  
                             l2245 0B9D                               l2325 0F5F  
                             l2317 0F40                               l2229 0C38  
                             l2263 0BA7                               l2415 0CE2  
                             l2431 0C9B                               l2191 0E36  
                             l2183 0E21                               l1711 0574  
                             l1703 0567                               l2423 0C0D  
                             l2255 0BF5                               l2511 0358  
                             l2503 0343                               l2247 0BA2  
                             l2239 0C5D                               l2327 0F65  
                             l2319 0F46                               l2417 0CE9  
                             l2433 0CA1                               l2249 0B74  
                             l2193 0E3B                               l2185 0E26  
                             l2601 0757                               l2441 0E7D  
                             l1721 0598                               l1713 057B  
                             l1705 0569                               l2425 0C0E  
                             l2521 0159                               l2257 0BF6  
                             l2513 0363                               l2505 0344  
                             l2419 0CF0                               l2435 0CA4  
                             l2195 0E40                               l2187 0E2B  
                             l2603 075D                               l2451 0E97  
                             l2443 0E7F                               l2611 0F9D  
                             l1731 05B0                               l1723 0599  
                             l1715 057D                               l1707 056B  
                             l2531 0185                               l2523 0161  
                             l2259 0BF7                               l2507 034D  
                             l2437 0CAD                               l2429 0C98  
                             l2189 0E31                               l2461 0EAB  
                             l2453 0E9B                               l2445 0E83  
                             l2605 0F74                               l1725 05A0  
                             l1717 0581                               l1709 0571  
                             l1741 067C                               l2541 01BF  
                             l2533 0192                               l2525 0167  
                             l2517 0144                               l2613 0D16  
                             l2509 0353                               l2197 07AE  
                             l2293 0E46                               l2455 0E9E  
                             l2447 0E86                               l2439 0E7B  
                             l2607 0F79                               l2631 0CB9  
                             l1719 0592                               l1727 05A6  
                             l1751 0690                               l1743 067E  
                             l1735 0672                               l2551 01E9  
                             l2543 01D4                               l2535 0197  
                             l2527 016D                               l2519 0155  
                             l2615 0D1B                               l2711 0526  
                             l2703 0506                               l2471 0794  
                             l2463 0766                               l2623 0DC7  
                             l2199 07C0                               l2295 0E4C  
                             l2457 0EA4                               l2449 0E94  
                             l2609 0F95                               l2633 0CBC  
                             l2721 05B5                               l1729 05AB  
                             l1761 06AD                               l1753 0697  
                             l1745 0682                               l1737 0673  
                             l2553 01F2                               l2545 01DA  
                             l2537 0199                               l2529 0179  
                             l2617 0D28                               l2641 0D39  
                             l2713 052E                               l2705 0510  
                             l2481 02DA                               l2473 07A5  
                             l2465 0770                               l2625 0DF1  
                             l2801 06DE                               l2297 0E51  
                             l2627 0BB4                               l2459 0EA7  
                             l2635 0CBE                               l2731 05DD  
                             l2723 05C7                               l1691 0552  
                             l1763 06B4                               l1755 0699  
                             l1747 0687                               l1739 0677  
                             l2555 0206                               l2547 01DF  
                             l2539 01A0                               l2563 0219  
                             l2619 0D36                               l2651 0D52  
                             l2643 0D3D                               l2715 053D  
                             l2707 0515                               l2491 0308  
                             l2483 02EB                               l2467 0774  
                             l2571 008C                               l2803 06F2  
                             l2299 0E55                               l2811 0376  
                             l2581 071B                               l2637 0CC0  
                             l2629 0CB1                               l2741 0606  
                             l2733 05E5                               l1693 0553  
                             l1757 069D                               l1749 068D  
                             l1765 06BA                               l1781 0260  
                             l1773 0233                               l2549 01E4  
                             l2557 020A                               l2645 0D41  
                             l2717 0546                               l2709 051D  
                             l2493 030B                               l2485 02F6  
                             l2477 02D3                               l2469 078B  
                             l2805 0704                               l2821 037D  
                             l2813 0379                               l2591 0737  
                             l2583 0720                               l2639 0CC8  
                             l2735 05EE                               l2727 05CE  
                             l1695 0557                               l1767 06BF  
                             l1759 06A7                               l1783 0292  
                             l1775 0239                               l2559 0211  
                             l2647 0D43                               l2719 054C  
                             l2671 0F12                               l2663 0EFA  
                             l2751 04A5                               l2743 0482  
                             l1935 0DA4                               l2495 0316  
                             l2487 02F8                               l2479 02D6  
                             l2575 0096                               l2655 0BF9  
                             l2831 03A1                               l2823 0382  
                             l2815 037A                               l2585 072D  
                             l2593 0740                               l2737 05F6  
                             l2729 05D8                               l1697 055C  
                             l1769 06C4                               l1777 023F  
                             l2649 0D45                               l2673 0F1A  
                             l2665 0EFC                               l2657 0EEB  
                             l2761 04D2                               l2753 04AA  
                             l2745 0494                               l1937 0DB0  
                             l2497 031A                               l2489 0300  
                             l2577 00F2                               l2569 0054  
                             l2841 03D2                               l2833 03AC  
                             l2825 0387                               l2817 037B  
                             l2809 036C                               l2771 061B  
                             l2595 0746                               l2587 072F  
                             l2739 05FC                               l2691 0FE1  
                             l2683 0FC9                               l1699 055E  
                             l1779 0246                               l2675 0F29  
                             l2667 0F01                               l2659 0EF3  
                             l2763 04DB                               l2755 04B2  
                             l1939 0DC0                               l2499 0323  
                             l2843 03E1                               l2835 03B1  
                             l2827 038C                               l2819 037C  
                             l2773 0624                               l2597 0753  
                             l2589 0731                               l2693 0FE9  
                             l2685 0FCB                               l2677 0FBA  
                             l2669 0F09                               l2765 04E1  
                             l2757 04BB                               l2749 049B  
                             l2781 0EB5                               l2845 03E8  
                             l2837 03BC                               l2829 039C  
                             ?_map 0034                               l2775 0632  
                             l2599 0755                               l2695 0FFA  
                             l2687 0FD0                               l2679 0FC2  
                             l2767 04E7                               l2759 04C3  
                             l2783 0EBB                               l1991 0D07  
                             l2847 03F5                               l2839 03C7  
                             l2777 0638                               l2769 0615  
                             l2689 0FD8                               l2697 04ED  
                             l2785 0EC1                               l2793 0ED3  
                             l2699 04FF                               l2787 0EC7  
                             l2795 0EE6                               l2779 0EAF  
                             l1987 0CF4                               l2789 0ECD  
                             l2797 06C9                               l2869 0E6B  
                             STR_1 045C                               STR_2 046E  
                             STR_3 0462                               STR_4 0473  
                             STR_5 047C                               STR_6 0478  
                             STR_7 0468                               STR_8 041F  
                             STR_9 0447                               u1100 0571  
                             u1101 0570                               u1120 0581  
                             u1200 068D                               u2000 07E0  
                             u1121 0580                               u1201 068C  
                             u2001 07DF                               u2010 07E5  
                             u1115 0575                               u2011 07E4  
                             u1140 0592                               u1220 069D  
                             u1300 0292                               u2100 0F72  
                             u2020 07EC                               u1141 0591  
                             u1221 069C                               u1301 0291  
                             u2101 0F71                               u2021 07EB  
                             u1230 06A7                               u1310 02B5  
                             u2030 07F1                               u1135 0582  
                             u1231 06A6                               u1215 0691  
                             u2031 07F0                               u2200 0CE9  
                             u1160 05A6                               u1080 0557  
                             u2040 0C33                               u2201 0CE8  
                             u1161 05A5                               u1145 058E  
                             u1081 0556                               u1305 028E  
                             u2105 0F6E                               u2041 0C32  
                             u2210 0CF0                               u1170 05AB  
                             u1090 0562                               u1250 06BA  
                             u2050 0C59                               u2211 0CEF  
                             u1171 05AA                               u1155 059A  
                             u1091 0561                               u1251 06B9  
                             u1235 06A3                               u2051 0C58  
                             u1260 06BF                               u1180 0677  
                             u2220 0C0D                               u2300 02EB  
                             u2060 0F37                               u1261 06BE  
                             u1245 06AE                               u1181 0676  
                             u2221 0C0C                               u2301 02EA  
                             u2061 0F36                               u1190 0682  
                             u1270 0239                               u2310 0308  
                             u2070 0F46                               u1191 0681  
                             u1271 0238                               u2311 0307  
                             u2071 0F45                               u1280 023F  
                             u2400 0179                               u1600 0DC0  
                             u2240 0774                               u2080 0F4C  
                             u1281 023E                               u2401 0178  
                             u1601 0DBF                               u2241 0773  
                             u2081 0F4B                               u1290 0260  
                             u2410 0185                               u2330 031A  
                             u2090 0F5F                               u2235 0E89  
                             u1291 025F                               u2411 0184  
                             u2331 0319                               u2251 077D  
                             u2091 0F5E                               u2180 0CD7  
                             u2420 019E                               u2252 0784  
                             u2500 008C                               u2181 0CD6  
                             u2421 019C                               u2325 030D  
                             u2253 078B                               u2501 008B  
                             u2190 0CE2                               u2430 019F  
                             u2350 0335                               u2191 0CE1  
                             u2351 0334                               u2511 00AF  
                             u2095 0F5B                               u2600 0FB9  
                             u2440 01DA                               u2280 07A5  
                             u2512 00B0                               u2601 0FB8  
                             u2441 01D9                               u2345 031C  
                             u2281 07A4                               u2265 078D  
                             u2521 00DD                               u2513 00B5  
                             u2450 01DF                               u2610 0D36  
                             u2370 0353                               u2290 02DA  
                             u2530 0130                               u2522 00DE  
                             u2514 00B6                               u1730 0D06  
                             u2451 01DE                               u2611 0D35  
                             u2371 0352                               u2355 0331  
                             u2291 02D9                               u2275 0795  
                             u2531 0131                               u2523 00E3  
                             u2515 00BB                               u1731 0D05  
                             u2540 0720                               u2700 05FC  
                             u2460 01E4                               u2620 0EF3  
                             u2380 0358                               u2532 0136  
                             u2524 00E4                               u2516 00BC  
                             u2541 071F                               u2701 05FB  
                             u2461 01E3                               u2621 0EF2  
                             u2381 0357                               u2365 0345  
                             u2533 0137                               u2525 00E9  
                             u1750 0BD6                               u1910 0E21  
                             u2470 01E9                               u2390 0155  
                             u2630 0EF9                               u2710 0494  
                             u1590 0DBB                               u2526 00EA  
                             u1751 0BD5                               u1911 0E20  
                             u2471 01E8                               u2391 0154  
                             u2631 0EF8                               u2711 0493  
                             u1591 0DBA                               u1760 0BE4  
                             u1920 0E26                               u2560 0746  
                             u2640 0FC2                               u2480 0210  
                             u2720 049A                               u1761 0BE3  
                             u1921 0E25                               u2561 0745  
                             u2641 0FC1                               u2481 020F  
                             u2721 0499                               u1930 0E31  
                             u2650 0FC8                               u1770 0C20  
                             u2730 06DD                               u1931 0E30  
                             u2555 0726                               u2651 0FC7  
                             u2715 0490                               u2491 006F  
                             u1771 0C1F                               u2731 06DC  
                             u1940 0E36                               u2580 0F83  
                             u2660 04FF                               u2492 0070  
                             u2740 06F2                               u1780 0D6E  
                             u1941 0E35                               u2661 04FE  
                             u2493 0075                               u2741 06F1  
                             u1781 0D6D                               u2590 0FA7  
                             u2670 0505                               u2494 0076  
                             u1790 0C6D                               u2750 0704  
                             u1950 07C0                               u2575 074C  
                             u2807 0EA9                               u2671 0504  
                             u2495 007B                               u1791 0C6C  
                             u2751 0703                               u1951 07BF  
                             u2680 05C7                               u2496 007C  
                             u1960 07C8                               u2760 03E1  
                             u2817 061F                               u2681 05C6  
                             u2665 04FB                               u2745 06EE  
                             u1961 07C7                               u2761 03E0  
                             u2690 05CD                               u1970 07CD  
                             u2770 03F5                               u2827 062E  
                             u2691 05CC                               u1971 07CC  
                             u2771 03F4                               u1980 07D3  
                             u2837 063C                               u2685 05C3  
                             u1981 07D2                               u2765 03DD  
                             u1990 07D8                               u2847 0CA8  
                             u1991 07D7                               u2775 03F1  
                             u2787 0DB2                               u2797 0E99  
                             abs@a 0078                  ?_Lcd_Write_String 0077  
                             _dbuf 00A0                               _main 036C  
                             _prec 00C5                               map@x 0034  
                             btemp 007E                     ?_lcd_turnRight 0070  
                 __end_of_ADC_Read 0DC7                               start 000C  
               ??_Lcd_Write_String 0020                   __end_of_ADC_init 0BB4  
                  __end_of_Lcd_Cmd 0CB1                              ??_abs 0020  
                            ??_map 003E                    __end_of___aldiv 036C  
                            ?_main 0070                    __end_of___awdiv 05B5  
                            STR_10 043A                              STR_11 047F  
                            STR_12 0410                              STR_13 0455  
                            STR_14 0452                              STR_15 042D  
                            STR_16 047F                    __end_of___awmod 06C9  
                  ___awdiv@divisor 0072                     ??_lcd_turnLeft 0072  
                            i1l250 0D9C                              i1l247 0D8B  
                  ___awdiv@counter 0076                       vfpfcnvrt@fmt 002B  
                            _TMR1H 000F                              _TMR1L 000E  
          __end_of_timer1_1ms_init 0800                              _TRISA 0085  
                            _TRISB 0086                              _TRISC 0087  
                            _TRISD 0088                ___lmul@multiplicand 0076  
               _print_SoilMoisture 04ED                    __end_of_lcd_run 0EEB  
                            _flags 0064                              _light 0060  
                            _fputc 0233                              _width 00C3  
                            _putch 0B73                              fpbase 004A  
                   __pbitbssCOMMON 03D0                              pclath 000A  
              ?_print_SoilMoisture 0070                    _irrigationState 006D  
                 __end_of_WDT_init 0B7C                              status 0003  
                            wtemp0 007E                    __end_of_sprintf 0D5C  
         __end_of_check_TankStatus 07F5                   __end_of_Lcd_Init 0672  
                 __end_of_Lcd_Port 0CF4                _lastLeftButtonState 0069  
                  __initialization 000F                       __end_of_main 0400  
                entry__ADC_readAll 004E               ??_print_SoilMoisture 007A  
                           ??_main 007A           ?_interrupt_IRRIG_timeout 0070  
                  _readTemperature 0DF1                  _leftButtonPressed 03D3  
                           ?_fputc 0072                             _ADRESH 001E  
                           _ADRESL 009E                      _lastTankState 006E  
                 ___awdiv@dividend 0074                             ?_putch 0070  
                           i1l2343 0D7F                             i1l2345 0D83  
                           i1l2347 0D91                             i1l2349 0D96  
                           u214_20 0D83                             u214_21 0D82  
                           u215_20 0D91                             u215_21 0D90  
                  ??_lcd_turnRight 0072                          ??_Lcd_Cmd 0073  
                    vfpfcnvrt@done 002F                   __end_of__fptable 0054  
                     vfprintf@cfmt 003A                             ___lmul 0766  
                        ??___aldiv 002D                          ??___awdiv 0076  
                        ??___awmod 0076                    ADC_Read@channel 0075  
                 ___awdiv@quotient 0078                    ___awmod@divisor 0072  
                  ___awmod@counter 0076                             map@run 004E  
                        ??_lcd_run 007A                             fptable 0045  
                           fputc@c 0072                       __pdataCOMMON 007B  
                           fptotal 0006                   ?_timer1_1ms_init 0070  
                 _print_Irrigation 0FBA                          ?_ADC_Read 0072  
                           saved_w 007E                          ?_ADC_init 0070  
                 __end_of_runTimer 0718                             putch@c 0070  
                 __end_of_vfprintf 0D39                          ??_sprintf 003F  
                  Lcd_Set_Cursor@a 0020                    Lcd_Set_Cursor@b 0076  
                  Lcd_Set_Cursor@y 0022                    Lcd_Set_Cursor@z 0021  
             draw_Index@temp_index 0025              _print_ArtificialLight 05B5  
          __end_of__initialization 0041                  __end_of_Lcd_Clear 0BC1  
             __end_of_lcd_turnLeft 0BDC                    _startIrrigation 0C55  
                   __pcstackCOMMON 0070                       __pidataBANK0 0B94  
                     __pidataBANK1 0C7E        __end_of_interruptionHandler 0DA3  
                    __end_of_fputc 02D3                      __end_of_putch 0B74  
          __end_of_readTemperature 0E1B                      runTimer@timer 0052  
                        ?_WDT_init 0070                     _Lcd_Set_Cursor 0718  
                   _OPTION_REGbits 0081                         ??_ADC_Read 0074  
              _timer_WTANK_Timeout 00DC                         ??_ADC_init 0072  
                        ?_Lcd_Init 0070                       ?_stopFilling 0070  
                        ?_Lcd_Port 0070                            ??_fputc 0020  
                          ??_putch 0072                         __pbssBANK0 005C  
                       __pbssBANK1 00A0                         __pmaintext 036C  
                          ?___lmul 0072                         __pintentry 0004  
                   ___lmul@product 0021             __end_of_Lcd_Set_Cursor 0766  
                       ??_WDT_init 0072                     stopTimer@timer 0072  
                 _readSoilMoisture 0DC7                         _draw_Index 0CB1  
                       ??_Lcd_Init 0076                         ??_Lcd_Port 0072  
                   _stopIrrigation 0C69                  ??_print_TankState 0079  
           ?_print_ArtificialLight 0070                         __stringtab 0400  
                   _Lcd_Write_Char 0E7A                            _Lcd_Cmd 0C97  
          __end_of_startIrrigation 0C69                 _rightButtonPressed 03D2  
                    ??_ADC_readAll 007A                  ?_check_TankStatus 0070  
                          ___aldiv 02D3                            ___awdiv 0552  
               ??_check_TankStatus 0072                            ___awmod 0672  
                        ?_runTimer 0052                          ?_vfprintf 0036  
                 ?_readTemperature 0070                    ?_Lcd_Set_Cursor 0076  
                          __ptext1 07F5                            __ptext2 0E46  
                          __ptext3 0C2F                            __ptext4 07AE  
                          __ptext5 0F2F                            __ptext6 0C55  
                          __ptext7 0D5C                            __ptext8 06C9  
                          __ptext9 0B9D                            _lcd_run 0EAF  
                        _T1CONbits 0010                  __end_of_readLight 0BCE  
                 ___awmod@dividend 0074                   ___aldiv@dividend 0029  
                 _timer_ADCReadAll 00D4             __end_of_stopIrrigation 0C7E  
          _interrupt_WTANK_timeout 0B84         fp__interrupt_WTANK_timeout 004B  
                          map@rise 0046                            _sprintf 0D39  
                          clrloop0 0B8D             __end_of_Lcd_Write_Char 0EAF  
             end_of_initialization 0041                    draw_Index@F1443 00C0  
                          fputc@fp 0074                  __end_of_pins_init 0BF9  
                     _lcd_maxIndex 006B           __end_of_print_Irrigation 1000  
                __end_of_vfpfcnvrt 0233                   ___aldiv@quotient 0030  
                 vfpfcnvrt@convarg 0031                          Lcd_Port@a 0072  
                       ??_runTimer 0054                         ??_vfprintf 007A  
              __end_of_ADC_readAll 0C09                  __end_of_stopTimer 0D16  
                        _PORTBbits 0006                          _PORTCbits 0007  
              _run_IrrigationLogic 0F2F                       _lcd_turnLeft 0BCE  
                     _isIrrigating 03D0                        ?_draw_Index 0070  
                        _TRISCbits 0087                    ?_stopIrrigation 0070  
run_IrrigationLogic@sMoistureValue 0076                    ?_Lcd_Write_Char 0070  
                       _startTimer 0D5C                _timer_IRRIG_Timeout 00D8  
                Lcd_Write_String@a 0077                  Lcd_Write_String@i 0023  
                       map@out_max 003C                         map@out_min 003A  
                 ?_startIrrigation 0070              __end_of_lcd_turnRight 0BEA  
             ?_run_IrrigationLogic 0076         __end_of_run_waterTankLogic 0E7A  
                _print_Temperature 0482            print_Temperature@buffer 004C  
                        _Lcd_Clear 0BB4                 ?_print_Temperature 0070  
                   __end_of___lmul 07AE                        vfpfcnvrt@ap 002C  
                      vfpfcnvrt@cp 0030                        vfpfcnvrt@fp 0029  
                 _Lcd_Write_String 0F74                      __pidataCOMMON 0003  
              ??_print_Temperature 007A                      ?_startFilling 0070  
        ??_interrupt_WTANK_timeout 0076                start_initialization 000F  
              _lcd_debounceButtons 0E1B                    pins_init@_TRISA 0075  
                  pins_init@_TRISB 0072                    pins_init@_TRISC 0073  
                  pins_init@_TRISD 0074                        __end_of_abs 0C1C  
                      __end_of_map 0144          __end_of_print_Temperature 04ED  
            ??_run_IrrigationLogic 0078               ?_lcd_debounceButtons 0070  
         __end_of_readSoilMoisture 0DF1                        _ADC_readAll 0BF9  
         print_SoilMoisture@buffer 004C                        vfprintf@fmt 0038  
              check_TankStatus@bot 0074                         ?_Lcd_Clear 0070  
              check_TankStatus@top 0073                           ??___lmul 0020  
                       init_fetch0 0C42              _IrrigationStateString 00CB  
                      __pdataBANK0 0066                        __pdataBANK1 00C7  
                  Lcd_Write_Char@a 0076                    Lcd_Write_Char@y 0075  
                  _print_TankState 0EEB                     ??_startFilling 0076  
                        ___latbits 0002            ??_print_ArtificialLight 0079  
                    __pcstackBANK0 0020                  __size_of__fptable 000F  
                      ?_startTimer 0072            _interrupt_IRRIG_timeout 0B9D  
       fp__interrupt_IRRIG_timeout 0051                           ?_Lcd_Cmd 0070  
  __end_of_interrupt_WTANK_timeout 0B8C              ??_lcd_debounceButtons 0072  
                 ??_Lcd_Set_Cursor 0077                          __pfunctab 0045  
                  _TankStateString 00C7                           ?___aldiv 0025  
                         ?___awdiv 0072                           ?___awmod 0072  
                        _isFilling 03D1                          _lcd_index 006A  
                        __pstrings 0400                           ?_lcd_run 0070  
                  startTimer@timer 0072                           _ADC_Read 0DA3  
                         _ADC_init 0BA7                          _readLight 0BC1  
                         ?_sprintf 003B                          _old_light 00CE  
                  ___aldiv@divisor 0025                  interrupt_function 0004  
                  ___aldiv@counter 002E                  _interruption_init 0B7C  
                        _tankState 007B                          clear_ram0 0B8C  
                         _PIE1bits 008C                 ?_interruption_init 0070  
                        _pins_init 0BEA                           Lcd_Cmd@a 0075  
                ??_timer1_1ms_init 0072                           _PIR1bits 000C  
                ?_print_Irrigation 0070            __end_of_print_TankState 0F2F  
                      ??_Lcd_Clear 0076                      _idealHumidity 0066  
               ??_print_Irrigation 0079                ??_interruption_init 0072  
                        _vfpfcnvrt 0144                          map@in_max 0038  
                        map@in_min 0036                   ??_stopIrrigation 0076  
                       _ADCON0bits 001F                        __stringbase 040F  
                       _ADCON1bits 009F                           _WDT_init 0B74  
                 ??_Lcd_Write_Char 0073                          _stopTimer 0CF4  
                     ??_draw_Index 0079                           _Lcd_Init 0615  
                       ?_readLight 0070                           _Lcd_Port 0CD2  
        ??_interrupt_IRRIG_timeout 0076                         vfpfcnvrt@c 0035  
                ___lmul@multiplier 0072               _lastRightButtonState 0068  
        __end_of_interruption_init 0B84           __end_of_Lcd_Write_String 0FBA  
                 _old_soilMoisture 00D2               __end_of_startFilling 0C42  
                       ?_pins_init 0072                         vfprintf@ap 0039  
                       vfprintf@fp 0036                        _minHumidity 0067  
       __end_of_print_SoilMoisture 0552                 __end_of_draw_Index 0CD2  
                       ?_vfpfcnvrt 0029                 __end_of__stringtab 0410  
               _run_waterTankLogic 0E46                     fp__ADC_readAll 004E  
                       sprintf@fmt 003C                           __fptable 0045  
                       ?_stopTimer 0072                      ??_stopFilling 0076  
                         __ptext10 0BF9                           __ptext11 0B84  
                         __ptext20 0BC1                           __ptext12 0C1C  
                         __ptext21 0DA3                           __ptext13 0C69  
                         __ptext30 0233                           __ptext22 0BEA  
                         __ptext14 0CF4                           __ptext31 0B73  
                         __ptext23 0EAF                           __ptext15 0DF1  
                         __ptext40 0718                           __ptext32 0C09  
                         __ptext24 0482                           __ptext16 0DC7  
                         __ptext41 0BB4                           __ptext33 0672  
                         __ptext25 0EEB                           __ptext17 0054  
                         __ptext50 0BA7                           __ptext42 0E1B  
                         __ptext34 0552                           __ptext26 04ED  
                         __ptext18 0766                           __ptext51 0D7F  
                         __ptext43 0BDC                           __ptext35 0FBA  
                         __ptext27 0D39                           __ptext19 02D3  
              ?_run_waterTankLogic 0070                           __ptext44 0BCE  
                         __ptext36 05B5                           __ptext28 0D16  
                         __ptext45 0B7C                           __ptext37 0CB1  
                         __ptext29 0144                           __ptext46 0B74  
                         __ptext38 0F74                           __ptext47 0615  
                         __ptext39 0E7A                           __ptext48 0C97  
                         __ptext49 0CD2                _interruptionHandler 0D7F  
                     ?_ADC_readAll 0070                  ?_readSoilMoisture 0070  
             ??_run_waterTankLogic 0076                   ?_print_TankState 0070  
  __end_of_interrupt_IRRIG_timeout 0BA7                           map@delta 004A  
                         _runTimer 06C9                    _old_temperature 00D0  
               ??_readSoilMoisture 007A                           _vfprintf 0D16  
             ?_interruptionHandler 0070                         _INTCONbits 000B  
                 _check_TankStatus 07AE                           init_ram0 0C46  
                      ??_readLight 0076      __end_of_print_ArtificialLight 0615  
                     ??_startTimer 0074        __end_of_run_IrrigationLogic 0F74  
               Lcd_Write_Char@temp 0074                           intlevel1 0045  
                        sprintf@ap 0040                       _timerCounter 005C  
                    _lcd_lastIndex 0065                __end_of_stopFilling 0C2F  
                ??_readTemperature 007A                          stringcode 040A  
                      ??_pins_init 0075                        ??_vfpfcnvrt 002D  
         ?_interrupt_WTANK_timeout 0070                       _soilMoisture 0062  
               Lcd_Set_Cursor@temp 0023                 __end_of_startTimer 0D7F  
              _lastIrrigationState 006C              ??_interruptionHandler 0070  
                      _temperature 005E                           sprintf@f 0041  
                         sprintf@s 003B                        ??_stopTimer 0074  
                         stringdir 040A                           stringtab 0400  
                     ___aldiv@sign 002F                    _timer1_1ms_init 07F5  
      __end_of_lcd_debounceButtons 0E46                      _lcd_turnRight 0BDC  
