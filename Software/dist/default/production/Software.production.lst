

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Sun Dec 08 22:45:37 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     6                           	psect	idataBANK1,global,class=CODE,space=0,delta=2,noexec
     7                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     8                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     9                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	inittext,global,class=CODE,space=0,delta=2
    15                           	psect	clrtext,global,class=CODE,space=0,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    20                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2,group=3
    32                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2,group=1
    33                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2,group=1
    34                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2,group=3
    35                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2,group=3
    36                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2,group=3
    37                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2,group=2
    38                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2,group=2
    39                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,space=0,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,space=0,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,space=0,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,space=0,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,space=0,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,space=0,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,space=0,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,space=0,merge=1,delta=2
    48                           	psect	intentry,global,class=CODE,space=0,delta=2
    49                           	psect	text29,local,class=CODE,space=0,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,space=0,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,space=0,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,space=0,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,space=0,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,space=0,merge=1,delta=2
    55                           	psect	functab,global,class=ENTRY,space=0,delta=2
    56                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    57                           	dabs	1,0x7E,2
    58     0000                     
    59                           ; Generated 12/10/2023 GMT
    60                           ; 
    61                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    62                           ; All rights reserved.
    63                           ; 
    64                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    65                           ; 
    66                           ; Redistribution and use in source and binary forms, with or without modification, are
    67                           ; permitted provided that the following conditions are met:
    68                           ; 
    69                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    70                           ;        conditions and the following disclaimer.
    71                           ; 
    72                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    73                           ;        of conditions and the following disclaimer in the documentation and/or other
    74                           ;        materials provided with the distribution. Publication is not required when
    75                           ;        this file is used in an embedded application.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC16F877A Definitions
    91                           ; 
    92                           ; SFR Addresses
    93     0004                     fsr             equ	4
    94     0004                     fsr0            equ	4
    95     0000                     indf            equ	0
    96     0000                     indf0           equ	0
    97     0002                     pc              equ	2
    98     0002                     pcl             equ	2
    99     000A                     pclath          equ	10
   100     0003                     status          equ	3
   101     0000                     INDF            equ	0	;# 
   102     0001                     TMR0            equ	1	;# 
   103     0002                     PCL             equ	2	;# 
   104     0003                     STATUS          equ	3	;# 
   105     0004                     FSR             equ	4	;# 
   106     0005                     PORTA           equ	5	;# 
   107     0006                     PORTB           equ	6	;# 
   108     0007                     PORTC           equ	7	;# 
   109     0008                     PORTD           equ	8	;# 
   110     0009                     PORTE           equ	9	;# 
   111     000A                     PCLATH          equ	10	;# 
   112     000B                     INTCON          equ	11	;# 
   113     000C                     PIR1            equ	12	;# 
   114     000D                     PIR2            equ	13	;# 
   115     000E                     TMR1            equ	14	;# 
   116     000E                     TMR1L           equ	14	;# 
   117     000F                     TMR1H           equ	15	;# 
   118     0010                     T1CON           equ	16	;# 
   119     0011                     TMR2            equ	17	;# 
   120     0012                     T2CON           equ	18	;# 
   121     0013                     SSPBUF          equ	19	;# 
   122     0014                     SSPCON          equ	20	;# 
   123     0015                     CCPR1           equ	21	;# 
   124     0015                     CCPR1L          equ	21	;# 
   125     0016                     CCPR1H          equ	22	;# 
   126     0017                     CCP1CON         equ	23	;# 
   127     0018                     RCSTA           equ	24	;# 
   128     0019                     TXREG           equ	25	;# 
   129     001A                     RCREG           equ	26	;# 
   130     001B                     CCPR2           equ	27	;# 
   131     001B                     CCPR2L          equ	27	;# 
   132     001C                     CCPR2H          equ	28	;# 
   133     001D                     CCP2CON         equ	29	;# 
   134     001E                     ADRESH          equ	30	;# 
   135     001F                     ADCON0          equ	31	;# 
   136     0081                     OPTION_REG      equ	129	;# 
   137     0085                     TRISA           equ	133	;# 
   138     0086                     TRISB           equ	134	;# 
   139     0087                     TRISC           equ	135	;# 
   140     0088                     TRISD           equ	136	;# 
   141     0089                     TRISE           equ	137	;# 
   142     008C                     PIE1            equ	140	;# 
   143     008D                     PIE2            equ	141	;# 
   144     008E                     PCON            equ	142	;# 
   145     0091                     SSPCON2         equ	145	;# 
   146     0092                     PR2             equ	146	;# 
   147     0093                     SSPADD          equ	147	;# 
   148     0094                     SSPSTAT         equ	148	;# 
   149     0098                     TXSTA           equ	152	;# 
   150     0099                     SPBRG           equ	153	;# 
   151     009C                     CMCON           equ	156	;# 
   152     009D                     CVRCON          equ	157	;# 
   153     009E                     ADRESL          equ	158	;# 
   154     009F                     ADCON1          equ	159	;# 
   155     010C                     EEDATA          equ	268	;# 
   156     010D                     EEADR           equ	269	;# 
   157     010E                     EEDATH          equ	270	;# 
   158     010F                     EEADRH          equ	271	;# 
   159     018C                     EECON1          equ	396	;# 
   160     018D                     EECON2          equ	397	;# 
   161     0000                     INDF            equ	0	;# 
   162     0001                     TMR0            equ	1	;# 
   163     0002                     PCL             equ	2	;# 
   164     0003                     STATUS          equ	3	;# 
   165     0004                     FSR             equ	4	;# 
   166     0005                     PORTA           equ	5	;# 
   167     0006                     PORTB           equ	6	;# 
   168     0007                     PORTC           equ	7	;# 
   169     0008                     PORTD           equ	8	;# 
   170     0009                     PORTE           equ	9	;# 
   171     000A                     PCLATH          equ	10	;# 
   172     000B                     INTCON          equ	11	;# 
   173     000C                     PIR1            equ	12	;# 
   174     000D                     PIR2            equ	13	;# 
   175     000E                     TMR1            equ	14	;# 
   176     000E                     TMR1L           equ	14	;# 
   177     000F                     TMR1H           equ	15	;# 
   178     0010                     T1CON           equ	16	;# 
   179     0011                     TMR2            equ	17	;# 
   180     0012                     T2CON           equ	18	;# 
   181     0013                     SSPBUF          equ	19	;# 
   182     0014                     SSPCON          equ	20	;# 
   183     0015                     CCPR1           equ	21	;# 
   184     0015                     CCPR1L          equ	21	;# 
   185     0016                     CCPR1H          equ	22	;# 
   186     0017                     CCP1CON         equ	23	;# 
   187     0018                     RCSTA           equ	24	;# 
   188     0019                     TXREG           equ	25	;# 
   189     001A                     RCREG           equ	26	;# 
   190     001B                     CCPR2           equ	27	;# 
   191     001B                     CCPR2L          equ	27	;# 
   192     001C                     CCPR2H          equ	28	;# 
   193     001D                     CCP2CON         equ	29	;# 
   194     001E                     ADRESH          equ	30	;# 
   195     001F                     ADCON0          equ	31	;# 
   196     0081                     OPTION_REG      equ	129	;# 
   197     0085                     TRISA           equ	133	;# 
   198     0086                     TRISB           equ	134	;# 
   199     0087                     TRISC           equ	135	;# 
   200     0088                     TRISD           equ	136	;# 
   201     0089                     TRISE           equ	137	;# 
   202     008C                     PIE1            equ	140	;# 
   203     008D                     PIE2            equ	141	;# 
   204     008E                     PCON            equ	142	;# 
   205     0091                     SSPCON2         equ	145	;# 
   206     0092                     PR2             equ	146	;# 
   207     0093                     SSPADD          equ	147	;# 
   208     0094                     SSPSTAT         equ	148	;# 
   209     0098                     TXSTA           equ	152	;# 
   210     0099                     SPBRG           equ	153	;# 
   211     009C                     CMCON           equ	156	;# 
   212     009D                     CVRCON          equ	157	;# 
   213     009E                     ADRESL          equ	158	;# 
   214     009F                     ADCON1          equ	159	;# 
   215     010C                     EEDATA          equ	268	;# 
   216     010D                     EEADR           equ	269	;# 
   217     010E                     EEDATH          equ	270	;# 
   218     010F                     EEADRH          equ	271	;# 
   219     018C                     EECON1          equ	396	;# 
   220     018D                     EECON2          equ	397	;# 
   221     0000                     INDF            equ	0	;# 
   222     0001                     TMR0            equ	1	;# 
   223     0002                     PCL             equ	2	;# 
   224     0003                     STATUS          equ	3	;# 
   225     0004                     FSR             equ	4	;# 
   226     0005                     PORTA           equ	5	;# 
   227     0006                     PORTB           equ	6	;# 
   228     0007                     PORTC           equ	7	;# 
   229     0008                     PORTD           equ	8	;# 
   230     0009                     PORTE           equ	9	;# 
   231     000A                     PCLATH          equ	10	;# 
   232     000B                     INTCON          equ	11	;# 
   233     000C                     PIR1            equ	12	;# 
   234     000D                     PIR2            equ	13	;# 
   235     000E                     TMR1            equ	14	;# 
   236     000E                     TMR1L           equ	14	;# 
   237     000F                     TMR1H           equ	15	;# 
   238     0010                     T1CON           equ	16	;# 
   239     0011                     TMR2            equ	17	;# 
   240     0012                     T2CON           equ	18	;# 
   241     0013                     SSPBUF          equ	19	;# 
   242     0014                     SSPCON          equ	20	;# 
   243     0015                     CCPR1           equ	21	;# 
   244     0015                     CCPR1L          equ	21	;# 
   245     0016                     CCPR1H          equ	22	;# 
   246     0017                     CCP1CON         equ	23	;# 
   247     0018                     RCSTA           equ	24	;# 
   248     0019                     TXREG           equ	25	;# 
   249     001A                     RCREG           equ	26	;# 
   250     001B                     CCPR2           equ	27	;# 
   251     001B                     CCPR2L          equ	27	;# 
   252     001C                     CCPR2H          equ	28	;# 
   253     001D                     CCP2CON         equ	29	;# 
   254     001E                     ADRESH          equ	30	;# 
   255     001F                     ADCON0          equ	31	;# 
   256     0081                     OPTION_REG      equ	129	;# 
   257     0085                     TRISA           equ	133	;# 
   258     0086                     TRISB           equ	134	;# 
   259     0087                     TRISC           equ	135	;# 
   260     0088                     TRISD           equ	136	;# 
   261     0089                     TRISE           equ	137	;# 
   262     008C                     PIE1            equ	140	;# 
   263     008D                     PIE2            equ	141	;# 
   264     008E                     PCON            equ	142	;# 
   265     0091                     SSPCON2         equ	145	;# 
   266     0092                     PR2             equ	146	;# 
   267     0093                     SSPADD          equ	147	;# 
   268     0094                     SSPSTAT         equ	148	;# 
   269     0098                     TXSTA           equ	152	;# 
   270     0099                     SPBRG           equ	153	;# 
   271     009C                     CMCON           equ	156	;# 
   272     009D                     CVRCON          equ	157	;# 
   273     009E                     ADRESL          equ	158	;# 
   274     009F                     ADCON1          equ	159	;# 
   275     010C                     EEDATA          equ	268	;# 
   276     010D                     EEADR           equ	269	;# 
   277     010E                     EEDATH          equ	270	;# 
   278     010F                     EEADRH          equ	271	;# 
   279     018C                     EECON1          equ	396	;# 
   280     018D                     EECON2          equ	397	;# 
   281                           
   282                           	psect	idataCOMMON
   283     0FF1                     __pidataCOMMON:
   284                           
   285                           ;initializer for _lastRightButtonState
   286     0FF1  3401               	retlw	1
   287                           
   288                           ;initializer for _lastLeftButtonState
   289     0FF2  3401               	retlw	1
   290                           
   291                           ;initializer for _lcd_lastIndex
   292     0FF3  3401               	retlw	1
   293                           
   294                           	psect	idataBANK0
   295     07D5                     __pidataBANK0:
   296                           
   297                           ;initializer for _TankStateString
   298     07D5  340D               	retlw	low ((STR_1-__stringbase)| (0+32768))
   299     07D6  3419               	retlw	low ((STR_2-__stringbase)| (0+32768))
   300     07D7  3413               	retlw	low ((STR_3-__stringbase)| (0+32768))
   301     07D8  341E               	retlw	low ((STR_4-__stringbase)| (0+32768))
   302                           
   303                           ;initializer for _tankState
   304     07D9  3401               	retlw	1
   305                           
   306                           ;initializer for _timer_WTANK_timeout
   307     07DA  3498               	retlw	152
   308     07DB  343A               	retlw	58
   309     07DC  3400               	retlw	0
   310     07DD  3400               	retlw	0
   311     07DE  3400               	retlw	0
   312     07DF  3401               	retlw	low (fp__interrupt_stopFilling-i1fpbase)
   313                           
   314                           	psect	idataBANK1
   315     07F0                     __pidataBANK1:
   316                           
   317                           ;initializer for _lcd_index
   318     07F0  3401               	retlw	1
   319                           
   320                           ;initializer for _timer_lcdButtons
   321     07F1  3401               	retlw	1
   322     07F2  3400               	retlw	0
   323     07F3  3400               	retlw	0
   324     07F4  3400               	retlw	0
   325     07F5  3400               	retlw	0
   326     07F6  3404               	retlw	low (fp__interrupt_checkButton-i1fpbase)
   327     0005                     _PORTAbits      set	5
   328     0007                     _PORTCbits      set	7
   329     000C                     _PIR1bits       set	12
   330     0006                     _PORTBbits      set	6
   331     000B                     _INTCONbits     set	11
   332     0010                     _T1CONbits      set	16
   333     000E                     _TMR1L          set	14
   334     000F                     _TMR1H          set	15
   335     0043                     _RD3            set	67
   336     0042                     _RD2            set	66
   337     0047                     _RD7            set	71
   338     0046                     _RD6            set	70
   339     0045                     _RD5            set	69
   340     0044                     _RD4            set	68
   341     008C                     _PIE1bits       set	140
   342     0081                     _OPTION_REGbits set	129
   343     0088                     _TRISD          set	136
   344     0087                     _TRISC          set	135
   345     0086                     _TRISB          set	134
   346     0085                     _TRISA          set	133
   347                           
   348                           	psect	strings
   349     055E                     __pstrings:
   350     055E                     stringtab:
   351     055E                     __stringtab:
   352                           
   353                           ;	String table - string pointers are 1 byte each
   354     055E  1BFF               	btfsc	btemp+1,7
   355     055F  2D68               	ljmp	stringcode
   356     0560  1383               	bcf	3,7
   357     0561  187F               	btfsc	btemp+1,0
   358     0562  1783               	bsf	3,7
   359     0563  0800               	movf	0,w
   360     0564  0A84               	incf	4,f
   361     0565  1903               	skipnz
   362     0566  0AFF               	incf	btemp+1,f
   363     0567  0008               	return
   364     0568                     stringcode:
   365     0568                     stringdir:
   366     0568  3005               	movlw	high stringdir
   367     0569  008A               	movwf	10
   368     056A  0804               	movf	4,w
   369     056B  0A84               	incf	4,f
   370     056C  0782               	addwf	2,f
   371     056D                     __stringbase:
   372     056D  3400               	retlw	0
   373     056E                     __end_of__stringtab:
   374     056E                     STR_5:
   375     056E  3454               	retlw	84	;'T'
   376     056F  3461               	retlw	97	;'a'
   377     0570  346E               	retlw	110	;'n'
   378     0571  346B               	retlw	107	;'k'
   379     0572  3420               	retlw	32	;' '
   380     0573  3453               	retlw	83	;'S'
   381     0574  3474               	retlw	116	;'t'
   382     0575  3461               	retlw	97	;'a'
   383     0576  3474               	retlw	116	;'t'
   384     0577  3465               	retlw	101	;'e'
   385     0578  343A               	retlw	58	;':'
   386     0579  3400               	retlw	0
   387     057A                     STR_1:
   388     057A  3443               	retlw	67	;'C'
   389     057B  3448               	retlw	72	;'H'
   390     057C  3445               	retlw	69	;'E'
   391     057D  3449               	retlw	73	;'I'
   392     057E  344F               	retlw	79	;'O'
   393     057F  3400               	retlw	0
   394     0580                     STR_3:
   395     0580  3456               	retlw	86	;'V'
   396     0581  3441               	retlw	65	;'A'
   397     0582  345A               	retlw	90	;'Z'
   398     0583  3449               	retlw	73	;'I'
   399     0584  344F               	retlw	79	;'O'
   400     0585  3400               	retlw	0
   401     0586                     STR_2:
   402     0586  344D               	retlw	77	;'M'
   403     0587  3445               	retlw	69	;'E'
   404     0588  3449               	retlw	73	;'I'
   405     0589  344F               	retlw	79	;'O'
   406     058A  3400               	retlw	0
   407     058B                     STR_4:
   408     058B  3445               	retlw	69	;'E'
   409     058C  3452               	retlw	82	;'R'
   410     058D  3452               	retlw	82	;'R'
   411     058E  344F               	retlw	79	;'O'
   412     058F  3400               	retlw	0
   413     0590                     STR_7:
   414     0590  3425               	retlw	37	;'%'
   415     0591  3464               	retlw	100	;'d'
   416     0592  3400               	retlw	0
   417     0593                     STR_6:
   418     0593  3425               	retlw	37	;'%'
   419     0594  3473               	retlw	115	;'s'
   420     0595  3400               	retlw	0
   421                           
   422                           	psect	cinit
   423     0015                     start_initialization:	
   424                           ; #config settings
   425                           
   426     0015                     __initialization:
   427                           
   428                           ; Initialize objects allocated to BANK1
   429     0015  1383               	bcf	3,7	;select IRP bank0
   430     0016  30DB               	movlw	low (__pdataBANK1+7)
   431     0017  00FD               	movwf	btemp+-1
   432     0018  3007               	movlw	high __pidataBANK1
   433     0019  00FE               	movwf	btemp
   434     001A  30F0               	movlw	low __pidataBANK1
   435     001B  00FF               	movwf	btemp+1
   436     001C  30D4               	movlw	low __pdataBANK1
   437     001D  0084               	movwf	4
   438     001E  120A  118A  2762  120A  118A  	fcall	init_ram0
   439                           
   440                           ; Initialize objects allocated to BANK0
   441     0023  3064               	movlw	low (__pdataBANK0+11)
   442     0024  00FD               	movwf	btemp+-1
   443     0025  3007               	movlw	high __pidataBANK0
   444     0026  00FE               	movwf	btemp
   445     0027  30D5               	movlw	low __pidataBANK0
   446     0028  00FF               	movwf	btemp+1
   447     0029  3059               	movlw	low __pdataBANK0
   448     002A  0084               	movwf	4
   449     002B  120A  118A  2762  120A  118A  	fcall	init_ram0
   450                           
   451                           ; Initialize objects allocated to COMMON
   452     0030  120A  158A  27F1  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   453     0035  00FB               	movwf	__pdataCOMMON& (0+127)
   454     0036  120A  158A  27F2  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   455     003B  00FC               	movwf	(__pdataCOMMON+1)& (0+127)
   456     003C  120A  158A  27F3  120A  118A  	fcall	__pidataCOMMON+2	;fetch initializer
   457     0041  00FD               	movwf	(__pdataCOMMON+2)& (0+127)
   458                           
   459                           ; Clear objects allocated to BANK1
   460     0042  30A0               	movlw	low __pbssBANK1
   461     0043  0084               	movwf	4
   462     0044  30C0               	movlw	low (__pbssBANK1+32)
   463     0045  120A  118A  27E0  120A  118A  	fcall	clear_ram0
   464                           
   465                           ; Clear objects allocated to BANK0
   466     004A  01E4               	clrf	__pbssBANK0& (0+127)
   467     004B  01E5               	clrf	(__pbssBANK0+1)& (0+127)
   468     004C  01E6               	clrf	(__pbssBANK0+2)& (0+127)
   469     004D  01E7               	clrf	(__pbssBANK0+3)& (0+127)
   470     004E  01E8               	clrf	(__pbssBANK0+4)& (0+127)
   471     004F  01E9               	clrf	(__pbssBANK0+5)& (0+127)
   472     0050  01EA               	clrf	(__pbssBANK0+6)& (0+127)
   473     0051                     end_of_initialization:	
   474                           ;End of C runtime variable initialization code
   475                           
   476     0051                     __end_of__initialization:
   477     0051  0183               	clrf	3
   478     0052  120A  118A  2D96   	ljmp	_main	;jump to C main() function
   479                           
   480                           	psect	dataCOMMON
   481     007B                     __pdataCOMMON:
   482     007B                     _lastRightButtonState:
   483     007B                     	ds	1
   484     007C                     _lastLeftButtonState:
   485     007C                     	ds	1
   486     007D                     _lcd_lastIndex:
   487     007D                     	ds	1
   488                           
   489                           	psect	bssBANK0
   490     0064                     __pbssBANK0:
   491     0064                     _width:
   492     0064                     	ds	2
   493     0066                     _prec:
   494     0066                     	ds	2
   495     0068                     _timerCounter:
   496     0068                     	ds	2
   497     006A                     _flags:
   498     006A                     	ds	1
   499                           
   500                           	psect	dataBANK0
   501     0059                     __pdataBANK0:
   502     0059                     _TankStateString:
   503     0059                     	ds	4
   504     005D                     _tankState:
   505     005D                     	ds	1
   506     005E                     _timer_WTANK_timeout:
   507     005E                     	ds	6
   508                           
   509                           	psect	bssBANK1
   510     00A0                     __pbssBANK1:
   511     00A0                     _dbuf:
   512     00A0                     	ds	32
   513                           
   514                           	psect	dataBANK1
   515     00D4                     __pdataBANK1:
   516     00D4                     _lcd_index:
   517     00D4                     	ds	1
   518     00D5                     _timer_lcdButtons:
   519     00D5                     	ds	6
   520                           
   521                           	psect	inittext
   522     075E                     init_fetch0:	
   523                           ;	Called with low address in FSR and high address in W
   524                           
   525     075E  087E               	movf	btemp,w
   526     075F  008A               	movwf	10
   527     0760  087F               	movf	btemp+1,w
   528     0761  0082               	movwf	2
   529     0762                     init_ram0:	
   530                           ;Called with:
   531                           ;	high address of idata address in btemp 
   532                           ;	low address of idata address in btemp+1 
   533                           ;	low address of data in FSR
   534                           ;	high address + 1 of data in btemp-1
   535                           
   536     0762  120A  118A  275E  120A  118A  	fcall	init_fetch0
   537     0767  0080               	movwf	0
   538     0768  0A84               	incf	4,f
   539     0769  0804               	movf	4,w
   540     076A  067D               	xorwf	btemp+-1,w
   541     076B  1903               	btfsc	3,2
   542     076C  3400               	retlw	0
   543     076D  0AFF               	incf	btemp+1,f
   544     076E  1903               	btfsc	3,2
   545     076F  0AFE               	incf	btemp,f
   546     0770  2F62               	goto	init_ram0
   547                           
   548                           	psect	clrtext
   549     07E0                     clear_ram0:	
   550                           ;	Called with FSR containing the base address, and
   551                           ;	W with the last address+1
   552                           
   553     07E0  0064               	clrwdt	;clear the watchdog before getting into this loop
   554     07E1                     clrloop0:
   555     07E1  0180               	clrf	0	;clear RAM location pointed to by FSR
   556     07E2  0A84               	incf	4,f	;increment pointer
   557     07E3  0604               	xorwf	4,w	;XOR with final address
   558     07E4  1903               	btfsc	3,2	;have we reached the end yet?
   559     07E5  3400               	retlw	0	;all done for this memory range, return
   560     07E6  0604               	xorwf	4,w	;XOR again to restore value
   561     07E7  2FE1               	goto	clrloop0	;do the next byte
   562                           
   563                           	psect	cstackBANK1
   564     00C0                     __pcstackBANK1:
   565     00C0                     print_Index@buffer:
   566                           
   567                           ; 20 bytes @ 0x0
   568     00C0                     	ds	20
   569                           
   570                           	psect	cstackCOMMON
   571     0070                     __pcstackCOMMON:
   572     0070                     ?_run_waterTankLogic:
   573     0070                     ?_interrupt_stopFilling:	
   574                           ; 1 bytes @ 0x0
   575                           
   576     0070                     ?_stopFilling:	
   577                           ; 1 bytes @ 0x0
   578                           
   579     0070                     ?_startFilling:	
   580                           ; 1 bytes @ 0x0
   581                           
   582     0070                     ?_putch:	
   583                           ; 1 bytes @ 0x0
   584                           
   585     0070                     ?_setCounter_Timer1:	
   586                           ; 1 bytes @ 0x0
   587                           
   588     0070                     ?_timer1_1ms_init:	
   589                           ; 1 bytes @ 0x0
   590                           
   591     0070                     ?_interruption_init:	
   592                           ; 1 bytes @ 0x0
   593                           
   594     0070                     ?_Lcd_Port:	
   595                           ; 1 bytes @ 0x0
   596                           
   597     0070                     ?_Lcd_Cmd:	
   598                           ; 1 bytes @ 0x0
   599                           
   600     0070                     ?_Lcd_Clear:	
   601                           ; 1 bytes @ 0x0
   602                           
   603     0070                     ?_Lcd_Init:	
   604                           ; 1 bytes @ 0x0
   605                           
   606     0070                     ?_Lcd_Write_Char:	
   607                           ; 1 bytes @ 0x0
   608                           
   609     0070                     ?_print_Index:	
   610                           ; 1 bytes @ 0x0
   611                           
   612     0070                     ?_lcd_run:	
   613                           ; 1 bytes @ 0x0
   614                           
   615     0070                     ?_lcd_turnRight:	
   616                           ; 1 bytes @ 0x0
   617                           
   618     0070                     ?_lcd_turnLeft:	
   619                           ; 1 bytes @ 0x0
   620                           
   621     0070                     ?_interrupt_checkButton:	
   622                           ; 1 bytes @ 0x0
   623                           
   624     0070                     ?_interruptionHandler:	
   625                           ; 1 bytes @ 0x0
   626                           
   627     0070                     ?_main:	
   628                           ; 1 bytes @ 0x0
   629                           
   630     0070                     ?_check_TankStatus:	
   631                           ; 1 bytes @ 0x0
   632                           
   633     0070                     ?i1_setCounter_Timer1:	
   634                           ; 1 bytes @ 0x0
   635                           
   636     0070                     putch@c:	
   637                           ; 1 bytes @ 0x0
   638                           
   639     0070                     ??_interrupt_stopFilling:	
   640                           ; 1 bytes @ 0x0
   641                           
   642     0070                     ??_lcd_turnRight:	
   643                           ; 1 bytes @ 0x0
   644                           
   645     0070                     ??_lcd_turnLeft:	
   646                           ; 1 bytes @ 0x0
   647                           
   648     0070                     ??_interrupt_checkButton:	
   649                           ; 1 bytes @ 0x0
   650                           
   651     0070                     ??i1_setCounter_Timer1:	
   652                           ; 1 bytes @ 0x0
   653                           
   654                           
   655                           ; 1 bytes @ 0x0
   656     0070                     	ds	1
   657     0071                     interrupt_checkButton@leftButtonState:
   658                           
   659                           ; 1 bytes @ 0x1
   660     0071                     	ds	1
   661     0072                     interrupt_checkButton@rightButtonState:
   662                           
   663                           ; 1 bytes @ 0x2
   664     0072                     	ds	1
   665     0073                     ?_runTimer:
   666     0073                     runTimer@timer:	
   667                           ; 1 bytes @ 0x3
   668                           
   669                           
   670                           ; 2 bytes @ 0x3
   671     0073                     	ds	2
   672     0075                     ??_runTimer:
   673                           
   674                           ; 1 bytes @ 0x5
   675     0075                     	ds	6
   676                           
   677                           	psect	cstackBANK0
   678     0020                     __pcstackBANK0:
   679     0020                     ??_interruptionHandler:
   680                           
   681                           ; 1 bytes @ 0x0
   682     0020                     	ds	4
   683     0024                     ?_startTimer:
   684     0024                     ?_stopTimer:	
   685                           ; 1 bytes @ 0x4
   686                           
   687     0024                     ?_pins_init:	
   688                           ; 1 bytes @ 0x4
   689                           
   690     0024                     ?_fputc:	
   691                           ; 1 bytes @ 0x4
   692                           
   693     0024                     ?___awdiv:	
   694                           ; 2 bytes @ 0x4
   695                           
   696     0024                     ?___awmod:	
   697                           ; 2 bytes @ 0x4
   698                           
   699     0024                     pins_init@_TRISB:	
   700                           ; 2 bytes @ 0x4
   701                           
   702     0024                     Lcd_Port@a:	
   703                           ; 1 bytes @ 0x4
   704                           
   705     0024                     startTimer@timer:	
   706                           ; 1 bytes @ 0x4
   707                           
   708     0024                     stopTimer@timer:	
   709                           ; 2 bytes @ 0x4
   710                           
   711     0024                     ___awdiv@divisor:	
   712                           ; 2 bytes @ 0x4
   713                           
   714     0024                     ___awmod@divisor:	
   715                           ; 2 bytes @ 0x4
   716                           
   717     0024                     fputc@c:	
   718                           ; 2 bytes @ 0x4
   719                           
   720     0024                     ??_putch:	
   721                           ; 2 bytes @ 0x4
   722                           
   723     0024                     ??_setCounter_Timer1:	
   724                           ; 1 bytes @ 0x4
   725                           
   726     0024                     ??_timer1_1ms_init:	
   727                           ; 1 bytes @ 0x4
   728                           
   729     0024                     ??_interruption_init:	
   730                           ; 1 bytes @ 0x4
   731                           
   732     0024                     ??_Lcd_Port:	
   733                           ; 1 bytes @ 0x4
   734                           
   735     0024                     ??_check_TankStatus:	
   736                           ; 1 bytes @ 0x4
   737                           
   738                           
   739                           ; 1 bytes @ 0x4
   740     0024                     	ds	1
   741     0025                     pins_init@_TRISC:
   742     0025                     check_TankStatus@top:	
   743                           ; 1 bytes @ 0x5
   744                           
   745     0025                     ??_Lcd_Cmd:	
   746                           ; 1 bytes @ 0x5
   747                           
   748     0025                     ??_Lcd_Write_Char:	
   749                           ; 1 bytes @ 0x5
   750                           
   751                           
   752                           ; 1 bytes @ 0x5
   753     0025                     	ds	1
   754     0026                     pins_init@_TRISD:
   755     0026                     Lcd_Write_Char@temp:	
   756                           ; 1 bytes @ 0x6
   757                           
   758     0026                     check_TankStatus@bot:	
   759                           ; 1 bytes @ 0x6
   760                           
   761     0026                     ___awdiv@dividend:	
   762                           ; 1 bytes @ 0x6
   763                           
   764     0026                     ___awmod@dividend:	
   765                           ; 2 bytes @ 0x6
   766                           
   767     0026                     fputc@fp:	
   768                           ; 2 bytes @ 0x6
   769                           
   770     0026                     ??_startTimer:	
   771                           ; 2 bytes @ 0x6
   772                           
   773     0026                     ??_stopTimer:	
   774                           ; 1 bytes @ 0x6
   775                           
   776                           
   777                           ; 1 bytes @ 0x6
   778     0026                     	ds	1
   779     0027                     pins_init@_TRISA:
   780     0027                     Lcd_Cmd@a:	
   781                           ; 1 bytes @ 0x7
   782                           
   783     0027                     Lcd_Write_Char@y:	
   784                           ; 1 bytes @ 0x7
   785                           
   786     0027                     ??_pins_init:	
   787                           ; 1 bytes @ 0x7
   788                           
   789                           
   790                           ; 1 bytes @ 0x7
   791     0027                     	ds	1
   792     0028                     ?_Lcd_Set_Cursor:
   793     0028                     Lcd_Set_Cursor@b:	
   794                           ; 1 bytes @ 0x8
   795                           
   796     0028                     Lcd_Write_Char@a:	
   797                           ; 1 bytes @ 0x8
   798                           
   799     0028                     ___awdiv@counter:	
   800                           ; 1 bytes @ 0x8
   801                           
   802     0028                     ___awmod@counter:	
   803                           ; 1 bytes @ 0x8
   804                           
   805     0028                     ??_run_waterTankLogic:	
   806                           ; 1 bytes @ 0x8
   807                           
   808     0028                     ??_stopFilling:	
   809                           ; 1 bytes @ 0x8
   810                           
   811     0028                     ??_startFilling:	
   812                           ; 1 bytes @ 0x8
   813                           
   814     0028                     ??_fputc:	
   815                           ; 1 bytes @ 0x8
   816                           
   817     0028                     ??_Lcd_Clear:	
   818                           ; 1 bytes @ 0x8
   819                           
   820     0028                     ??_Lcd_Init:	
   821                           ; 1 bytes @ 0x8
   822                           
   823     0028                     ??___awdiv:	
   824                           ; 1 bytes @ 0x8
   825                           
   826     0028                     ??___awmod:	
   827                           ; 1 bytes @ 0x8
   828                           
   829                           
   830                           ; 1 bytes @ 0x8
   831     0028                     	ds	1
   832     0029                     ?_Lcd_Write_String:
   833     0029                     ___awdiv@sign:	
   834                           ; 1 bytes @ 0x9
   835                           
   836     0029                     ___awmod@sign:	
   837                           ; 1 bytes @ 0x9
   838                           
   839     0029                     Lcd_Write_String@a:	
   840                           ; 1 bytes @ 0x9
   841                           
   842     0029                     ??_Lcd_Set_Cursor:	
   843                           ; 2 bytes @ 0x9
   844                           
   845                           
   846                           ; 1 bytes @ 0x9
   847     0029                     	ds	1
   848     002A                     ?_abs:
   849     002A                     Lcd_Set_Cursor@a:	
   850                           ; 2 bytes @ 0xA
   851                           
   852     002A                     ___awdiv@quotient:	
   853                           ; 1 bytes @ 0xA
   854                           
   855     002A                     abs@a:	
   856                           ; 2 bytes @ 0xA
   857                           
   858                           
   859                           ; 2 bytes @ 0xA
   860     002A                     	ds	1
   861     002B                     Lcd_Set_Cursor@z:
   862     002B                     ??_Lcd_Write_String:	
   863                           ; 1 bytes @ 0xB
   864                           
   865                           
   866                           ; 1 bytes @ 0xB
   867     002B                     	ds	1
   868     002C                     Lcd_Set_Cursor@y:
   869     002C                     ??_abs:	
   870                           ; 1 bytes @ 0xC
   871                           
   872                           
   873                           ; 1 bytes @ 0xC
   874     002C                     	ds	1
   875     002D                     Lcd_Set_Cursor@temp:
   876                           
   877                           ; 1 bytes @ 0xD
   878     002D                     	ds	1
   879     002E                     Lcd_Write_String@i:
   880                           
   881                           ; 2 bytes @ 0xE
   882     002E                     	ds	3
   883     0031                     ?_vfpfcnvrt:
   884     0031                     vfpfcnvrt@fp:	
   885                           ; 1 bytes @ 0x11
   886                           
   887                           
   888                           ; 2 bytes @ 0x11
   889     0031                     	ds	2
   890     0033                     vfpfcnvrt@fmt:
   891                           
   892                           ; 1 bytes @ 0x13
   893     0033                     	ds	1
   894     0034                     vfpfcnvrt@ap:
   895                           
   896                           ; 2 bytes @ 0x14
   897     0034                     	ds	2
   898     0036                     ??_vfpfcnvrt:
   899                           
   900                           ; 1 bytes @ 0x16
   901     0036                     	ds	2
   902     0038                     vfpfcnvrt@cp_994:
   903                           
   904                           ; 2 bytes @ 0x18
   905     0038                     	ds	2
   906     003A                     vfpfcnvrt@done:
   907                           
   908                           ; 1 bytes @ 0x1A
   909     003A                     	ds	1
   910     003B                     vfpfcnvrt@cp:
   911                           
   912                           ; 1 bytes @ 0x1B
   913     003B                     	ds	1
   914     003C                     vfpfcnvrt@convarg:
   915                           
   916                           ; 4 bytes @ 0x1C
   917     003C                     	ds	4
   918     0040                     vfpfcnvrt@c:
   919                           
   920                           ; 1 bytes @ 0x20
   921     0040                     	ds	1
   922     0041                     ?_vfprintf:
   923     0041                     vfprintf@fp:	
   924                           ; 2 bytes @ 0x21
   925                           
   926                           
   927                           ; 2 bytes @ 0x21
   928     0041                     	ds	2
   929     0043                     vfprintf@fmt:
   930                           
   931                           ; 1 bytes @ 0x23
   932     0043                     	ds	1
   933     0044                     vfprintf@ap:
   934                           
   935                           ; 1 bytes @ 0x24
   936     0044                     	ds	1
   937     0045                     vfprintf@cfmt:
   938     0045                     ??_vfprintf:	
   939                           ; 1 bytes @ 0x25
   940                           
   941                           
   942                           ; 1 bytes @ 0x25
   943     0045                     	ds	1
   944     0046                     ?_sprintf:
   945     0046                     sprintf@s:	
   946                           ; 2 bytes @ 0x26
   947                           
   948                           
   949                           ; 1 bytes @ 0x26
   950     0046                     	ds	1
   951     0047                     sprintf@fmt:
   952                           
   953                           ; 1 bytes @ 0x27
   954     0047                     	ds	3
   955     004A                     ??_sprintf:
   956                           
   957                           ; 1 bytes @ 0x2A
   958     004A                     	ds	1
   959     004B                     sprintf@ap:
   960                           
   961                           ; 1 bytes @ 0x2B
   962     004B                     	ds	1
   963     004C                     sprintf@f:
   964                           
   965                           ; 11 bytes @ 0x2C
   966     004C                     	ds	11
   967     0057                     ??_print_Index:
   968                           
   969                           ; 1 bytes @ 0x37
   970     0057                     	ds	2
   971     0059                     ??_lcd_run:
   972     0059                     ??_main:	
   973                           ; 1 bytes @ 0x39
   974                           
   975                           
   976                           	psect	maintext
   977     0596                     __pmaintext:	
   978                           ; 1 bytes @ 0x39
   979 ;;
   980 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   981 ;;
   982 ;; *************** function _main *****************
   983 ;; Defined at:
   984 ;;		line 32 in file "main.c"
   985 ;; Parameters:    Size  Location     Type
   986 ;;		None
   987 ;; Auto vars:     Size  Location     Type
   988 ;;		None
   989 ;; Return value:  Size  Location     Type
   990 ;;                  1    wreg      void 
   991 ;; Registers used:
   992 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   993 ;; Tracked objects:
   994 ;;		On entry : B00/0
   995 ;;		On exit  : 0/0
   996 ;;		Unchanged: 0/0
   997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   998 ;;      Params:         0       0       0       0       0
   999 ;;      Locals:         0       0       0       0       0
  1000 ;;      Temps:          0       0       0       0       0
  1001 ;;      Totals:         0       0       0       0       0
  1002 ;;Total ram usage:        0 bytes
  1003 ;; Hardware stack levels required when called: 11
  1004 ;; This function calls:
  1005 ;;		_Lcd_Init
  1006 ;;		_interruption_init
  1007 ;;		_lcd_run
  1008 ;;		_pins_init
  1009 ;;		_print_Index
  1010 ;;		_run_waterTankLogic
  1011 ;;		_timer1_1ms_init
  1012 ;; This function is called by:
  1013 ;;		Startup code after reset
  1014 ;; This function uses a non-reentrant model
  1015 ;;
  1016                           
  1017     0596                     _main:	
  1018                           ;psect for function _main
  1019                           
  1020     0596                     l1771:	
  1021                           ;incstack = 0
  1022 ;; hardware stack exceeded
  1023                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1024                           
  1025                           
  1026                           ;main.c: 35:   PORTCbits.RC0 = 1;
  1027     0596  1283               	bcf	3,5	;RP0=0, select bank0
  1028     0597  1303               	bcf	3,6	;RP1=0, select bank0
  1029     0598  1407               	bsf	7,0	;volatile
  1030                           
  1031                           ;main.c: 36:   PORTCbits.RC1 = 1;
  1032     0599  1487               	bsf	7,1	;volatile
  1033                           
  1034                           ;main.c: 37:   PORTCbits.RC4 = 1;
  1035     059A  1607               	bsf	7,4	;volatile
  1036                           
  1037                           ;main.c: 38:   PORTCbits.RC2 = 1;
  1038     059B  1507               	bsf	7,2	;volatile
  1039                           
  1040                           ;main.c: 39:   PORTCbits.RC3 = 0;
  1041     059C  1187               	bcf	7,3	;volatile
  1042     059D                     l1773:
  1043                           
  1044                           ;main.c: 43:   pins_init(0xFF ,0xFF ,0x00 ,0x00);
  1045     059D  30FF               	movlw	255
  1046     059E  00A4               	movwf	pins_init@_TRISB
  1047     059F  01A5               	clrf	pins_init@_TRISC
  1048     05A0  01A6               	clrf	pins_init@_TRISD
  1049     05A1  30FF               	movlw	255
  1050     05A2  120A  118A  2743  120A  118A  	fcall	_pins_init
  1051     05A7                     l1775:
  1052                           
  1053                           ;main.c: 44:   interruption_init();
  1054     05A7  120A  118A  27E8  120A  118A  	fcall	_interruption_init
  1055     05AC                     l1777:
  1056                           
  1057                           ;main.c: 45:   timer1_1ms_init();
  1058     05AC  120A  118A  2784  120A  118A  	fcall	_timer1_1ms_init
  1059                           
  1060                           ;main.c: 46:   Lcd_Init();
  1061     05B1  120A  118A  2351  120A  118A  	fcall	_Lcd_Init
  1062     05B6                     l1779:
  1063                           
  1064                           ;main.c: 47:   print_Index();
  1065     05B6  120A  118A  25CA  120A  118A  	fcall	_print_Index
  1066     05BB                     l154:	
  1067                           ;main.c: 49:   while(1)
  1068                           
  1069     05BB  0064               	clrwdt	;# 
  1070     05BC                     l1781:
  1071                           
  1072                           ;main.c: 53:     run_waterTankLogic();
  1073     05BC  120A  118A  24E6  120A  118A  	fcall	_run_waterTankLogic
  1074     05C1                     l1783:
  1075                           
  1076                           ;main.c: 54:     lcd_run();
  1077     05C1  120A  118A  26E6  120A  118A  	fcall	_lcd_run
  1078     05C6  2DBB               	goto	l154
  1079     05C7  120A  118A  2812   	ljmp	start
  1080     05CA                     __end_of_main:
  1081                           
  1082                           	psect	text1
  1083     0784                     __ptext1:	
  1084 ;; *************** function _timer1_1ms_init *****************
  1085 ;; Defined at:
  1086 ;;		line 82 in file "./config.h"
  1087 ;; Parameters:    Size  Location     Type
  1088 ;;		None
  1089 ;; Auto vars:     Size  Location     Type
  1090 ;;		None
  1091 ;; Return value:  Size  Location     Type
  1092 ;;                  1    wreg      void 
  1093 ;; Registers used:
  1094 ;;		status,2, status,0, pclath, cstack
  1095 ;; Tracked objects:
  1096 ;;		On entry : 0/0
  1097 ;;		On exit  : 0/0
  1098 ;;		Unchanged: 0/0
  1099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1100 ;;      Params:         0       0       0       0       0
  1101 ;;      Locals:         0       0       0       0       0
  1102 ;;      Temps:          0       0       0       0       0
  1103 ;;      Totals:         0       0       0       0       0
  1104 ;;Total ram usage:        0 bytes
  1105 ;; Hardware stack levels used: 1
  1106 ;; Hardware stack levels required when called: 5
  1107 ;; This function calls:
  1108 ;;		_setCounter_Timer1
  1109 ;; This function is called by:
  1110 ;;		_main
  1111 ;; This function uses a non-reentrant model
  1112 ;;
  1113                           
  1114     0784                     _timer1_1ms_init:	
  1115                           ;psect for function _timer1_1ms_init
  1116                           
  1117     0784                     l1677:	
  1118                           ;incstack = 0
  1119                           ; Regs used in _timer1_1ms_init: [status,2+status,0+pclath+cstack]
  1120                           
  1121                           
  1122                           ;./config.h: 84:   T1CONbits.TMR1CS = 0;
  1123     0784  1283               	bcf	3,5	;RP0=0, select bank0
  1124     0785  1303               	bcf	3,6	;RP1=0, select bank0
  1125     0786  1090               	bcf	16,1	;volatile
  1126                           
  1127                           ;./config.h: 87:   T1CONbits.T1CKPS0 = 1;
  1128     0787  1610               	bsf	16,4	;volatile
  1129                           
  1130                           ;./config.h: 88:   T1CONbits.T1CKPS1 = 1;
  1131     0788  1690               	bsf	16,5	;volatile
  1132     0789                     l1679:
  1133                           
  1134                           ;./config.h: 90:   setCounter_Timer1();
  1135     0789  120A  118A  27F7  120A  118A  	fcall	_setCounter_Timer1
  1136     078E                     l1681:
  1137                           
  1138                           ;./config.h: 92:   T1CONbits.TMR1ON = 1;
  1139     078E  1283               	bcf	3,5	;RP0=0, select bank0
  1140     078F  1303               	bcf	3,6	;RP1=0, select bank0
  1141     0790  1410               	bsf	16,0	;volatile
  1142     0791                     l56:
  1143     0791  0008               	return
  1144     0792                     __end_of_timer1_1ms_init:
  1145                           
  1146                           	psect	text2
  1147     07F7                     __ptext2:	
  1148 ;; *************** function _setCounter_Timer1 *****************
  1149 ;; Defined at:
  1150 ;;		line 75 in file "./config.h"
  1151 ;; Parameters:    Size  Location     Type
  1152 ;;		None
  1153 ;; Auto vars:     Size  Location     Type
  1154 ;;		None
  1155 ;; Return value:  Size  Location     Type
  1156 ;;                  1    wreg      void 
  1157 ;; Registers used:
  1158 ;;		None
  1159 ;; Tracked objects:
  1160 ;;		On entry : 0/0
  1161 ;;		On exit  : 0/0
  1162 ;;		Unchanged: 0/0
  1163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1164 ;;      Params:         0       0       0       0       0
  1165 ;;      Locals:         0       0       0       0       0
  1166 ;;      Temps:          0       0       0       0       0
  1167 ;;      Totals:         0       0       0       0       0
  1168 ;;Total ram usage:        0 bytes
  1169 ;; Hardware stack levels used: 1
  1170 ;; Hardware stack levels required when called: 4
  1171 ;; This function calls:
  1172 ;;		Nothing
  1173 ;; This function is called by:
  1174 ;;		_timer1_1ms_init
  1175 ;; This function uses a non-reentrant model
  1176 ;;
  1177                           
  1178     07F7                     _setCounter_Timer1:	
  1179                           ;psect for function _setCounter_Timer1
  1180                           
  1181     07F7                     l1617:	
  1182                           ;incstack = 0
  1183                           ; Regs used in _setCounter_Timer1: []
  1184                           
  1185                           
  1186                           ;./config.h: 78:   TMR1H = 0xFF;
  1187     07F7  30FF               	movlw	255
  1188     07F8  1283               	bcf	3,5	;RP0=0, select bank0
  1189     07F9  1303               	bcf	3,6	;RP1=0, select bank0
  1190     07FA  008F               	movwf	15	;volatile
  1191                           
  1192                           ;./config.h: 79:   TMR1L = 0x67;
  1193     07FB  3067               	movlw	103
  1194     07FC  008E               	movwf	14	;volatile
  1195     07FD                     l53:
  1196     07FD  0008               	return
  1197     07FE                     __end_of_setCounter_Timer1:
  1198                           
  1199                           	psect	text3
  1200     04E6                     __ptext3:	
  1201 ;; *************** function _run_waterTankLogic *****************
  1202 ;; Defined at:
  1203 ;;		line 38 in file "waterTankManager.c"
  1204 ;; Parameters:    Size  Location     Type
  1205 ;;		None
  1206 ;; Auto vars:     Size  Location     Type
  1207 ;;		None
  1208 ;; Return value:  Size  Location     Type
  1209 ;;                  1    wreg      void 
  1210 ;; Registers used:
  1211 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1212 ;; Tracked objects:
  1213 ;;		On entry : 0/0
  1214 ;;		On exit  : 0/0
  1215 ;;		Unchanged: 0/0
  1216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1217 ;;      Params:         0       0       0       0       0
  1218 ;;      Locals:         0       0       0       0       0
  1219 ;;      Temps:          0       2       0       0       0
  1220 ;;      Totals:         0       2       0       0       0
  1221 ;;Total ram usage:        2 bytes
  1222 ;; Hardware stack levels used: 1
  1223 ;; Hardware stack levels required when called: 6
  1224 ;; This function calls:
  1225 ;;		_check_TankStatus
  1226 ;;		_startFilling
  1227 ;;		_stopFilling
  1228 ;; This function is called by:
  1229 ;;		_main
  1230 ;; This function uses a non-reentrant model
  1231 ;;
  1232                           
  1233     04E6                     _run_waterTankLogic:	
  1234                           ;psect for function _run_waterTankLogic
  1235                           
  1236     04E6                     l1729:	
  1237                           ;incstack = 0
  1238                           ; Regs used in _run_waterTankLogic: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1239                           
  1240                           
  1241                           ;waterTankManager.c: 41:   check_TankStatus();
  1242     04E6  120A  118A  24A1  120A  118A  	fcall	_check_TankStatus
  1243                           
  1244                           ;waterTankManager.c: 43:   switch (tankState)
  1245     04EB  2D0A               	goto	l1743
  1246     04EC                     l1731:
  1247                           
  1248                           ;waterTankManager.c: 46:     stopFilling();
  1249     04EC  120A  118A  27AE  120A  118A  	fcall	_stopFilling
  1250     04F1                     l1733:
  1251                           
  1252                           ;waterTankManager.c: 47:     PORTCbits.RC2 = 1;
  1253     04F1  1283               	bcf	3,5	;RP0=0, select bank0
  1254     04F2  1303               	bcf	3,6	;RP1=0, select bank0
  1255     04F3  1507               	bsf	7,2	;volatile
  1256                           
  1257                           ;waterTankManager.c: 48:     break;
  1258     04F4  2D22               	goto	l199
  1259     04F5                     l1735:
  1260                           
  1261                           ;waterTankManager.c: 51:     startFilling();
  1262     04F5  120A  118A  27BB  120A  118A  	fcall	_startFilling
  1263                           
  1264                           ;waterTankManager.c: 52:     break;
  1265     04FA  2D22               	goto	l199
  1266     04FB                     l1737:
  1267                           
  1268                           ;waterTankManager.c: 55:     stopFilling();
  1269     04FB  120A  118A  27AE  120A  118A  	fcall	_stopFilling
  1270                           
  1271                           ;waterTankManager.c: 56:     break;
  1272     0500  2D22               	goto	l199
  1273     0501                     l1739:
  1274                           
  1275                           ;waterTankManager.c: 62:     stopFilling();
  1276     0501  120A  118A  27AE  120A  118A  	fcall	_stopFilling
  1277     0506                     l1741:
  1278                           
  1279                           ;waterTankManager.c: 63:     PORTCbits.RC2 = 1;
  1280     0506  1283               	bcf	3,5	;RP0=0, select bank0
  1281     0507  1303               	bcf	3,6	;RP1=0, select bank0
  1282     0508  1507               	bsf	7,2	;volatile
  1283                           
  1284                           ;waterTankManager.c: 64:   };
  1285     0509  2D22               	goto	l199
  1286     050A                     l1743:
  1287     050A  1283               	bcf	3,5	;RP0=0, select bank0
  1288     050B  1303               	bcf	3,6	;RP1=0, select bank0
  1289     050C  085D               	movf	_tankState,w
  1290     050D  00A8               	movwf	??_run_waterTankLogic
  1291     050E  01A9               	clrf	??_run_waterTankLogic+1
  1292                           
  1293                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1294                           ; Switch size 1, requested type "simple"
  1295                           ; Number of cases is 1, Range of values is 0 to 0
  1296                           ; switch strategies available:
  1297                           ; Name         Instructions Cycles
  1298                           ; simple_byte            4     3 (average)
  1299                           ; direct_byte           11     8 (fixed)
  1300                           ; jumptable            260     6 (fixed)
  1301                           ;	Chosen strategy is simple_byte
  1302     050F  0829               	movf	??_run_waterTankLogic+1,w
  1303     0510  3A00               	xorlw	0	; case 0
  1304     0511  1903               	skipnz
  1305     0512  2D14               	goto	l1805
  1306     0513  2D01               	goto	l1739
  1307     0514                     l1805:
  1308                           
  1309                           ; Switch size 1, requested type "simple"
  1310                           ; Number of cases is 4, Range of values is 0 to 3
  1311                           ; switch strategies available:
  1312                           ; Name         Instructions Cycles
  1313                           ; simple_byte           13     7 (average)
  1314                           ; direct_byte           20     8 (fixed)
  1315                           ; jumptable            260     6 (fixed)
  1316                           ;	Chosen strategy is simple_byte
  1317     0514  0828               	movf	??_run_waterTankLogic,w
  1318     0515  3A00               	xorlw	0	; case 0
  1319     0516  1903               	skipnz
  1320     0517  2CFB               	goto	l1737
  1321     0518  3A01               	xorlw	1	; case 1
  1322     0519  1903               	skipnz
  1323     051A  2D22               	goto	l199
  1324     051B  3A03               	xorlw	3	; case 2
  1325     051C  1903               	skipnz
  1326     051D  2CF5               	goto	l1735
  1327     051E  3A01               	xorlw	1	; case 3
  1328     051F  1903               	skipnz
  1329     0520  2CEC               	goto	l1731
  1330     0521  2D01               	goto	l1739
  1331     0522                     l199:
  1332     0522  0008               	return
  1333     0523                     __end_of_run_waterTankLogic:
  1334                           
  1335                           	psect	text4
  1336     07AE                     __ptext4:	
  1337 ;; *************** function _stopFilling *****************
  1338 ;; Defined at:
  1339 ;;		line 72 in file "waterTankManager.c"
  1340 ;; Parameters:    Size  Location     Type
  1341 ;;		None
  1342 ;; Auto vars:     Size  Location     Type
  1343 ;;		None
  1344 ;; Return value:  Size  Location     Type
  1345 ;;                  1    wreg      void 
  1346 ;; Registers used:
  1347 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1348 ;; Tracked objects:
  1349 ;;		On entry : 0/0
  1350 ;;		On exit  : 0/0
  1351 ;;		Unchanged: 0/0
  1352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1353 ;;      Params:         0       0       0       0       0
  1354 ;;      Locals:         0       0       0       0       0
  1355 ;;      Temps:          0       0       0       0       0
  1356 ;;      Totals:         0       0       0       0       0
  1357 ;;Total ram usage:        0 bytes
  1358 ;; Hardware stack levels used: 1
  1359 ;; Hardware stack levels required when called: 5
  1360 ;; This function calls:
  1361 ;;		_stopTimer
  1362 ;; This function is called by:
  1363 ;;		_run_waterTankLogic
  1364 ;; This function uses a non-reentrant model
  1365 ;;
  1366                           
  1367     07AE                     _stopFilling:	
  1368                           ;psect for function _stopFilling
  1369                           
  1370     07AE                     l1667:	
  1371                           ;incstack = 0
  1372                           ; Regs used in _stopFilling: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1373                           
  1374                           
  1375                           ;waterTankManager.c: 74:   PORTCbits.RC0 = 1;
  1376     07AE  1283               	bcf	3,5	;RP0=0, select bank0
  1377     07AF  1303               	bcf	3,6	;RP1=0, select bank0
  1378     07B0  1407               	bsf	7,0	;volatile
  1379     07B1                     l1669:
  1380                           
  1381                           ;waterTankManager.c: 75:   stopTimer(&timer_WTANK_timeout);
  1382     07B1  305E               	movlw	low _timer_WTANK_timeout
  1383     07B2  00A4               	movwf	stopTimer@timer
  1384     07B3  3000               	movlw	high _timer_WTANK_timeout
  1385     07B4  00A5               	movwf	stopTimer@timer+1
  1386     07B5  120A  118A  26C5  120A  118A  	fcall	_stopTimer
  1387     07BA                     l205:
  1388     07BA  0008               	return
  1389     07BB                     __end_of_stopFilling:
  1390                           
  1391                           	psect	text5
  1392     06C5                     __ptext5:	
  1393 ;; *************** function _stopTimer *****************
  1394 ;; Defined at:
  1395 ;;		line 26 in file "virtualTimer.c"
  1396 ;; Parameters:    Size  Location     Type
  1397 ;;  timer           2    4[BANK0 ] PTR struct .
  1398 ;;		 -> timer_WTANK_timeout(6), 
  1399 ;; Auto vars:     Size  Location     Type
  1400 ;;		None
  1401 ;; Return value:  Size  Location     Type
  1402 ;;                  1    wreg      void 
  1403 ;; Registers used:
  1404 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1405 ;; Tracked objects:
  1406 ;;		On entry : 0/0
  1407 ;;		On exit  : 0/0
  1408 ;;		Unchanged: 0/0
  1409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1410 ;;      Params:         0       2       0       0       0
  1411 ;;      Locals:         0       0       0       0       0
  1412 ;;      Temps:          0       2       0       0       0
  1413 ;;      Totals:         0       4       0       0       0
  1414 ;;Total ram usage:        4 bytes
  1415 ;; Hardware stack levels used: 1
  1416 ;; Hardware stack levels required when called: 4
  1417 ;; This function calls:
  1418 ;;		Nothing
  1419 ;; This function is called by:
  1420 ;;		_stopFilling
  1421 ;; This function uses a non-reentrant model
  1422 ;;
  1423                           
  1424     06C5                     _stopTimer:	
  1425                           ;psect for function _stopTimer
  1426                           
  1427     06C5                     l1615:	
  1428                           ;incstack = 0
  1429                           ; Regs used in _stopTimer: [wreg-fsr0h+status,2+status,0]
  1430                           
  1431                           
  1432                           ;virtualTimer.c: 26: void stopTimer(virtualTimer *timer);virtualTimer.c: 27: {;virtualTi
      +                          mer.c: 28:   timer->active = 0;
  1433     06C5  1283               	bcf	3,5	;RP0=0, select bank0
  1434     06C6  1303               	bcf	3,6	;RP1=0, select bank0
  1435     06C7  0824               	movf	stopTimer@timer,w
  1436     06C8  3E04               	addlw	4
  1437     06C9  00A6               	movwf	??_stopTimer
  1438     06CA  0825               	movf	stopTimer@timer+1,w
  1439     06CB  1803               	skipnc
  1440     06CC  3E01               	addlw	1
  1441     06CD  3E00               	addlw	0
  1442     06CE  00A7               	movwf	??_stopTimer+1
  1443     06CF  0826               	movf	??_stopTimer,w
  1444     06D0  0084               	movwf	4
  1445     06D1  1783               	bsf	3,7
  1446     06D2  1C27               	btfss	??_stopTimer+1,0
  1447     06D3  1383               	bcf	3,7
  1448     06D4  0180               	clrf	0
  1449                           
  1450                           ;virtualTimer.c: 29:   timer->elapsedTime = 0;
  1451     06D5  0824               	movf	stopTimer@timer,w
  1452     06D6  3E02               	addlw	2
  1453     06D7  00A6               	movwf	??_stopTimer
  1454     06D8  0825               	movf	stopTimer@timer+1,w
  1455     06D9  1803               	skipnc
  1456     06DA  3E01               	addlw	1
  1457     06DB  3E00               	addlw	0
  1458     06DC  00A7               	movwf	??_stopTimer+1
  1459     06DD  0826               	movf	??_stopTimer,w
  1460     06DE  0084               	movwf	4
  1461     06DF  1783               	bsf	3,7
  1462     06E0  1C27               	btfss	??_stopTimer+1,0
  1463     06E1  1383               	bcf	3,7
  1464     06E2  0180               	clrf	0
  1465     06E3  0A84               	incf	4,f
  1466     06E4  0180               	clrf	0
  1467     06E5                     l221:
  1468     06E5  0008               	return
  1469     06E6                     __end_of_stopTimer:
  1470                           
  1471                           	psect	text6
  1472     07BB                     __ptext6:	
  1473 ;; *************** function _startFilling *****************
  1474 ;; Defined at:
  1475 ;;		line 67 in file "waterTankManager.c"
  1476 ;; Parameters:    Size  Location     Type
  1477 ;;		None
  1478 ;; Auto vars:     Size  Location     Type
  1479 ;;		None
  1480 ;; Return value:  Size  Location     Type
  1481 ;;                  1    wreg      void 
  1482 ;; Registers used:
  1483 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1484 ;; Tracked objects:
  1485 ;;		On entry : 0/0
  1486 ;;		On exit  : 0/0
  1487 ;;		Unchanged: 0/0
  1488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1489 ;;      Params:         0       0       0       0       0
  1490 ;;      Locals:         0       0       0       0       0
  1491 ;;      Temps:          0       0       0       0       0
  1492 ;;      Totals:         0       0       0       0       0
  1493 ;;Total ram usage:        0 bytes
  1494 ;; Hardware stack levels used: 1
  1495 ;; Hardware stack levels required when called: 5
  1496 ;; This function calls:
  1497 ;;		_startTimer
  1498 ;; This function is called by:
  1499 ;;		_run_waterTankLogic
  1500 ;; This function uses a non-reentrant model
  1501 ;;
  1502                           
  1503     07BB                     _startFilling:	
  1504                           ;psect for function _startFilling
  1505                           
  1506     07BB                     l1671:	
  1507                           ;incstack = 0
  1508                           ; Regs used in _startFilling: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1509                           
  1510                           
  1511                           ;waterTankManager.c: 69:   PORTCbits.RC0 = 0;
  1512     07BB  1283               	bcf	3,5	;RP0=0, select bank0
  1513     07BC  1303               	bcf	3,6	;RP1=0, select bank0
  1514     07BD  1007               	bcf	7,0	;volatile
  1515     07BE                     l1673:
  1516                           
  1517                           ;waterTankManager.c: 70:   startTimer(&timer_WTANK_timeout);
  1518     07BE  305E               	movlw	low _timer_WTANK_timeout
  1519     07BF  00A4               	movwf	startTimer@timer
  1520     07C0  3000               	movlw	high _timer_WTANK_timeout
  1521     07C1  00A5               	movwf	startTimer@timer+1
  1522     07C2  120A  118A  26A3  120A  118A  	fcall	_startTimer
  1523     07C7                     l202:
  1524     07C7  0008               	return
  1525     07C8                     __end_of_startFilling:
  1526                           
  1527                           	psect	text7
  1528     06A3                     __ptext7:	
  1529 ;; *************** function _startTimer *****************
  1530 ;; Defined at:
  1531 ;;		line 19 in file "virtualTimer.c"
  1532 ;; Parameters:    Size  Location     Type
  1533 ;;  timer           2    4[BANK0 ] PTR struct .
  1534 ;;		 -> timer_WTANK_timeout(6), 
  1535 ;; Auto vars:     Size  Location     Type
  1536 ;;		None
  1537 ;; Return value:  Size  Location     Type
  1538 ;;                  1    wreg      void 
  1539 ;; Registers used:
  1540 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1541 ;; Tracked objects:
  1542 ;;		On entry : 0/0
  1543 ;;		On exit  : 0/0
  1544 ;;		Unchanged: 0/0
  1545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1546 ;;      Params:         0       2       0       0       0
  1547 ;;      Locals:         0       0       0       0       0
  1548 ;;      Temps:          0       2       0       0       0
  1549 ;;      Totals:         0       4       0       0       0
  1550 ;;Total ram usage:        4 bytes
  1551 ;; Hardware stack levels used: 1
  1552 ;; Hardware stack levels required when called: 4
  1553 ;; This function calls:
  1554 ;;		Nothing
  1555 ;; This function is called by:
  1556 ;;		_startFilling
  1557 ;; This function uses a non-reentrant model
  1558 ;;
  1559                           
  1560     06A3                     _startTimer:	
  1561                           ;psect for function _startTimer
  1562                           
  1563     06A3                     l1613:	
  1564                           ;incstack = 0
  1565                           ; Regs used in _startTimer: [wreg-fsr0h+status,2+status,0]
  1566                           
  1567                           
  1568                           ;virtualTimer.c: 19: void startTimer(virtualTimer *timer);virtualTimer.c: 20: {;virtualT
      +                          imer.c: 21:   timer->active = 1;
  1569     06A3  1283               	bcf	3,5	;RP0=0, select bank0
  1570     06A4  1303               	bcf	3,6	;RP1=0, select bank0
  1571     06A5  0824               	movf	startTimer@timer,w
  1572     06A6  3E04               	addlw	4
  1573     06A7  00A6               	movwf	??_startTimer
  1574     06A8  0825               	movf	startTimer@timer+1,w
  1575     06A9  1803               	skipnc
  1576     06AA  3E01               	addlw	1
  1577     06AB  3E00               	addlw	0
  1578     06AC  00A7               	movwf	??_startTimer+1
  1579     06AD  0826               	movf	??_startTimer,w
  1580     06AE  0084               	movwf	4
  1581     06AF  1783               	bsf	3,7
  1582     06B0  1C27               	btfss	??_startTimer+1,0
  1583     06B1  1383               	bcf	3,7
  1584     06B2  3001               	movlw	1
  1585     06B3  0080               	movwf	0
  1586                           
  1587                           ;virtualTimer.c: 22:   timer->elapsedTime = 0;
  1588     06B4  0824               	movf	startTimer@timer,w
  1589     06B5  3E02               	addlw	2
  1590     06B6  00A6               	movwf	??_startTimer
  1591     06B7  0825               	movf	startTimer@timer+1,w
  1592     06B8  1803               	skipnc
  1593     06B9  3E01               	addlw	1
  1594     06BA  3E00               	addlw	0
  1595     06BB  00A7               	movwf	??_startTimer+1
  1596     06BC  0826               	movf	??_startTimer,w
  1597     06BD  0084               	movwf	4
  1598     06BE  1783               	bsf	3,7
  1599     06BF  1C27               	btfss	??_startTimer+1,0
  1600     06C0  1383               	bcf	3,7
  1601     06C1  0180               	clrf	0
  1602     06C2  0A84               	incf	4,f
  1603     06C3  0180               	clrf	0
  1604     06C4                     l218:
  1605     06C4  0008               	return
  1606     06C5                     __end_of_startTimer:
  1607                           
  1608                           	psect	text8
  1609     04A1                     __ptext8:	
  1610 ;; *************** function _check_TankStatus *****************
  1611 ;; Defined at:
  1612 ;;		line 13 in file "waterTankManager.c"
  1613 ;; Parameters:    Size  Location     Type
  1614 ;;		None
  1615 ;; Auto vars:     Size  Location     Type
  1616 ;;  bot             1    6[BANK0 ] unsigned char 
  1617 ;;  top             1    5[BANK0 ] unsigned char 
  1618 ;; Return value:  Size  Location     Type
  1619 ;;                  1    wreg      void 
  1620 ;; Registers used:
  1621 ;;		wreg, status,2, status,0
  1622 ;; Tracked objects:
  1623 ;;		On entry : 0/0
  1624 ;;		On exit  : 0/0
  1625 ;;		Unchanged: 0/0
  1626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1627 ;;      Params:         0       0       0       0       0
  1628 ;;      Locals:         0       2       0       0       0
  1629 ;;      Temps:          0       1       0       0       0
  1630 ;;      Totals:         0       3       0       0       0
  1631 ;;Total ram usage:        3 bytes
  1632 ;; Hardware stack levels used: 1
  1633 ;; Hardware stack levels required when called: 4
  1634 ;; This function calls:
  1635 ;;		Nothing
  1636 ;; This function is called by:
  1637 ;;		_run_waterTankLogic
  1638 ;; This function uses a non-reentrant model
  1639 ;;
  1640                           
  1641     04A1                     _check_TankStatus:	
  1642                           ;psect for function _check_TankStatus
  1643                           
  1644     04A1                     l1643:	
  1645                           ;incstack = 0
  1646                           ; Regs used in _check_TankStatus: [wreg+status,2+status,0]
  1647                           
  1648                           
  1649                           ;waterTankManager.c: 16:   unsigned char top = PORTAbits.RA3;
  1650     04A1  1283               	bcf	3,5	;RP0=0, select bank0
  1651     04A2  1303               	bcf	3,6	;RP1=0, select bank0
  1652     04A3  0C05               	rrf	5,w	;volatile
  1653     04A4  00A4               	movwf	??_check_TankStatus
  1654     04A5  0CA4               	rrf	??_check_TankStatus,f
  1655     04A6  0C24               	rrf	??_check_TankStatus,w
  1656     04A7  3901               	andlw	1
  1657     04A8  00A5               	movwf	check_TankStatus@top
  1658                           
  1659                           ;waterTankManager.c: 17:   unsigned char bot = PORTAbits.RA4;
  1660     04A9  0E05               	swapf	5,w	;volatile
  1661     04AA  3901               	andlw	1
  1662     04AB  00A6               	movwf	check_TankStatus@bot
  1663                           
  1664                           ;waterTankManager.c: 20:   if((top == 1 && bot == 0) || tankState == WTANK_ERROR)
  1665     04AC  0325               	decf	check_TankStatus@top,w
  1666     04AD  1D03               	btfss	3,2
  1667     04AE  2CB0               	goto	u1341
  1668     04AF  2CB1               	goto	u1340
  1669     04B0                     u1341:
  1670     04B0  2CB6               	goto	l1647
  1671     04B1                     u1340:
  1672     04B1                     l1645:
  1673     04B1  0826               	movf	check_TankStatus@bot,w
  1674     04B2  1903               	btfsc	3,2
  1675     04B3  2CB5               	goto	u1351
  1676     04B4  2CB6               	goto	u1350
  1677     04B5                     u1351:
  1678     04B5  2CBC               	goto	l180
  1679     04B6                     u1350:
  1680     04B6                     l1647:
  1681     04B6  3003               	movlw	3
  1682     04B7  065D               	xorwf	_tankState,w
  1683     04B8  1D03               	btfss	3,2
  1684     04B9  2CBB               	goto	u1361
  1685     04BA  2CBC               	goto	u1360
  1686     04BB                     u1361:
  1687     04BB  2CBF               	goto	l1649
  1688     04BC                     u1360:
  1689     04BC                     l180:
  1690                           
  1691                           ;waterTankManager.c: 21:     tankState = WTANK_ERROR;
  1692     04BC  3003               	movlw	3
  1693     04BD  00DD               	movwf	_tankState
  1694     04BE  2CE5               	goto	l189
  1695     04BF                     l1649:
  1696     04BF  0825               	movf	check_TankStatus@top,w
  1697     04C0  1D03               	btfss	3,2
  1698     04C1  2CC3               	goto	u1371
  1699     04C2  2CC4               	goto	u1370
  1700     04C3                     u1371:
  1701     04C3  2CCC               	goto	l1655
  1702     04C4                     u1370:
  1703     04C4                     l1651:
  1704     04C4  0326               	decf	check_TankStatus@bot,w
  1705     04C5  1D03               	btfss	3,2
  1706     04C6  2CC8               	goto	u1381
  1707     04C7  2CC9               	goto	u1380
  1708     04C8                     u1381:
  1709     04C8  2CCC               	goto	l1655
  1710     04C9                     u1380:
  1711     04C9                     l1653:
  1712                           
  1713                           ;waterTankManager.c: 25:     tankState = WTANK_MID;
  1714     04C9  3001               	movlw	1
  1715     04CA  00DD               	movwf	_tankState
  1716     04CB  2CE5               	goto	l189
  1717     04CC                     l1655:
  1718     04CC  0325               	decf	check_TankStatus@top,w
  1719     04CD  1D03               	btfss	3,2
  1720     04CE  2CD0               	goto	u1391
  1721     04CF  2CD1               	goto	u1390
  1722     04D0                     u1391:
  1723     04D0  2CD8               	goto	l1661
  1724     04D1                     u1390:
  1725     04D1                     l1657:
  1726     04D1  0326               	decf	check_TankStatus@bot,w
  1727     04D2  1D03               	btfss	3,2
  1728     04D3  2CD5               	goto	u1401
  1729     04D4  2CD6               	goto	u1400
  1730     04D5                     u1401:
  1731     04D5  2CD8               	goto	l1661
  1732     04D6                     u1400:
  1733     04D6                     l1659:
  1734                           
  1735                           ;waterTankManager.c: 29:     tankState = WTANK_FULL;
  1736     04D6  01DD               	clrf	_tankState
  1737     04D7  2CE5               	goto	l189
  1738     04D8                     l1661:
  1739     04D8  0825               	movf	check_TankStatus@top,w
  1740     04D9  1D03               	btfss	3,2
  1741     04DA  2CDC               	goto	u1411
  1742     04DB  2CDD               	goto	u1410
  1743     04DC                     u1411:
  1744     04DC  2CE5               	goto	l185
  1745     04DD                     u1410:
  1746     04DD                     l1663:
  1747     04DD  0826               	movf	check_TankStatus@bot,w
  1748     04DE  1D03               	btfss	3,2
  1749     04DF  2CE1               	goto	u1421
  1750     04E0  2CE2               	goto	u1420
  1751     04E1                     u1421:
  1752     04E1  2CE5               	goto	l185
  1753     04E2                     u1420:
  1754     04E2                     l1665:
  1755                           
  1756                           ;waterTankManager.c: 33:     tankState = WTANK_LOW;
  1757     04E2  3002               	movlw	2
  1758     04E3  00DD               	movwf	_tankState
  1759     04E4  2CE5               	goto	l189
  1760     04E5                     l185:
  1761     04E5                     l189:
  1762     04E5  0008               	return
  1763     04E6                     __end_of_check_TankStatus:
  1764                           
  1765                           	psect	text9
  1766     0743                     __ptext9:	
  1767 ;; *************** function _pins_init *****************
  1768 ;; Defined at:
  1769 ;;		line 116 in file "./config.h"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;  _TRISA          1    wreg     unsigned char 
  1772 ;;  _TRISB          1    4[BANK0 ] unsigned char 
  1773 ;;  _TRISC          1    5[BANK0 ] unsigned char 
  1774 ;;  _TRISD          1    6[BANK0 ] unsigned char 
  1775 ;; Auto vars:     Size  Location     Type
  1776 ;;  _TRISA          1    7[BANK0 ] unsigned char 
  1777 ;; Return value:  Size  Location     Type
  1778 ;;                  1    wreg      void 
  1779 ;; Registers used:
  1780 ;;		wreg
  1781 ;; Tracked objects:
  1782 ;;		On entry : 0/0
  1783 ;;		On exit  : 0/0
  1784 ;;		Unchanged: 0/0
  1785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1786 ;;      Params:         0       3       0       0       0
  1787 ;;      Locals:         0       1       0       0       0
  1788 ;;      Temps:          0       0       0       0       0
  1789 ;;      Totals:         0       4       0       0       0
  1790 ;;Total ram usage:        4 bytes
  1791 ;; Hardware stack levels used: 1
  1792 ;; Hardware stack levels required when called: 4
  1793 ;; This function calls:
  1794 ;;		Nothing
  1795 ;; This function is called by:
  1796 ;;		_main
  1797 ;; This function uses a non-reentrant model
  1798 ;;
  1799                           
  1800     0743                     _pins_init:	
  1801                           ;psect for function _pins_init
  1802                           
  1803                           
  1804                           ;incstack = 0
  1805                           ; Regs used in _pins_init: [wreg]
  1806                           ;pins_init@_TRISA stored from wreg
  1807     0743  1283               	bcf	3,5	;RP0=0, select bank0
  1808     0744  1303               	bcf	3,6	;RP1=0, select bank0
  1809     0745  00A7               	movwf	pins_init@_TRISA
  1810     0746                     l1683:
  1811                           
  1812                           ;./config.h: 117:   TRISA = _TRISA;
  1813     0746  0827               	movf	pins_init@_TRISA,w
  1814     0747  1683               	bsf	3,5	;RP0=1, select bank1
  1815     0748  1303               	bcf	3,6	;RP1=0, select bank1
  1816     0749  0085               	movwf	5	;volatile
  1817                           
  1818                           ;./config.h: 118:   TRISB = _TRISB;
  1819     074A  1283               	bcf	3,5	;RP0=0, select bank0
  1820     074B  1303               	bcf	3,6	;RP1=0, select bank0
  1821     074C  0824               	movf	pins_init@_TRISB,w
  1822     074D  1683               	bsf	3,5	;RP0=1, select bank1
  1823     074E  1303               	bcf	3,6	;RP1=0, select bank1
  1824     074F  0086               	movwf	6	;volatile
  1825                           
  1826                           ;./config.h: 119:   TRISC = _TRISC;
  1827     0750  1283               	bcf	3,5	;RP0=0, select bank0
  1828     0751  1303               	bcf	3,6	;RP1=0, select bank0
  1829     0752  0825               	movf	pins_init@_TRISC,w
  1830     0753  1683               	bsf	3,5	;RP0=1, select bank1
  1831     0754  1303               	bcf	3,6	;RP1=0, select bank1
  1832     0755  0087               	movwf	7	;volatile
  1833                           
  1834                           ;./config.h: 120:   TRISD = _TRISD;
  1835     0756  1283               	bcf	3,5	;RP0=0, select bank0
  1836     0757  1303               	bcf	3,6	;RP1=0, select bank0
  1837     0758  0826               	movf	pins_init@_TRISD,w
  1838     0759  1683               	bsf	3,5	;RP0=1, select bank1
  1839     075A  1303               	bcf	3,6	;RP1=0, select bank1
  1840     075B  0088               	movwf	8	;volatile
  1841     075C                     l1685:
  1842                           
  1843                           ;./config.h: 122:   OPTION_REGbits.nRBPU = 0;
  1844     075C  1381               	bcf	1,7	;volatile
  1845     075D                     l59:
  1846     075D  0008               	return
  1847     075E                     __end_of_pins_init:
  1848                           
  1849                           	psect	text10
  1850     06E6                     __ptext10:	
  1851 ;; *************** function _lcd_run *****************
  1852 ;; Defined at:
  1853 ;;		line 67 in file "./lcdFunctions.h"
  1854 ;; Parameters:    Size  Location     Type
  1855 ;;		None
  1856 ;; Auto vars:     Size  Location     Type
  1857 ;;		None
  1858 ;; Return value:  Size  Location     Type
  1859 ;;                  1    wreg      void 
  1860 ;; Registers used:
  1861 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1862 ;; Tracked objects:
  1863 ;;		On entry : 0/0
  1864 ;;		On exit  : 0/0
  1865 ;;		Unchanged: 0/0
  1866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1867 ;;      Params:         0       0       0       0       0
  1868 ;;      Locals:         0       0       0       0       0
  1869 ;;      Temps:          0       0       0       0       0
  1870 ;;      Totals:         0       0       0       0       0
  1871 ;;Total ram usage:        0 bytes
  1872 ;; Hardware stack levels used: 1
  1873 ;; Hardware stack levels required when called: 10
  1874 ;; This function calls:
  1875 ;;		_print_Index
  1876 ;; This function is called by:
  1877 ;;		_main
  1878 ;; This function uses a non-reentrant model
  1879 ;;
  1880                           
  1881     06E6                     _lcd_run:	
  1882                           ;psect for function _lcd_run
  1883                           
  1884     06E6                     l1699:	
  1885                           ;incstack = 0
  1886 ;; hardware stack exceeded
  1887                           ; Regs used in _lcd_run: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1888                           
  1889                           
  1890                           ;./lcdFunctions.h: 70:   if (lcd_index == lcd_lastIndex)
  1891     06E6  1683               	bsf	3,5	;RP0=1, select bank1
  1892     06E7  1303               	bcf	3,6	;RP1=0, select bank1
  1893     06E8  0854               	movf	_lcd_index^(0+128),w
  1894     06E9  067D               	xorwf	_lcd_lastIndex,w
  1895     06EA  1D03               	skipz
  1896     06EB  2EED               	goto	u1431
  1897     06EC  2EEE               	goto	u1430
  1898     06ED                     u1431:
  1899     06ED  2EEF               	goto	l1703
  1900     06EE                     u1430:
  1901     06EE  2F06               	goto	l117
  1902     06EF                     l1703:
  1903                           
  1904                           ;./lcdFunctions.h: 73:   lcd_lastIndex = lcd_index;
  1905     06EF  0854               	movf	_lcd_index^(0+128),w
  1906     06F0  00FD               	movwf	_lcd_lastIndex
  1907                           
  1908                           ;./lcdFunctions.h: 75:   switch(lcd_index)
  1909     06F1  2EF8               	goto	l1717
  1910     06F2                     l1705:
  1911                           
  1912                           ;./lcdFunctions.h: 79:     print_Index();
  1913     06F2  120A  118A  25CA  120A  118A  	fcall	_print_Index
  1914                           
  1915                           ;./lcdFunctions.h: 80:     break;
  1916     06F7  2F06               	goto	l117
  1917     06F8                     l1717:
  1918     06F8  0854               	movf	_lcd_index^(0+128),w
  1919                           
  1920                           ; Switch size 1, requested type "simple"
  1921                           ; Number of cases is 4, Range of values is 1 to 4
  1922                           ; switch strategies available:
  1923                           ; Name         Instructions Cycles
  1924                           ; simple_byte           13     7 (average)
  1925                           ; direct_byte           23    11 (fixed)
  1926                           ; jumptable            263     9 (fixed)
  1927                           ;	Chosen strategy is simple_byte
  1928     06F9  3A01               	xorlw	1	; case 1
  1929     06FA  1903               	skipnz
  1930     06FB  2EF2               	goto	l1705
  1931     06FC  3A03               	xorlw	3	; case 2
  1932     06FD  1903               	skipnz
  1933     06FE  2EF2               	goto	l1705
  1934     06FF  3A01               	xorlw	1	; case 3
  1935     0700  1903               	skipnz
  1936     0701  2EF2               	goto	l1705
  1937     0702  3A07               	xorlw	7	; case 4
  1938     0703  1903               	skipnz
  1939     0704  2EF2               	goto	l1705
  1940     0705  2EF2               	goto	l1705
  1941     0706                     l117:
  1942     0706  0008               	return
  1943     0707                     __end_of_lcd_run:
  1944                           
  1945                           	psect	text11
  1946     05CA                     __ptext11:	
  1947 ;; *************** function _print_Index *****************
  1948 ;; Defined at:
  1949 ;;		line 56 in file "./lcdFunctions.h"
  1950 ;; Parameters:    Size  Location     Type
  1951 ;;		None
  1952 ;; Auto vars:     Size  Location     Type
  1953 ;;  buffer         20    0[BANK1 ] unsigned char [20]
  1954 ;; Return value:  Size  Location     Type
  1955 ;;                  1    wreg      void 
  1956 ;; Registers used:
  1957 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1958 ;; Tracked objects:
  1959 ;;		On entry : 0/0
  1960 ;;		On exit  : 0/0
  1961 ;;		Unchanged: 0/0
  1962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1963 ;;      Params:         0       0       0       0       0
  1964 ;;      Locals:         0       0      20       0       0
  1965 ;;      Temps:          0       2       0       0       0
  1966 ;;      Totals:         0       2      20       0       0
  1967 ;;Total ram usage:       22 bytes
  1968 ;; Hardware stack levels used: 1
  1969 ;; Hardware stack levels required when called: 9
  1970 ;; This function calls:
  1971 ;;		_Lcd_Clear
  1972 ;;		_Lcd_Set_Cursor
  1973 ;;		_Lcd_Write_String
  1974 ;;		_sprintf
  1975 ;; This function is called by:
  1976 ;;		_lcd_run
  1977 ;;		_main
  1978 ;; This function uses a non-reentrant model
  1979 ;;
  1980                           
  1981     05CA                     _print_Index:	
  1982                           ;psect for function _print_Index
  1983                           
  1984     05CA                     l1619:	
  1985                           ;incstack = 0
  1986 ;; hardware stack exceeded
  1987                           ; Regs used in _print_Index: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1988                           
  1989                           
  1990                           ;./lcdFunctions.h: 58:   char buffer[20];;./lcdFunctions.h: 59:   Lcd_Clear();
  1991     05CA  120A  118A  27C8  120A  118A  	fcall	_Lcd_Clear
  1992                           
  1993                           ;./lcdFunctions.h: 61:   Lcd_Set_Cursor(1,1);
  1994     05CF  1283               	bcf	3,5	;RP0=0, select bank0
  1995     05D0  1303               	bcf	3,6	;RP1=0, select bank0
  1996     05D1  01A8               	clrf	Lcd_Set_Cursor@b
  1997     05D2  0AA8               	incf	Lcd_Set_Cursor@b,f
  1998     05D3  3001               	movlw	1
  1999     05D4  120A  118A  240D  120A  118A  	fcall	_Lcd_Set_Cursor
  2000     05D9                     l1621:
  2001                           
  2002                           ;./lcdFunctions.h: 62:   sprintf(buffer, "%d", lcd_index);
  2003     05D9  30C0               	movlw	(low (print_Index@buffer| 0))& (0+255)
  2004     05DA  1283               	bcf	3,5	;RP0=0, select bank0
  2005     05DB  1303               	bcf	3,6	;RP1=0, select bank0
  2006     05DC  00C6               	movwf	sprintf@s
  2007     05DD  3023               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  2008     05DE  00C7               	movwf	sprintf@fmt
  2009     05DF  1683               	bsf	3,5	;RP0=1, select bank1
  2010     05E0  1303               	bcf	3,6	;RP1=0, select bank1
  2011     05E1  0854               	movf	_lcd_index^(0+128),w
  2012     05E2  1283               	bcf	3,5	;RP0=0, select bank0
  2013     05E3  1303               	bcf	3,6	;RP1=0, select bank0
  2014     05E4  00D7               	movwf	??_print_Index
  2015     05E5  01D8               	clrf	??_print_Index+1
  2016     05E6  0857               	movf	??_print_Index,w
  2017     05E7  00C8               	movwf	?_sprintf+2
  2018     05E8  0858               	movf	??_print_Index+1,w
  2019     05E9  00C9               	movwf	?_sprintf+3
  2020     05EA  120A  118A  2680  120A  118A  	fcall	_sprintf
  2021     05EF                     l1623:
  2022                           
  2023                           ;./lcdFunctions.h: 64:   Lcd_Write_String(buffer);
  2024     05EF  30C0               	movlw	(low (print_Index@buffer| 0))& (0+255)
  2025     05F0  1283               	bcf	3,5	;RP0=0, select bank0
  2026     05F1  1303               	bcf	3,6	;RP1=0, select bank0
  2027     05F2  00A9               	movwf	Lcd_Write_String@a
  2028     05F3  3000               	movlw	0
  2029     05F4  00AA               	movwf	Lcd_Write_String@a+1
  2030     05F5  120A  118A  245B  120A  118A  	fcall	_Lcd_Write_String
  2031     05FA                     l113:
  2032     05FA  0008               	return
  2033     05FB                     __end_of_print_Index:
  2034                           
  2035                           	psect	text12
  2036     0680                     __ptext12:	
  2037 ;; *************** function _sprintf *****************
  2038 ;; Defined at:
  2039 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_sprintf.c"
  2040 ;; Parameters:    Size  Location     Type
  2041 ;;  s               1   38[BANK0 ] PTR unsigned char 
  2042 ;;		 -> print_Index@buffer(20), print_TankState@buffer(20), 
  2043 ;;  fmt             1   39[BANK0 ] PTR const unsigned char 
  2044 ;;		 -> STR_7(3), STR_6(3), 
  2045 ;; Auto vars:     Size  Location     Type
  2046 ;;  f              11   44[BANK0 ] struct _IO_FILE
  2047 ;;  ret             2    0        int 
  2048 ;;  ap              1   43[BANK0 ] PTR void [1]
  2049 ;;		 -> ?_sprintf(2), 
  2050 ;; Return value:  Size  Location     Type
  2051 ;;                  2   38[BANK0 ] int 
  2052 ;; Registers used:
  2053 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2054 ;; Tracked objects:
  2055 ;;		On entry : 0/0
  2056 ;;		On exit  : 0/0
  2057 ;;		Unchanged: 0/0
  2058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2059 ;;      Params:         0       4       0       0       0
  2060 ;;      Locals:         0      12       0       0       0
  2061 ;;      Temps:          0       1       0       0       0
  2062 ;;      Totals:         0      17       0       0       0
  2063 ;;Total ram usage:       17 bytes
  2064 ;; Hardware stack levels used: 1
  2065 ;; Hardware stack levels required when called: 8
  2066 ;; This function calls:
  2067 ;;		_vfprintf
  2068 ;; This function is called by:
  2069 ;;		_print_Index
  2070 ;;		_print_TankState
  2071 ;; This function uses a non-reentrant model
  2072 ;;
  2073                           
  2074     0680                     _sprintf:	
  2075                           ;psect for function _sprintf
  2076                           
  2077     0680                     l1587:	
  2078                           ;incstack = 0
  2079 ;; hardware stack exceeded
  2080                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2081                           
  2082     0680  3048               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  2083     0681  1283               	bcf	3,5	;RP0=0, select bank0
  2084     0682  1303               	bcf	3,6	;RP1=0, select bank0
  2085     0683  00CB               	movwf	sprintf@ap
  2086     0684                     l1589:
  2087     0684  0846               	movf	sprintf@s,w
  2088     0685  00CC               	movwf	sprintf@f
  2089     0686  3000               	movlw	0
  2090     0687  00CD               	movwf	sprintf@f+1
  2091     0688                     l1591:
  2092     0688  01CE               	clrf	sprintf@f+2
  2093     0689  01CF               	clrf	sprintf@f+3
  2094     068A                     l1593:
  2095     068A  01D5               	clrf	sprintf@f+9
  2096     068B  01D6               	clrf	sprintf@f+10
  2097     068C                     l1595:
  2098     068C  304C               	movlw	low sprintf@f
  2099     068D  00C1               	movwf	vfprintf@fp
  2100     068E  3000               	movlw	high sprintf@f
  2101     068F  00C2               	movwf	vfprintf@fp+1
  2102     0690  0847               	movf	sprintf@fmt,w
  2103     0691  00C3               	movwf	vfprintf@fmt
  2104     0692  304B               	movlw	(low (sprintf@ap| 0))& (0+255)
  2105     0693  00C4               	movwf	vfprintf@ap
  2106     0694  120A  118A  265B  120A  118A  	fcall	_vfprintf
  2107     0699                     l1597:
  2108     0699  1283               	bcf	3,5	;RP0=0, select bank0
  2109     069A  1303               	bcf	3,6	;RP1=0, select bank0
  2110     069B  084E               	movf	sprintf@f+2,w
  2111     069C  0746               	addwf	sprintf@s,w
  2112     069D  00CA               	movwf	??_sprintf
  2113     069E  084A               	movf	??_sprintf,w
  2114     069F  0084               	movwf	4
  2115     06A0  1383               	bcf	3,7	;select IRP bank0
  2116     06A1  0180               	clrf	0
  2117     06A2                     l770:
  2118     06A2  0008               	return
  2119     06A3                     __end_of_sprintf:
  2120                           
  2121                           	psect	text13
  2122     065B                     __ptext13:	
  2123 ;; *************** function _vfprintf *****************
  2124 ;; Defined at:
  2125 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  2126 ;; Parameters:    Size  Location     Type
  2127 ;;  fp              2   33[BANK0 ] PTR struct _IO_FILE
  2128 ;;		 -> sprintf@f(11), 
  2129 ;;  fmt             1   35[BANK0 ] PTR const unsigned char 
  2130 ;;		 -> STR_7(3), STR_6(3), 
  2131 ;;  ap              1   36[BANK0 ] PTR PTR void 
  2132 ;;		 -> sprintf@ap(1), 
  2133 ;; Auto vars:     Size  Location     Type
  2134 ;;  cfmt            1   37[BANK0 ] PTR unsigned char 
  2135 ;;		 -> STR_7(3), STR_6(3), 
  2136 ;; Return value:  Size  Location     Type
  2137 ;;                  2   33[BANK0 ] int 
  2138 ;; Registers used:
  2139 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2140 ;; Tracked objects:
  2141 ;;		On entry : 0/0
  2142 ;;		On exit  : 0/0
  2143 ;;		Unchanged: 0/0
  2144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2145 ;;      Params:         0       4       0       0       0
  2146 ;;      Locals:         0       1       0       0       0
  2147 ;;      Temps:          0       0       0       0       0
  2148 ;;      Totals:         0       5       0       0       0
  2149 ;;Total ram usage:        5 bytes
  2150 ;; Hardware stack levels used: 1
  2151 ;; Hardware stack levels required when called: 7
  2152 ;; This function calls:
  2153 ;;		_vfpfcnvrt
  2154 ;; This function is called by:
  2155 ;;		_sprintf
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158                           
  2159     065B                     _vfprintf:	
  2160                           ;psect for function _vfprintf
  2161                           
  2162     065B                     l1543:	
  2163                           ;incstack = 0
  2164 ;; hardware stack exceeded
  2165                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2166                           
  2167                           
  2168                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  2169     065B  1283               	bcf	3,5	;RP0=0, select bank0
  2170     065C  1303               	bcf	3,6	;RP1=0, select bank0
  2171     065D  0843               	movf	vfprintf@fmt,w
  2172     065E  00C5               	movwf	vfprintf@cfmt
  2173                           
  2174                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2175     065F  2E6F               	goto	l1547
  2176     0660                     l1545:
  2177                           
  2178                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2179     0660  0841               	movf	vfprintf@fp,w
  2180     0661  00B1               	movwf	vfpfcnvrt@fp
  2181     0662  0842               	movf	vfprintf@fp+1,w
  2182     0663  00B2               	movwf	vfpfcnvrt@fp+1
  2183     0664  3045               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  2184     0665  00B3               	movwf	vfpfcnvrt@fmt
  2185     0666  0844               	movf	vfprintf@ap,w
  2186     0667  00B4               	movwf	vfpfcnvrt@ap
  2187     0668  3000               	movlw	0
  2188     0669  00B5               	movwf	vfpfcnvrt@ap+1
  2189     066A  120A  118A  2062  120A  118A  	fcall	_vfpfcnvrt
  2190     066F                     l1547:
  2191                           
  2192                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2193     066F  1283               	bcf	3,5	;RP0=0, select bank0
  2194     0670  1303               	bcf	3,6	;RP1=0, select bank0
  2195     0671  0845               	movf	vfprintf@cfmt,w
  2196     0672  0084               	movwf	4
  2197     0673  120A  118A  2568  120A  118A  	fcall	stringdir
  2198     0678  3A00               	xorlw	0
  2199     0679  1D03               	skipz
  2200     067A  2E7C               	goto	u1201
  2201     067B  2E7D               	goto	u1200
  2202     067C                     u1201:
  2203     067C  2E60               	goto	l1545
  2204     067D                     u1200:
  2205     067D                     l1549:
  2206                           
  2207                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  2208     067D  01C1               	clrf	?_vfprintf
  2209     067E  01C2               	clrf	?_vfprintf+1
  2210     067F                     l821:
  2211     067F  0008               	return
  2212     0680                     __end_of_vfprintf:
  2213                           
  2214                           	psect	text14
  2215     0062                     __ptext14:	
  2216 ;; *************** function _vfpfcnvrt *****************
  2217 ;; Defined at:
  2218 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  2219 ;; Parameters:    Size  Location     Type
  2220 ;;  fp              2   17[BANK0 ] PTR struct _IO_FILE
  2221 ;;		 -> sprintf@f(11), 
  2222 ;;  fmt             1   19[BANK0 ] PTR PTR unsigned char 
  2223 ;;		 -> vfprintf@cfmt(1), 
  2224 ;;  ap              2   20[BANK0 ] PTR PTR void 
  2225 ;;		 -> sprintf@ap(1), 
  2226 ;; Auto vars:     Size  Location     Type
  2227 ;;  cp              2   24[BANK0 ] PTR unsigned char 
  2228 ;;		 -> ?_sprintf(2), STR_4(5), STR_3(6), STR_2(5), 
  2229 ;;		 -> STR_1(6), 
  2230 ;;  convarg         4   28[BANK0 ] struct .
  2231 ;;  c               1   32[BANK0 ] unsigned char 
  2232 ;;  cp              1   27[BANK0 ] PTR unsigned char 
  2233 ;;		 -> STR_7(3), STR_6(3), 
  2234 ;;  done            1   26[BANK0 ] _Bool 
  2235 ;; Return value:  Size  Location     Type
  2236 ;;                  1    wreg      void 
  2237 ;; Registers used:
  2238 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2239 ;; Tracked objects:
  2240 ;;		On entry : 0/0
  2241 ;;		On exit  : 0/0
  2242 ;;		Unchanged: 0/0
  2243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2244 ;;      Params:         0       5       0       0       0
  2245 ;;      Locals:         0       9       0       0       0
  2246 ;;      Temps:          0       2       0       0       0
  2247 ;;      Totals:         0      16       0       0       0
  2248 ;;Total ram usage:       16 bytes
  2249 ;; Hardware stack levels used: 1
  2250 ;; Hardware stack levels required when called: 6
  2251 ;; This function calls:
  2252 ;;		___awdiv
  2253 ;;		___awmod
  2254 ;;		_abs
  2255 ;;		_fputc
  2256 ;; This function is called by:
  2257 ;;		_vfprintf
  2258 ;; This function uses a non-reentrant model
  2259 ;;
  2260                           
  2261     0062                     _vfpfcnvrt:	
  2262                           ;psect for function _vfpfcnvrt
  2263                           
  2264     0062                     l1429:	
  2265                           ;incstack = 0
  2266 ;; hardware stack exceeded
  2267                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2268                           
  2269                           
  2270                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  2271     0062  1283               	bcf	3,5	;RP0=0, select bank0
  2272     0063  1303               	bcf	3,6	;RP1=0, select bank0
  2273     0064  0833               	movf	vfpfcnvrt@fmt,w
  2274     0065  0084               	movwf	4
  2275     0066  1383               	bcf	3,7	;select IRP bank0
  2276     0067  0800               	movf	0,w
  2277     0068  0084               	movwf	4
  2278     0069  120A  118A  2568  120A  118A  	fcall	stringdir
  2279     006E  3A25               	xorlw	37
  2280     006F  1D03               	skipz
  2281     0070  2872               	goto	u1031
  2282     0071  2873               	goto	u1030
  2283     0072                     u1031:
  2284     0072  29C3               	goto	l1503
  2285     0073                     u1030:
  2286     0073                     l1431:
  2287                           
  2288                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  2289     0073  0833               	movf	vfpfcnvrt@fmt,w
  2290     0074  0084               	movwf	4
  2291     0075  3001               	movlw	1
  2292     0076  0780               	addwf	0,f
  2293     0077                     l1433:
  2294                           
  2295                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  2296     0077  01E4               	clrf	_width
  2297     0078  01E5               	clrf	_width+1
  2298     0079  3000               	movlw	0
  2299     007A  00EA               	movwf	_flags
  2300     007B                     l1435:
  2301                           
  2302                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  2303     007B  30FF               	movlw	255
  2304     007C  00E6               	movwf	_prec
  2305     007D  30FF               	movlw	255
  2306     007E  00E7               	movwf	_prec+1
  2307     007F                     l1437:
  2308                           
  2309                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  2310     007F  0833               	movf	vfpfcnvrt@fmt,w
  2311     0080  0084               	movwf	4
  2312     0081  0800               	movf	0,w
  2313     0082  00BB               	movwf	vfpfcnvrt@cp
  2314     0083                     l1439:
  2315                           
  2316                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2317     0083  083B               	movf	vfpfcnvrt@cp,w
  2318     0084  0084               	movwf	4
  2319     0085  120A  118A  2568  120A  118A  	fcall	stringdir
  2320     008A  3A64               	xorlw	100
  2321     008B  1903               	skipnz
  2322     008C  288E               	goto	u1041
  2323     008D  288F               	goto	u1040
  2324     008E                     u1041:
  2325     008E  289B               	goto	l1443
  2326     008F                     u1040:
  2327     008F                     l1441:
  2328     008F  083B               	movf	vfpfcnvrt@cp,w
  2329     0090  0084               	movwf	4
  2330     0091  120A  118A  2568  120A  118A  	fcall	stringdir
  2331     0096  3A69               	xorlw	105
  2332     0097  1D03               	skipz
  2333     0098  289A               	goto	u1051
  2334     0099  289B               	goto	u1050
  2335     009A                     u1051:
  2336     009A  292D               	goto	l1471
  2337     009B                     u1050:
  2338     009B                     l1443:
  2339                           
  2340                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2341     009B  0834               	movf	vfpfcnvrt@ap,w
  2342     009C  0084               	movwf	4
  2343     009D  1783               	bsf	3,7
  2344     009E  1C35               	btfss	vfpfcnvrt@ap+1,0
  2345     009F  1383               	bcf	3,7
  2346     00A0  0800               	movf	0,w
  2347     00A1  00FF               	movwf	btemp+1
  2348     00A2  3002               	movlw	2
  2349     00A3  0780               	addwf	0,f
  2350     00A4  087F               	movf	btemp+1,w
  2351     00A5  0084               	movwf	4
  2352     00A6  1383               	bcf	3,7	;select IRP bank0
  2353     00A7  0800               	movf	0,w
  2354     00A8  00BC               	movwf	vfpfcnvrt@convarg
  2355     00A9  0A84               	incf	4,f
  2356     00AA  0800               	movf	0,w
  2357     00AB  00BD               	movwf	vfpfcnvrt@convarg+1
  2358     00AC                     l1445:
  2359                           
  2360                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  2361     00AC  0833               	movf	vfpfcnvrt@fmt,w
  2362     00AD  0084               	movwf	4
  2363     00AE  083B               	movf	vfpfcnvrt@cp,w
  2364     00AF  3E01               	addlw	1
  2365     00B0  0080               	movwf	0
  2366     00B1                     l1447:
  2367                           
  2368                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  2369     00B1  3020               	movlw	32
  2370     00B2  00C0               	movwf	vfpfcnvrt@c
  2371     00B3                     l1449:
  2372                           
  2373                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  2374     00B3  1BBD               	btfsc	vfpfcnvrt@convarg+1,7
  2375     00B4  28B6               	goto	u1061
  2376     00B5  28B8               	goto	u1060
  2377     00B6                     u1061:
  2378     00B6  3001               	movlw	1
  2379     00B7  28B9               	goto	u1070
  2380     00B8                     u1060:
  2381     00B8  3000               	movlw	0
  2382     00B9                     u1070:
  2383     00B9  00BA               	movwf	vfpfcnvrt@done
  2384     00BA                     l1451:
  2385                           
  2386                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  2387     00BA  3001               	movlw	1
  2388     00BB  02C0               	subwf	vfpfcnvrt@c,f
  2389     00BC  0840               	movf	vfpfcnvrt@c,w
  2390     00BD  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  2391     00BE  0084               	movwf	4
  2392     00BF  300A               	movlw	10
  2393     00C0  00A4               	movwf	___awmod@divisor
  2394     00C1  3000               	movlw	0
  2395     00C2  00A5               	movwf	___awmod@divisor+1
  2396     00C3  083D               	movf	vfpfcnvrt@convarg+1,w
  2397     00C4  00A7               	movwf	___awmod@dividend+1
  2398     00C5  083C               	movf	vfpfcnvrt@convarg,w
  2399     00C6  00A6               	movwf	___awmod@dividend
  2400     00C7  120A  118A  23B4  120A  118A  	fcall	___awmod
  2401     00CC  1283               	bcf	3,5	;RP0=0, select bank0
  2402     00CD  1303               	bcf	3,6	;RP1=0, select bank0
  2403     00CE  0825               	movf	?___awmod+1,w
  2404     00CF  00AB               	movwf	abs@a+1
  2405     00D0  0824               	movf	?___awmod,w
  2406     00D1  00AA               	movwf	abs@a
  2407     00D2  120A  118A  2771  120A  118A  	fcall	_abs
  2408     00D7  1283               	bcf	3,5	;RP0=0, select bank0
  2409     00D8  1303               	bcf	3,6	;RP1=0, select bank0
  2410     00D9  082A               	movf	?_abs,w
  2411     00DA  3E30               	addlw	48
  2412     00DB  1383               	bcf	3,7	;select IRP bank1
  2413     00DC  0080               	movwf	0
  2414     00DD                     l1453:
  2415                           
  2416                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  2417     00DD  300A               	movlw	10
  2418     00DE  00A4               	movwf	___awdiv@divisor
  2419     00DF  3000               	movlw	0
  2420     00E0  00A5               	movwf	___awdiv@divisor+1
  2421     00E1  083D               	movf	vfpfcnvrt@convarg+1,w
  2422     00E2  00A7               	movwf	___awdiv@dividend+1
  2423     00E3  083C               	movf	vfpfcnvrt@convarg,w
  2424     00E4  00A6               	movwf	___awdiv@dividend
  2425     00E5  120A  118A  22EC  120A  118A  	fcall	___awdiv
  2426     00EA  1283               	bcf	3,5	;RP0=0, select bank0
  2427     00EB  1303               	bcf	3,6	;RP1=0, select bank0
  2428     00EC  0825               	movf	?___awdiv+1,w
  2429     00ED  00BD               	movwf	vfpfcnvrt@convarg+1
  2430     00EE  0824               	movf	?___awdiv,w
  2431     00EF  00BC               	movwf	vfpfcnvrt@convarg
  2432     00F0                     l1455:
  2433                           
  2434                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  2435     00F0  083C               	movf	vfpfcnvrt@convarg,w
  2436     00F1  043D               	iorwf	vfpfcnvrt@convarg+1,w
  2437     00F2  1903               	btfsc	3,2
  2438     00F3  28F5               	goto	u1081
  2439     00F4  28F6               	goto	u1080
  2440     00F5                     u1081:
  2441     00F5  28FB               	goto	l1459
  2442     00F6                     u1080:
  2443     00F6                     l1457:
  2444     00F6  0840               	movf	vfpfcnvrt@c,w
  2445     00F7  1D03               	btfss	3,2
  2446     00F8  28FA               	goto	u1091
  2447     00F9  28FB               	goto	u1090
  2448     00FA                     u1091:
  2449     00FA  28BA               	goto	l1451
  2450     00FB                     u1090:
  2451     00FB                     l1459:
  2452                           
  2453                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  2454     00FB  0840               	movf	vfpfcnvrt@c,w
  2455     00FC  1903               	btfsc	3,2
  2456     00FD  28FF               	goto	u1101
  2457     00FE  2900               	goto	u1100
  2458     00FF                     u1101:
  2459     00FF  2926               	goto	l1469
  2460     0100                     u1100:
  2461     0100                     l1461:
  2462     0100  083A               	movf	vfpfcnvrt@done,w
  2463     0101  1903               	btfsc	3,2
  2464     0102  2904               	goto	u1111
  2465     0103  2905               	goto	u1110
  2466     0104                     u1111:
  2467     0104  2926               	goto	l1469
  2468     0105                     u1110:
  2469     0105                     l1463:
  2470                           
  2471                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  2472     0105  3001               	movlw	1
  2473     0106  02C0               	subwf	vfpfcnvrt@c,f
  2474     0107  0840               	movf	vfpfcnvrt@c,w
  2475     0108  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  2476     0109  0084               	movwf	4
  2477     010A  302D               	movlw	45
  2478     010B  1383               	bcf	3,7	;select IRP bank1
  2479     010C  0080               	movwf	0
  2480     010D  2926               	goto	l1469
  2481     010E                     l1465:
  2482                           
  2483                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  2484     010E  0840               	movf	vfpfcnvrt@c,w
  2485     010F  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  2486     0110  0084               	movwf	4
  2487     0111  1383               	bcf	3,7	;select IRP bank1
  2488     0112  0800               	movf	0,w
  2489     0113  00B6               	movwf	??_vfpfcnvrt
  2490     0114  01B7               	clrf	??_vfpfcnvrt+1
  2491     0115  0836               	movf	??_vfpfcnvrt,w
  2492     0116  00A4               	movwf	fputc@c
  2493     0117  0837               	movf	??_vfpfcnvrt+1,w
  2494     0118  00A5               	movwf	fputc@c+1
  2495     0119  0831               	movf	vfpfcnvrt@fp,w
  2496     011A  00A6               	movwf	fputc@fp
  2497     011B  0832               	movf	vfpfcnvrt@fp+1,w
  2498     011C  00A7               	movwf	fputc@fp+1
  2499     011D  120A  118A  21DD  120A  118A  	fcall	_fputc
  2500     0122                     l1467:
  2501     0122  3001               	movlw	1
  2502     0123  1283               	bcf	3,5	;RP0=0, select bank0
  2503     0124  1303               	bcf	3,6	;RP1=0, select bank0
  2504     0125  07C0               	addwf	vfpfcnvrt@c,f
  2505     0126                     l1469:
  2506                           
  2507                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  2508     0126  3020               	movlw	32
  2509     0127  0640               	xorwf	vfpfcnvrt@c,w
  2510     0128  1D03               	btfss	3,2
  2511     0129  292B               	goto	u1121
  2512     012A  292C               	goto	u1120
  2513     012B                     u1121:
  2514     012B  290E               	goto	l1465
  2515     012C                     u1120:
  2516     012C  29DC               	goto	l808
  2517     012D                     l1471:
  2518                           
  2519                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1656:   done = 0;
  2520     012D  01BA               	clrf	vfpfcnvrt@done
  2521     012E                     l1473:
  2522                           
  2523                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1657:   if ((*fmt
      +                          )[0] == 's') {
  2524     012E  0833               	movf	vfpfcnvrt@fmt,w
  2525     012F  0084               	movwf	4
  2526     0130  0800               	movf	0,w
  2527     0131  0084               	movwf	4
  2528     0132  120A  118A  2568  120A  118A  	fcall	stringdir
  2529     0137  3A73               	xorlw	115
  2530     0138  1D03               	skipz
  2531     0139  293B               	goto	u1131
  2532     013A  293C               	goto	u1130
  2533     013B                     u1131:
  2534     013B  2943               	goto	l1479
  2535     013C                     u1130:
  2536     013C                     l1475:
  2537                           
  2538                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1658:    ++*fmt;
  2539     013C  0833               	movf	vfpfcnvrt@fmt,w
  2540     013D  0084               	movwf	4
  2541     013E  3001               	movlw	1
  2542     013F  0780               	addwf	0,f
  2543     0140                     l1477:
  2544                           
  2545                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1659:    done = 1
      +                          ;
  2546     0140  3001               	movlw	1
  2547     0141  00BA               	movwf	vfpfcnvrt@done
  2548                           
  2549                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1660:   }
  2550     0142  2974               	goto	l1489
  2551     0143                     l1479:
  2552     0143  0833               	movf	vfpfcnvrt@fmt,w
  2553     0144  0084               	movwf	4
  2554     0145  0800               	movf	0,w
  2555     0146  0084               	movwf	4
  2556     0147  120A  118A  2568  120A  118A  	fcall	stringdir
  2557     014C  3A6C               	xorlw	108
  2558     014D  1D03               	skipz
  2559     014E  2950               	goto	u1141
  2560     014F  2951               	goto	u1140
  2561     0150                     u1141:
  2562     0150  2974               	goto	l1489
  2563     0151                     u1140:
  2564     0151                     l1481:
  2565     0151  0833               	movf	vfpfcnvrt@fmt,w
  2566     0152  0084               	movwf	4
  2567     0153  0800               	movf	0,w
  2568     0154  3E01               	addlw	1
  2569     0155  0084               	movwf	4
  2570     0156  120A  118A  2568  120A  118A  	fcall	stringdir
  2571     015B  3A6C               	xorlw	108
  2572     015C  1D03               	skipz
  2573     015D  295F               	goto	u1151
  2574     015E  2960               	goto	u1150
  2575     015F                     u1151:
  2576     015F  2974               	goto	l1489
  2577     0160                     u1150:
  2578     0160                     l1483:
  2579     0160  0833               	movf	vfpfcnvrt@fmt,w
  2580     0161  0084               	movwf	4
  2581     0162  0800               	movf	0,w
  2582     0163  3E02               	addlw	2
  2583     0164  0084               	movwf	4
  2584     0165  120A  118A  2568  120A  118A  	fcall	stringdir
  2585     016A  3A73               	xorlw	115
  2586     016B  1D03               	skipz
  2587     016C  296E               	goto	u1161
  2588     016D  296F               	goto	u1160
  2589     016E                     u1161:
  2590     016E  2974               	goto	l1489
  2591     016F                     u1160:
  2592     016F                     l1485:
  2593                           
  2594                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1662:    *fmt += 
      +                          3;
  2595     016F  0833               	movf	vfpfcnvrt@fmt,w
  2596     0170  0084               	movwf	4
  2597     0171  3003               	movlw	3
  2598     0172  0780               	addwf	0,f
  2599     0173  2940               	goto	l1477
  2600     0174                     l1489:
  2601                           
  2602                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1665:   if (done)
      +                           {
  2603     0174  083A               	movf	vfpfcnvrt@done,w
  2604     0175  1903               	btfsc	3,2
  2605     0176  2978               	goto	u1171
  2606     0177  2979               	goto	u1170
  2607     0178                     u1171:
  2608     0178  29BB               	goto	l1499
  2609     0179                     u1170:
  2610     0179                     l1491:
  2611                           
  2612                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1669:    for (cha
      +                          r * cp = (*(char * *)__va_arg(*(char * **)ap, (char *)0)); *cp != '\0'; cp++) {
  2613     0179  0834               	movf	vfpfcnvrt@ap,w
  2614     017A  0084               	movwf	4
  2615     017B  1783               	bsf	3,7
  2616     017C  1C35               	btfss	vfpfcnvrt@ap+1,0
  2617     017D  1383               	bcf	3,7
  2618     017E  0800               	movf	0,w
  2619     017F  00FF               	movwf	btemp+1
  2620     0180  3002               	movlw	2
  2621     0181  0780               	addwf	0,f
  2622     0182  087F               	movf	btemp+1,w
  2623     0183  0084               	movwf	4
  2624     0184  1383               	bcf	3,7	;select IRP bank0
  2625     0185  0800               	movf	0,w
  2626     0186  00B8               	movwf	vfpfcnvrt@cp_994
  2627     0187  0A84               	incf	4,f
  2628     0188  0800               	movf	0,w
  2629     0189  0384               	decf	4,f
  2630     018A  00B9               	movwf	vfpfcnvrt@cp_994+1
  2631     018B  29AC               	goto	l1497
  2632     018C                     l1493:
  2633                           
  2634                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1670:     fputc(*
      +                          cp, fp);
  2635     018C  0839               	movf	vfpfcnvrt@cp_994+1,w
  2636     018D  00FF               	movwf	btemp+1
  2637     018E  0838               	movf	vfpfcnvrt@cp_994,w
  2638     018F  0084               	movwf	4
  2639     0190  120A  118A  255E  120A  118A  	fcall	stringtab
  2640     0195  00B6               	movwf	??_vfpfcnvrt
  2641     0196  01B7               	clrf	??_vfpfcnvrt+1
  2642     0197  0836               	movf	??_vfpfcnvrt,w
  2643     0198  00A4               	movwf	fputc@c
  2644     0199  0837               	movf	??_vfpfcnvrt+1,w
  2645     019A  00A5               	movwf	fputc@c+1
  2646     019B  0831               	movf	vfpfcnvrt@fp,w
  2647     019C  00A6               	movwf	fputc@fp
  2648     019D  0832               	movf	vfpfcnvrt@fp+1,w
  2649     019E  00A7               	movwf	fputc@fp+1
  2650     019F  120A  118A  21DD  120A  118A  	fcall	_fputc
  2651     01A4                     l1495:
  2652                           
  2653                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1674:    }
  2654     01A4  3001               	movlw	1
  2655     01A5  1283               	bcf	3,5	;RP0=0, select bank0
  2656     01A6  1303               	bcf	3,6	;RP1=0, select bank0
  2657     01A7  07B8               	addwf	vfpfcnvrt@cp_994,f
  2658     01A8  1803               	skipnc
  2659     01A9  0AB9               	incf	vfpfcnvrt@cp_994+1,f
  2660     01AA  3000               	movlw	0
  2661     01AB  07B9               	addwf	vfpfcnvrt@cp_994+1,f
  2662     01AC                     l1497:
  2663     01AC  0839               	movf	vfpfcnvrt@cp_994+1,w
  2664     01AD  00FF               	movwf	btemp+1
  2665     01AE  0838               	movf	vfpfcnvrt@cp_994,w
  2666     01AF  0084               	movwf	4
  2667     01B0  120A  118A  255E  120A  118A  	fcall	stringtab
  2668     01B5  3A00               	xorlw	0
  2669     01B6  1D03               	skipz
  2670     01B7  29B9               	goto	u1181
  2671     01B8  29BA               	goto	u1180
  2672     01B9                     u1181:
  2673     01B9  298C               	goto	l1493
  2674     01BA                     u1180:
  2675     01BA  29DC               	goto	l808
  2676     01BB                     l1499:
  2677                           
  2678                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  2679     01BB  1283               	bcf	3,5	;RP0=0, select bank0
  2680     01BC  1303               	bcf	3,6	;RP1=0, select bank0
  2681     01BD  0833               	movf	vfpfcnvrt@fmt,w
  2682     01BE  0084               	movwf	4
  2683     01BF  3001               	movlw	1
  2684     01C0  1383               	bcf	3,7	;select IRP bank0
  2685     01C1  0780               	addwf	0,f
  2686     01C2  29DC               	goto	l808
  2687     01C3                     l1503:
  2688                           
  2689                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  2690     01C3  0833               	movf	vfpfcnvrt@fmt,w
  2691     01C4  0084               	movwf	4
  2692     01C5  0800               	movf	0,w
  2693     01C6  0084               	movwf	4
  2694     01C7  120A  118A  2568  120A  118A  	fcall	stringdir
  2695     01CC  00B6               	movwf	??_vfpfcnvrt
  2696     01CD  01B7               	clrf	??_vfpfcnvrt+1
  2697     01CE  0836               	movf	??_vfpfcnvrt,w
  2698     01CF  00A4               	movwf	fputc@c
  2699     01D0  0837               	movf	??_vfpfcnvrt+1,w
  2700     01D1  00A5               	movwf	fputc@c+1
  2701     01D2  0831               	movf	vfpfcnvrt@fp,w
  2702     01D3  00A6               	movwf	fputc@fp
  2703     01D4  0832               	movf	vfpfcnvrt@fp+1,w
  2704     01D5  00A7               	movwf	fputc@fp+1
  2705     01D6  120A  118A  21DD  120A  118A  	fcall	_fputc
  2706     01DB  29BB               	goto	l1499
  2707     01DC                     l808:
  2708     01DC  0008               	return
  2709     01DD                     __end_of_vfpfcnvrt:
  2710                           
  2711                           	psect	text15
  2712     01DD                     __ptext15:	
  2713 ;; *************** function _fputc *****************
  2714 ;; Defined at:
  2715 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_fputc.c"
  2716 ;; Parameters:    Size  Location     Type
  2717 ;;  c               2    4[BANK0 ] int 
  2718 ;;  fp              2    6[BANK0 ] PTR struct _IO_FILE
  2719 ;;		 -> sprintf@f(11), 
  2720 ;; Auto vars:     Size  Location     Type
  2721 ;;		None
  2722 ;; Return value:  Size  Location     Type
  2723 ;;                  2    4[BANK0 ] int 
  2724 ;; Registers used:
  2725 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2726 ;; Tracked objects:
  2727 ;;		On entry : 0/0
  2728 ;;		On exit  : 0/0
  2729 ;;		Unchanged: 0/0
  2730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2731 ;;      Params:         0       4       0       0       0
  2732 ;;      Locals:         0       0       0       0       0
  2733 ;;      Temps:          0       9       0       0       0
  2734 ;;      Totals:         0      13       0       0       0
  2735 ;;Total ram usage:       13 bytes
  2736 ;; Hardware stack levels used: 1
  2737 ;; Hardware stack levels required when called: 5
  2738 ;; This function calls:
  2739 ;;		_putch
  2740 ;; This function is called by:
  2741 ;;		_vfpfcnvrt
  2742 ;; This function uses a non-reentrant model
  2743 ;;
  2744                           
  2745     01DD                     _fputc:	
  2746                           ;psect for function _fputc
  2747                           
  2748     01DD                     l1397:	
  2749                           ;incstack = 0
  2750 ;; hardware stack exceeded
  2751                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2752                           
  2753     01DD  1283               	bcf	3,5	;RP0=0, select bank0
  2754     01DE  1303               	bcf	3,6	;RP1=0, select bank0
  2755     01DF  0826               	movf	fputc@fp,w
  2756     01E0  0427               	iorwf	fputc@fp+1,w
  2757     01E1  1903               	btfsc	3,2
  2758     01E2  29E4               	goto	u931
  2759     01E3  29E5               	goto	u930
  2760     01E4                     u931:
  2761     01E4  29EB               	goto	l1401
  2762     01E5                     u930:
  2763     01E5                     l1399:
  2764     01E5  0826               	movf	fputc@fp,w
  2765     01E6  0427               	iorwf	fputc@fp+1,w
  2766     01E7  1D03               	btfss	3,2
  2767     01E8  29EA               	goto	u941
  2768     01E9  29EB               	goto	u940
  2769     01EA                     u941:
  2770     01EA  29F2               	goto	l1403
  2771     01EB                     u940:
  2772     01EB                     l1401:
  2773     01EB  0824               	movf	fputc@c,w
  2774     01EC  120A  118A  27FE  120A  118A  	fcall	_putch
  2775     01F1  2A7C               	goto	l840
  2776     01F2                     l1403:
  2777     01F2  0826               	movf	fputc@fp,w
  2778     01F3  3E09               	addlw	9
  2779     01F4  00A8               	movwf	??_fputc
  2780     01F5  0827               	movf	fputc@fp+1,w
  2781     01F6  1803               	skipnc
  2782     01F7  3E01               	addlw	1
  2783     01F8  3E00               	addlw	0
  2784     01F9  00A9               	movwf	??_fputc+1
  2785     01FA  0828               	movf	??_fputc,w
  2786     01FB  0084               	movwf	4
  2787     01FC  1783               	bsf	3,7
  2788     01FD  1C29               	btfss	??_fputc+1,0
  2789     01FE  1383               	bcf	3,7
  2790     01FF  0800               	movf	0,w
  2791     0200  00AA               	movwf	??_fputc+2
  2792     0201  0A84               	incf	4,f
  2793     0202  0800               	movf	0,w
  2794     0203  00AB               	movwf	??_fputc+3
  2795     0204  082A               	movf	??_fputc+2,w
  2796     0205  042B               	iorwf	??_fputc+3,w
  2797     0206  1903               	btfsc	3,2
  2798     0207  2A09               	goto	u951
  2799     0208  2A0A               	goto	u950
  2800     0209                     u951:
  2801     0209  2A3C               	goto	l1407
  2802     020A                     u950:
  2803     020A                     l1405:
  2804     020A  0826               	movf	fputc@fp,w
  2805     020B  3E09               	addlw	9
  2806     020C  00A8               	movwf	??_fputc
  2807     020D  0827               	movf	fputc@fp+1,w
  2808     020E  1803               	skipnc
  2809     020F  3E01               	addlw	1
  2810     0210  3E00               	addlw	0
  2811     0211  00A9               	movwf	??_fputc+1
  2812     0212  0828               	movf	??_fputc,w
  2813     0213  0084               	movwf	4
  2814     0214  1783               	bsf	3,7
  2815     0215  1C29               	btfss	??_fputc+1,0
  2816     0216  1383               	bcf	3,7
  2817     0217  0800               	movf	0,w
  2818     0218  00AA               	movwf	??_fputc+2
  2819     0219  0A84               	incf	4,f
  2820     021A  0800               	movf	0,w
  2821     021B  00AB               	movwf	??_fputc+3
  2822     021C  0826               	movf	fputc@fp,w
  2823     021D  3E02               	addlw	2
  2824     021E  00AC               	movwf	??_fputc+4
  2825     021F  0827               	movf	fputc@fp+1,w
  2826     0220  1803               	skipnc
  2827     0221  3E01               	addlw	1
  2828     0222  3E00               	addlw	0
  2829     0223  00AD               	movwf	??_fputc+5
  2830     0224  082C               	movf	??_fputc+4,w
  2831     0225  0084               	movwf	4
  2832     0226  1783               	bsf	3,7
  2833     0227  1C2D               	btfss	??_fputc+5,0
  2834     0228  1383               	bcf	3,7
  2835     0229  0800               	movf	0,w
  2836     022A  00AE               	movwf	??_fputc+6
  2837     022B  0A84               	incf	4,f
  2838     022C  0800               	movf	0,w
  2839     022D  00AF               	movwf	??_fputc+7
  2840     022E  082F               	movf	??_fputc+7,w
  2841     022F  3A80               	xorlw	128
  2842     0230  00B0               	movwf	??_fputc+8
  2843     0231  082B               	movf	??_fputc+3,w
  2844     0232  3A80               	xorlw	128
  2845     0233  0230               	subwf	??_fputc+8,w
  2846     0234  1D03               	skipz
  2847     0235  2A38               	goto	u965
  2848     0236  082A               	movf	??_fputc+2,w
  2849     0237  022E               	subwf	??_fputc+6,w
  2850     0238                     u965:
  2851     0238  1803               	skipnc
  2852     0239  2A3B               	goto	u961
  2853     023A  2A3C               	goto	u960
  2854     023B                     u961:
  2855     023B  2A7C               	goto	l840
  2856     023C                     u960:
  2857     023C                     l1407:
  2858     023C  1283               	bcf	3,5	;RP0=0, select bank0
  2859     023D  1303               	bcf	3,6	;RP1=0, select bank0
  2860     023E  0826               	movf	fputc@fp,w
  2861     023F  0084               	movwf	4
  2862     0240  1783               	bsf	3,7
  2863     0241  1C27               	btfss	fputc@fp+1,0
  2864     0242  1383               	bcf	3,7
  2865     0243  0800               	movf	0,w
  2866     0244  00A8               	movwf	??_fputc
  2867     0245  0A84               	incf	4,f
  2868     0246  0800               	movf	0,w
  2869     0247  00A9               	movwf	??_fputc+1
  2870     0248  0826               	movf	fputc@fp,w
  2871     0249  3E02               	addlw	2
  2872     024A  00AA               	movwf	??_fputc+2
  2873     024B  0827               	movf	fputc@fp+1,w
  2874     024C  1803               	skipnc
  2875     024D  3E01               	addlw	1
  2876     024E  3E00               	addlw	0
  2877     024F  00AB               	movwf	??_fputc+3
  2878     0250  082A               	movf	??_fputc+2,w
  2879     0251  0084               	movwf	4
  2880     0252  1783               	bsf	3,7
  2881     0253  1C2B               	btfss	??_fputc+3,0
  2882     0254  1383               	bcf	3,7
  2883     0255  0800               	movf	0,w
  2884     0256  0728               	addwf	??_fputc,w
  2885     0257  00AD               	movwf	??_fputc+5
  2886     0258  0829               	movf	??_fputc+1,w
  2887     0259  00AC               	movwf	??_fputc+4
  2888     025A  1803               	skipnc
  2889     025B  0AAC               	incf	??_fputc+4,f
  2890     025C  1F80               	btfss	0,7
  2891     025D  2A5F               	goto	u970
  2892     025E  03AC               	decf	??_fputc+4,f
  2893     025F                     u970:
  2894     025F  1283               	bcf	3,5	;RP0=0, select bank0
  2895     0260  1303               	bcf	3,6	;RP1=0, select bank0
  2896     0261  082C               	movf	??_fputc+4,w
  2897     0262  00AE               	movwf	??_fputc+6
  2898     0263  082D               	movf	??_fputc+5,w
  2899     0264  0084               	movwf	4
  2900     0265  1783               	bsf	3,7
  2901     0266  1C2E               	btfss	??_fputc+6,0
  2902     0267  1383               	bcf	3,7
  2903     0268  0824               	movf	fputc@c,w
  2904     0269  0080               	movwf	0
  2905     026A  0826               	movf	fputc@fp,w
  2906     026B  3E02               	addlw	2
  2907     026C  00A8               	movwf	??_fputc
  2908     026D  0827               	movf	fputc@fp+1,w
  2909     026E  1803               	skipnc
  2910     026F  3E01               	addlw	1
  2911     0270  3E00               	addlw	0
  2912     0271  00A9               	movwf	??_fputc+1
  2913     0272  0828               	movf	??_fputc,w
  2914     0273  0084               	movwf	4
  2915     0274  1783               	bsf	3,7
  2916     0275  1C29               	btfss	??_fputc+1,0
  2917     0276  1383               	bcf	3,7
  2918     0277  3001               	movlw	1
  2919     0278  0780               	addwf	0,f
  2920     0279  0A84               	incf	4,f
  2921     027A  1803               	skipnc
  2922     027B  0A80               	incf	0,f
  2923     027C                     l840:
  2924     027C  0008               	return
  2925     027D                     __end_of_fputc:
  2926                           
  2927                           	psect	text16
  2928     07FE                     __ptext16:	
  2929 ;; *************** function _putch *****************
  2930 ;; Defined at:
  2931 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\putch.c"
  2932 ;; Parameters:    Size  Location     Type
  2933 ;;  c               1    wreg     unsigned char 
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;  c               1    0[COMMON] unsigned char 
  2936 ;; Return value:  Size  Location     Type
  2937 ;;                  1    wreg      void 
  2938 ;; Registers used:
  2939 ;;		wreg
  2940 ;; Tracked objects:
  2941 ;;		On entry : 0/0
  2942 ;;		On exit  : 0/0
  2943 ;;		Unchanged: 0/0
  2944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2945 ;;      Params:         0       0       0       0       0
  2946 ;;      Locals:         0       0       0       0       0
  2947 ;;      Temps:          0       0       0       0       0
  2948 ;;      Totals:         0       0       0       0       0
  2949 ;;Total ram usage:        0 bytes
  2950 ;; Hardware stack levels used: 1
  2951 ;; Hardware stack levels required when called: 4
  2952 ;; This function calls:
  2953 ;;		Nothing
  2954 ;; This function is called by:
  2955 ;;		_fputc
  2956 ;; This function uses a non-reentrant model
  2957 ;;
  2958                           
  2959     07FE                     _putch:	
  2960                           ;psect for function _putch
  2961                           
  2962     07FE                     l851:	
  2963                           ;incstack = 0
  2964 ;; hardware stack exceeded
  2965                           ; Regs used in _putch: [wreg]
  2966                           
  2967     07FE  0008               	return
  2968     07FF                     __end_of_putch:
  2969                           
  2970                           	psect	text17
  2971     0771                     __ptext17:	
  2972 ;; *************** function _abs *****************
  2973 ;; Defined at:
  2974 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\abs.c"
  2975 ;; Parameters:    Size  Location     Type
  2976 ;;  a               2   10[BANK0 ] int 
  2977 ;; Auto vars:     Size  Location     Type
  2978 ;;		None
  2979 ;; Return value:  Size  Location     Type
  2980 ;;                  2   10[BANK0 ] int 
  2981 ;; Registers used:
  2982 ;;		wreg, status,2, status,0
  2983 ;; Tracked objects:
  2984 ;;		On entry : 0/0
  2985 ;;		On exit  : 0/0
  2986 ;;		Unchanged: 0/0
  2987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2988 ;;      Params:         0       2       0       0       0
  2989 ;;      Locals:         0       0       0       0       0
  2990 ;;      Temps:          0       2       0       0       0
  2991 ;;      Totals:         0       4       0       0       0
  2992 ;;Total ram usage:        4 bytes
  2993 ;; Hardware stack levels used: 1
  2994 ;; Hardware stack levels required when called: 4
  2995 ;; This function calls:
  2996 ;;		Nothing
  2997 ;; This function is called by:
  2998 ;;		_vfpfcnvrt
  2999 ;; This function uses a non-reentrant model
  3000 ;;
  3001                           
  3002     0771                     _abs:	
  3003                           ;psect for function _abs
  3004                           
  3005     0771                     l1411:	
  3006                           ;incstack = 0
  3007 ;; hardware stack exceeded
  3008                           ; Regs used in _abs: [wreg+status,2+status,0]
  3009                           
  3010     0771  1283               	bcf	3,5	;RP0=0, select bank0
  3011     0772  1303               	bcf	3,6	;RP1=0, select bank0
  3012     0773  1BAB               	btfsc	abs@a+1,7
  3013     0774  2F76               	goto	u981
  3014     0775  2F77               	goto	u980
  3015     0776                     u981:
  3016     0776  2F78               	goto	l1415
  3017     0777                     u980:
  3018     0777                     l1413:
  3019     0777  2F83               	goto	l828
  3020     0778                     l1415:
  3021     0778  092A               	comf	abs@a,w
  3022     0779  00AC               	movwf	??_abs
  3023     077A  092B               	comf	abs@a+1,w
  3024     077B  00AD               	movwf	??_abs+1
  3025     077C  0AAC               	incf	??_abs,f
  3026     077D  1903               	skipnz
  3027     077E  0AAD               	incf	??_abs+1,f
  3028     077F  082C               	movf	??_abs,w
  3029     0780  00AA               	movwf	?_abs
  3030     0781  082D               	movf	??_abs+1,w
  3031     0782  00AB               	movwf	?_abs+1
  3032     0783                     l828:
  3033     0783  0008               	return
  3034     0784                     __end_of_abs:
  3035                           
  3036                           	psect	text18
  3037     03B4                     __ptext18:	
  3038 ;; *************** function ___awmod *****************
  3039 ;; Defined at:
  3040 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awmod.c"
  3041 ;; Parameters:    Size  Location     Type
  3042 ;;  divisor         2    4[BANK0 ] int 
  3043 ;;  dividend        2    6[BANK0 ] int 
  3044 ;; Auto vars:     Size  Location     Type
  3045 ;;  sign            1    9[BANK0 ] unsigned char 
  3046 ;;  counter         1    8[BANK0 ] unsigned char 
  3047 ;; Return value:  Size  Location     Type
  3048 ;;                  2    4[BANK0 ] int 
  3049 ;; Registers used:
  3050 ;;		wreg, status,2, status,0
  3051 ;; Tracked objects:
  3052 ;;		On entry : 0/0
  3053 ;;		On exit  : 0/0
  3054 ;;		Unchanged: 0/0
  3055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3056 ;;      Params:         0       4       0       0       0
  3057 ;;      Locals:         0       2       0       0       0
  3058 ;;      Temps:          0       0       0       0       0
  3059 ;;      Totals:         0       6       0       0       0
  3060 ;;Total ram usage:        6 bytes
  3061 ;; Hardware stack levels used: 1
  3062 ;; Hardware stack levels required when called: 4
  3063 ;; This function calls:
  3064 ;;		Nothing
  3065 ;; This function is called by:
  3066 ;;		_vfpfcnvrt
  3067 ;; This function uses a non-reentrant model
  3068 ;;
  3069                           
  3070     03B4                     ___awmod:	
  3071                           ;psect for function ___awmod
  3072                           
  3073     03B4                     l1359:	
  3074                           ;incstack = 0
  3075 ;; hardware stack exceeded
  3076                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3077                           
  3078     03B4  1283               	bcf	3,5	;RP0=0, select bank0
  3079     03B5  1303               	bcf	3,6	;RP1=0, select bank0
  3080     03B6  01A9               	clrf	___awmod@sign
  3081     03B7                     l1361:
  3082     03B7  1FA7               	btfss	___awmod@dividend+1,7
  3083     03B8  2BBA               	goto	u841
  3084     03B9  2BBB               	goto	u840
  3085     03BA                     u841:
  3086     03BA  2BC2               	goto	l1367
  3087     03BB                     u840:
  3088     03BB                     l1363:
  3089     03BB  09A6               	comf	___awmod@dividend,f
  3090     03BC  09A7               	comf	___awmod@dividend+1,f
  3091     03BD  0AA6               	incf	___awmod@dividend,f
  3092     03BE  1903               	skipnz
  3093     03BF  0AA7               	incf	___awmod@dividend+1,f
  3094     03C0                     l1365:
  3095     03C0  3001               	movlw	1
  3096     03C1  00A9               	movwf	___awmod@sign
  3097     03C2                     l1367:
  3098     03C2  1FA5               	btfss	___awmod@divisor+1,7
  3099     03C3  2BC5               	goto	u851
  3100     03C4  2BC6               	goto	u850
  3101     03C5                     u851:
  3102     03C5  2BCB               	goto	l1371
  3103     03C6                     u850:
  3104     03C6                     l1369:
  3105     03C6  09A4               	comf	___awmod@divisor,f
  3106     03C7  09A5               	comf	___awmod@divisor+1,f
  3107     03C8  0AA4               	incf	___awmod@divisor,f
  3108     03C9  1903               	skipnz
  3109     03CA  0AA5               	incf	___awmod@divisor+1,f
  3110     03CB                     l1371:
  3111     03CB  0824               	movf	___awmod@divisor,w
  3112     03CC  0425               	iorwf	___awmod@divisor+1,w
  3113     03CD  1903               	btfsc	3,2
  3114     03CE  2BD0               	goto	u861
  3115     03CF  2BD1               	goto	u860
  3116     03D0                     u861:
  3117     03D0  2BFE               	goto	l1389
  3118     03D1                     u860:
  3119     03D1                     l1373:
  3120     03D1  3001               	movlw	1
  3121     03D2  00A8               	movwf	___awmod@counter
  3122     03D3  2BDD               	goto	l1379
  3123     03D4                     l1375:
  3124     03D4  3001               	movlw	1
  3125     03D5                     u875:
  3126     03D5  1003               	clrc
  3127     03D6  0DA4               	rlf	___awmod@divisor,f
  3128     03D7  0DA5               	rlf	___awmod@divisor+1,f
  3129     03D8  3EFF               	addlw	-1
  3130     03D9  1D03               	skipz
  3131     03DA  2BD5               	goto	u875
  3132     03DB                     l1377:
  3133     03DB  3001               	movlw	1
  3134     03DC  07A8               	addwf	___awmod@counter,f
  3135     03DD                     l1379:
  3136     03DD  1FA5               	btfss	___awmod@divisor+1,7
  3137     03DE  2BE0               	goto	u881
  3138     03DF  2BE1               	goto	u880
  3139     03E0                     u881:
  3140     03E0  2BD4               	goto	l1375
  3141     03E1                     u880:
  3142     03E1                     l1381:
  3143     03E1  0825               	movf	___awmod@divisor+1,w
  3144     03E2  0227               	subwf	___awmod@dividend+1,w
  3145     03E3  1D03               	skipz
  3146     03E4  2BE7               	goto	u895
  3147     03E5  0824               	movf	___awmod@divisor,w
  3148     03E6  0226               	subwf	___awmod@dividend,w
  3149     03E7                     u895:
  3150     03E7  1C03               	skipc
  3151     03E8  2BEA               	goto	u891
  3152     03E9  2BEB               	goto	u890
  3153     03EA                     u891:
  3154     03EA  2BF1               	goto	l1385
  3155     03EB                     u890:
  3156     03EB                     l1383:
  3157     03EB  0824               	movf	___awmod@divisor,w
  3158     03EC  02A6               	subwf	___awmod@dividend,f
  3159     03ED  0825               	movf	___awmod@divisor+1,w
  3160     03EE  1C03               	skipc
  3161     03EF  03A7               	decf	___awmod@dividend+1,f
  3162     03F0  02A7               	subwf	___awmod@dividend+1,f
  3163     03F1                     l1385:
  3164     03F1  3001               	movlw	1
  3165     03F2                     u905:
  3166     03F2  1003               	clrc
  3167     03F3  0CA5               	rrf	___awmod@divisor+1,f
  3168     03F4  0CA4               	rrf	___awmod@divisor,f
  3169     03F5  3EFF               	addlw	-1
  3170     03F6  1D03               	skipz
  3171     03F7  2BF2               	goto	u905
  3172     03F8                     l1387:
  3173     03F8  3001               	movlw	1
  3174     03F9  02A8               	subwf	___awmod@counter,f
  3175     03FA  1D03               	btfss	3,2
  3176     03FB  2BFD               	goto	u911
  3177     03FC  2BFE               	goto	u910
  3178     03FD                     u911:
  3179     03FD  2BE1               	goto	l1381
  3180     03FE                     u910:
  3181     03FE                     l1389:
  3182     03FE  0829               	movf	___awmod@sign,w
  3183     03FF  1903               	btfsc	3,2
  3184     0400  2C02               	goto	u921
  3185     0401  2C03               	goto	u920
  3186     0402                     u921:
  3187     0402  2C08               	goto	l1393
  3188     0403                     u920:
  3189     0403                     l1391:
  3190     0403  09A6               	comf	___awmod@dividend,f
  3191     0404  09A7               	comf	___awmod@dividend+1,f
  3192     0405  0AA6               	incf	___awmod@dividend,f
  3193     0406  1903               	skipnz
  3194     0407  0AA7               	incf	___awmod@dividend+1,f
  3195     0408                     l1393:
  3196     0408  0827               	movf	___awmod@dividend+1,w
  3197     0409  00A5               	movwf	?___awmod+1
  3198     040A  0826               	movf	___awmod@dividend,w
  3199     040B  00A4               	movwf	?___awmod
  3200     040C                     l473:
  3201     040C  0008               	return
  3202     040D                     __end_of___awmod:
  3203                           
  3204                           	psect	text19
  3205     02EC                     __ptext19:	
  3206 ;; *************** function ___awdiv *****************
  3207 ;; Defined at:
  3208 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awdiv.c"
  3209 ;; Parameters:    Size  Location     Type
  3210 ;;  divisor         2    4[BANK0 ] int 
  3211 ;;  dividend        2    6[BANK0 ] int 
  3212 ;; Auto vars:     Size  Location     Type
  3213 ;;  quotient        2   10[BANK0 ] int 
  3214 ;;  sign            1    9[BANK0 ] unsigned char 
  3215 ;;  counter         1    8[BANK0 ] unsigned char 
  3216 ;; Return value:  Size  Location     Type
  3217 ;;                  2    4[BANK0 ] int 
  3218 ;; Registers used:
  3219 ;;		wreg, status,2, status,0
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3225 ;;      Params:         0       4       0       0       0
  3226 ;;      Locals:         0       4       0       0       0
  3227 ;;      Temps:          0       0       0       0       0
  3228 ;;      Totals:         0       8       0       0       0
  3229 ;;Total ram usage:        8 bytes
  3230 ;; Hardware stack levels used: 1
  3231 ;; Hardware stack levels required when called: 4
  3232 ;; This function calls:
  3233 ;;		Nothing
  3234 ;; This function is called by:
  3235 ;;		_vfpfcnvrt
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239     02EC                     ___awdiv:	
  3240                           ;psect for function ___awdiv
  3241                           
  3242     02EC                     l1315:	
  3243                           ;incstack = 0
  3244 ;; hardware stack exceeded
  3245                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3246                           
  3247     02EC  1283               	bcf	3,5	;RP0=0, select bank0
  3248     02ED  1303               	bcf	3,6	;RP1=0, select bank0
  3249     02EE  01A9               	clrf	___awdiv@sign
  3250     02EF                     l1317:
  3251     02EF  1FA5               	btfss	___awdiv@divisor+1,7
  3252     02F0  2AF2               	goto	u741
  3253     02F1  2AF3               	goto	u740
  3254     02F2                     u741:
  3255     02F2  2AFA               	goto	l1323
  3256     02F3                     u740:
  3257     02F3                     l1319:
  3258     02F3  09A4               	comf	___awdiv@divisor,f
  3259     02F4  09A5               	comf	___awdiv@divisor+1,f
  3260     02F5  0AA4               	incf	___awdiv@divisor,f
  3261     02F6  1903               	skipnz
  3262     02F7  0AA5               	incf	___awdiv@divisor+1,f
  3263     02F8                     l1321:
  3264     02F8  3001               	movlw	1
  3265     02F9  00A9               	movwf	___awdiv@sign
  3266     02FA                     l1323:
  3267     02FA  1FA7               	btfss	___awdiv@dividend+1,7
  3268     02FB  2AFD               	goto	u751
  3269     02FC  2AFE               	goto	u750
  3270     02FD                     u751:
  3271     02FD  2B05               	goto	l1329
  3272     02FE                     u750:
  3273     02FE                     l1325:
  3274     02FE  09A6               	comf	___awdiv@dividend,f
  3275     02FF  09A7               	comf	___awdiv@dividend+1,f
  3276     0300  0AA6               	incf	___awdiv@dividend,f
  3277     0301  1903               	skipnz
  3278     0302  0AA7               	incf	___awdiv@dividend+1,f
  3279     0303                     l1327:
  3280     0303  3001               	movlw	1
  3281     0304  06A9               	xorwf	___awdiv@sign,f
  3282     0305                     l1329:
  3283     0305  01AA               	clrf	___awdiv@quotient
  3284     0306  01AB               	clrf	___awdiv@quotient+1
  3285     0307                     l1331:
  3286     0307  0824               	movf	___awdiv@divisor,w
  3287     0308  0425               	iorwf	___awdiv@divisor+1,w
  3288     0309  1903               	btfsc	3,2
  3289     030A  2B0C               	goto	u761
  3290     030B  2B0D               	goto	u760
  3291     030C                     u761:
  3292     030C  2B42               	goto	l1351
  3293     030D                     u760:
  3294     030D                     l1333:
  3295     030D  3001               	movlw	1
  3296     030E  00A8               	movwf	___awdiv@counter
  3297     030F  2B19               	goto	l1339
  3298     0310                     l1335:
  3299     0310  3001               	movlw	1
  3300     0311                     u775:
  3301     0311  1003               	clrc
  3302     0312  0DA4               	rlf	___awdiv@divisor,f
  3303     0313  0DA5               	rlf	___awdiv@divisor+1,f
  3304     0314  3EFF               	addlw	-1
  3305     0315  1D03               	skipz
  3306     0316  2B11               	goto	u775
  3307     0317                     l1337:
  3308     0317  3001               	movlw	1
  3309     0318  07A8               	addwf	___awdiv@counter,f
  3310     0319                     l1339:
  3311     0319  1FA5               	btfss	___awdiv@divisor+1,7
  3312     031A  2B1C               	goto	u781
  3313     031B  2B1D               	goto	u780
  3314     031C                     u781:
  3315     031C  2B10               	goto	l1335
  3316     031D                     u780:
  3317     031D                     l1341:
  3318     031D  3001               	movlw	1
  3319     031E                     u795:
  3320     031E  1003               	clrc
  3321     031F  0DAA               	rlf	___awdiv@quotient,f
  3322     0320  0DAB               	rlf	___awdiv@quotient+1,f
  3323     0321  3EFF               	addlw	-1
  3324     0322  1D03               	skipz
  3325     0323  2B1E               	goto	u795
  3326     0324  0825               	movf	___awdiv@divisor+1,w
  3327     0325  0227               	subwf	___awdiv@dividend+1,w
  3328     0326  1D03               	skipz
  3329     0327  2B2A               	goto	u805
  3330     0328  0824               	movf	___awdiv@divisor,w
  3331     0329  0226               	subwf	___awdiv@dividend,w
  3332     032A                     u805:
  3333     032A  1C03               	skipc
  3334     032B  2B2D               	goto	u801
  3335     032C  2B2E               	goto	u800
  3336     032D                     u801:
  3337     032D  2B35               	goto	l1347
  3338     032E                     u800:
  3339     032E                     l1343:
  3340     032E  0824               	movf	___awdiv@divisor,w
  3341     032F  02A6               	subwf	___awdiv@dividend,f
  3342     0330  0825               	movf	___awdiv@divisor+1,w
  3343     0331  1C03               	skipc
  3344     0332  03A7               	decf	___awdiv@dividend+1,f
  3345     0333  02A7               	subwf	___awdiv@dividend+1,f
  3346     0334                     l1345:
  3347     0334  142A               	bsf	___awdiv@quotient,0
  3348     0335                     l1347:
  3349     0335  3001               	movlw	1
  3350     0336                     u815:
  3351     0336  1003               	clrc
  3352     0337  0CA5               	rrf	___awdiv@divisor+1,f
  3353     0338  0CA4               	rrf	___awdiv@divisor,f
  3354     0339  3EFF               	addlw	-1
  3355     033A  1D03               	skipz
  3356     033B  2B36               	goto	u815
  3357     033C                     l1349:
  3358     033C  3001               	movlw	1
  3359     033D  02A8               	subwf	___awdiv@counter,f
  3360     033E  1D03               	btfss	3,2
  3361     033F  2B41               	goto	u821
  3362     0340  2B42               	goto	u820
  3363     0341                     u821:
  3364     0341  2B1D               	goto	l1341
  3365     0342                     u820:
  3366     0342                     l1351:
  3367     0342  0829               	movf	___awdiv@sign,w
  3368     0343  1903               	btfsc	3,2
  3369     0344  2B46               	goto	u831
  3370     0345  2B47               	goto	u830
  3371     0346                     u831:
  3372     0346  2B4C               	goto	l1355
  3373     0347                     u830:
  3374     0347                     l1353:
  3375     0347  09AA               	comf	___awdiv@quotient,f
  3376     0348  09AB               	comf	___awdiv@quotient+1,f
  3377     0349  0AAA               	incf	___awdiv@quotient,f
  3378     034A  1903               	skipnz
  3379     034B  0AAB               	incf	___awdiv@quotient+1,f
  3380     034C                     l1355:
  3381     034C  082B               	movf	___awdiv@quotient+1,w
  3382     034D  00A5               	movwf	?___awdiv+1
  3383     034E  082A               	movf	___awdiv@quotient,w
  3384     034F  00A4               	movwf	?___awdiv
  3385     0350                     l460:
  3386     0350  0008               	return
  3387     0351                     __end_of___awdiv:
  3388                           
  3389                           	psect	text20
  3390     045B                     __ptext20:	
  3391 ;; *************** function _Lcd_Write_String *****************
  3392 ;; Defined at:
  3393 ;;		line 105 in file "./lcd.h"
  3394 ;; Parameters:    Size  Location     Type
  3395 ;;  a               2    9[BANK0 ] PTR unsigned char 
  3396 ;;		 -> print_Index@buffer(20), print_TankState@buffer(20), STR_5(12), 
  3397 ;; Auto vars:     Size  Location     Type
  3398 ;;  i               2   14[BANK0 ] int 
  3399 ;; Return value:  Size  Location     Type
  3400 ;;                  1    wreg      void 
  3401 ;; Registers used:
  3402 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3403 ;; Tracked objects:
  3404 ;;		On entry : 0/0
  3405 ;;		On exit  : 0/0
  3406 ;;		Unchanged: 0/0
  3407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3408 ;;      Params:         0       2       0       0       0
  3409 ;;      Locals:         0       2       0       0       0
  3410 ;;      Temps:          0       3       0       0       0
  3411 ;;      Totals:         0       7       0       0       0
  3412 ;;Total ram usage:        7 bytes
  3413 ;; Hardware stack levels used: 1
  3414 ;; Hardware stack levels required when called: 6
  3415 ;; This function calls:
  3416 ;;		_Lcd_Write_Char
  3417 ;; This function is called by:
  3418 ;;		_print_Index
  3419 ;;		_print_TankState
  3420 ;; This function uses a non-reentrant model
  3421 ;;
  3422                           
  3423     045B                     _Lcd_Write_String:	
  3424                           ;psect for function _Lcd_Write_String
  3425                           
  3426     045B                     l1579:	
  3427                           ;incstack = 0
  3428 ;; using string table level
  3429                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3430                           
  3431                           
  3432                           ;./lcd.h: 105: void Lcd_Write_String(char *a);./lcd.h: 106: {;./lcd.h: 107:  int i;;./lc
      +                          d.h: 108:  for(i=0;a[i]!='\0';i++)
  3433     045B  1283               	bcf	3,5	;RP0=0, select bank0
  3434     045C  1303               	bcf	3,6	;RP1=0, select bank0
  3435     045D  01AE               	clrf	Lcd_Write_String@i
  3436     045E  01AF               	clrf	Lcd_Write_String@i+1
  3437     045F  2C84               	goto	l1585
  3438     0460                     l1581:
  3439                           
  3440                           ;./lcd.h: 109:     Lcd_Write_Char(a[i]);
  3441     0460  082E               	movf	Lcd_Write_String@i,w
  3442     0461  0729               	addwf	Lcd_Write_String@a,w
  3443     0462  00AC               	movwf	??_Lcd_Write_String+1
  3444     0463  082A               	movf	Lcd_Write_String@a+1,w
  3445     0464  00AB               	movwf	??_Lcd_Write_String
  3446     0465  1803               	skipnc
  3447     0466  0AAB               	incf	??_Lcd_Write_String,f
  3448     0467  1FAE               	btfss	Lcd_Write_String@i,7
  3449     0468  2C6A               	goto	u1250
  3450     0469  03AB               	decf	??_Lcd_Write_String,f
  3451     046A                     u1250:
  3452     046A  1283               	bcf	3,5	;RP0=0, select bank0
  3453     046B  1303               	bcf	3,6	;RP1=0, select bank0
  3454     046C  082B               	movf	??_Lcd_Write_String,w
  3455     046D  00AD               	movwf	??_Lcd_Write_String+2
  3456     046E  082D               	movf	??_Lcd_Write_String+2,w
  3457     046F  00FF               	movwf	btemp+1
  3458     0470  082C               	movf	??_Lcd_Write_String+1,w
  3459     0471  0084               	movwf	4
  3460     0472  120A  118A  255E  120A  118A  	fcall	stringtab
  3461     0477  120A  118A  2523  120A  118A  	fcall	_Lcd_Write_Char
  3462     047C                     l1583:
  3463     047C  3001               	movlw	1
  3464     047D  1283               	bcf	3,5	;RP0=0, select bank0
  3465     047E  1303               	bcf	3,6	;RP1=0, select bank0
  3466     047F  07AE               	addwf	Lcd_Write_String@i,f
  3467     0480  1803               	skipnc
  3468     0481  0AAF               	incf	Lcd_Write_String@i+1,f
  3469     0482  3000               	movlw	0
  3470     0483  07AF               	addwf	Lcd_Write_String@i+1,f
  3471     0484                     l1585:
  3472     0484  082E               	movf	Lcd_Write_String@i,w
  3473     0485  0729               	addwf	Lcd_Write_String@a,w
  3474     0486  00AC               	movwf	??_Lcd_Write_String+1
  3475     0487  082A               	movf	Lcd_Write_String@a+1,w
  3476     0488  00AB               	movwf	??_Lcd_Write_String
  3477     0489  1803               	skipnc
  3478     048A  0AAB               	incf	??_Lcd_Write_String,f
  3479     048B  1FAE               	btfss	Lcd_Write_String@i,7
  3480     048C  2C8E               	goto	u1260
  3481     048D  03AB               	decf	??_Lcd_Write_String,f
  3482     048E                     u1260:
  3483     048E  1283               	bcf	3,5	;RP0=0, select bank0
  3484     048F  1303               	bcf	3,6	;RP1=0, select bank0
  3485     0490  082B               	movf	??_Lcd_Write_String,w
  3486     0491  00AD               	movwf	??_Lcd_Write_String+2
  3487     0492  082D               	movf	??_Lcd_Write_String+2,w
  3488     0493  00FF               	movwf	btemp+1
  3489     0494  082C               	movf	??_Lcd_Write_String+1,w
  3490     0495  0084               	movwf	4
  3491     0496  120A  118A  255E  120A  118A  	fcall	stringtab
  3492     049B  3A00               	xorlw	0
  3493     049C  1D03               	skipz
  3494     049D  2C9F               	goto	u1271
  3495     049E  2CA0               	goto	u1270
  3496     049F                     u1271:
  3497     049F  2C60               	goto	l1581
  3498     04A0                     u1270:
  3499     04A0                     l97:
  3500     04A0  0008               	return
  3501     04A1                     __end_of_Lcd_Write_String:
  3502                           
  3503                           	psect	text21
  3504     0523                     __ptext21:	
  3505 ;; *************** function _Lcd_Write_Char *****************
  3506 ;; Defined at:
  3507 ;;		line 89 in file "./lcd.h"
  3508 ;; Parameters:    Size  Location     Type
  3509 ;;  a               1    wreg     unsigned char 
  3510 ;; Auto vars:     Size  Location     Type
  3511 ;;  a               1    8[BANK0 ] unsigned char 
  3512 ;;  y               1    7[BANK0 ] unsigned char 
  3513 ;;  temp            1    6[BANK0 ] unsigned char 
  3514 ;; Return value:  Size  Location     Type
  3515 ;;                  1    wreg      void 
  3516 ;; Registers used:
  3517 ;;		wreg, status,2, status,0, pclath, cstack
  3518 ;; Tracked objects:
  3519 ;;		On entry : 0/0
  3520 ;;		On exit  : 0/0
  3521 ;;		Unchanged: 0/0
  3522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3523 ;;      Params:         0       0       0       0       0
  3524 ;;      Locals:         0       3       0       0       0
  3525 ;;      Temps:          0       1       0       0       0
  3526 ;;      Totals:         0       4       0       0       0
  3527 ;;Total ram usage:        4 bytes
  3528 ;; Hardware stack levels used: 1
  3529 ;; Hardware stack levels required when called: 5
  3530 ;; This function calls:
  3531 ;;		_Lcd_Port
  3532 ;; This function is called by:
  3533 ;;		_Lcd_Write_String
  3534 ;; This function uses a non-reentrant model
  3535 ;;
  3536                           
  3537     0523                     _Lcd_Write_Char:	
  3538                           ;psect for function _Lcd_Write_Char
  3539                           
  3540                           
  3541                           ;incstack = 0
  3542                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3543                           ;Lcd_Write_Char@a stored from wreg
  3544     0523  1283               	bcf	3,5	;RP0=0, select bank0
  3545     0524  1303               	bcf	3,6	;RP1=0, select bank0
  3546     0525  00A8               	movwf	Lcd_Write_Char@a
  3547     0526                     l1519:
  3548                           
  3549                           ;./lcd.h: 89: void Lcd_Write_Char(char a);./lcd.h: 90: {;./lcd.h: 91:    char temp,y;;./
      +                          lcd.h: 92:    temp = a&0x0F;
  3550     0526  0828               	movf	Lcd_Write_Char@a,w
  3551     0527  00A6               	movwf	Lcd_Write_Char@temp
  3552     0528                     l1521:
  3553     0528  300F               	movlw	15
  3554     0529  05A6               	andwf	Lcd_Write_Char@temp,f
  3555     052A                     l1523:
  3556                           
  3557                           ;./lcd.h: 93:    y = a&0xF0;
  3558     052A  0828               	movf	Lcd_Write_Char@a,w
  3559     052B  00A7               	movwf	Lcd_Write_Char@y
  3560     052C  30F0               	movlw	240
  3561     052D  05A7               	andwf	Lcd_Write_Char@y,f
  3562     052E                     l1525:
  3563                           
  3564                           ;./lcd.h: 94:    RD2 = 1;
  3565     052E  1508               	bsf	8,2	;volatile
  3566     052F                     l1527:
  3567                           
  3568                           ;./lcd.h: 95:    Lcd_Port(y>>4);
  3569     052F  0827               	movf	Lcd_Write_Char@y,w
  3570     0530  00A5               	movwf	??_Lcd_Write_Char
  3571     0531  3004               	movlw	4
  3572     0532                     u1195:
  3573     0532  1003               	clrc
  3574     0533  0CA5               	rrf	??_Lcd_Write_Char,f
  3575     0534  3EFF               	addlw	-1
  3576     0535  1D03               	skipz
  3577     0536  2D32               	goto	u1195
  3578     0537  0825               	movf	??_Lcd_Write_Char,w
  3579     0538  120A  118A  2707  120A  118A  	fcall	_Lcd_Port
  3580     053D                     l1529:
  3581                           
  3582                           ;./lcd.h: 96:    RD3 = 1;
  3583     053D  1283               	bcf	3,5	;RP0=0, select bank0
  3584     053E  1303               	bcf	3,6	;RP1=0, select bank0
  3585     053F  1588               	bsf	8,3	;volatile
  3586     0540                     l1531:
  3587                           
  3588                           ;./lcd.h: 97:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  3589     0540  300C               	movlw	12
  3590     0541  1283               	bcf	3,5	;RP0=0, select bank0
  3591     0542  1303               	bcf	3,6	;RP1=0, select bank0
  3592     0543  00A5               	movwf	??_Lcd_Write_Char
  3593     0544                     u1487:
  3594     0544  0BA5               	decfsz	??_Lcd_Write_Char,f
  3595     0545  2D44               	goto	u1487
  3596     0546  0000               	nop
  3597     0547                     l1533:
  3598                           
  3599                           ;./lcd.h: 98:    RD3 = 0;
  3600     0547  1283               	bcf	3,5	;RP0=0, select bank0
  3601     0548  1303               	bcf	3,6	;RP1=0, select bank0
  3602     0549  1188               	bcf	8,3	;volatile
  3603     054A                     l1535:
  3604                           
  3605                           ;./lcd.h: 99:    Lcd_Port(temp);
  3606     054A  0826               	movf	Lcd_Write_Char@temp,w
  3607     054B  120A  118A  2707  120A  118A  	fcall	_Lcd_Port
  3608     0550                     l1537:
  3609                           
  3610                           ;./lcd.h: 100:    RD3 = 1;
  3611     0550  1283               	bcf	3,5	;RP0=0, select bank0
  3612     0551  1303               	bcf	3,6	;RP1=0, select bank0
  3613     0552  1588               	bsf	8,3	;volatile
  3614     0553                     l1539:
  3615                           
  3616                           ;./lcd.h: 101:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  3617     0553  300C               	movlw	12
  3618     0554  1283               	bcf	3,5	;RP0=0, select bank0
  3619     0555  1303               	bcf	3,6	;RP1=0, select bank0
  3620     0556  00A5               	movwf	??_Lcd_Write_Char
  3621     0557                     u1497:
  3622     0557  0BA5               	decfsz	??_Lcd_Write_Char,f
  3623     0558  2D57               	goto	u1497
  3624     0559  0000               	nop
  3625     055A                     l1541:
  3626                           
  3627                           ;./lcd.h: 102:    RD3 = 0;
  3628     055A  1283               	bcf	3,5	;RP0=0, select bank0
  3629     055B  1303               	bcf	3,6	;RP1=0, select bank0
  3630     055C  1188               	bcf	8,3	;volatile
  3631     055D                     l91:
  3632     055D  0008               	return
  3633     055E                     __end_of_Lcd_Write_Char:
  3634                           
  3635                           	psect	text22
  3636     040D                     __ptext22:	
  3637 ;; *************** function _Lcd_Set_Cursor *****************
  3638 ;; Defined at:
  3639 ;;		line 49 in file "./lcd.h"
  3640 ;; Parameters:    Size  Location     Type
  3641 ;;  a               1    wreg     unsigned char 
  3642 ;;  b               1    8[BANK0 ] unsigned char 
  3643 ;; Auto vars:     Size  Location     Type
  3644 ;;  a               1   10[BANK0 ] unsigned char 
  3645 ;;  temp            1   13[BANK0 ] unsigned char 
  3646 ;;  y               1   12[BANK0 ] unsigned char 
  3647 ;;  z               1   11[BANK0 ] unsigned char 
  3648 ;; Return value:  Size  Location     Type
  3649 ;;                  1    wreg      void 
  3650 ;; Registers used:
  3651 ;;		wreg, status,2, status,0, pclath, cstack
  3652 ;; Tracked objects:
  3653 ;;		On entry : 0/0
  3654 ;;		On exit  : 0/0
  3655 ;;		Unchanged: 0/0
  3656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3657 ;;      Params:         0       1       0       0       0
  3658 ;;      Locals:         0       4       0       0       0
  3659 ;;      Temps:          0       1       0       0       0
  3660 ;;      Totals:         0       6       0       0       0
  3661 ;;Total ram usage:        6 bytes
  3662 ;; Hardware stack levels used: 1
  3663 ;; Hardware stack levels required when called: 6
  3664 ;; This function calls:
  3665 ;;		_Lcd_Cmd
  3666 ;; This function is called by:
  3667 ;;		_print_Index
  3668 ;;		_print_TankState
  3669 ;; This function uses a non-reentrant model
  3670 ;;
  3671                           
  3672     040D                     _Lcd_Set_Cursor:	
  3673                           ;psect for function _Lcd_Set_Cursor
  3674                           
  3675                           
  3676                           ;incstack = 0
  3677                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3678                           ;Lcd_Set_Cursor@a stored from wreg
  3679     040D  1283               	bcf	3,5	;RP0=0, select bank0
  3680     040E  1303               	bcf	3,6	;RP1=0, select bank0
  3681     040F  00AA               	movwf	Lcd_Set_Cursor@a
  3682     0410                     l1555:
  3683                           
  3684                           ;./lcd.h: 49: void Lcd_Set_Cursor(char a, char b);./lcd.h: 50: {;./lcd.h: 51:  char temp
      +                          ,z,y;;./lcd.h: 52:  if(a == 1)
  3685     0410  032A               	decf	Lcd_Set_Cursor@a,w
  3686     0411  1D03               	btfss	3,2
  3687     0412  2C14               	goto	u1211
  3688     0413  2C15               	goto	u1210
  3689     0414                     u1211:
  3690     0414  2C35               	goto	l1567
  3691     0415                     u1210:
  3692     0415                     l1557:
  3693                           
  3694                           ;./lcd.h: 53:  {;./lcd.h: 54:    temp = 0x80 + b - 1;
  3695     0415  0828               	movf	Lcd_Set_Cursor@b,w
  3696     0416  3E7F               	addlw	127
  3697     0417  00AD               	movwf	Lcd_Set_Cursor@temp
  3698                           
  3699                           ;./lcd.h: 55:   z = temp>>4;
  3700     0418  082D               	movf	Lcd_Set_Cursor@temp,w
  3701     0419  00A9               	movwf	??_Lcd_Set_Cursor
  3702     041A  3004               	movlw	4
  3703     041B                     u1225:
  3704     041B  1003               	clrc
  3705     041C  0CA9               	rrf	??_Lcd_Set_Cursor,f
  3706     041D  3EFF               	addlw	-1
  3707     041E  1D03               	skipz
  3708     041F  2C1B               	goto	u1225
  3709     0420  0829               	movf	??_Lcd_Set_Cursor,w
  3710     0421  00AB               	movwf	Lcd_Set_Cursor@z
  3711     0422                     l1559:
  3712                           
  3713                           ;./lcd.h: 56:   y = temp & 0x0F;
  3714     0422  082D               	movf	Lcd_Set_Cursor@temp,w
  3715     0423  00AC               	movwf	Lcd_Set_Cursor@y
  3716     0424                     l1561:
  3717     0424  300F               	movlw	15
  3718     0425  05AC               	andwf	Lcd_Set_Cursor@y,f
  3719     0426                     l1563:
  3720                           
  3721                           ;./lcd.h: 57:   Lcd_Cmd(z);
  3722     0426  082B               	movf	Lcd_Set_Cursor@z,w
  3723     0427  120A  118A  2727  120A  118A  	fcall	_Lcd_Cmd
  3724     042C                     l1565:
  3725                           
  3726                           ;./lcd.h: 58:   Lcd_Cmd(y);
  3727     042C  1283               	bcf	3,5	;RP0=0, select bank0
  3728     042D  1303               	bcf	3,6	;RP1=0, select bank0
  3729     042E  082C               	movf	Lcd_Set_Cursor@y,w
  3730     042F  120A  118A  2727  120A  118A  	fcall	_Lcd_Cmd
  3731                           
  3732                           ;./lcd.h: 59:  }
  3733     0434  2C5A               	goto	l85
  3734     0435                     l1567:
  3735     0435  3002               	movlw	2
  3736     0436  062A               	xorwf	Lcd_Set_Cursor@a,w
  3737     0437  1D03               	btfss	3,2
  3738     0438  2C3A               	goto	u1231
  3739     0439  2C3B               	goto	u1230
  3740     043A                     u1231:
  3741     043A  2C5A               	goto	l85
  3742     043B                     u1230:
  3743     043B                     l1569:
  3744                           
  3745                           ;./lcd.h: 61:  {;./lcd.h: 62:   temp = 0xC0 + b - 1;
  3746     043B  0828               	movf	Lcd_Set_Cursor@b,w
  3747     043C  3EBF               	addlw	191
  3748     043D  00AD               	movwf	Lcd_Set_Cursor@temp
  3749                           
  3750                           ;./lcd.h: 63:   z = temp>>4;
  3751     043E  082D               	movf	Lcd_Set_Cursor@temp,w
  3752     043F  00A9               	movwf	??_Lcd_Set_Cursor
  3753     0440  3004               	movlw	4
  3754     0441                     u1245:
  3755     0441  1003               	clrc
  3756     0442  0CA9               	rrf	??_Lcd_Set_Cursor,f
  3757     0443  3EFF               	addlw	-1
  3758     0444  1D03               	skipz
  3759     0445  2C41               	goto	u1245
  3760     0446  0829               	movf	??_Lcd_Set_Cursor,w
  3761     0447  00AB               	movwf	Lcd_Set_Cursor@z
  3762     0448                     l1571:
  3763                           
  3764                           ;./lcd.h: 64:   y = temp & 0x0F;
  3765     0448  082D               	movf	Lcd_Set_Cursor@temp,w
  3766     0449  00AC               	movwf	Lcd_Set_Cursor@y
  3767     044A                     l1573:
  3768     044A  300F               	movlw	15
  3769     044B  05AC               	andwf	Lcd_Set_Cursor@y,f
  3770     044C                     l1575:
  3771                           
  3772                           ;./lcd.h: 65:   Lcd_Cmd(z);
  3773     044C  082B               	movf	Lcd_Set_Cursor@z,w
  3774     044D  120A  118A  2727  120A  118A  	fcall	_Lcd_Cmd
  3775     0452                     l1577:
  3776                           
  3777                           ;./lcd.h: 66:   Lcd_Cmd(y);
  3778     0452  1283               	bcf	3,5	;RP0=0, select bank0
  3779     0453  1303               	bcf	3,6	;RP1=0, select bank0
  3780     0454  082C               	movf	Lcd_Set_Cursor@y,w
  3781     0455  120A  118A  2727  120A  118A  	fcall	_Lcd_Cmd
  3782     045A                     l85:
  3783     045A  0008               	return
  3784     045B                     __end_of_Lcd_Set_Cursor:
  3785                           
  3786                           	psect	text23
  3787     07C8                     __ptext23:	
  3788 ;; *************** function _Lcd_Clear *****************
  3789 ;; Defined at:
  3790 ;;		line 43 in file "./lcd.h"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;		None
  3793 ;; Auto vars:     Size  Location     Type
  3794 ;;		None
  3795 ;; Return value:  Size  Location     Type
  3796 ;;                  1    wreg      void 
  3797 ;; Registers used:
  3798 ;;		wreg, status,2, status,0, pclath, cstack
  3799 ;; Tracked objects:
  3800 ;;		On entry : 0/0
  3801 ;;		On exit  : 0/0
  3802 ;;		Unchanged: 0/0
  3803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3804 ;;      Params:         0       0       0       0       0
  3805 ;;      Locals:         0       0       0       0       0
  3806 ;;      Temps:          0       0       0       0       0
  3807 ;;      Totals:         0       0       0       0       0
  3808 ;;Total ram usage:        0 bytes
  3809 ;; Hardware stack levels used: 1
  3810 ;; Hardware stack levels required when called: 6
  3811 ;; This function calls:
  3812 ;;		_Lcd_Cmd
  3813 ;; This function is called by:
  3814 ;;		_print_Index
  3815 ;; This function uses a non-reentrant model
  3816 ;;
  3817                           
  3818     07C8                     _Lcd_Clear:	
  3819                           ;psect for function _Lcd_Clear
  3820                           
  3821     07C8                     l1553:	
  3822                           ;incstack = 0
  3823                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3824                           
  3825                           
  3826                           ;./lcd.h: 45:  Lcd_Cmd(0);
  3827     07C8  3000               	movlw	0
  3828     07C9  120A  118A  2727  120A  118A  	fcall	_Lcd_Cmd
  3829                           
  3830                           ;./lcd.h: 46:  Lcd_Cmd(1);
  3831     07CE  3001               	movlw	1
  3832     07CF  120A  118A  2727  120A  118A  	fcall	_Lcd_Cmd
  3833     07D4                     l79:
  3834     07D4  0008               	return
  3835     07D5                     __end_of_Lcd_Clear:
  3836                           
  3837                           	psect	text24
  3838     07E8                     __ptext24:	
  3839 ;; *************** function _interruption_init *****************
  3840 ;; Defined at:
  3841 ;;		line 126 in file "./config.h"
  3842 ;; Parameters:    Size  Location     Type
  3843 ;;		None
  3844 ;; Auto vars:     Size  Location     Type
  3845 ;;		None
  3846 ;; Return value:  Size  Location     Type
  3847 ;;                  1    wreg      void 
  3848 ;; Registers used:
  3849 ;;		None
  3850 ;; Tracked objects:
  3851 ;;		On entry : 0/0
  3852 ;;		On exit  : 0/0
  3853 ;;		Unchanged: 0/0
  3854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3855 ;;      Params:         0       0       0       0       0
  3856 ;;      Locals:         0       0       0       0       0
  3857 ;;      Temps:          0       0       0       0       0
  3858 ;;      Totals:         0       0       0       0       0
  3859 ;;Total ram usage:        0 bytes
  3860 ;; Hardware stack levels used: 1
  3861 ;; Hardware stack levels required when called: 4
  3862 ;; This function calls:
  3863 ;;		Nothing
  3864 ;; This function is called by:
  3865 ;;		_main
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869     07E8                     _interruption_init:	
  3870                           ;psect for function _interruption_init
  3871                           
  3872     07E8                     l1687:	
  3873                           ;incstack = 0
  3874                           ; Regs used in _interruption_init: []
  3875                           
  3876                           
  3877                           ;./config.h: 128:   INTCONbits.GIE=1;
  3878     07E8  178B               	bsf	11,7	;volatile
  3879                           
  3880                           ;./config.h: 129:   OPTION_REGbits.INTEDG = 1;
  3881     07E9  1683               	bsf	3,5	;RP0=1, select bank1
  3882     07EA  1303               	bcf	3,6	;RP1=0, select bank1
  3883     07EB  1701               	bsf	1,6	;volatile
  3884                           
  3885                           ;./config.h: 131:   INTCONbits.INTE = 1;
  3886     07EC  160B               	bsf	11,4	;volatile
  3887                           
  3888                           ;./config.h: 133:   INTCONbits.PEIE = 1;
  3889     07ED  170B               	bsf	11,6	;volatile
  3890                           
  3891                           ;./config.h: 135:   PIE1bits.TMR1IE = 1;
  3892     07EE  140C               	bsf	12,0	;volatile
  3893     07EF                     l62:
  3894     07EF  0008               	return
  3895     07F0                     __end_of_interruption_init:
  3896                           
  3897                           	psect	text25
  3898     0351                     __ptext25:	
  3899 ;; *************** function _Lcd_Init *****************
  3900 ;; Defined at:
  3901 ;;		line 70 in file "./lcd.h"
  3902 ;; Parameters:    Size  Location     Type
  3903 ;;		None
  3904 ;; Auto vars:     Size  Location     Type
  3905 ;;		None
  3906 ;; Return value:  Size  Location     Type
  3907 ;;                  1    wreg      void 
  3908 ;; Registers used:
  3909 ;;		wreg, status,2, status,0, pclath, cstack
  3910 ;; Tracked objects:
  3911 ;;		On entry : 0/0
  3912 ;;		On exit  : 0/0
  3913 ;;		Unchanged: 0/0
  3914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3915 ;;      Params:         0       0       0       0       0
  3916 ;;      Locals:         0       0       0       0       0
  3917 ;;      Temps:          0       2       0       0       0
  3918 ;;      Totals:         0       2       0       0       0
  3919 ;;Total ram usage:        2 bytes
  3920 ;; Hardware stack levels used: 1
  3921 ;; Hardware stack levels required when called: 6
  3922 ;; This function calls:
  3923 ;;		_Lcd_Cmd
  3924 ;;		_Lcd_Port
  3925 ;; This function is called by:
  3926 ;;		_main
  3927 ;; This function uses a non-reentrant model
  3928 ;;
  3929                           
  3930     0351                     _Lcd_Init:	
  3931                           ;psect for function _Lcd_Init
  3932                           
  3933     0351                     l1689:	
  3934                           ;incstack = 0
  3935                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3936                           
  3937                           
  3938                           ;./lcd.h: 72:   Lcd_Port(0x00);
  3939     0351  3000               	movlw	0
  3940     0352  120A  118A  2707  120A  118A  	fcall	_Lcd_Port
  3941     0357                     l1691:
  3942                           
  3943                           ;./lcd.h: 73:    _delay((unsigned long)((20)*(4000000/4000.0)));
  3944     0357  301A               	movlw	26
  3945     0358  1283               	bcf	3,5	;RP0=0, select bank0
  3946     0359  1303               	bcf	3,6	;RP1=0, select bank0
  3947     035A  00A9               	movwf	??_Lcd_Init+1
  3948     035B  30F7               	movlw	247
  3949     035C  00A8               	movwf	??_Lcd_Init
  3950     035D                     u1507:
  3951     035D  0BA8               	decfsz	??_Lcd_Init,f
  3952     035E  2B5D               	goto	u1507
  3953     035F  0BA9               	decfsz	??_Lcd_Init+1,f
  3954     0360  2B5D               	goto	u1507
  3955     0361  2B62               	nop2
  3956     0362                     l1693:
  3957                           
  3958                           ;./lcd.h: 74:   Lcd_Cmd(0x03);
  3959     0362  3003               	movlw	3
  3960     0363  120A  118A  2727  120A  118A  	fcall	_Lcd_Cmd
  3961                           
  3962                           ;./lcd.h: 75:  _delay((unsigned long)((5)*(4000000/4000.0)));
  3963     0368  3007               	movlw	7
  3964     0369  1283               	bcf	3,5	;RP0=0, select bank0
  3965     036A  1303               	bcf	3,6	;RP1=0, select bank0
  3966     036B  00A9               	movwf	??_Lcd_Init+1
  3967     036C  307C               	movlw	124
  3968     036D  00A8               	movwf	??_Lcd_Init
  3969     036E                     u1517:
  3970     036E  0BA8               	decfsz	??_Lcd_Init,f
  3971     036F  2B6E               	goto	u1517
  3972     0370  0BA9               	decfsz	??_Lcd_Init+1,f
  3973     0371  2B6E               	goto	u1517
  3974     0372  0000               	nop
  3975     0373                     l1695:
  3976                           
  3977                           ;./lcd.h: 76:   Lcd_Cmd(0x03);
  3978     0373  3003               	movlw	3
  3979     0374  120A  118A  2727  120A  118A  	fcall	_Lcd_Cmd
  3980     0379                     l1697:
  3981                           
  3982                           ;./lcd.h: 77:  _delay((unsigned long)((11)*(4000000/4000.0)));
  3983     0379  300F               	movlw	15
  3984     037A  1283               	bcf	3,5	;RP0=0, select bank0
  3985     037B  1303               	bcf	3,6	;RP1=0, select bank0
  3986     037C  00A9               	movwf	??_Lcd_Init+1
  3987     037D  3047               	movlw	71
  3988     037E  00A8               	movwf	??_Lcd_Init
  3989     037F                     u1527:
  3990     037F  0BA8               	decfsz	??_Lcd_Init,f
  3991     0380  2B7F               	goto	u1527
  3992     0381  0BA9               	decfsz	??_Lcd_Init+1,f
  3993     0382  2B7F               	goto	u1527
  3994                           
  3995                           ;./lcd.h: 78:   Lcd_Cmd(0x03);
  3996     0383  3003               	movlw	3
  3997     0384  120A  118A  2727  120A  118A  	fcall	_Lcd_Cmd
  3998                           
  3999                           ;./lcd.h: 80:   Lcd_Cmd(0x02);
  4000     0389  3002               	movlw	2
  4001     038A  120A  118A  2727  120A  118A  	fcall	_Lcd_Cmd
  4002                           
  4003                           ;./lcd.h: 81:   Lcd_Cmd(0x02);
  4004     038F  3002               	movlw	2
  4005     0390  120A  118A  2727  120A  118A  	fcall	_Lcd_Cmd
  4006                           
  4007                           ;./lcd.h: 82:   Lcd_Cmd(0x08);
  4008     0395  3008               	movlw	8
  4009     0396  120A  118A  2727  120A  118A  	fcall	_Lcd_Cmd
  4010                           
  4011                           ;./lcd.h: 83:   Lcd_Cmd(0x00);
  4012     039B  3000               	movlw	0
  4013     039C  120A  118A  2727  120A  118A  	fcall	_Lcd_Cmd
  4014                           
  4015                           ;./lcd.h: 84:   Lcd_Cmd(0x0C);
  4016     03A1  300C               	movlw	12
  4017     03A2  120A  118A  2727  120A  118A  	fcall	_Lcd_Cmd
  4018                           
  4019                           ;./lcd.h: 85:   Lcd_Cmd(0x00);
  4020     03A7  3000               	movlw	0
  4021     03A8  120A  118A  2727  120A  118A  	fcall	_Lcd_Cmd
  4022                           
  4023                           ;./lcd.h: 86:   Lcd_Cmd(0x06);
  4024     03AD  3006               	movlw	6
  4025     03AE  120A  118A  2727  120A  118A  	fcall	_Lcd_Cmd
  4026     03B3                     l88:
  4027     03B3  0008               	return
  4028     03B4                     __end_of_Lcd_Init:
  4029                           
  4030                           	psect	text26
  4031     0727                     __ptext26:	
  4032 ;; *************** function _Lcd_Cmd *****************
  4033 ;; Defined at:
  4034 ;;		line 34 in file "./lcd.h"
  4035 ;; Parameters:    Size  Location     Type
  4036 ;;  a               1    wreg     unsigned char 
  4037 ;; Auto vars:     Size  Location     Type
  4038 ;;  a               1    7[BANK0 ] unsigned char 
  4039 ;; Return value:  Size  Location     Type
  4040 ;;                  1    wreg      void 
  4041 ;; Registers used:
  4042 ;;		wreg, status,2, status,0, pclath, cstack
  4043 ;; Tracked objects:
  4044 ;;		On entry : 0/0
  4045 ;;		On exit  : 0/0
  4046 ;;		Unchanged: 0/0
  4047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4048 ;;      Params:         0       0       0       0       0
  4049 ;;      Locals:         0       1       0       0       0
  4050 ;;      Temps:          0       2       0       0       0
  4051 ;;      Totals:         0       3       0       0       0
  4052 ;;Total ram usage:        3 bytes
  4053 ;; Hardware stack levels used: 1
  4054 ;; Hardware stack levels required when called: 5
  4055 ;; This function calls:
  4056 ;;		_Lcd_Port
  4057 ;; This function is called by:
  4058 ;;		_Lcd_Clear
  4059 ;;		_Lcd_Set_Cursor
  4060 ;;		_Lcd_Init
  4061 ;; This function uses a non-reentrant model
  4062 ;;
  4063                           
  4064     0727                     _Lcd_Cmd:	
  4065                           ;psect for function _Lcd_Cmd
  4066                           
  4067                           
  4068                           ;incstack = 0
  4069                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  4070                           ;Lcd_Cmd@a stored from wreg
  4071     0727  1283               	bcf	3,5	;RP0=0, select bank0
  4072     0728  1303               	bcf	3,6	;RP1=0, select bank0
  4073     0729  00A7               	movwf	Lcd_Cmd@a
  4074     072A                     l1509:
  4075                           
  4076                           ;./lcd.h: 34: void Lcd_Cmd(char a);./lcd.h: 35: {;./lcd.h: 36:  RD2 = 0;
  4077     072A  1108               	bcf	8,2	;volatile
  4078     072B                     l1511:
  4079                           
  4080                           ;./lcd.h: 37:  Lcd_Port(a);
  4081     072B  0827               	movf	Lcd_Cmd@a,w
  4082     072C  120A  118A  2707  120A  118A  	fcall	_Lcd_Port
  4083     0731                     l1513:
  4084                           
  4085                           ;./lcd.h: 38:  RD3 = 1;
  4086     0731  1283               	bcf	3,5	;RP0=0, select bank0
  4087     0732  1303               	bcf	3,6	;RP1=0, select bank0
  4088     0733  1588               	bsf	8,3	;volatile
  4089     0734                     l1515:
  4090                           
  4091                           ;./lcd.h: 39:         _delay((unsigned long)((4)*(4000000/4000.0)));
  4092     0734  3006               	movlw	6
  4093     0735  1283               	bcf	3,5	;RP0=0, select bank0
  4094     0736  1303               	bcf	3,6	;RP1=0, select bank0
  4095     0737  00A6               	movwf	??_Lcd_Cmd+1
  4096     0738  302F               	movlw	47
  4097     0739  00A5               	movwf	??_Lcd_Cmd
  4098     073A                     u1537:
  4099     073A  0BA5               	decfsz	??_Lcd_Cmd,f
  4100     073B  2F3A               	goto	u1537
  4101     073C  0BA6               	decfsz	??_Lcd_Cmd+1,f
  4102     073D  2F3A               	goto	u1537
  4103     073E  2F3F               	nop2
  4104     073F                     l1517:
  4105                           
  4106                           ;./lcd.h: 40:         RD3 = 0;
  4107     073F  1283               	bcf	3,5	;RP0=0, select bank0
  4108     0740  1303               	bcf	3,6	;RP1=0, select bank0
  4109     0741  1188               	bcf	8,3	;volatile
  4110     0742                     l76:
  4111     0742  0008               	return
  4112     0743                     __end_of_Lcd_Cmd:
  4113                           
  4114                           	psect	text27
  4115     0707                     __ptext27:	
  4116 ;; *************** function _Lcd_Port *****************
  4117 ;; Defined at:
  4118 ;;		line 12 in file "./lcd.h"
  4119 ;; Parameters:    Size  Location     Type
  4120 ;;  a               1    wreg     unsigned char 
  4121 ;; Auto vars:     Size  Location     Type
  4122 ;;  a               1    4[BANK0 ] unsigned char 
  4123 ;; Return value:  Size  Location     Type
  4124 ;;                  1    wreg      void 
  4125 ;; Registers used:
  4126 ;;		wreg
  4127 ;; Tracked objects:
  4128 ;;		On entry : 0/0
  4129 ;;		On exit  : 0/0
  4130 ;;		Unchanged: 0/0
  4131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4132 ;;      Params:         0       0       0       0       0
  4133 ;;      Locals:         0       1       0       0       0
  4134 ;;      Temps:          0       0       0       0       0
  4135 ;;      Totals:         0       1       0       0       0
  4136 ;;Total ram usage:        1 bytes
  4137 ;; Hardware stack levels used: 1
  4138 ;; Hardware stack levels required when called: 4
  4139 ;; This function calls:
  4140 ;;		Nothing
  4141 ;; This function is called by:
  4142 ;;		_Lcd_Cmd
  4143 ;;		_Lcd_Init
  4144 ;;		_Lcd_Write_Char
  4145 ;; This function uses a non-reentrant model
  4146 ;;
  4147                           
  4148     0707                     _Lcd_Port:	
  4149                           ;psect for function _Lcd_Port
  4150                           
  4151                           
  4152                           ;incstack = 0
  4153                           ; Regs used in _Lcd_Port: [wreg]
  4154                           ;Lcd_Port@a stored from wreg
  4155     0707  1283               	bcf	3,5	;RP0=0, select bank0
  4156     0708  1303               	bcf	3,6	;RP1=0, select bank0
  4157     0709  00A4               	movwf	Lcd_Port@a
  4158     070A                     l1419:
  4159                           
  4160                           ;./lcd.h: 12: void Lcd_Port(char a);./lcd.h: 13: {;./lcd.h: 14:  if(a & 1)
  4161     070A  1C24               	btfss	Lcd_Port@a,0
  4162     070B  2F0D               	goto	u991
  4163     070C  2F0E               	goto	u990
  4164     070D                     u991:
  4165     070D  2F10               	goto	l65
  4166     070E                     u990:
  4167     070E                     l1421:
  4168                           
  4169                           ;./lcd.h: 15:   RD4 = 1;
  4170     070E  1608               	bsf	8,4	;volatile
  4171     070F  2F11               	goto	l66
  4172     0710                     l65:	
  4173                           ;./lcd.h: 16:  else
  4174                           
  4175                           
  4176                           ;./lcd.h: 17:   RD4 = 0;
  4177     0710  1208               	bcf	8,4	;volatile
  4178     0711                     l66:
  4179                           
  4180                           ;./lcd.h: 19:  if(a & 2)
  4181     0711  1CA4               	btfss	Lcd_Port@a,1
  4182     0712  2F14               	goto	u1001
  4183     0713  2F15               	goto	u1000
  4184     0714                     u1001:
  4185     0714  2F17               	goto	l67
  4186     0715                     u1000:
  4187     0715                     l1423:
  4188                           
  4189                           ;./lcd.h: 20:   RD5 = 1;
  4190     0715  1688               	bsf	8,5	;volatile
  4191     0716  2F18               	goto	l68
  4192     0717                     l67:	
  4193                           ;./lcd.h: 21:  else
  4194                           
  4195                           
  4196                           ;./lcd.h: 22:   RD5 = 0;
  4197     0717  1288               	bcf	8,5	;volatile
  4198     0718                     l68:
  4199                           
  4200                           ;./lcd.h: 24:  if(a & 4)
  4201     0718  1D24               	btfss	Lcd_Port@a,2
  4202     0719  2F1B               	goto	u1011
  4203     071A  2F1C               	goto	u1010
  4204     071B                     u1011:
  4205     071B  2F1E               	goto	l69
  4206     071C                     u1010:
  4207     071C                     l1425:
  4208                           
  4209                           ;./lcd.h: 25:   RD6 = 1;
  4210     071C  1708               	bsf	8,6	;volatile
  4211     071D  2F1F               	goto	l70
  4212     071E                     l69:	
  4213                           ;./lcd.h: 26:  else
  4214                           
  4215                           
  4216                           ;./lcd.h: 27:   RD6 = 0;
  4217     071E  1308               	bcf	8,6	;volatile
  4218     071F                     l70:
  4219                           
  4220                           ;./lcd.h: 29:  if(a & 8)
  4221     071F  1DA4               	btfss	Lcd_Port@a,3
  4222     0720  2F22               	goto	u1021
  4223     0721  2F23               	goto	u1020
  4224     0722                     u1021:
  4225     0722  2F25               	goto	l71
  4226     0723                     u1020:
  4227     0723                     l1427:
  4228                           
  4229                           ;./lcd.h: 30:   RD7 = 1;
  4230     0723  1788               	bsf	8,7	;volatile
  4231     0724  2F26               	goto	l73
  4232     0725                     l71:	
  4233                           ;./lcd.h: 31:  else
  4234                           
  4235                           
  4236                           ;./lcd.h: 32:   RD7 = 0;
  4237     0725  1388               	bcf	8,7	;volatile
  4238     0726                     l73:
  4239     0726  0008               	return
  4240     0727                     __end_of_Lcd_Port:
  4241                           
  4242                           	psect	text28
  4243     05FB                     __ptext28:	
  4244 ;; *************** function _interruptionHandler *****************
  4245 ;; Defined at:
  4246 ;;		line 14 in file "main.c"
  4247 ;; Parameters:    Size  Location     Type
  4248 ;;		None
  4249 ;; Auto vars:     Size  Location     Type
  4250 ;;		None
  4251 ;; Return value:  Size  Location     Type
  4252 ;;                  1    wreg      void 
  4253 ;; Registers used:
  4254 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4255 ;; Tracked objects:
  4256 ;;		On entry : 0/0
  4257 ;;		On exit  : 0/0
  4258 ;;		Unchanged: 0/0
  4259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4260 ;;      Params:         0       0       0       0       0
  4261 ;;      Locals:         0       0       0       0       0
  4262 ;;      Temps:          0       4       0       0       0
  4263 ;;      Totals:         0       4       0       0       0
  4264 ;;Total ram usage:        4 bytes
  4265 ;; Hardware stack levels used: 1
  4266 ;; Hardware stack levels required when called: 3
  4267 ;; This function calls:
  4268 ;;		_runTimer
  4269 ;;		i1_setCounter_Timer1
  4270 ;; This function is called by:
  4271 ;;		Interrupt level 1
  4272 ;; This function uses a non-reentrant model
  4273 ;;
  4274                           
  4275     05FB                     _interruptionHandler:	
  4276                           ;psect for function _interruptionHandler
  4277                           
  4278     05FB                     i1l1759:
  4279                           
  4280                           ;main.c: 16:   if(INTCONbits.INTF)
  4281     05FB  1C8B               	btfss	11,1	;volatile
  4282     05FC  2DFE               	goto	u146_21
  4283     05FD  2DFF               	goto	u146_20
  4284     05FE                     u146_21:
  4285     05FE  2E03               	goto	i1l146
  4286     05FF                     u146_20:
  4287     05FF                     i1l1761:
  4288                           
  4289                           ;main.c: 17:   {;main.c: 18:     INTCONbits.INTF = 0;
  4290     05FF  108B               	bcf	11,1	;volatile
  4291                           
  4292                           ;main.c: 19:     tankState = WTANK_MID;
  4293     0600  3001               	movlw	1
  4294     0601  00DD               	movwf	_tankState
  4295                           
  4296                           ;main.c: 20:   }
  4297     0602  2E1F               	goto	i1l149
  4298     0603                     i1l146:	
  4299                           ;main.c: 21:   else if(PIR1bits.TMR1IF)
  4300                           
  4301     0603  1C0C               	btfss	12,0	;volatile
  4302     0604  2E06               	goto	u147_21
  4303     0605  2E07               	goto	u147_20
  4304     0606                     u147_21:
  4305     0606  2E1F               	goto	i1l149
  4306     0607                     u147_20:
  4307     0607                     i1l1763:
  4308                           
  4309                           ;main.c: 22:   {;main.c: 23:     PIR1bits.TMR1IF = 0;
  4310     0607  100C               	bcf	12,0	;volatile
  4311     0608                     i1l1765:
  4312                           
  4313                           ;main.c: 25:     setCounter_Timer1();
  4314     0608  120A  158A  27F9  120A  118A  	fcall	i1_setCounter_Timer1
  4315     060D                     i1l1767:
  4316                           
  4317                           ;main.c: 27:     runTimer(&timer_WTANK_timeout);
  4318     060D  305E               	movlw	low _timer_WTANK_timeout
  4319     060E  00F3               	movwf	runTimer@timer
  4320     060F  3000               	movlw	high _timer_WTANK_timeout
  4321     0610  00F4               	movwf	runTimer@timer+1
  4322     0611  120A  118A  227D  120A  118A  	fcall	_runTimer
  4323     0616                     i1l1769:
  4324                           
  4325                           ;main.c: 28:     runTimer(&timer_lcdButtons);
  4326     0616  30D5               	movlw	low _timer_lcdButtons
  4327     0617  00F3               	movwf	runTimer@timer
  4328     0618  3000               	movlw	high _timer_lcdButtons
  4329     0619  00F4               	movwf	runTimer@timer+1
  4330     061A  120A  118A  227D  120A  118A  	fcall	_runTimer
  4331     061F                     i1l149:
  4332     061F  1283               	bcf	3,5	;RP0=0, select bank0
  4333     0620  1303               	bcf	3,6	;RP1=0, select bank0
  4334     0621  0823               	movf	??_interruptionHandler+3,w
  4335     0622  00FF               	movwf	btemp+1
  4336     0623  0822               	movf	??_interruptionHandler+2,w
  4337     0624  008A               	movwf	10
  4338     0625  0821               	movf	??_interruptionHandler+1,w
  4339     0626  0084               	movwf	4
  4340     0627  0E20               	swapf	??_interruptionHandler,w
  4341     0628  0083               	movwf	3
  4342     0629  0EFE               	swapf	btemp,f
  4343     062A  0E7E               	swapf	btemp,w
  4344     062B  0009               	retfie
  4345     062C                     __end_of_interruptionHandler:
  4346                           
  4347                           	psect	intentry
  4348     0004                     __pintentry:	
  4349                           ;incstack = 0
  4350 ;; hardware stack exceeded
  4351                           ; Regs used in _interruptionHandler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4352                           
  4353     0004                     interrupt_function:
  4354     007E                     saved_w         set	btemp
  4355     0004  00FE               	movwf	btemp
  4356     0005  0E03               	swapf	3,w
  4357     0006  1283               	bcf	3,5	;RP0=0, select bank0
  4358     0007  1303               	bcf	3,6	;RP1=0, select bank0
  4359     0008  00A0               	movwf	??_interruptionHandler
  4360     0009  0804               	movf	4,w
  4361     000A  00A1               	movwf	??_interruptionHandler+1
  4362     000B  080A               	movf	10,w
  4363     000C  00A2               	movwf	??_interruptionHandler+2
  4364     000D  087F               	movf	btemp+1,w
  4365     000E  00A3               	movwf	??_interruptionHandler+3
  4366     000F  120A  118A  2DFB   	ljmp	_interruptionHandler
  4367                           
  4368                           	psect	text29
  4369     0FF9                     __ptext29:	
  4370 ;; *************** function i1_setCounter_Timer1 *****************
  4371 ;; Defined at:
  4372 ;;		line 75 in file "./config.h"
  4373 ;; Parameters:    Size  Location     Type
  4374 ;;		None
  4375 ;; Auto vars:     Size  Location     Type
  4376 ;;		None
  4377 ;; Return value:  Size  Location     Type
  4378 ;;                  1    wreg      void 
  4379 ;; Registers used:
  4380 ;;		None
  4381 ;; Tracked objects:
  4382 ;;		On entry : 0/0
  4383 ;;		On exit  : 0/0
  4384 ;;		Unchanged: 0/0
  4385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4386 ;;      Params:         0       0       0       0       0
  4387 ;;      Locals:         0       0       0       0       0
  4388 ;;      Temps:          0       0       0       0       0
  4389 ;;      Totals:         0       0       0       0       0
  4390 ;;Total ram usage:        0 bytes
  4391 ;; Hardware stack levels used: 1
  4392 ;; This function calls:
  4393 ;;		Nothing
  4394 ;; This function is called by:
  4395 ;;		_interruptionHandler
  4396 ;; This function uses a non-reentrant model
  4397 ;;
  4398                           
  4399     0FF9                     i1_setCounter_Timer1:	
  4400                           ;psect for function i1_setCounter_Timer1
  4401                           
  4402     0FF9                     i1l1749:	
  4403                           ;incstack = 0
  4404 ;; hardware stack exceeded
  4405                           ; Regs used in i1_setCounter_Timer1: []
  4406                           
  4407                           
  4408                           ;./config.h: 78:   TMR1H = 0xFF;
  4409     0FF9  30FF               	movlw	255
  4410     0FFA  1283               	bcf	3,5	;RP0=0, select bank0
  4411     0FFB  1303               	bcf	3,6	;RP1=0, select bank0
  4412     0FFC  008F               	movwf	15	;volatile
  4413                           
  4414                           ;./config.h: 79:   TMR1L = 0x67;
  4415     0FFD  3067               	movlw	103
  4416     0FFE  008E               	movwf	14	;volatile
  4417     0FFF                     i1l53:
  4418     0FFF  0008               	return
  4419     1000                     __end_ofi1_setCounter_Timer1:
  4420                           
  4421                           	psect	text30
  4422     027D                     __ptext30:	
  4423 ;; *************** function _runTimer *****************
  4424 ;; Defined at:
  4425 ;;		line 5 in file "virtualTimer.c"
  4426 ;; Parameters:    Size  Location     Type
  4427 ;;  timer           2    3[COMMON] PTR struct .
  4428 ;;		 -> timer_WTANK_timeout(6), timer_lcdButtons(6), 
  4429 ;; Auto vars:     Size  Location     Type
  4430 ;;		None
  4431 ;; Return value:  Size  Location     Type
  4432 ;;                  1    wreg      void 
  4433 ;; Registers used:
  4434 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4435 ;; Tracked objects:
  4436 ;;		On entry : 0/0
  4437 ;;		On exit  : 0/0
  4438 ;;		Unchanged: 0/0
  4439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4440 ;;      Params:         2       0       0       0       0
  4441 ;;      Locals:         0       0       0       0       0
  4442 ;;      Temps:          6       0       0       0       0
  4443 ;;      Totals:         8       0       0       0       0
  4444 ;;Total ram usage:        8 bytes
  4445 ;; Hardware stack levels used: 1
  4446 ;; Hardware stack levels required when called: 2
  4447 ;; This function calls:
  4448 ;;		_interrupt_checkButton
  4449 ;;		_interrupt_stopFilling
  4450 ;; This function is called by:
  4451 ;;		_interruptionHandler
  4452 ;; This function uses a non-reentrant model
  4453 ;;
  4454                           
  4455     027D                     _runTimer:	
  4456                           ;psect for function _runTimer
  4457                           
  4458     027D                     i1l1719:	
  4459                           ;incstack = 0
  4460 ;; hardware stack exceeded
  4461                           ; Regs used in _runTimer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4462                           
  4463                           
  4464                           ;virtualTimer.c: 5: void runTimer(virtualTimer *timer);virtualTimer.c: 6: {;virtualTimer
      +                          .c: 7:   if(timer->elapsedTime >= timer->targetTime)
  4465     027D  0873               	movf	runTimer@timer,w
  4466     027E  0084               	movwf	4
  4467     027F  1783               	bsf	3,7
  4468     0280  1C74               	btfss	runTimer@timer+1,0
  4469     0281  1383               	bcf	3,7
  4470     0282  0800               	movf	0,w
  4471     0283  00F5               	movwf	??_runTimer
  4472     0284  0A84               	incf	4,f
  4473     0285  0800               	movf	0,w
  4474     0286  00F6               	movwf	??_runTimer+1
  4475     0287  0873               	movf	runTimer@timer,w
  4476     0288  3E02               	addlw	2
  4477     0289  00F7               	movwf	??_runTimer+2
  4478     028A  0874               	movf	runTimer@timer+1,w
  4479     028B  1803               	skipnc
  4480     028C  3E01               	addlw	1
  4481     028D  3E00               	addlw	0
  4482     028E  00F8               	movwf	??_runTimer+3
  4483     028F  0877               	movf	??_runTimer+2,w
  4484     0290  0084               	movwf	4
  4485     0291  1783               	bsf	3,7
  4486     0292  1C78               	btfss	??_runTimer+3,0
  4487     0293  1383               	bcf	3,7
  4488     0294  0800               	movf	0,w
  4489     0295  00F9               	movwf	??_runTimer+4
  4490     0296  0A84               	incf	4,f
  4491     0297  0800               	movf	0,w
  4492     0298  00FA               	movwf	??_runTimer+5
  4493     0299  0876               	movf	??_runTimer+1,w
  4494     029A  027A               	subwf	??_runTimer+5,w
  4495     029B  1D03               	skipz
  4496     029C  2A9F               	goto	u144_25
  4497     029D  0875               	movf	??_runTimer,w
  4498     029E  0279               	subwf	??_runTimer+4,w
  4499     029F                     u144_25:
  4500     029F  1C03               	skipc
  4501     02A0  2AA2               	goto	u144_21
  4502     02A1  2AA3               	goto	u144_20
  4503     02A2                     u144_21:
  4504     02A2  2AD9               	goto	i1l1727
  4505     02A3                     u144_20:
  4506     02A3                     i1l1721:
  4507                           
  4508                           ;virtualTimer.c: 8:   {;virtualTimer.c: 9:     timer->elapsedTime = 0;
  4509     02A3  0873               	movf	runTimer@timer,w
  4510     02A4  3E02               	addlw	2
  4511     02A5  00F5               	movwf	??_runTimer
  4512     02A6  0874               	movf	runTimer@timer+1,w
  4513     02A7  1803               	skipnc
  4514     02A8  3E01               	addlw	1
  4515     02A9  3E00               	addlw	0
  4516     02AA  00F6               	movwf	??_runTimer+1
  4517     02AB  0875               	movf	??_runTimer,w
  4518     02AC  0084               	movwf	4
  4519     02AD  1783               	bsf	3,7
  4520     02AE  1C76               	btfss	??_runTimer+1,0
  4521     02AF  1383               	bcf	3,7
  4522     02B0  0180               	clrf	0
  4523     02B1  0A84               	incf	4,f
  4524     02B2  0180               	clrf	0
  4525                           
  4526                           ;virtualTimer.c: 11:     if(timer->callback != 0)
  4527     02B3  0873               	movf	runTimer@timer,w
  4528     02B4  3E05               	addlw	5
  4529     02B5  00F5               	movwf	??_runTimer
  4530     02B6  0874               	movf	runTimer@timer+1,w
  4531     02B7  1803               	skipnc
  4532     02B8  3E01               	addlw	1
  4533     02B9  3E00               	addlw	0
  4534     02BA  00F6               	movwf	??_runTimer+1
  4535     02BB  0875               	movf	??_runTimer,w
  4536     02BC  0084               	movwf	4
  4537     02BD  1783               	bsf	3,7
  4538     02BE  1C76               	btfss	??_runTimer+1,0
  4539     02BF  1383               	bcf	3,7
  4540     02C0  0800               	movf	0,w
  4541     02C1  1903               	btfsc	3,2
  4542     02C2  2AC4               	goto	u145_21
  4543     02C3  2AC5               	goto	u145_20
  4544     02C4                     u145_21:
  4545     02C4  2AEB               	goto	i1l215
  4546     02C5                     u145_20:
  4547     02C5                     i1l1723:
  4548                           
  4549                           ;virtualTimer.c: 12:       timer->callback();
  4550     02C5  0873               	movf	runTimer@timer,w
  4551     02C6  3E05               	addlw	5
  4552     02C7  00F5               	movwf	??_runTimer
  4553     02C8  0874               	movf	runTimer@timer+1,w
  4554     02C9  1803               	skipnc
  4555     02CA  3E01               	addlw	1
  4556     02CB  3E00               	addlw	0
  4557     02CC  00F6               	movwf	??_runTimer+1
  4558     02CD  0875               	movf	??_runTimer,w
  4559     02CE  0084               	movwf	4
  4560     02CF  1783               	bsf	3,7
  4561     02D0  1C76               	btfss	??_runTimer+1,0
  4562     02D1  1383               	bcf	3,7
  4563     02D2  0800               	movf	0,w
  4564     02D3  120A  118A  2056  120A  118A  	fcall	i1fptable
  4565     02D8  2AEB               	goto	i1l215
  4566     02D9                     i1l1727:
  4567                           
  4568                           ;virtualTimer.c: 16:   timer->elapsedTime++;
  4569     02D9  0873               	movf	runTimer@timer,w
  4570     02DA  3E02               	addlw	2
  4571     02DB  00F5               	movwf	??_runTimer
  4572     02DC  0874               	movf	runTimer@timer+1,w
  4573     02DD  1803               	skipnc
  4574     02DE  3E01               	addlw	1
  4575     02DF  3E00               	addlw	0
  4576     02E0  00F6               	movwf	??_runTimer+1
  4577     02E1  0875               	movf	??_runTimer,w
  4578     02E2  0084               	movwf	4
  4579     02E3  1783               	bsf	3,7
  4580     02E4  1C76               	btfss	??_runTimer+1,0
  4581     02E5  1383               	bcf	3,7
  4582     02E6  3001               	movlw	1
  4583     02E7  0780               	addwf	0,f
  4584     02E8  0A84               	incf	4,f
  4585     02E9  1803               	skipnc
  4586     02EA  0A80               	incf	0,f
  4587     02EB                     i1l215:
  4588     02EB  0008               	return
  4589     02EC                     __end_of_runTimer:
  4590                           
  4591                           	psect	text31
  4592     062C                     __ptext31:	
  4593 ;; *************** function _interrupt_checkButton *****************
  4594 ;; Defined at:
  4595 ;;		line 116 in file "./lcdFunctions.h"
  4596 ;; Parameters:    Size  Location     Type
  4597 ;;		None
  4598 ;; Auto vars:     Size  Location     Type
  4599 ;;  rightButtonS    1    2[COMMON] unsigned char 
  4600 ;;  leftButtonSt    1    1[COMMON] unsigned char 
  4601 ;; Return value:  Size  Location     Type
  4602 ;;                  1    wreg      void 
  4603 ;; Registers used:
  4604 ;;		wreg, status,2, status,0, pclath, cstack
  4605 ;; Tracked objects:
  4606 ;;		On entry : 0/0
  4607 ;;		On exit  : 0/0
  4608 ;;		Unchanged: 0/0
  4609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4610 ;;      Params:         0       0       0       0       0
  4611 ;;      Locals:         2       0       0       0       0
  4612 ;;      Temps:          1       0       0       0       0
  4613 ;;      Totals:         3       0       0       0       0
  4614 ;;Total ram usage:        3 bytes
  4615 ;; Hardware stack levels used: 1
  4616 ;; Hardware stack levels required when called: 1
  4617 ;; This function calls:
  4618 ;;		_lcd_turnLeft
  4619 ;;		_lcd_turnRight
  4620 ;; This function is called by:
  4621 ;;		_runTimer
  4622 ;; This function uses a non-reentrant model
  4623 ;;
  4624                           
  4625     062C                     _interrupt_checkButton:	
  4626                           ;psect for function _interrupt_checkButton
  4627                           
  4628     062C                     i1l1625:	
  4629                           ;incstack = 0
  4630 ;; hardware stack exceeded
  4631                           ; Regs used in _interrupt_checkButton: [wreg+status,2+status,0+pclath+cstack]
  4632                           
  4633                           
  4634                           ;./lcdFunctions.h: 118:   unsigned char leftButtonState = PORTBbits.RB1;
  4635     062C  1283               	bcf	3,5	;RP0=0, select bank0
  4636     062D  1303               	bcf	3,6	;RP1=0, select bank0
  4637     062E  0C06               	rrf	6,w	;volatile
  4638     062F  3901               	andlw	1
  4639     0630  00F1               	movwf	interrupt_checkButton@leftButtonState
  4640                           
  4641                           ;./lcdFunctions.h: 119:   unsigned char rightButtonState = PORTBbits.RB2;
  4642     0631  0C06               	rrf	6,w	;volatile
  4643     0632  00F0               	movwf	??_interrupt_checkButton
  4644     0633  0C70               	rrf	??_interrupt_checkButton,w
  4645     0634  3901               	andlw	1
  4646     0635  00F2               	movwf	interrupt_checkButton@rightButtonState
  4647     0636                     i1l1627:
  4648                           
  4649                           ;./lcdFunctions.h: 122:   if (leftButtonState != lastLeftButtonState && leftButtonState 
      +                          == 0) {
  4650     0636  0871               	movf	interrupt_checkButton@leftButtonState,w
  4651     0637  067C               	xorwf	_lastLeftButtonState,w
  4652     0638  1903               	skipnz
  4653     0639  2E3B               	goto	u130_21
  4654     063A  2E3C               	goto	u130_20
  4655     063B                     u130_21:
  4656     063B  2E46               	goto	i1l1633
  4657     063C                     u130_20:
  4658     063C                     i1l1629:
  4659     063C  0871               	movf	interrupt_checkButton@leftButtonState,w
  4660     063D  1D03               	btfss	3,2
  4661     063E  2E40               	goto	u131_21
  4662     063F  2E41               	goto	u131_20
  4663     0640                     u131_21:
  4664     0640  2E46               	goto	i1l1633
  4665     0641                     u131_20:
  4666     0641                     i1l1631:
  4667                           
  4668                           ;./lcdFunctions.h: 123:       lcd_turnLeft();
  4669     0641  120A  118A  27A0  120A  118A  	fcall	_lcd_turnLeft
  4670     0646                     i1l1633:
  4671                           
  4672                           ;./lcdFunctions.h: 127:   if (rightButtonState != lastRightButtonState && rightButtonSta
      +                          te == 0) {
  4673     0646  0872               	movf	interrupt_checkButton@rightButtonState,w
  4674     0647  067B               	xorwf	_lastRightButtonState,w
  4675     0648  1903               	skipnz
  4676     0649  2E4B               	goto	u132_21
  4677     064A  2E4C               	goto	u132_20
  4678     064B                     u132_21:
  4679     064B  2E56               	goto	i1l1639
  4680     064C                     u132_20:
  4681     064C                     i1l1635:
  4682     064C  0872               	movf	interrupt_checkButton@rightButtonState,w
  4683     064D  1D03               	btfss	3,2
  4684     064E  2E50               	goto	u133_21
  4685     064F  2E51               	goto	u133_20
  4686     0650                     u133_21:
  4687     0650  2E56               	goto	i1l1639
  4688     0651                     u133_20:
  4689     0651                     i1l1637:
  4690                           
  4691                           ;./lcdFunctions.h: 128:       lcd_turnRight();
  4692     0651  120A  118A  2792  120A  118A  	fcall	_lcd_turnRight
  4693     0656                     i1l1639:
  4694                           
  4695                           ;./lcdFunctions.h: 132:   lastLeftButtonState = leftButtonState;
  4696     0656  0871               	movf	interrupt_checkButton@leftButtonState,w
  4697     0657  00FC               	movwf	_lastLeftButtonState
  4698     0658                     i1l1641:
  4699                           
  4700                           ;./lcdFunctions.h: 133:   lastRightButtonState = rightButtonState;
  4701     0658  0872               	movf	interrupt_checkButton@rightButtonState,w
  4702     0659  00FB               	movwf	_lastRightButtonState
  4703     065A                     i1l139:
  4704     065A  0008               	return
  4705     065B                     __end_of_interrupt_checkButton:
  4706                           
  4707                           	psect	text32
  4708     0FF4                     __ptext32:	
  4709 ;; *************** function _interrupt_stopFilling *****************
  4710 ;; Defined at:
  4711 ;;		line 83 in file "waterTankManager.c"
  4712 ;; Parameters:    Size  Location     Type
  4713 ;;		None
  4714 ;; Auto vars:     Size  Location     Type
  4715 ;;		None
  4716 ;; Return value:  Size  Location     Type
  4717 ;;                  1    wreg      void 
  4718 ;; Registers used:
  4719 ;;		None
  4720 ;; Tracked objects:
  4721 ;;		On entry : 0/0
  4722 ;;		On exit  : 0/0
  4723 ;;		Unchanged: 0/0
  4724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4725 ;;      Params:         0       0       0       0       0
  4726 ;;      Locals:         0       0       0       0       0
  4727 ;;      Temps:          0       0       0       0       0
  4728 ;;      Totals:         0       0       0       0       0
  4729 ;;Total ram usage:        0 bytes
  4730 ;; Hardware stack levels used: 1
  4731 ;; This function calls:
  4732 ;;		Nothing
  4733 ;; This function is called by:
  4734 ;;		_runTimer
  4735 ;; This function uses a non-reentrant model
  4736 ;;
  4737                           
  4738     0FF4                     _interrupt_stopFilling:	
  4739                           ;psect for function _interrupt_stopFilling
  4740                           
  4741     0FF4                     i1l1675:	
  4742                           ;incstack = 0
  4743 ;; hardware stack exceeded
  4744                           ; Regs used in _interrupt_stopFilling: []
  4745                           
  4746     0FF4  3003               	movlw	3
  4747     0FF5  1283               	bcf	3,5	;RP0=0, select bank0
  4748     0FF6  1303               	bcf	3,6	;RP1=0, select bank0
  4749     0FF7  00DD               	movwf	_tankState
  4750     0FF8                     i1l208:
  4751     0FF8  0008               	return
  4752     0FF9                     __end_of_interrupt_stopFilling:
  4753                           
  4754                           	psect	text33
  4755     0792                     __ptext33:	
  4756 ;; *************** function _lcd_turnRight *****************
  4757 ;; Defined at:
  4758 ;;		line 98 in file "./lcdFunctions.h"
  4759 ;; Parameters:    Size  Location     Type
  4760 ;;		None
  4761 ;; Auto vars:     Size  Location     Type
  4762 ;;		None
  4763 ;; Return value:  Size  Location     Type
  4764 ;;                  1    wreg      void 
  4765 ;; Registers used:
  4766 ;;		wreg, status,2, status,0
  4767 ;; Tracked objects:
  4768 ;;		On entry : 0/0
  4769 ;;		On exit  : 0/0
  4770 ;;		Unchanged: 0/0
  4771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4772 ;;      Params:         0       0       0       0       0
  4773 ;;      Locals:         0       0       0       0       0
  4774 ;;      Temps:          0       0       0       0       0
  4775 ;;      Totals:         0       0       0       0       0
  4776 ;;Total ram usage:        0 bytes
  4777 ;; Hardware stack levels used: 1
  4778 ;; This function calls:
  4779 ;;		Nothing
  4780 ;; This function is called by:
  4781 ;;		_interrupt_checkButton
  4782 ;; This function uses a non-reentrant model
  4783 ;;
  4784                           
  4785     0792                     _lcd_turnRight:	
  4786                           ;psect for function _lcd_turnRight
  4787                           
  4788     0792                     i1l1601:	
  4789                           ;incstack = 0
  4790 ;; hardware stack exceeded
  4791                           ; Regs used in _lcd_turnRight: [wreg+status,2+status,0]
  4792                           
  4793                           
  4794                           ;./lcdFunctions.h: 101:   if(lcd_index >= 4)
  4795     0792  3004               	movlw	4
  4796     0793  1683               	bsf	3,5	;RP0=1, select bank1
  4797     0794  1303               	bcf	3,6	;RP1=0, select bank1
  4798     0795  0254               	subwf	_lcd_index^(0+128),w
  4799     0796  1C03               	skipc
  4800     0797  2F99               	goto	u128_21
  4801     0798  2F9A               	goto	u128_20
  4802     0799                     u128_21:
  4803     0799  2F9D               	goto	i1l1605
  4804     079A                     u128_20:
  4805     079A                     i1l1603:
  4806                           
  4807                           ;./lcdFunctions.h: 102:     lcd_index = 1;
  4808     079A  3001               	movlw	1
  4809     079B  00D4               	movwf	_lcd_index^(0+128)
  4810     079C  2F9F               	goto	i1l129
  4811     079D                     i1l1605:
  4812                           
  4813                           ;./lcdFunctions.h: 104:     lcd_index++;
  4814     079D  3001               	movlw	1
  4815     079E  07D4               	addwf	_lcd_index^(0+128),f
  4816     079F                     i1l129:
  4817     079F  0008               	return
  4818     07A0                     __end_of_lcd_turnRight:
  4819                           
  4820                           	psect	text34
  4821     07A0                     __ptext34:	
  4822 ;; *************** function _lcd_turnLeft *****************
  4823 ;; Defined at:
  4824 ;;		line 107 in file "./lcdFunctions.h"
  4825 ;; Parameters:    Size  Location     Type
  4826 ;;		None
  4827 ;; Auto vars:     Size  Location     Type
  4828 ;;		None
  4829 ;; Return value:  Size  Location     Type
  4830 ;;                  1    wreg      void 
  4831 ;; Registers used:
  4832 ;;		wreg, status,2, status,0
  4833 ;; Tracked objects:
  4834 ;;		On entry : 0/0
  4835 ;;		On exit  : 0/0
  4836 ;;		Unchanged: 0/0
  4837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4838 ;;      Params:         0       0       0       0       0
  4839 ;;      Locals:         0       0       0       0       0
  4840 ;;      Temps:          0       0       0       0       0
  4841 ;;      Totals:         0       0       0       0       0
  4842 ;;Total ram usage:        0 bytes
  4843 ;; Hardware stack levels used: 1
  4844 ;; This function calls:
  4845 ;;		Nothing
  4846 ;; This function is called by:
  4847 ;;		_interrupt_checkButton
  4848 ;; This function uses a non-reentrant model
  4849 ;;
  4850                           
  4851     07A0                     _lcd_turnLeft:	
  4852                           ;psect for function _lcd_turnLeft
  4853                           
  4854     07A0                     i1l1607:	
  4855                           ;incstack = 0
  4856 ;; hardware stack exceeded
  4857                           ; Regs used in _lcd_turnLeft: [wreg+status,2+status,0]
  4858                           
  4859                           
  4860                           ;./lcdFunctions.h: 110:   if(lcd_index <= 1)
  4861     07A0  3002               	movlw	2
  4862     07A1  1683               	bsf	3,5	;RP0=1, select bank1
  4863     07A2  1303               	bcf	3,6	;RP1=0, select bank1
  4864     07A3  0254               	subwf	_lcd_index^(0+128),w
  4865     07A4  1803               	skipnc
  4866     07A5  2FA7               	goto	u129_21
  4867     07A6  2FA8               	goto	u129_20
  4868     07A7                     u129_21:
  4869     07A7  2FAB               	goto	i1l1611
  4870     07A8                     u129_20:
  4871     07A8                     i1l1609:
  4872                           
  4873                           ;./lcdFunctions.h: 111:     lcd_index = 4;
  4874     07A8  3004               	movlw	4
  4875     07A9  00D4               	movwf	_lcd_index^(0+128)
  4876     07AA  2FAD               	goto	i1l134
  4877     07AB                     i1l1611:
  4878                           
  4879                           ;./lcdFunctions.h: 113:     lcd_index--;
  4880     07AB  3001               	movlw	1
  4881     07AC  02D4               	subwf	_lcd_index^(0+128),f
  4882     07AD                     i1l134:
  4883     07AD  0008               	return
  4884     07AE                     __end_of_lcd_turnLeft:
  4885     0002                     ___latbits      equ	2
  4886     0000                     fptotal         equ	0
  4887     0004                     i1fptotal       equ	4
  4888                           
  4889                           	psect	functab
  4890     0055                     __pfunctab:
  4891     0000                     fpbase          equ	0
  4892     0055                     fptable:
  4893     0055  2855               	goto	fptable	;no entries
  4894     0056                     __i1fptable:
  4895     0056                     i1fptable:
  4896     0056  00FF               	movwf	(btemp+1)& (0+127)
  4897     0057  3000               	movlw	high i1fptable
  4898     0058  008A               	movwf	10
  4899     0059  087F               	movf	(btemp+1)& (0+127),w
  4900     005A  0782               	addwf	2,f
  4901     005B                     i1fpbase:
  4902     005B  285B               	goto	i1fpbase	; Call via a null pointer and you will get stuck here.
  4903     005C                     fp__interrupt_stopFilling:
  4904     005C  120A  158A  2FF4   	ljmp	_interrupt_stopFilling
  4905     005F                     fp__interrupt_checkButton:
  4906     005F  120A  118A  2E2C   	ljmp	_interrupt_checkButton
  4907     0062                     __end_of__i1fptable:
  4908     000C                     __size_of__i1fptable equ	__end_of__i1fptable-__i1fptable
  4909     007E                     btemp           set	126	;btemp
  4910     007E                     wtemp0          set	126
  4911                           
  4912                           	psect	config
  4913                           
  4914                           ;Config register CONFIG @ 0x2007
  4915                           ;	Oscillator Selection bits
  4916                           ;	FOSC = HS, HS oscillator
  4917                           ;	Watchdog Timer Enable bit
  4918                           ;	WDTE = ON, WDT enabled
  4919                           ;	Power-up Timer Enable bit
  4920                           ;	PWRTE = ON, PWRT enabled
  4921                           ;	Brown-out Reset Enable bit
  4922                           ;	BOREN = ON, BOR enabled
  4923                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  4924                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  4925                           ;	Data EEPROM Memory Code Protection bit
  4926                           ;	CPD = OFF, Data EEPROM code protection off
  4927                           ;	Flash Program Memory Write Enable bits
  4928                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  4929                           ;	In-Circuit Debugger Mode bit
  4930                           ;	DEBUG = 0x1, unprogrammed default
  4931                           ;	Flash Program Memory Code Protection bit
  4932                           ;	CP = OFF, Code protection off
  4933     2007                     	org	8199
  4934     2007  3F76               	dw	16246

Data Sizes:
    Strings     40
    Constant    0
    Data        21
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     57      75
    BANK1            80     20      59
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(2) Largest target is 20
		 -> print_Index@buffer(BANK1[20]), print_TankState@buffer(BANK0[20]), 

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 20
		 -> print_Index@buffer(BANK1[20]), print_TankState@buffer(BANK0[20]), 

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> print_Index@buffer(BANK1[20]), print_TankState@buffer(BANK0[20]), STR_5(CODE[12]), 

    runTimer@timer	PTR struct . size(2) Largest target is 6
		 -> timer_lcdButtons(BANK1[6]), timer_WTANK_timeout(BANK0[6]), 

    runTimer@timer$callback	PTR FTN()void  size(1) Largest target is 1
		 -> interrupt_checkButton(), interrupt_stopFilling(), 

    S188$callback	PTR FTN()void  size(1) Largest target is 1
		 -> interrupt_checkButton(), interrupt_stopFilling(), 

    S912$buffer	PTR unsigned char  size(2) Largest target is 20
		 -> print_Index@buffer(BANK1[20]), print_TankState@buffer(BANK0[20]), 

    S912$source	PTR const unsigned char  size(1) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_6(CODE[3]), STR_7(CODE[3]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 20
		 -> print_Index@buffer(BANK1[20]), print_TankState@buffer(BANK0[20]), 

    startTimer@timer	PTR struct . size(2) Largest target is 6
		 -> timer_WTANK_timeout(BANK0[6]), 

    startTimer@timer$callback	PTR FTN()void  size(1) Largest target is 1
		 -> interrupt_checkButton(), interrupt_stopFilling(), 

    stopTimer@timer	PTR struct . size(2) Largest target is 6
		 -> timer_WTANK_timeout(BANK0[6]), 

    stopTimer@timer$callback	PTR FTN()void  size(1) Largest target is 1
		 -> interrupt_checkButton(), interrupt_stopFilling(), 

    TankStateString	PTR const unsigned char [4] size(1) Largest target is 6
		 -> STR_1(CODE[6]), STR_2(CODE[5]), STR_3(CODE[6]), STR_4(CODE[5]), 

    timer_lcdButtons$callback	PTR FTN()void  size(1) Largest target is 1
		 -> interrupt_checkButton(), interrupt_stopFilling(), 

    timer_WTANK_timeout$callback	PTR FTN()void  size(1) Largest target is 1
		 -> interrupt_checkButton(), interrupt_stopFilling(), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 3
		 -> STR_6(CODE[3]), STR_7(CODE[3]), 

    vfpfcnvrt@cp_994	PTR unsigned char  size(2) Largest target is 6
		 -> ?_sprintf(BANK0[2]), STR_1(CODE[6]), STR_2(CODE[5]), STR_3(CODE[6]), 
		 -> STR_4(CODE[5]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 3
		 -> STR_6(CODE[3]), STR_7(CODE[3]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_6(CODE[3]), STR_7(CODE[3]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _interruptionHandler in COMMON

    _interruptionHandler->_runTimer
    _runTimer->_interrupt_checkButton

Critical Paths under _main in BANK0

    _main->_print_Index
    _stopFilling->_stopTimer
    _startFilling->_startTimer
    _lcd_run->_print_Index
    _print_Index->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_fputc
    _abs->___awmod
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _interruptionHandler in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_print_Index
    _lcd_run->_print_Index

Critical Paths under _interruptionHandler in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptionHandler in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptionHandler in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6557
                           _Lcd_Init
                  _interruption_init
                            _lcd_run
                          _pins_init
                        _print_Index
                 _run_waterTankLogic
                    _timer1_1ms_init
 ---------------------------------------------------------------------------------
 (1) _timer1_1ms_init                                      0     0      0       0
                  _setCounter_Timer1
 ---------------------------------------------------------------------------------
 (2) _setCounter_Timer1                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _run_waterTankLogic                                   2     2      0     268
                                              8 BANK0      2     2      0
                   _check_TankStatus
                       _startFilling
                        _stopFilling
 ---------------------------------------------------------------------------------
 (2) _stopFilling                                          0     0      0      45
                          _stopTimer
 ---------------------------------------------------------------------------------
 (3) _stopTimer                                            4     2      2      45
                                              4 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _startFilling                                         0     0      0      45
                         _startTimer
 ---------------------------------------------------------------------------------
 (3) _startTimer                                           4     2      2      45
                                              4 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _check_TankStatus                                     3     3      0     178
                                              4 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _pins_init                                            4     1      3      98
                                              4 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _lcd_run                                              0     0      0    2965
                        _print_Index
 ---------------------------------------------------------------------------------
 (1) _print_Index                                         22    22      0    2965
                                             55 BANK0      2     2      0
                                              0 BANK1     20    20      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             19    15      4    2021
                                             38 BANK0     17    13      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (3) _vfprintf                                             5     1      4    1816
                                             33 BANK0      5     1      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (4) _vfpfcnvrt                                           16    11      5    1683
                                             17 BANK0     16    11      5
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (5) _fputc                                               13     9      4     232
                                              4 BANK0     13     9      4
                              _putch
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2      67
                                             10 BANK0      4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     298
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     302
                                              4 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     7     5      2     315
                                              9 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     222
                                              5 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       6     5      1     434
                                              8 BANK0      6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     145
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _interruption_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     261
                                              8 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     145
                                              5 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0     116
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interruptionHandler                                  4     4      0     268
                                              0 BANK0      4     4      0
                           _runTimer
                i1_setCounter_Timer1
 ---------------------------------------------------------------------------------
 (9) i1_setCounter_Timer1                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _runTimer                                             8     6      2     268
                                              3 COMMON     8     6      2
              _interrupt_checkButton *
              _interrupt_stopFilling *
 ---------------------------------------------------------------------------------
 (10) _interrupt_stopFilling                               0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _interrupt_checkButton                               3     3      0     134
                                              0 COMMON     3     3      0
                       _lcd_turnLeft
                      _lcd_turnRight
 ---------------------------------------------------------------------------------
 (11) _lcd_turnRight                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _lcd_turnLeft                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _interruption_init
   _lcd_run
     _print_Index
       _Lcd_Clear
         _Lcd_Cmd
       _Lcd_Set_Cursor
         _Lcd_Cmd
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _sprintf
         _vfprintf
           _vfpfcnvrt
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _fputc
               _putch
   _pins_init
   _print_Index
   _run_waterTankLogic
     _check_TankStatus
     _startFilling
       _startTimer
     _stopFilling
       _stopTimer
   _timer1_1ms_init
     _setCounter_Timer1

 _interruptionHandler (ROOT)
   _runTimer
     _interrupt_checkButton *
       _lcd_turnLeft
       _lcd_turnRight
     _interrupt_stopFilling *
   i1_setCounter_Timer1

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80     20      59     73.8%
BITBANK1            80      0       0      0.0%
BANK0               80     57      75     93.8%
BITBANK0            80      0       0      0.0%
COMMON              14     11      14    100.0%
BITCOMMON           14      0       0      0.0%
DATA                 0      0     148      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Sun Dec 08 22:45:37 2024

                                    pc 0002                                     l53 07FD  
                                   l70 071F                                     l62 07EF  
                                   l71 0725                                     l56 0791  
                                   l73 0726                                     l65 0710  
                                   l66 0711                                     l67 0717  
                                   l91 055D                                     l59 075D  
                                   l68 0718                                     l76 0742  
                                   l69 071E                                     l85 045A  
                                   l79 07D4                                     l88 03B3  
                                   l97 04A0                           ___awdiv@sign 0029  
                                   fsr 0004                                    l113 05FA  
                                  l202 07C7                                    l117 0706  
                                  l221 06E5                                    l205 07BA  
                                  l218 06C4                                    l154 05BB  
                                  l180 04BC                                    l185 04E5  
                                  l460 0350                                    l189 04E5  
                                  l199 0522                                    l473 040C  
                                  l821 067F                                    l840 027C  
                                  l808 01DC                                    l770 06A2  
                                  l851 07FE                                    l828 0783  
                                  _RD2 0042                                    _RD3 0043  
                                  _RD4 0044                                    _RD5 0045  
                                  _RD6 0046                                    _RD7 0047  
                                  u800 032E                                    u801 032D  
                                  u820 0342                                    u740 02F3  
                                  u821 0341                                    u805 032A  
                                  u741 02F2                                    u830 0347  
                                  u750 02FE                                    u910 03FE  
                                  u831 0346                                    u815 0336  
                                  u751 02FD                                    u911 03FD  
                                  u760 030D                                    u920 0403  
                                  u840 03BB                                    u761 030C  
                                  u921 0402                                    u905 03F2  
                                  u841 03BA                                    u850 03C6  
                                  u930 01E5                                    u851 03C5  
                                  u931 01E4                                    u780 031D  
                                  u860 03D1                                    u940 01EB  
                                  u781 031C                                    u861 03D0  
                                  u941 01EA                                    u950 020A  
                                  u775 0311                                    u951 0209  
                                  u880 03E1                                    u960 023C  
                                  u881 03E0                                    u961 023B  
                                  u890 03EB                                    u970 025F  
                                  u795 031E                                    u891 03EA  
                                  u875 03D5                                    u980 0777  
                                  u981 0776                                    u965 0238  
                                  u990 070E                                    u991 070D  
                                  u895 03E7                           _startFilling 07BB  
                                  _abs 0771          __end_of_interrupt_stopFilling 0FF9  
                    print_Index@buffer 00C0                          ?_lcd_turnLeft 0070  
                                  fsr0 0004                                    indf 0000  
                         ___awmod@sign 0029                            _stopFilling 07AE  
                                 ?_abs 002A                                   l1321 02F8  
                                 l1401 01EB                                   l1331 0307  
                                 l1323 02FA                                   l1315 02EC  
                                 l1411 0771                                   l1403 01F2  
                                 l1421 070E                                   l1341 031D  
                                 l1333 030D                                   l1325 02FE  
                                 l1317 02EF                                   l1413 0777  
                                 l1405 020A                                   l1423 0715  
                                 l1511 072B                                   l1343 032E  
                                 l1335 0310                                   l1351 0342  
                                 l1327 0303                                   l1319 02F3  
                                 l1415 0778                                   l1407 023C  
                                 l1431 0073                                   l1503 01C3  
                                 l1425 071C                                   l1513 0731  
                                 l1521 0528                                   l1353 0347  
                                 l1345 0334                                   l1337 0317  
                                 l1329 0305                                   l1361 03B7  
                                 l1441 008F                                   l1433 0077  
                                 l1427 0723                                   l1419 070A  
                                 l1515 0734                                   l1531 0540  
                                 l1523 052A                                   l1355 034C  
                                 l1347 0335                                   l1339 0319  
                                 l1371 03CB                                   l1363 03BB  
                                 l1451 00BA                                   l1443 009B  
                                 l1435 007B                                   l1517 073F  
                                 l1509 072A                                   l1541 055A  
                                 l1533 0547                                   l1525 052E  
                                 l1349 033C                                   l1381 03E1  
                                 l1373 03D1                                   l1365 03C0  
                                 l1461 0100                                   l1453 00DD  
                                 l1445 00AC                                   l1437 007F  
                                 l1429 0062                                   l1621 05D9  
                                 l1613 06A3                                   l1535 054A  
                                 l1527 052F                                   l1519 0526  
                                 l1391 0403                                   l1383 03EB  
                                 l1375 03D4                                   l1367 03C2  
                                 l1359 03B4                                   l1463 0105  
                                 l1455 00F0                                   l1447 00B1  
                                 l1471 012D                                   l1439 0083  
                                 l1543 065B                                   l1623 05EF  
                                 l1703 06EF                                   l1615 06C5  
                                 l1553 07C8                                   l1561 0424  
                                 l1537 0550                                   l1529 053D  
                                 l1393 0408                                   l1385 03F1  
                                 l1377 03DB                                   l1369 03C6  
                                 l1481 0151                                   l1473 012E  
                                 l1465 010E                                   l1457 00F6  
                                 l1449 00B3                                   l1545 0660  
                                 l1705 06F2                                   l1617 07F7  
                                 l1571 0448                                   l1563 0426  
                                 l1555 0410                                   l1539 0553  
                                 l1387 03F8                                   l1379 03DD  
                                 l1491 0179                                   l1483 0160  
                                 l1475 013C                                   l1467 0122  
                                 l1459 00FB                                   l1547 066F  
                                 l1619 05CA                                   l1651 04C4  
                                 l1643 04A1                                   l1731 04EC  
                                 l1573 044A                                   l1565 042C  
                                 l1557 0415                                   l1581 0460  
                                 l1389 03FE                                   l1397 01DD  
                                 l1493 018C                                   l1485 016F  
                                 l1477 0140                                   l1469 0126  
                                 l1549 067D                                   l1717 06F8  
                                 l1661 04D8                                   l1653 04C9  
                                 l1645 04B1                                   l1805 0514  
                                 l1741 0506                                   l1733 04F1  
                                 l1575 044C                                   l1559 0422  
                                 l1567 0435                                   l1583 047C  
                                 l1399 01E5                                   l1495 01A4  
                                 l1479 0143                                   l1591 0688  
                                 l1663 04DD                                   l1655 04CC  
                                 l1647 04B6                                   l1671 07BB  
                                 l1735 04F5                                   l1743 050A  
                                 l1577 0452                                   l1569 043B  
                                 l1585 0484                                   l1497 01AC  
                                 l1489 0174                                   l1593 068A  
                                 l1665 04E2                                   l1657 04D1  
                                 l1649 04BF                                   l1673 07BE  
                                 l1737 04FB                                   l1729 04E6  
                                 l1681 078E                                   l1691 0357  
                                 l1579 045B                                   l1499 01BB  
                                 l1595 068C                                   l1587 0680  
                                 l1683 0746                                   l1659 04D6  
                                 l1667 07AE                                   l1739 0501  
                                 l1771 0596                                   l1693 0362  
                                 l1597 0699                                   l1589 0684  
                                 l1685 075C                                   l1669 07B1  
                                 l1677 0784                                   l1781 05BC  
                                 l1773 059D                                   l1695 0373  
                                 l1687 07E8                                   l1679 0789  
                                 l1783 05C1                                   l1775 05A7  
                                 l1697 0379                                   l1689 0351  
                                 l1777 05AC                                   l1699 06E6  
                                 l1779 05B6                                   STR_1 057A  
                                 STR_2 0586                                   STR_3 0580  
                                 STR_4 058B                                   STR_5 056E  
                                 STR_6 0593                                   STR_7 0590  
                                 u1000 0715                                   u1001 0714  
                                 u1010 071C                                   u1011 071B  
                                 u1020 0723                                   u1100 0100  
                                 u1021 0722                                   u1101 00FF  
                                 u1110 0105                                   u1030 0073  
                                 u1111 0104                                   u1031 0072  
                                 u1120 012C                                   u1040 008F  
                                 u1200 067D                                   u1121 012B  
                                 u1041 008E                                   u1201 067C  
                                 u1210 0415                                   u1130 013C  
                                 u1050 009B                                   u1211 0414  
                                 u1131 013B                                   u1051 009A  
                                 u1140 0151                                   u1060 00B8  
                                 u1141 0150                                   u1061 00B6  
                                 u1230 043B                                   u1150 0160  
                                 u1070 00B9                                   u1231 043A  
                                 u1151 015F                                   u1160 016F  
                                 u1080 00F6                                   u1400 04D6  
                                 u1225 041B                                   u1161 016E  
                                 u1081 00F5                                   u1401 04D5  
                                 u1250 046A                                   u1170 0179  
                                 u1090 00FB                                   u1410 04DD  
                                 u1171 0178                                   u1091 00FA  
                                 u1411 04DC                                   u1260 048E  
                                 u1180 01BA                                   u1420 04E2  
                                 u1340 04B1                                   u1245 0441  
                                 u1181 01B9                                   u1421 04E1  
                                 u1341 04B0                                   u1270 04A0  
                                 u1430 06EE                                   u1350 04B6  
                                 u1271 049F                                   u1431 06ED  
                                 u1351 04B5                                   u1360 04BC  
                                 u1361 04BB                                   u1370 04C4  
                                 u1507 035D                                   u1195 0532  
                                 u1371 04C3                                   u1380 04C9  
                                 u1517 036E                                   u1381 04C8  
                                 u1390 04D1                                   u1527 037F  
                                 u1391 04D0                                   u1537 073A  
                                 u1487 0544                                   u1497 0557  
                                 i1l53 0FFF                                   abs@a 002A  
                    ?_Lcd_Write_String 0029                                   _dbuf 00A0  
                                 _main 0596                                   _prec 0066  
                                 btemp 007E                         ?_lcd_turnRight 0070  
                                 start 0012                     ??_Lcd_Write_String 002B  
                      __end_of_Lcd_Cmd 0743                                  ??_abs 002C  
               ?_interrupt_checkButton 0070                                  ?_main 0070  
                      __end_of___awdiv 0351                        __end_of___awmod 040D  
                      ___awdiv@divisor 0024                         ??_lcd_turnLeft 0070  
                                i1l134 07AD                                  i1l215 02EB  
                                i1l208 0FF8                                  i1l129 079F  
                                i1l146 0603                                  i1l139 065A  
                                i1l149 061F                        ___awdiv@counter 0028  
                         vfpfcnvrt@fmt 0033                                  _TMR1H 000F  
                                _TMR1L 000E                __end_of_timer1_1ms_init 0792  
                                _TRISA 0085                                  _TRISB 0086  
                                _TRISC 0087                                  _TRISD 0088  
 interrupt_checkButton@leftButtonState 0071                        __end_of_lcd_run 0707  
                                _flags 006A                                  _fputc 01DD  
                                _width 0064                                  _putch 07FE  
                                fpbase 0000                                  pclath 000A  
                                status 0003                                  wtemp0 007E  
                      __end_of_sprintf 06A3               __end_of_check_TankStatus 04E6  
                     __end_of_Lcd_Init 03B4                       __end_of_Lcd_Port 0727  
                  _lastLeftButtonState 007C                        __initialization 0015  
                         __end_of_main 05CA                                 ??_main 0059  
                               ?_fputc 0024                       ___awdiv@dividend 0026  
             fp__interrupt_stopFilling 005C                                 ?_putch 0070  
                               i1l1601 0792                                 i1l1611 07AB  
                               i1l1603 079A                                 i1l1605 079D  
                               i1l1607 07A0                                 i1l1631 0641  
                               i1l1609 07A8                                 i1l1641 0658  
                               i1l1633 0646                                 i1l1625 062C  
                               i1l1721 02A3                                 i1l1635 064C  
                               i1l1627 0636                                 i1l1723 02C5  
                               i1l1637 0651                                 i1l1629 063C  
                               i1l1639 0656                                 i1l1727 02D9  
                               i1l1719 027D                                 u130_20 063C  
                               u130_21 063B                                 i1l1761 05FF  
                               i1l1675 0FF4                                 i1l1763 0607  
                               i1l1749 0FF9                                 i1l1765 0608  
                               i1l1767 060D                                 i1l1759 05FB  
                               u131_20 0641                                 u131_21 0640  
                               i1l1769 0616                                 u132_20 064C  
                               u132_21 064B                                 u133_20 0651  
                               u133_21 0650                                 u128_20 079A  
                               u144_20 02A3                                 u128_21 0799  
                               u144_21 02A2                                 u144_25 029F  
                               u129_20 07A8                                 u145_20 02C5  
                               u129_21 07A7                                 u145_21 02C4  
                               u146_20 05FF                                 u146_21 05FE  
                               u147_20 0607                                 u147_21 0606  
                      ??_lcd_turnRight 0070                    i1_setCounter_Timer1 0FF9  
                            ??_Lcd_Cmd 0025                          vfpfcnvrt@done 003A  
                           __i1fptable 0056                           vfprintf@cfmt 0045  
                            ??___awdiv 0028                              ??___awmod 0028  
                 ?i1_setCounter_Timer1 0070                       ___awdiv@quotient 002A  
                      ___awmod@divisor 0024                        ___awmod@counter 0028  
                            ??_lcd_run 0059                                 fptable 0055  
                               fputc@c 0024                           __pdataCOMMON 007B  
                               fptotal 0000                       ?_timer1_1ms_init 0070  
                               saved_w 007E                       __end_of_runTimer 02EC  
                               putch@c 0070                       __end_of_vfprintf 0680  
                            ??_sprintf 004A                           ?_print_Index 0070  
                      Lcd_Set_Cursor@a 002A                        Lcd_Set_Cursor@b 0028  
                      Lcd_Set_Cursor@y 002C                        Lcd_Set_Cursor@z 002B  
              __end_of__initialization 0051                      __end_of_Lcd_Clear 07D5  
                 __end_of_lcd_turnLeft 07AE                         __pcstackCOMMON 0070  
                         __pidataBANK0 07D5                           __pidataBANK1 07F0  
          __end_of_interruptionHandler 062C                          __end_of_fputc 027D  
                ??i1_setCounter_Timer1 0070                          __end_of_putch 07FF  
                        runTimer@timer 0073                         _Lcd_Set_Cursor 040D  
interrupt_checkButton@rightButtonState 0072                         _OPTION_REGbits 0081  
                            ?_Lcd_Init 0070                           ?_stopFilling 0070  
                            ?_Lcd_Port 0070                                ??_fputc 0028  
                              ??_putch 0024                             __pbssBANK0 0064  
                           __pbssBANK1 00A0                    _timer_WTANK_timeout 005E  
              ??_interrupt_checkButton 0070                             __pmaintext 0596  
                           __pintentry 0004                 __end_of_Lcd_Set_Cursor 045B  
                       stopTimer@timer 0024                  _interrupt_stopFilling 0FF4  
                           ??_Lcd_Init 0028                             ??_Lcd_Port 0024  
                           __stringtab 055E                         _Lcd_Write_Char 0523  
                              i1fpbase 005B                                _Lcd_Cmd 0727  
                    ?_check_TankStatus 0070                                ___awdiv 02EC  
                   ??_check_TankStatus 0024                                ___awmod 03B4  
                            ?_runTimer 0073                              ?_vfprintf 0041  
                      ?_Lcd_Set_Cursor 0028                                __ptext1 0784  
                              __ptext2 07F7                                __ptext3 04E6  
                              __ptext4 07AE                                __ptext5 06C5  
                              __ptext6 07BB                                __ptext7 06A3  
                              __ptext8 04A1                                __ptext9 0743  
                              _lcd_run 06E6                    __size_of__i1fptable 000C  
                            _T1CONbits 0010                       ___awmod@dividend 0026  
                              _sprintf 0680                                clrloop0 07E1  
               __end_of_Lcd_Write_Char 055E                   end_of_initialization 0051  
                              fputc@fp 0026                      __end_of_pins_init 075E  
                    __end_of_vfpfcnvrt 01DD                       vfpfcnvrt@convarg 003C  
                            Lcd_Port@a 0024                             ??_runTimer 0075  
                           ??_vfprintf 0045                      __end_of_stopTimer 06E6  
                            _PORTAbits 0005                              _PORTBbits 0006  
                            _PORTCbits 0007                           _lcd_turnLeft 07A0  
               ?_interrupt_stopFilling 0070                        ?_Lcd_Write_Char 0070  
                           _startTimer 06A3                      Lcd_Write_String@a 0029  
                    Lcd_Write_String@i 002E                  __end_of_lcd_turnRight 07A0  
           __end_of_run_waterTankLogic 0523                              _Lcd_Clear 07C8  
                          vfpfcnvrt@ap 0034                            vfpfcnvrt@cp 003B  
                          vfpfcnvrt@fp 0031                       _Lcd_Write_String 045B  
                        __pidataCOMMON 0FF1                          ?_startFilling 0070  
                  start_initialization 0015                        pins_init@_TRISA 0027  
                      pins_init@_TRISB 0024                        pins_init@_TRISC 0025  
                      pins_init@_TRISD 0026                            __end_of_abs 0784  
          __end_ofi1_setCounter_Timer1 1000                            vfprintf@fmt 0043  
                  check_TankStatus@bot 0026                             ?_Lcd_Clear 0070  
                  check_TankStatus@top 0025          __end_of_interrupt_checkButton 065B  
                           init_fetch0 075E                            __pdataBANK0 0059  
                          __pdataBANK1 00D4                        Lcd_Write_Char@a 0028  
                      Lcd_Write_Char@y 0027                         ??_startFilling 0028  
                   __end_of__i1fptable 0062                              ___latbits 0002  
                        __pcstackBANK0 0020                          __pcstackBANK1 00C0  
                          ?_startTimer 0024                               ?_Lcd_Cmd 0070  
                     ??_Lcd_Set_Cursor 0029                              __pfunctab 0055  
                      _TankStateString 0059                               ?___awdiv 0024  
                             ?___awmod 0024                              _lcd_index 00D4  
                            __pstrings 055E                               ?_lcd_run 0070  
                      startTimer@timer 0024                               ?_sprintf 0046  
                    interrupt_function 0004                      _interruption_init 07E8  
                            _tankState 005D                              clear_ram0 07E0  
                             _PIE1bits 008C                        vfpfcnvrt@cp_994 0038  
                   ?_interruption_init 0070                              _pins_init 0743  
                             Lcd_Cmd@a 0027                      ??_timer1_1ms_init 0024  
                             _PIR1bits 000C                            ??_Lcd_Clear 0028  
                  ??_interruption_init 0024                              _vfpfcnvrt 0062  
              ??_interrupt_stopFilling 0070                            __stringbase 056D  
             fp__interrupt_checkButton 005F                       ??_Lcd_Write_Char 0025  
                            _stopTimer 06C5                               _Lcd_Init 0351  
                             _Lcd_Port 0707                          ??_print_Index 0057  
                             i1fptable 0056                             vfpfcnvrt@c 0040  
                             i1fptotal 0004                   _lastRightButtonState 007B  
            __end_of_interruption_init 07F0               __end_of_Lcd_Write_String 04A1  
                 __end_of_startFilling 07C8                             ?_pins_init 0024  
                           vfprintf@ap 0044                             vfprintf@fp 0041  
                           ?_vfpfcnvrt 0031                      _setCounter_Timer1 07F7  
                   __end_of__stringtab 056E                     _run_waterTankLogic 04E6  
                   ?_setCounter_Timer1 0070                             sprintf@fmt 0047  
                           ?_stopTimer 0024                          ??_stopFilling 0028  
                             __ptext10 06E6                               __ptext11 05CA  
                             __ptext20 045B                               __ptext12 0680  
                             __ptext21 0523                               __ptext13 065B  
                             __ptext30 027D                               __ptext22 040D  
                             __ptext14 0062                               __ptext31 062C  
                             __ptext23 07C8                               __ptext15 01DD  
                             __ptext32 0FF4                               __ptext24 07E8  
                             __ptext16 07FE                               __ptext33 0792  
                             __ptext25 0351                               __ptext17 0771  
                             __ptext34 07A0                               __ptext26 0727  
                             __ptext18 03B4                               __ptext27 0707  
                             __ptext19 02EC                    ?_run_waterTankLogic 0070  
                             __ptext28 05FB                               __ptext29 0FF9  
                  ??_setCounter_Timer1 0024                    __end_of_print_Index 05FB  
                  _interruptionHandler 05FB                   ??_run_waterTankLogic 0028  
            __end_of_setCounter_Timer1 07FE                               _runTimer 027D  
                             _vfprintf 065B                   ?_interruptionHandler 0070  
                           _INTCONbits 000B                       _check_TankStatus 04A1  
                             init_ram0 0762                           ??_startTimer 0026  
                   Lcd_Write_Char@temp 0026                               intlevel1 0055  
                            sprintf@ap 004B                           _timerCounter 0068  
                        _lcd_lastIndex 007D                    __end_of_stopFilling 07BB  
                            stringcode 0568                            ??_pins_init 0027  
                          ??_vfpfcnvrt 0036                     Lcd_Set_Cursor@temp 002D  
                _interrupt_checkButton 062C                     __end_of_startTimer 06C5  
                ??_interruptionHandler 0020                               sprintf@f 004C  
                             sprintf@s 0046                            ??_stopTimer 0026  
                             stringdir 0568                               stringtab 055E  
                          _print_Index 05CA                        _timer1_1ms_init 0784  
                        _lcd_turnRight 0792                       _timer_lcdButtons 00D5  
