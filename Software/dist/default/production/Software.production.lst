

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Thu Dec 12 11:41:35 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     6                           	psect	idataBANK1,global,class=CODE,space=0,delta=2,noexec
     7                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     8                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1,noexec
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	inittext,global,class=CODE,space=0,delta=2
    16                           	psect	clrtext,global,class=CODE,space=0,delta=2
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    20                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2,group=2
    38                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2,group=2
    39                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,space=0,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,space=0,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,space=0,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,space=0,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,space=0,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,space=0,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,space=0,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,space=0,merge=1,delta=2,group=3
    48                           	psect	text29,local,class=CODE,space=0,merge=1,delta=2,group=1
    49                           	psect	text30,local,class=CODE,space=0,merge=1,delta=2,group=1
    50                           	psect	text31,local,class=CODE,space=0,merge=1,delta=2,group=3
    51                           	psect	text32,local,class=CODE,space=0,merge=1,delta=2,group=3
    52                           	psect	text33,local,class=CODE,space=0,merge=1,delta=2,group=3
    53                           	psect	text34,local,class=CODE,space=0,merge=1,delta=2,group=2
    54                           	psect	text35,local,class=CODE,space=0,merge=1,delta=2,group=2
    55                           	psect	text36,local,class=CODE,space=0,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,space=0,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,space=0,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,space=0,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,space=0,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,space=0,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,space=0,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,space=0,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,space=0,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,space=0,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,space=0,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,space=0,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,space=0,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,space=0,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,space=0,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,space=0,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,space=0,merge=1,delta=2
    72                           	psect	intentry,global,class=CODE,space=0,delta=2
    73                           	psect	functab,global,class=ENTRY,space=0,delta=2
    74                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    75                           	dabs	1,0x7E,2
    76     0000                     
    77                           ; Generated 12/10/2023 GMT
    78                           ; 
    79                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    80                           ; All rights reserved.
    81                           ; 
    82                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    83                           ; 
    84                           ; Redistribution and use in source and binary forms, with or without modification, are
    85                           ; permitted provided that the following conditions are met:
    86                           ; 
    87                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    88                           ;        conditions and the following disclaimer.
    89                           ; 
    90                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    91                           ;        of conditions and the following disclaimer in the documentation and/or other
    92                           ;        materials provided with the distribution. Publication is not required when
    93                           ;        this file is used in an embedded application.
    94                           ; 
    95                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    96                           ;        software without specific prior written permission.
    97                           ; 
    98                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    99                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   100                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   101                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   102                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   103                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   104                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   105                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   106                           ; 
   107                           ; 
   108                           ; Code-generator required, PIC16F877A Definitions
   109                           ; 
   110                           ; SFR Addresses
   111     0004                     fsr             equ	4
   112     0004                     fsr0            equ	4
   113     0000                     indf            equ	0
   114     0000                     indf0           equ	0
   115     0002                     pc              equ	2
   116     0002                     pcl             equ	2
   117     000A                     pclath          equ	10
   118     0003                     status          equ	3
   119     0000                     INDF            equ	0	;# 
   120     0001                     TMR0            equ	1	;# 
   121     0002                     PCL             equ	2	;# 
   122     0003                     STATUS          equ	3	;# 
   123     0004                     FSR             equ	4	;# 
   124     0005                     PORTA           equ	5	;# 
   125     0006                     PORTB           equ	6	;# 
   126     0007                     PORTC           equ	7	;# 
   127     0008                     PORTD           equ	8	;# 
   128     0009                     PORTE           equ	9	;# 
   129     000A                     PCLATH          equ	10	;# 
   130     000B                     INTCON          equ	11	;# 
   131     000C                     PIR1            equ	12	;# 
   132     000D                     PIR2            equ	13	;# 
   133     000E                     TMR1            equ	14	;# 
   134     000E                     TMR1L           equ	14	;# 
   135     000F                     TMR1H           equ	15	;# 
   136     0010                     T1CON           equ	16	;# 
   137     0011                     TMR2            equ	17	;# 
   138     0012                     T2CON           equ	18	;# 
   139     0013                     SSPBUF          equ	19	;# 
   140     0014                     SSPCON          equ	20	;# 
   141     0015                     CCPR1           equ	21	;# 
   142     0015                     CCPR1L          equ	21	;# 
   143     0016                     CCPR1H          equ	22	;# 
   144     0017                     CCP1CON         equ	23	;# 
   145     0018                     RCSTA           equ	24	;# 
   146     0019                     TXREG           equ	25	;# 
   147     001A                     RCREG           equ	26	;# 
   148     001B                     CCPR2           equ	27	;# 
   149     001B                     CCPR2L          equ	27	;# 
   150     001C                     CCPR2H          equ	28	;# 
   151     001D                     CCP2CON         equ	29	;# 
   152     001E                     ADRESH          equ	30	;# 
   153     001F                     ADCON0          equ	31	;# 
   154     0081                     OPTION_REG      equ	129	;# 
   155     0085                     TRISA           equ	133	;# 
   156     0086                     TRISB           equ	134	;# 
   157     0087                     TRISC           equ	135	;# 
   158     0088                     TRISD           equ	136	;# 
   159     0089                     TRISE           equ	137	;# 
   160     008C                     PIE1            equ	140	;# 
   161     008D                     PIE2            equ	141	;# 
   162     008E                     PCON            equ	142	;# 
   163     0091                     SSPCON2         equ	145	;# 
   164     0092                     PR2             equ	146	;# 
   165     0093                     SSPADD          equ	147	;# 
   166     0094                     SSPSTAT         equ	148	;# 
   167     0098                     TXSTA           equ	152	;# 
   168     0099                     SPBRG           equ	153	;# 
   169     009C                     CMCON           equ	156	;# 
   170     009D                     CVRCON          equ	157	;# 
   171     009E                     ADRESL          equ	158	;# 
   172     009F                     ADCON1          equ	159	;# 
   173     010C                     EEDATA          equ	268	;# 
   174     010D                     EEADR           equ	269	;# 
   175     010E                     EEDATH          equ	270	;# 
   176     010F                     EEADRH          equ	271	;# 
   177     018C                     EECON1          equ	396	;# 
   178     018D                     EECON2          equ	397	;# 
   179     0000                     INDF            equ	0	;# 
   180     0001                     TMR0            equ	1	;# 
   181     0002                     PCL             equ	2	;# 
   182     0003                     STATUS          equ	3	;# 
   183     0004                     FSR             equ	4	;# 
   184     0005                     PORTA           equ	5	;# 
   185     0006                     PORTB           equ	6	;# 
   186     0007                     PORTC           equ	7	;# 
   187     0008                     PORTD           equ	8	;# 
   188     0009                     PORTE           equ	9	;# 
   189     000A                     PCLATH          equ	10	;# 
   190     000B                     INTCON          equ	11	;# 
   191     000C                     PIR1            equ	12	;# 
   192     000D                     PIR2            equ	13	;# 
   193     000E                     TMR1            equ	14	;# 
   194     000E                     TMR1L           equ	14	;# 
   195     000F                     TMR1H           equ	15	;# 
   196     0010                     T1CON           equ	16	;# 
   197     0011                     TMR2            equ	17	;# 
   198     0012                     T2CON           equ	18	;# 
   199     0013                     SSPBUF          equ	19	;# 
   200     0014                     SSPCON          equ	20	;# 
   201     0015                     CCPR1           equ	21	;# 
   202     0015                     CCPR1L          equ	21	;# 
   203     0016                     CCPR1H          equ	22	;# 
   204     0017                     CCP1CON         equ	23	;# 
   205     0018                     RCSTA           equ	24	;# 
   206     0019                     TXREG           equ	25	;# 
   207     001A                     RCREG           equ	26	;# 
   208     001B                     CCPR2           equ	27	;# 
   209     001B                     CCPR2L          equ	27	;# 
   210     001C                     CCPR2H          equ	28	;# 
   211     001D                     CCP2CON         equ	29	;# 
   212     001E                     ADRESH          equ	30	;# 
   213     001F                     ADCON0          equ	31	;# 
   214     0081                     OPTION_REG      equ	129	;# 
   215     0085                     TRISA           equ	133	;# 
   216     0086                     TRISB           equ	134	;# 
   217     0087                     TRISC           equ	135	;# 
   218     0088                     TRISD           equ	136	;# 
   219     0089                     TRISE           equ	137	;# 
   220     008C                     PIE1            equ	140	;# 
   221     008D                     PIE2            equ	141	;# 
   222     008E                     PCON            equ	142	;# 
   223     0091                     SSPCON2         equ	145	;# 
   224     0092                     PR2             equ	146	;# 
   225     0093                     SSPADD          equ	147	;# 
   226     0094                     SSPSTAT         equ	148	;# 
   227     0098                     TXSTA           equ	152	;# 
   228     0099                     SPBRG           equ	153	;# 
   229     009C                     CMCON           equ	156	;# 
   230     009D                     CVRCON          equ	157	;# 
   231     009E                     ADRESL          equ	158	;# 
   232     009F                     ADCON1          equ	159	;# 
   233     010C                     EEDATA          equ	268	;# 
   234     010D                     EEADR           equ	269	;# 
   235     010E                     EEDATH          equ	270	;# 
   236     010F                     EEADRH          equ	271	;# 
   237     018C                     EECON1          equ	396	;# 
   238     018D                     EECON2          equ	397	;# 
   239     0000                     INDF            equ	0	;# 
   240     0001                     TMR0            equ	1	;# 
   241     0002                     PCL             equ	2	;# 
   242     0003                     STATUS          equ	3	;# 
   243     0004                     FSR             equ	4	;# 
   244     0005                     PORTA           equ	5	;# 
   245     0006                     PORTB           equ	6	;# 
   246     0007                     PORTC           equ	7	;# 
   247     0008                     PORTD           equ	8	;# 
   248     0009                     PORTE           equ	9	;# 
   249     000A                     PCLATH          equ	10	;# 
   250     000B                     INTCON          equ	11	;# 
   251     000C                     PIR1            equ	12	;# 
   252     000D                     PIR2            equ	13	;# 
   253     000E                     TMR1            equ	14	;# 
   254     000E                     TMR1L           equ	14	;# 
   255     000F                     TMR1H           equ	15	;# 
   256     0010                     T1CON           equ	16	;# 
   257     0011                     TMR2            equ	17	;# 
   258     0012                     T2CON           equ	18	;# 
   259     0013                     SSPBUF          equ	19	;# 
   260     0014                     SSPCON          equ	20	;# 
   261     0015                     CCPR1           equ	21	;# 
   262     0015                     CCPR1L          equ	21	;# 
   263     0016                     CCPR1H          equ	22	;# 
   264     0017                     CCP1CON         equ	23	;# 
   265     0018                     RCSTA           equ	24	;# 
   266     0019                     TXREG           equ	25	;# 
   267     001A                     RCREG           equ	26	;# 
   268     001B                     CCPR2           equ	27	;# 
   269     001B                     CCPR2L          equ	27	;# 
   270     001C                     CCPR2H          equ	28	;# 
   271     001D                     CCP2CON         equ	29	;# 
   272     001E                     ADRESH          equ	30	;# 
   273     001F                     ADCON0          equ	31	;# 
   274     0081                     OPTION_REG      equ	129	;# 
   275     0085                     TRISA           equ	133	;# 
   276     0086                     TRISB           equ	134	;# 
   277     0087                     TRISC           equ	135	;# 
   278     0088                     TRISD           equ	136	;# 
   279     0089                     TRISE           equ	137	;# 
   280     008C                     PIE1            equ	140	;# 
   281     008D                     PIE2            equ	141	;# 
   282     008E                     PCON            equ	142	;# 
   283     0091                     SSPCON2         equ	145	;# 
   284     0092                     PR2             equ	146	;# 
   285     0093                     SSPADD          equ	147	;# 
   286     0094                     SSPSTAT         equ	148	;# 
   287     0098                     TXSTA           equ	152	;# 
   288     0099                     SPBRG           equ	153	;# 
   289     009C                     CMCON           equ	156	;# 
   290     009D                     CVRCON          equ	157	;# 
   291     009E                     ADRESL          equ	158	;# 
   292     009F                     ADCON1          equ	159	;# 
   293     010C                     EEDATA          equ	268	;# 
   294     010D                     EEADR           equ	269	;# 
   295     010E                     EEDATH          equ	270	;# 
   296     010F                     EEADRH          equ	271	;# 
   297     018C                     EECON1          equ	396	;# 
   298     018D                     EECON2          equ	397	;# 
   299     0000                     INDF            equ	0	;# 
   300     0001                     TMR0            equ	1	;# 
   301     0002                     PCL             equ	2	;# 
   302     0003                     STATUS          equ	3	;# 
   303     0004                     FSR             equ	4	;# 
   304     0005                     PORTA           equ	5	;# 
   305     0006                     PORTB           equ	6	;# 
   306     0007                     PORTC           equ	7	;# 
   307     0008                     PORTD           equ	8	;# 
   308     0009                     PORTE           equ	9	;# 
   309     000A                     PCLATH          equ	10	;# 
   310     000B                     INTCON          equ	11	;# 
   311     000C                     PIR1            equ	12	;# 
   312     000D                     PIR2            equ	13	;# 
   313     000E                     TMR1            equ	14	;# 
   314     000E                     TMR1L           equ	14	;# 
   315     000F                     TMR1H           equ	15	;# 
   316     0010                     T1CON           equ	16	;# 
   317     0011                     TMR2            equ	17	;# 
   318     0012                     T2CON           equ	18	;# 
   319     0013                     SSPBUF          equ	19	;# 
   320     0014                     SSPCON          equ	20	;# 
   321     0015                     CCPR1           equ	21	;# 
   322     0015                     CCPR1L          equ	21	;# 
   323     0016                     CCPR1H          equ	22	;# 
   324     0017                     CCP1CON         equ	23	;# 
   325     0018                     RCSTA           equ	24	;# 
   326     0019                     TXREG           equ	25	;# 
   327     001A                     RCREG           equ	26	;# 
   328     001B                     CCPR2           equ	27	;# 
   329     001B                     CCPR2L          equ	27	;# 
   330     001C                     CCPR2H          equ	28	;# 
   331     001D                     CCP2CON         equ	29	;# 
   332     001E                     ADRESH          equ	30	;# 
   333     001F                     ADCON0          equ	31	;# 
   334     0081                     OPTION_REG      equ	129	;# 
   335     0085                     TRISA           equ	133	;# 
   336     0086                     TRISB           equ	134	;# 
   337     0087                     TRISC           equ	135	;# 
   338     0088                     TRISD           equ	136	;# 
   339     0089                     TRISE           equ	137	;# 
   340     008C                     PIE1            equ	140	;# 
   341     008D                     PIE2            equ	141	;# 
   342     008E                     PCON            equ	142	;# 
   343     0091                     SSPCON2         equ	145	;# 
   344     0092                     PR2             equ	146	;# 
   345     0093                     SSPADD          equ	147	;# 
   346     0094                     SSPSTAT         equ	148	;# 
   347     0098                     TXSTA           equ	152	;# 
   348     0099                     SPBRG           equ	153	;# 
   349     009C                     CMCON           equ	156	;# 
   350     009D                     CVRCON          equ	157	;# 
   351     009E                     ADRESL          equ	158	;# 
   352     009F                     ADCON1          equ	159	;# 
   353     010C                     EEDATA          equ	268	;# 
   354     010D                     EEADR           equ	269	;# 
   355     010E                     EEDATH          equ	270	;# 
   356     010F                     EEADRH          equ	271	;# 
   357     018C                     EECON1          equ	396	;# 
   358     018D                     EECON2          equ	397	;# 
   359                           
   360                           	psect	idataCOMMON
   361     07FF                     __pidataCOMMON:
   362                           
   363                           ;initializer for _tankState
   364     07FF  3401               	retlw	1
   365                           
   366                           	psect	idataBANK0
   367     0AEC                     __pidataBANK0:
   368                           
   369                           ;initializer for _idealHumidity
   370     0AEC  3432               	retlw	50
   371                           
   372                           ;initializer for _minHumidity
   373     0AED  341E               	retlw	30
   374                           
   375                           ;initializer for _lastRightButtonState
   376     0AEE  3401               	retlw	1
   377                           
   378                           ;initializer for _lastLeftButtonState
   379     0AEF  3401               	retlw	1
   380                           
   381                           ;initializer for _lcd_index
   382     0AF0  3401               	retlw	1
   383                           
   384                           ;initializer for _lcd_maxIndex
   385     0AF1  3405               	retlw	5
   386                           
   387                           ;initializer for _lastIrrigationState
   388     0AF2  34FF               	retlw	-1
   389                           
   390                           ;initializer for _irrigationState
   391     0AF3  3401               	retlw	1
   392                           
   393                           ;initializer for _lastTankState
   394     0AF4  34FF               	retlw	-1
   395                           
   396                           	psect	idataBANK1
   397     0BFB                     __pidataBANK1:
   398                           
   399                           ;initializer for _TankStateString
   400     0BFB  345F               	retlw	low ((STR_1-__stringbase)| (0+32768))
   401     0BFC  3471               	retlw	low ((STR_2-__stringbase)| (0+32768))
   402     0BFD  3465               	retlw	low ((STR_3-__stringbase)| (0+32768))
   403     0BFE  3476               	retlw	low ((STR_4-__stringbase)| (0+32768))
   404                           
   405                           ;initializer for _IrrigationStateString
   406     0BFF  347F               	retlw	low ((STR_5-__stringbase)| (0+32768))
   407     0C00  347B               	retlw	low ((STR_6-__stringbase)| (0+32768))
   408     0C01  346B               	retlw	low ((STR_7-__stringbase)| (0+32768))
   409                           
   410                           ;initializer for _old_light
   411     0C02  34FF               	retlw	255
   412     0C03  34FF               	retlw	255
   413                           
   414                           ;initializer for _old_temperature
   415     0C04  34FF               	retlw	255
   416     0C05  34FF               	retlw	255
   417                           
   418                           ;initializer for _old_soilMoisture
   419     0C06  34FF               	retlw	255
   420     0C07  34FF               	retlw	255
   421                           
   422                           ;initializer for _timer_ADCReadAll
   423     0C08  3402               	retlw	2
   424     0C09  3400               	retlw	0
   425     0C0A  3400               	retlw	0
   426     0C0B  3400               	retlw	0
   427     0C0C  3400               	retlw	0
   428     0C0D  3404               	retlw	low (fp__ADC_readAll-fpbase)
   429                           
   430                           ;initializer for _timer_IRRIG_Timeout
   431     0C0E  3414               	retlw	20
   432     0C0F  3400               	retlw	0
   433     0C10  3400               	retlw	0
   434     0C11  3400               	retlw	0
   435     0C12  3400               	retlw	0
   436     0C13  3407               	retlw	low (fp__interrupt_IRRIG_timeout-fpbase)
   437                           
   438                           ;initializer for _timer_WTANK_Timeout
   439     0C14  341E               	retlw	30
   440     0C15  3400               	retlw	0
   441     0C16  3400               	retlw	0
   442     0C17  3400               	retlw	0
   443     0C18  3400               	retlw	0
   444     0C19  3401               	retlw	low (fp__interrupt_WTANK_timeout-fpbase)
   445     000C                     _PIR1bits       set	12
   446     0006                     _PORTBbits      set	6
   447     0007                     _PORTCbits      set	7
   448     001E                     _ADRESH         set	30
   449     001F                     _ADCON0bits     set	31
   450     000B                     _INTCONbits     set	11
   451     000E                     _TMR1L          set	14
   452     000F                     _TMR1H          set	15
   453     0010                     _T1CONbits      set	16
   454     0043                     _RD3            set	67
   455     0042                     _RD2            set	66
   456     0047                     _RD7            set	71
   457     0046                     _RD6            set	70
   458     0045                     _RD5            set	69
   459     0044                     _RD4            set	68
   460     009E                     _ADRESL         set	158
   461     009F                     _ADCON1bits     set	159
   462     008C                     _PIE1bits       set	140
   463     0087                     _TRISCbits      set	135
   464     0088                     _TRISD          set	136
   465     0087                     _TRISC          set	135
   466     0086                     _TRISB          set	134
   467     0085                     _TRISA          set	133
   468     0081                     _OPTION_REGbits set	129
   469                           
   470                           	psect	strings
   471     0413                     __pstrings:
   472     0413                     stringtab:
   473     0413                     __stringtab:
   474                           
   475                           ;	String table - string pointers are 1 byte each
   476     0413  1BFF               	btfsc	btemp+1,7
   477     0414  2C1D               	ljmp	stringcode
   478     0415  1383               	bcf	3,7
   479     0416  187F               	btfsc	btemp+1,0
   480     0417  1783               	bsf	3,7
   481     0418  0800               	movf	0,w
   482     0419  0A84               	incf	4,f
   483     041A  1903               	skipnz
   484     041B  0AFF               	incf	btemp+1,f
   485     041C  0008               	return
   486     041D                     stringcode:
   487     041D                     stringdir:
   488     041D  3004               	movlw	high stringdir
   489     041E  008A               	movwf	10
   490     041F  0804               	movf	4,w
   491     0420  0A84               	incf	4,f
   492     0421  0782               	addwf	2,f
   493     0422                     __stringbase:
   494     0422  3400               	retlw	0
   495     0423                     __end_of__stringtab:
   496     0423                     STR_12:
   497     0423  344C               	retlw	76	;'L'
   498     0424  3455               	retlw	85	;'U'
   499     0425  345A               	retlw	90	;'Z'
   500     0426  3420               	retlw	32	;' '
   501     0427  3441               	retlw	65	;'A'
   502     0428  3452               	retlw	82	;'R'
   503     0429  3454               	retlw	84	;'T'
   504     042A  3449               	retlw	73	;'I'
   505     042B  3446               	retlw	70	;'F'
   506     042C  3449               	retlw	73	;'I'
   507     042D  3443               	retlw	67	;'C'
   508     042E  3449               	retlw	73	;'I'
   509     042F  3441               	retlw	65	;'A'
   510     0430  344C               	retlw	76	;'L'
   511     0431  3400               	retlw	0
   512     0432                     STR_8:
   513     0432  3445               	retlw	69	;'E'
   514     0433  3453               	retlw	83	;'S'
   515     0434  3454               	retlw	84	;'T'
   516     0435  3441               	retlw	65	;'A'
   517     0436  3444               	retlw	68	;'D'
   518     0437  344F               	retlw	79	;'O'
   519     0438  3420               	retlw	32	;' '
   520     0439  3454               	retlw	84	;'T'
   521     043A  3441               	retlw	65	;'A'
   522     043B  344E               	retlw	78	;'N'
   523     043C  3451               	retlw	81	;'Q'
   524     043D  3455               	retlw	85	;'U'
   525     043E  3445               	retlw	69	;'E'
   526     043F  3400               	retlw	0
   527     0440                     STR_15:
   528     0440  3454               	retlw	84	;'T'
   529     0441  3445               	retlw	69	;'E'
   530     0442  344D               	retlw	77	;'M'
   531     0443  3450               	retlw	80	;'P'
   532     0444  3445               	retlw	69	;'E'
   533     0445  3452               	retlw	82	;'R'
   534     0446  3441               	retlw	65	;'A'
   535     0447  3454               	retlw	84	;'T'
   536     0448  3455               	retlw	85	;'U'
   537     0449  3452               	retlw	82	;'R'
   538     044A  3441               	retlw	65	;'A'
   539     044B  343A               	retlw	58	;':'
   540     044C  3400               	retlw	0
   541     044D                     STR_10:
   542     044D  3455               	retlw	85	;'U'
   543     044E  344D               	retlw	77	;'M'
   544     044F  3449               	retlw	73	;'I'
   545     0450  3444               	retlw	68	;'D'
   546     0451  3441               	retlw	65	;'A'
   547     0452  3444               	retlw	68	;'D'
   548     0453  3445               	retlw	69	;'E'
   549     0454  3420               	retlw	32	;' '
   550     0455  3453               	retlw	83	;'S'
   551     0456  344F               	retlw	79	;'O'
   552     0457  344C               	retlw	76	;'L'
   553     0458  344F               	retlw	79	;'O'
   554     0459  3400               	retlw	0
   555     045A                     STR_9:
   556     045A  3449               	retlw	73	;'I'
   557     045B  3452               	retlw	82	;'R'
   558     045C  3452               	retlw	82	;'R'
   559     045D  3449               	retlw	73	;'I'
   560     045E  3447               	retlw	71	;'G'
   561     045F  3441               	retlw	65	;'A'
   562     0460  3443               	retlw	67	;'C'
   563     0461  3441               	retlw	65	;'A'
   564     0462  344F               	retlw	79	;'O'
   565     0463  343A               	retlw	58	;':'
   566     0464  3400               	retlw	0
   567     0465                     STR_14:
   568     0465  3444               	retlw	68	;'D'
   569     0466  3445               	retlw	69	;'E'
   570     0467  3453               	retlw	83	;'S'
   571     0468  344C               	retlw	76	;'L'
   572     0469  3449               	retlw	73	;'I'
   573     046A  3447               	retlw	71	;'G'
   574     046B  3441               	retlw	65	;'A'
   575     046C  3444               	retlw	68	;'D'
   576     046D  3441               	retlw	65	;'A'
   577     046E  3400               	retlw	0
   578     046F                     STR_17:
   579     046F  3445               	retlw	69	;'E'
   580     0470  344D               	retlw	77	;'M'
   581     0471  3445               	retlw	69	;'E'
   582     0472  3452               	retlw	82	;'R'
   583     0473  3447               	retlw	71	;'G'
   584     0474  3445               	retlw	69	;'E'
   585     0475  344E               	retlw	78	;'N'
   586     0476  3443               	retlw	67	;'C'
   587     0477  3459               	retlw	89	;'Y'
   588     0478  3400               	retlw	0
   589     0479                     STR_18:
   590     0479  3453               	retlw	83	;'S'
   591     047A  3454               	retlw	84	;'T'
   592     047B  3441               	retlw	65	;'A'
   593     047C  3454               	retlw	84	;'T'
   594     047D  3445               	retlw	69	;'E'
   595     047E  3421               	retlw	33	;'!'
   596     047F  3421               	retlw	33	;'!'
   597     0480  3400               	retlw	0
   598     0481                     STR_1:
   599     0481  3443               	retlw	67	;'C'
   600     0482  3448               	retlw	72	;'H'
   601     0483  3445               	retlw	69	;'E'
   602     0484  3449               	retlw	73	;'I'
   603     0485  344F               	retlw	79	;'O'
   604     0486  3400               	retlw	0
   605     0487                     STR_3:
   606     0487  3456               	retlw	86	;'V'
   607     0488  3441               	retlw	65	;'A'
   608     0489  345A               	retlw	90	;'Z'
   609     048A  3449               	retlw	73	;'I'
   610     048B  344F               	retlw	79	;'O'
   611     048C  3400               	retlw	0
   612     048D                     STR_7:
   613     048D  3445               	retlw	69	;'E'
   614     048E  3452               	retlw	82	;'R'
   615     048F  3452               	retlw	82	;'R'
   616     0490  344F               	retlw	79	;'O'
   617     0491  3452               	retlw	82	;'R'
   618     0492  3400               	retlw	0
   619     0493                     STR_2:
   620     0493  344D               	retlw	77	;'M'
   621     0494  3445               	retlw	69	;'E'
   622     0495  3449               	retlw	73	;'I'
   623     0496  344F               	retlw	79	;'O'
   624     0497  3400               	retlw	0
   625     0498                     STR_4:
   626     0498  3445               	retlw	69	;'E'
   627     0499  3452               	retlw	82	;'R'
   628     049A  3452               	retlw	82	;'R'
   629     049B  344F               	retlw	79	;'O'
   630     049C  3400               	retlw	0
   631     049D                     STR_6:
   632     049D  344F               	retlw	79	;'O'
   633     049E  3446               	retlw	70	;'F'
   634     049F  3446               	retlw	70	;'F'
   635     04A0  3400               	retlw	0
   636     04A1                     STR_5:
   637     04A1  344F               	retlw	79	;'O'
   638     04A2  344E               	retlw	78	;'N'
   639     04A3  3400               	retlw	0
   640     04A4                     STR_11:
   641     04A4  3425               	retlw	37	;'%'
   642     04A5  3464               	retlw	100	;'d'
   643     04A6  3400               	retlw	0
   644     04A4                     STR_16          equ	STR_11
   645     0468                     STR_13          equ	STR_14+3
   646                           
   647                           	psect	cinit
   648     000F                     start_initialization:	
   649                           ; #config settings
   650                           
   651     000F                     __initialization:
   652                           
   653                           ; Initialize objects allocated to BANK1
   654     000F  1383               	bcf	3,7	;select IRP bank0
   655     0010  30E6               	movlw	low (__pdataBANK1+31)
   656     0011  00FD               	movwf	btemp+-1
   657     0012  300B               	movlw	high __pidataBANK1
   658     0013  00FE               	movwf	btemp
   659     0014  30FB               	movlw	low __pidataBANK1
   660     0015  00FF               	movwf	btemp+1
   661     0016  30C7               	movlw	low __pdataBANK1
   662     0017  0084               	movwf	4
   663     0018  120A  158A  23A9  120A  118A  	fcall	init_ram0
   664                           
   665                           ; Initialize objects allocated to BANK0
   666     001D  306F               	movlw	low (__pdataBANK0+9)
   667     001E  00FD               	movwf	btemp+-1
   668     001F  300A               	movlw	high __pidataBANK0
   669     0020  00FE               	movwf	btemp
   670     0021  30EC               	movlw	low __pidataBANK0
   671     0022  00FF               	movwf	btemp+1
   672     0023  3066               	movlw	low __pdataBANK0
   673     0024  0084               	movwf	4
   674     0025  120A  158A  23A9  120A  118A  	fcall	init_ram0
   675                           
   676                           ; Initialize objects allocated to COMMON
   677     002A  120A  118A  27FF  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   678     002F  00FB               	movwf	__pdataCOMMON& (0+127)
   679                           
   680                           ; Clear objects allocated to BANK1
   681     0030  30A0               	movlw	low __pbssBANK1
   682     0031  0084               	movwf	4
   683     0032  30C7               	movlw	low (__pbssBANK1+39)
   684     0033  120A  158A  22E4  120A  118A  	fcall	clear_ram0
   685                           
   686                           ; Clear objects allocated to BANK0
   687     0038  305C               	movlw	low __pbssBANK0
   688     0039  0084               	movwf	4
   689     003A  3066               	movlw	low (__pbssBANK0+10)
   690     003B  120A  158A  22E4  120A  118A  	fcall	clear_ram0
   691                           
   692                           ; Clear objects allocated to BITCOMMON
   693     0040  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   694     0041                     end_of_initialization:	
   695                           ;End of C runtime variable initialization code
   696                           
   697     0041                     __end_of__initialization:
   698     0041  0183               	clrf	3
   699     0042  120A  118A  2A33   	ljmp	_main	;jump to C main() function
   700                           
   701                           	psect	bitbssCOMMON
   702     03D0                     __pbitbssCOMMON:
   703     03D0                     _isIrrigating:
   704     03D0                     	ds	1
   705     03D1                     _isFilling:
   706     03D1                     	ds	1
   707     03D2                     _flag_emergencyButton:
   708     03D2                     	ds	1
   709     03D3                     _rightButtonPressed:
   710     03D3                     	ds	1
   711     03D4                     _leftButtonPressed:
   712     03D4                     	ds	1
   713                           
   714                           	psect	dataCOMMON
   715     007B                     __pdataCOMMON:
   716     007B                     _tankState:
   717     007B                     	ds	1
   718                           
   719                           	psect	bssBANK0
   720     005C                     __pbssBANK0:
   721     005C                     _timerCounter:
   722     005C                     	ds	2
   723     005E                     _light:
   724     005E                     	ds	2
   725     0060                     _temperature:
   726     0060                     	ds	2
   727     0062                     _soilMoisture:
   728     0062                     	ds	2
   729     0064                     _flags:
   730     0064                     	ds	1
   731     0065                     _lcd_lastIndex:
   732     0065                     	ds	1
   733                           
   734                           	psect	dataBANK0
   735     0066                     __pdataBANK0:
   736     0066                     _idealHumidity:
   737     0066                     	ds	1
   738     0067                     _minHumidity:
   739     0067                     	ds	1
   740     0068                     _lastRightButtonState:
   741     0068                     	ds	1
   742     0069                     _lastLeftButtonState:
   743     0069                     	ds	1
   744     006A                     _lcd_index:
   745     006A                     	ds	1
   746     006B                     _lcd_maxIndex:
   747     006B                     	ds	1
   748     006C                     _lastIrrigationState:
   749     006C                     	ds	1
   750     006D                     _irrigationState:
   751     006D                     	ds	1
   752     006E                     _lastTankState:
   753     006E                     	ds	1
   754                           
   755                           	psect	bssBANK1
   756     00A0                     __pbssBANK1:
   757     00A0                     _dbuf:
   758     00A0                     	ds	32
   759     00C0                     draw_Index@F1445:
   760     00C0                     	ds	3
   761     00C3                     _width:
   762     00C3                     	ds	2
   763     00C5                     _prec:
   764     00C5                     	ds	2
   765                           
   766                           	psect	dataBANK1
   767     00C7                     __pdataBANK1:
   768     00C7                     _TankStateString:
   769     00C7                     	ds	4
   770     00CB                     _IrrigationStateString:
   771     00CB                     	ds	3
   772     00CE                     _old_light:
   773     00CE                     	ds	2
   774     00D0                     _old_temperature:
   775     00D0                     	ds	2
   776     00D2                     _old_soilMoisture:
   777     00D2                     	ds	2
   778     00D4                     _timer_ADCReadAll:
   779     00D4                     	ds	6
   780     00DA                     _timer_IRRIG_Timeout:
   781     00DA                     	ds	6
   782     00E0                     _timer_WTANK_Timeout:
   783     00E0                     	ds	6
   784                           
   785                           	psect	inittext
   786     0BA5                     init_fetch0:	
   787                           ;	Called with low address in FSR and high address in W
   788                           
   789     0BA5  087E               	movf	btemp,w
   790     0BA6  008A               	movwf	10
   791     0BA7  087F               	movf	btemp+1,w
   792     0BA8  0082               	movwf	2
   793     0BA9                     init_ram0:	
   794                           ;Called with:
   795                           ;	high address of idata address in btemp 
   796                           ;	low address of idata address in btemp+1 
   797                           ;	low address of data in FSR
   798                           ;	high address + 1 of data in btemp-1
   799                           
   800     0BA9  120A  158A  23A5  120A  158A  	fcall	init_fetch0
   801     0BAE  0080               	movwf	0
   802     0BAF  0A84               	incf	4,f
   803     0BB0  0804               	movf	4,w
   804     0BB1  067D               	xorwf	btemp+-1,w
   805     0BB2  1903               	btfsc	3,2
   806     0BB3  3400               	retlw	0
   807     0BB4  0AFF               	incf	btemp+1,f
   808     0BB5  1903               	btfsc	3,2
   809     0BB6  0AFE               	incf	btemp,f
   810     0BB7  2BA9               	goto	init_ram0
   811                           
   812                           	psect	clrtext
   813     0AE4                     clear_ram0:	
   814                           ;	Called with FSR containing the base address, and
   815                           ;	W with the last address+1
   816                           
   817     0AE4  0064               	clrwdt	;clear the watchdog before getting into this loop
   818     0AE5                     clrloop0:
   819     0AE5  0180               	clrf	0	;clear RAM location pointed to by FSR
   820     0AE6  0A84               	incf	4,f	;increment pointer
   821     0AE7  0604               	xorwf	4,w	;XOR with final address
   822     0AE8  1903               	btfsc	3,2	;have we reached the end yet?
   823     0AE9  3400               	retlw	0	;all done for this memory range, return
   824     0AEA  0604               	xorwf	4,w	;XOR again to restore value
   825     0AEB  2AE5               	goto	clrloop0	;do the next byte
   826                           
   827                           	psect	cstackCOMMON
   828     0070                     __pcstackCOMMON:
   829     0070                     ?_lcd_turnLeft:
   830     0070                     ?_lcd_turnRight:	
   831                           ; 1 bytes @ 0x0
   832                           
   833     0070                     ?_run_waterTankLogic:	
   834                           ; 1 bytes @ 0x0
   835                           
   836     0070                     ?_interrupt_WTANK_timeout:	
   837                           ; 1 bytes @ 0x0
   838                           
   839     0070                     ?_stopFilling:	
   840                           ; 1 bytes @ 0x0
   841                           
   842     0070                     ?_startFilling:	
   843                           ; 1 bytes @ 0x0
   844                           
   845     0070                     ?_interrupt_IRRIG_timeout:	
   846                           ; 1 bytes @ 0x0
   847                           
   848     0070                     ?_stopIrrigation:	
   849                           ; 1 bytes @ 0x0
   850                           
   851     0070                     ?_startIrrigation:	
   852                           ; 1 bytes @ 0x0
   853                           
   854     0070                     ?_putch:	
   855                           ; 1 bytes @ 0x0
   856                           
   857     0070                     ?_WDT_init:	
   858                           ; 1 bytes @ 0x0
   859                           
   860     0070                     ?_timer1_1ms_init:	
   861                           ; 1 bytes @ 0x0
   862                           
   863     0070                     ?_interruption_init:	
   864                           ; 1 bytes @ 0x0
   865                           
   866     0070                     ?_ADC_init:	
   867                           ; 1 bytes @ 0x0
   868                           
   869     0070                     ?_readSoilMoisture:	
   870                           ; 1 bytes @ 0x0
   871                           
   872     0070                     ?_readTemperature:	
   873                           ; 1 bytes @ 0x0
   874                           
   875     0070                     ?_readLight:	
   876                           ; 1 bytes @ 0x0
   877                           
   878     0070                     ?_ADC_readAll:	
   879                           ; 1 bytes @ 0x0
   880                           
   881     0070                     ?_Lcd_Port:	
   882                           ; 1 bytes @ 0x0
   883                           
   884     0070                     ?_Lcd_Cmd:	
   885                           ; 1 bytes @ 0x0
   886                           
   887     0070                     ?_Lcd_Clear:	
   888                           ; 1 bytes @ 0x0
   889                           
   890     0070                     ?_Lcd_Init:	
   891                           ; 1 bytes @ 0x0
   892                           
   893     0070                     ?_Lcd_Write_Char:	
   894                           ; 1 bytes @ 0x0
   895                           
   896     0070                     ?_draw_Index:	
   897                           ; 1 bytes @ 0x0
   898                           
   899     0070                     ?_print_TankState:	
   900                           ; 1 bytes @ 0x0
   901                           
   902     0070                     ?_print_Irrigation:	
   903                           ; 1 bytes @ 0x0
   904                           
   905     0070                     ?_print_SoilMoisture:	
   906                           ; 1 bytes @ 0x0
   907                           
   908     0070                     ?_print_ArtificialLight:	
   909                           ; 1 bytes @ 0x0
   910                           
   911     0070                     ?_print_Temperature:	
   912                           ; 1 bytes @ 0x0
   913                           
   914     0070                     ?_lcd_debounceButtons:	
   915                           ; 1 bytes @ 0x0
   916                           
   917     0070                     ?_lcd_run:	
   918                           ; 1 bytes @ 0x0
   919                           
   920     0070                     ?_print_Emergency:	
   921                           ; 1 bytes @ 0x0
   922                           
   923     0070                     ?_interruptionHandler:	
   924                           ; 1 bytes @ 0x0
   925                           
   926     0070                     ?_main:	
   927                           ; 1 bytes @ 0x0
   928                           
   929     0070                     ?_check_TankStatus:	
   930                           ; 1 bytes @ 0x0
   931                           
   932     0070                     putch@c:	
   933                           ; 1 bytes @ 0x0
   934                           
   935     0070                     ??_interruptionHandler:	
   936                           ; 1 bytes @ 0x0
   937                           
   938                           
   939                           ; 1 bytes @ 0x0
   940     0070                     	ds	2
   941     0072                     ?_startTimer:
   942     0072                     ?_stopTimer:	
   943                           ; 1 bytes @ 0x2
   944                           
   945     0072                     ?_pins_init:	
   946                           ; 1 bytes @ 0x2
   947                           
   948     0072                     ?_fputc:	
   949                           ; 1 bytes @ 0x2
   950                           
   951     0072                     ?_ADC_Read:	
   952                           ; 2 bytes @ 0x2
   953                           
   954     0072                     ?___awdiv:	
   955                           ; 2 bytes @ 0x2
   956                           
   957     0072                     ?___awmod:	
   958                           ; 2 bytes @ 0x2
   959                           
   960     0072                     ?___lmul:	
   961                           ; 2 bytes @ 0x2
   962                           
   963     0072                     pins_init@_TRISB:	
   964                           ; 4 bytes @ 0x2
   965                           
   966     0072                     Lcd_Port@a:	
   967                           ; 1 bytes @ 0x2
   968                           
   969     0072                     startTimer@timer:	
   970                           ; 1 bytes @ 0x2
   971                           
   972     0072                     stopTimer@timer:	
   973                           ; 2 bytes @ 0x2
   974                           
   975     0072                     ___awdiv@divisor:	
   976                           ; 2 bytes @ 0x2
   977                           
   978     0072                     ___awmod@divisor:	
   979                           ; 2 bytes @ 0x2
   980                           
   981     0072                     fputc@c:	
   982                           ; 2 bytes @ 0x2
   983                           
   984     0072                     ___lmul@multiplier:	
   985                           ; 2 bytes @ 0x2
   986                           
   987     0072                     ??_lcd_turnLeft:	
   988                           ; 4 bytes @ 0x2
   989                           
   990     0072                     ??_lcd_turnRight:	
   991                           ; 1 bytes @ 0x2
   992                           
   993     0072                     ??_putch:	
   994                           ; 1 bytes @ 0x2
   995                           
   996     0072                     ??_WDT_init:	
   997                           ; 1 bytes @ 0x2
   998                           
   999     0072                     ??_timer1_1ms_init:	
  1000                           ; 1 bytes @ 0x2
  1001                           
  1002     0072                     ??_interruption_init:	
  1003                           ; 1 bytes @ 0x2
  1004                           
  1005     0072                     ??_ADC_init:	
  1006                           ; 1 bytes @ 0x2
  1007                           
  1008     0072                     ??_Lcd_Port:	
  1009                           ; 1 bytes @ 0x2
  1010                           
  1011     0072                     ??_lcd_debounceButtons:	
  1012                           ; 1 bytes @ 0x2
  1013                           
  1014     0072                     ??_check_TankStatus:	
  1015                           ; 1 bytes @ 0x2
  1016                           
  1017                           
  1018                           ; 1 bytes @ 0x2
  1019     0072                     	ds	1
  1020     0073                     pins_init@_TRISC:
  1021     0073                     check_TankStatus@top:	
  1022                           ; 1 bytes @ 0x3
  1023                           
  1024     0073                     ??_Lcd_Cmd:	
  1025                           ; 1 bytes @ 0x3
  1026                           
  1027     0073                     ??_Lcd_Write_Char:	
  1028                           ; 1 bytes @ 0x3
  1029                           
  1030                           
  1031                           ; 1 bytes @ 0x3
  1032     0073                     	ds	1
  1033     0074                     pins_init@_TRISD:
  1034     0074                     Lcd_Write_Char@temp:	
  1035                           ; 1 bytes @ 0x4
  1036                           
  1037     0074                     check_TankStatus@bot:	
  1038                           ; 1 bytes @ 0x4
  1039                           
  1040     0074                     ___awdiv@dividend:	
  1041                           ; 1 bytes @ 0x4
  1042                           
  1043     0074                     ___awmod@dividend:	
  1044                           ; 2 bytes @ 0x4
  1045                           
  1046     0074                     fputc@fp:	
  1047                           ; 2 bytes @ 0x4
  1048                           
  1049     0074                     ??_startTimer:	
  1050                           ; 2 bytes @ 0x4
  1051                           
  1052     0074                     ??_stopTimer:	
  1053                           ; 1 bytes @ 0x4
  1054                           
  1055     0074                     ??_ADC_Read:	
  1056                           ; 1 bytes @ 0x4
  1057                           
  1058                           
  1059                           ; 1 bytes @ 0x4
  1060     0074                     	ds	1
  1061     0075                     pins_init@_TRISA:
  1062     0075                     ADC_Read@channel:	
  1063                           ; 1 bytes @ 0x5
  1064                           
  1065     0075                     Lcd_Cmd@a:	
  1066                           ; 1 bytes @ 0x5
  1067                           
  1068     0075                     Lcd_Write_Char@y:	
  1069                           ; 1 bytes @ 0x5
  1070                           
  1071     0075                     ??_pins_init:	
  1072                           ; 1 bytes @ 0x5
  1073                           
  1074                           
  1075                           ; 1 bytes @ 0x5
  1076     0075                     	ds	1
  1077     0076                     ?_run_IrrigationLogic:
  1078     0076                     ?_Lcd_Set_Cursor:	
  1079                           ; 1 bytes @ 0x6
  1080                           
  1081     0076                     Lcd_Set_Cursor@b:	
  1082                           ; 1 bytes @ 0x6
  1083                           
  1084     0076                     Lcd_Write_Char@a:	
  1085                           ; 1 bytes @ 0x6
  1086                           
  1087     0076                     ___awdiv@counter:	
  1088                           ; 1 bytes @ 0x6
  1089                           
  1090     0076                     ___awmod@counter:	
  1091                           ; 1 bytes @ 0x6
  1092                           
  1093     0076                     run_IrrigationLogic@sMoistureValue:	
  1094                           ; 1 bytes @ 0x6
  1095                           
  1096     0076                     ___lmul@multiplicand:	
  1097                           ; 2 bytes @ 0x6
  1098                           
  1099     0076                     ??_run_waterTankLogic:	
  1100                           ; 4 bytes @ 0x6
  1101                           
  1102     0076                     ??_interrupt_WTANK_timeout:	
  1103                           ; 1 bytes @ 0x6
  1104                           
  1105     0076                     ??_stopFilling:	
  1106                           ; 1 bytes @ 0x6
  1107                           
  1108     0076                     ??_startFilling:	
  1109                           ; 1 bytes @ 0x6
  1110                           
  1111     0076                     ??_interrupt_IRRIG_timeout:	
  1112                           ; 1 bytes @ 0x6
  1113                           
  1114     0076                     ??_stopIrrigation:	
  1115                           ; 1 bytes @ 0x6
  1116                           
  1117     0076                     ??_startIrrigation:	
  1118                           ; 1 bytes @ 0x6
  1119                           
  1120     0076                     ??_readLight:	
  1121                           ; 1 bytes @ 0x6
  1122                           
  1123     0076                     ??_Lcd_Clear:	
  1124                           ; 1 bytes @ 0x6
  1125                           
  1126     0076                     ??_Lcd_Init:	
  1127                           ; 1 bytes @ 0x6
  1128                           
  1129     0076                     ??___awdiv:	
  1130                           ; 1 bytes @ 0x6
  1131                           
  1132     0076                     ??___awmod:	
  1133                           ; 1 bytes @ 0x6
  1134                           
  1135                           
  1136                           ; 1 bytes @ 0x6
  1137     0076                     	ds	1
  1138     0077                     ?_Lcd_Write_String:
  1139     0077                     ___awdiv@sign:	
  1140                           ; 1 bytes @ 0x7
  1141                           
  1142     0077                     ___awmod@sign:	
  1143                           ; 1 bytes @ 0x7
  1144                           
  1145     0077                     Lcd_Write_String@a:	
  1146                           ; 1 bytes @ 0x7
  1147                           
  1148     0077                     ??_Lcd_Set_Cursor:	
  1149                           ; 2 bytes @ 0x7
  1150                           
  1151                           
  1152                           ; 1 bytes @ 0x7
  1153     0077                     	ds	1
  1154     0078                     ?_abs:
  1155     0078                     ___awdiv@quotient:	
  1156                           ; 2 bytes @ 0x8
  1157                           
  1158     0078                     abs@a:	
  1159                           ; 2 bytes @ 0x8
  1160                           
  1161     0078                     ??_run_IrrigationLogic:	
  1162                           ; 2 bytes @ 0x8
  1163                           
  1164                           
  1165                           ; 1 bytes @ 0x8
  1166     0078                     	ds	1
  1167     0079                     ??_draw_Index:
  1168     0079                     ??_print_TankState:	
  1169                           ; 1 bytes @ 0x9
  1170                           
  1171     0079                     ??_print_Irrigation:	
  1172                           ; 1 bytes @ 0x9
  1173                           
  1174     0079                     ??_print_ArtificialLight:	
  1175                           ; 1 bytes @ 0x9
  1176                           
  1177                           
  1178                           ; 1 bytes @ 0x9
  1179     0079                     	ds	1
  1180     007A                     ??_vfprintf:
  1181     007A                     ??_readSoilMoisture:	
  1182                           ; 1 bytes @ 0xA
  1183                           
  1184     007A                     ??_readTemperature:	
  1185                           ; 1 bytes @ 0xA
  1186                           
  1187     007A                     ??_ADC_readAll:	
  1188                           ; 1 bytes @ 0xA
  1189                           
  1190     007A                     ??_print_SoilMoisture:	
  1191                           ; 1 bytes @ 0xA
  1192                           
  1193     007A                     ??_print_Temperature:	
  1194                           ; 1 bytes @ 0xA
  1195                           
  1196     007A                     ??_lcd_run:	
  1197                           ; 1 bytes @ 0xA
  1198                           
  1199     007A                     ??_main:	
  1200                           ; 1 bytes @ 0xA
  1201                           
  1202                           
  1203                           	psect	cstackBANK0
  1204     0020                     __pcstackBANK0:	
  1205                           ; 1 bytes @ 0xA
  1206                           
  1207     0020                     Lcd_Set_Cursor@a:
  1208     0020                     ??_fputc:	
  1209                           ; 1 bytes @ 0x0
  1210                           
  1211     0020                     ??_abs:	
  1212                           ; 1 bytes @ 0x0
  1213                           
  1214     0020                     ??_Lcd_Write_String:	
  1215                           ; 1 bytes @ 0x0
  1216                           
  1217     0020                     ??___lmul:	
  1218                           ; 1 bytes @ 0x0
  1219                           
  1220                           
  1221                           ; 1 bytes @ 0x0
  1222     0020                     	ds	1
  1223     0021                     Lcd_Set_Cursor@z:
  1224     0021                     ___lmul@product:	
  1225                           ; 1 bytes @ 0x1
  1226                           
  1227                           
  1228                           ; 4 bytes @ 0x1
  1229     0021                     	ds	1
  1230     0022                     Lcd_Set_Cursor@y:
  1231                           
  1232                           ; 1 bytes @ 0x2
  1233     0022                     	ds	1
  1234     0023                     Lcd_Set_Cursor@temp:
  1235     0023                     Lcd_Write_String@i:	
  1236                           ; 1 bytes @ 0x3
  1237                           
  1238                           
  1239                           ; 2 bytes @ 0x3
  1240     0023                     	ds	2
  1241     0025                     ?___aldiv:
  1242     0025                     draw_Index@temp_index:	
  1243                           ; 4 bytes @ 0x5
  1244                           
  1245     0025                     ___aldiv@divisor:	
  1246                           ; 3 bytes @ 0x5
  1247                           
  1248     0025                     ??_print_Emergency:	
  1249                           ; 4 bytes @ 0x5
  1250                           
  1251                           
  1252                           ; 1 bytes @ 0x5
  1253     0025                     	ds	4
  1254     0029                     ?_vfpfcnvrt:
  1255     0029                     vfpfcnvrt@fp:	
  1256                           ; 1 bytes @ 0x9
  1257                           
  1258     0029                     ___aldiv@dividend:	
  1259                           ; 2 bytes @ 0x9
  1260                           
  1261                           
  1262                           ; 4 bytes @ 0x9
  1263     0029                     	ds	2
  1264     002B                     vfpfcnvrt@fmt:
  1265                           
  1266                           ; 1 bytes @ 0xB
  1267     002B                     	ds	1
  1268     002C                     vfpfcnvrt@ap:
  1269                           
  1270                           ; 1 bytes @ 0xC
  1271     002C                     	ds	1
  1272     002D                     ??___aldiv:
  1273     002D                     ??_vfpfcnvrt:	
  1274                           ; 1 bytes @ 0xD
  1275                           
  1276                           
  1277                           ; 1 bytes @ 0xD
  1278     002D                     	ds	1
  1279     002E                     ___aldiv@counter:
  1280                           
  1281                           ; 1 bytes @ 0xE
  1282     002E                     	ds	1
  1283     002F                     ___aldiv@sign:
  1284     002F                     vfpfcnvrt@done:	
  1285                           ; 1 bytes @ 0xF
  1286                           
  1287                           
  1288                           ; 1 bytes @ 0xF
  1289     002F                     	ds	1
  1290     0030                     vfpfcnvrt@cp:
  1291     0030                     ___aldiv@quotient:	
  1292                           ; 1 bytes @ 0x10
  1293                           
  1294                           
  1295                           ; 4 bytes @ 0x10
  1296     0030                     	ds	1
  1297     0031                     vfpfcnvrt@convarg:
  1298                           
  1299                           ; 4 bytes @ 0x11
  1300     0031                     	ds	3
  1301     0034                     ?_map:
  1302     0034                     map@x:	
  1303                           ; 4 bytes @ 0x14
  1304                           
  1305                           
  1306                           ; 2 bytes @ 0x14
  1307     0034                     	ds	1
  1308     0035                     vfpfcnvrt@c:
  1309                           
  1310                           ; 1 bytes @ 0x15
  1311     0035                     	ds	1
  1312     0036                     ?_vfprintf:
  1313     0036                     map@in_min:	
  1314                           ; 2 bytes @ 0x16
  1315                           
  1316     0036                     vfprintf@fp:	
  1317                           ; 2 bytes @ 0x16
  1318                           
  1319                           
  1320                           ; 2 bytes @ 0x16
  1321     0036                     	ds	2
  1322     0038                     vfprintf@fmt:
  1323     0038                     map@in_max:	
  1324                           ; 1 bytes @ 0x18
  1325                           
  1326                           
  1327                           ; 2 bytes @ 0x18
  1328     0038                     	ds	1
  1329     0039                     vfprintf@ap:
  1330                           
  1331                           ; 1 bytes @ 0x19
  1332     0039                     	ds	1
  1333     003A                     vfprintf@cfmt:
  1334     003A                     map@out_min:	
  1335                           ; 1 bytes @ 0x1A
  1336                           
  1337                           
  1338                           ; 2 bytes @ 0x1A
  1339     003A                     	ds	1
  1340     003B                     ?_sprintf:
  1341     003B                     sprintf@s:	
  1342                           ; 2 bytes @ 0x1B
  1343                           
  1344                           
  1345                           ; 1 bytes @ 0x1B
  1346     003B                     	ds	1
  1347     003C                     sprintf@fmt:
  1348     003C                     map@out_max:	
  1349                           ; 1 bytes @ 0x1C
  1350                           
  1351                           
  1352                           ; 2 bytes @ 0x1C
  1353     003C                     	ds	2
  1354     003E                     ??_map:
  1355                           
  1356                           ; 1 bytes @ 0x1E
  1357     003E                     	ds	1
  1358     003F                     ??_sprintf:
  1359                           
  1360                           ; 1 bytes @ 0x1F
  1361     003F                     	ds	1
  1362     0040                     sprintf@ap:
  1363                           
  1364                           ; 1 bytes @ 0x20
  1365     0040                     	ds	1
  1366     0041                     sprintf@f:
  1367                           
  1368                           ; 11 bytes @ 0x21
  1369     0041                     	ds	5
  1370     0046                     map@rise:
  1371                           
  1372                           ; 4 bytes @ 0x26
  1373     0046                     	ds	4
  1374     004A                     map@delta:
  1375                           
  1376                           ; 4 bytes @ 0x2A
  1377     004A                     	ds	2
  1378     004C                     print_SoilMoisture@buffer:
  1379     004C                     print_Temperature@buffer:	
  1380                           ; 16 bytes @ 0x2C
  1381                           
  1382                           
  1383                           ; 16 bytes @ 0x2C
  1384     004C                     	ds	2
  1385     004E                     map@run:
  1386                           
  1387                           ; 4 bytes @ 0x2E
  1388     004E                     	ds	4
  1389     0052                     ?_runTimer:
  1390     0052                     runTimer@timer:	
  1391                           ; 1 bytes @ 0x32
  1392                           
  1393                           
  1394                           ; 2 bytes @ 0x32
  1395     0052                     	ds	2
  1396     0054                     ??_runTimer:
  1397                           
  1398                           ; 1 bytes @ 0x34
  1399     0054                     	ds	4
  1400     0058                     runTimer@elapsedTime:
  1401                           
  1402                           ; 2 bytes @ 0x38
  1403     0058                     	ds	4
  1404                           
  1405                           	psect	maintext
  1406     0233                     __pmaintext:	
  1407 ;;
  1408 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1409 ;;
  1410 ;; *************** function _main *****************
  1411 ;; Defined at:
  1412 ;;		line 55 in file "main.c"
  1413 ;; Parameters:    Size  Location     Type
  1414 ;;		None
  1415 ;; Auto vars:     Size  Location     Type
  1416 ;;		None
  1417 ;; Return value:  Size  Location     Type
  1418 ;;                  1    wreg      void 
  1419 ;; Registers used:
  1420 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1421 ;; Tracked objects:
  1422 ;;		On entry : B00/0
  1423 ;;		On exit  : 0/0
  1424 ;;		Unchanged: 0/0
  1425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1426 ;;      Params:         0       0       0       0       0
  1427 ;;      Locals:         0       0       0       0       0
  1428 ;;      Temps:          0       0       0       0       0
  1429 ;;      Totals:         0       0       0       0       0
  1430 ;;Total ram usage:        0 bytes
  1431 ;; Hardware stack levels required when called: 8
  1432 ;; This function calls:
  1433 ;;		_ADC_init
  1434 ;;		_ADC_readAll
  1435 ;;		_Lcd_Init
  1436 ;;		_WDT_init
  1437 ;;		_interruption_init
  1438 ;;		_lcd_run
  1439 ;;		_pins_init
  1440 ;;		_print_Emergency
  1441 ;;		_runTimer
  1442 ;;		_run_IrrigationLogic
  1443 ;;		_run_waterTankLogic
  1444 ;;		_startTimer
  1445 ;;		_timer1_1ms_init
  1446 ;; This function is called by:
  1447 ;;		Startup code after reset
  1448 ;; This function uses a non-reentrant model
  1449 ;;
  1450                           
  1451     0233                     _main:	
  1452                           ;psect for function _main
  1453                           
  1454     0233                     l2863:	
  1455                           ;incstack = 0
  1456                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1457                           
  1458                           
  1459                           ;main.c: 58:   pins_init(0xFF ,0xFF ,0x00 ,0x00);
  1460     0233  30FF               	movlw	255
  1461     0234  00F2               	movwf	pins_init@_TRISB
  1462     0235  01F3               	clrf	pins_init@_TRISC
  1463     0236  01F4               	clrf	pins_init@_TRISD
  1464     0237  30FF               	movlw	255
  1465     0238  120A  158A  234D  120A  118A  	fcall	_pins_init
  1466     023D                     l2865:
  1467                           
  1468                           ;main.c: 62:   PORTCbits.RC0 = 1;
  1469     023D  1283               	bcf	3,5	;RP0=0, select bank0
  1470     023E  1303               	bcf	3,6	;RP1=0, select bank0
  1471     023F  1407               	bsf	7,0	;volatile
  1472     0240                     l2867:
  1473                           
  1474                           ;main.c: 63:   PORTCbits.RC1 = 1;
  1475     0240  1487               	bsf	7,1	;volatile
  1476     0241                     l2869:
  1477                           
  1478                           ;main.c: 64:   PORTCbits.RC4 = 1;
  1479     0241  1607               	bsf	7,4	;volatile
  1480     0242                     l2871:
  1481                           
  1482                           ;main.c: 65:   PORTCbits.RC2 = 1;
  1483     0242  1507               	bsf	7,2	;volatile
  1484     0243                     l2873:
  1485                           
  1486                           ;main.c: 67:   PORTCbits.RC3 = 1;
  1487     0243  1587               	bsf	7,3	;volatile
  1488     0244                     l2875:
  1489                           
  1490                           ;main.c: 71:   WDT_init();
  1491     0244  120A  158A  22CC  120A  118A  	fcall	_WDT_init
  1492     0249                     l2877:
  1493                           
  1494                           ;main.c: 72:   interruption_init();
  1495     0249  120A  158A  22D4  120A  118A  	fcall	_interruption_init
  1496     024E                     l2879:
  1497                           
  1498                           ;main.c: 73:   timer1_1ms_init();
  1499     024E  120A  158A  22FF  120A  118A  	fcall	_timer1_1ms_init
  1500     0253                     l2881:
  1501                           
  1502                           ;main.c: 74:   ADC_init();
  1503     0253  120A  158A  230A  120A  118A  	fcall	_ADC_init
  1504                           
  1505                           ;main.c: 75:   Lcd_Init();
  1506     0258  120A  118A  26B5  120A  118A  	fcall	_Lcd_Init
  1507                           
  1508                           ;main.c: 78:   ADC_readAll();
  1509     025D  120A  158A  235C  120A  118A  	fcall	_ADC_readAll
  1510     0262                     l2883:
  1511                           
  1512                           ;main.c: 80:   startTimer(&timer_ADCReadAll);
  1513     0262  30D4               	movlw	low _timer_ADCReadAll
  1514     0263  00F2               	movwf	startTimer@timer
  1515     0264  3000               	movlw	high _timer_ADCReadAll
  1516     0265  00F3               	movwf	startTimer@timer+1
  1517     0266  120A  158A  25EF  120A  118A  	fcall	_startTimer
  1518     026B                     l256:	
  1519                           ;main.c: 82:   while(1)
  1520                           
  1521     026B  0064               	clrwdt	;# 
  1522     026C                     l2885:
  1523                           
  1524                           ;main.c: 87:     if(flag_emergencyButton == 1)
  1525     026C  1D7A               	btfss	_flag_emergencyButton/(0+8),_flag_emergencyButton& (0+7)
  1526     026D  2A6F               	goto	u2831
  1527     026E  2A70               	goto	u2830
  1528     026F                     u2831:
  1529     026F  2A76               	goto	l2889
  1530     0270                     u2830:
  1531     0270                     l2887:
  1532                           
  1533                           ;main.c: 88:     {;main.c: 89:       print_Emergency();
  1534     0270  120A  158A  27B6  120A  118A  	fcall	_print_Emergency
  1535                           
  1536                           ;main.c: 90:       continue;
  1537     0275  2A6B               	goto	l256
  1538     0276                     l2889:
  1539                           
  1540                           ;main.c: 94:     run_waterTankLogic();
  1541     0276  120A  158A  258F  120A  118A  	fcall	_run_waterTankLogic
  1542     027B                     l2891:
  1543                           
  1544                           ;main.c: 95:     run_IrrigationLogic(soilMoisture);
  1545     027B  1283               	bcf	3,5	;RP0=0, select bank0
  1546     027C  1303               	bcf	3,6	;RP1=0, select bank0
  1547     027D  0863               	movf	_soilMoisture+1,w
  1548     027E  00F7               	movwf	run_IrrigationLogic@sMoistureValue+1
  1549     027F  0862               	movf	_soilMoisture,w
  1550     0280  00F6               	movwf	run_IrrigationLogic@sMoistureValue
  1551     0281  120A  158A  2662  120A  118A  	fcall	_run_IrrigationLogic
  1552     0286                     l2893:
  1553                           
  1554                           ;main.c: 96:     lcd_run();
  1555     0286  120A  158A  2626  120A  118A  	fcall	_lcd_run
  1556                           
  1557                           ;main.c: 99:     runTimer(&timer_WTANK_Timeout);
  1558     028B  30E0               	movlw	low _timer_WTANK_Timeout
  1559     028C  1283               	bcf	3,5	;RP0=0, select bank0
  1560     028D  1303               	bcf	3,6	;RP1=0, select bank0
  1561     028E  00D2               	movwf	runTimer@timer
  1562     028F  3000               	movlw	high _timer_WTANK_Timeout
  1563     0290  00D3               	movwf	runTimer@timer+1
  1564     0291  120A  118A  24A7  120A  118A  	fcall	_runTimer
  1565                           
  1566                           ;main.c: 100:     runTimer(&timer_IRRIG_Timeout);
  1567     0296  30DA               	movlw	low _timer_IRRIG_Timeout
  1568     0297  1283               	bcf	3,5	;RP0=0, select bank0
  1569     0298  1303               	bcf	3,6	;RP1=0, select bank0
  1570     0299  00D2               	movwf	runTimer@timer
  1571     029A  3000               	movlw	high _timer_IRRIG_Timeout
  1572     029B  00D3               	movwf	runTimer@timer+1
  1573     029C  120A  118A  24A7  120A  118A  	fcall	_runTimer
  1574                           
  1575                           ;main.c: 101:     runTimer(&timer_ADCReadAll);
  1576     02A1  30D4               	movlw	low _timer_ADCReadAll
  1577     02A2  1283               	bcf	3,5	;RP0=0, select bank0
  1578     02A3  1303               	bcf	3,6	;RP1=0, select bank0
  1579     02A4  00D2               	movwf	runTimer@timer
  1580     02A5  3000               	movlw	high _timer_ADCReadAll
  1581     02A6  00D3               	movwf	runTimer@timer+1
  1582     02A7  120A  118A  24A7  120A  118A  	fcall	_runTimer
  1583     02AC                     l2895:
  1584                           
  1585                           ;main.c: 105:     if(light >= 900)
  1586     02AC  1283               	bcf	3,5	;RP0=0, select bank0
  1587     02AD  1303               	bcf	3,6	;RP1=0, select bank0
  1588     02AE  085F               	movf	_light+1,w
  1589     02AF  3A80               	xorlw	128
  1590     02B0  00FF               	movwf	btemp+1
  1591     02B1  3083               	movlw	131
  1592     02B2  027F               	subwf	btemp+1,w
  1593     02B3  1D03               	skipz
  1594     02B4  2AB7               	goto	u2845
  1595     02B5  3084               	movlw	132
  1596     02B6  025E               	subwf	_light,w
  1597     02B7                     u2845:
  1598     02B7  1C03               	skipc
  1599     02B8  2ABA               	goto	u2841
  1600     02B9  2ABB               	goto	u2840
  1601     02BA                     u2841:
  1602     02BA  2ABF               	goto	l259
  1603     02BB                     u2840:
  1604     02BB                     l2897:
  1605                           
  1606                           ;main.c: 106:       PORTCbits.RC3 = 0;
  1607     02BB  1283               	bcf	3,5	;RP0=0, select bank0
  1608     02BC  1303               	bcf	3,6	;RP1=0, select bank0
  1609     02BD  1187               	bcf	7,3	;volatile
  1610     02BE  2AC2               	goto	l2899
  1611     02BF                     l259:	
  1612                           ;main.c: 107:     else
  1613                           
  1614                           
  1615                           ;main.c: 108:       PORTCbits.RC3 = 1;
  1616     02BF  1283               	bcf	3,5	;RP0=0, select bank0
  1617     02C0  1303               	bcf	3,6	;RP1=0, select bank0
  1618     02C1  1587               	bsf	7,3	;volatile
  1619     02C2                     l2899:
  1620                           
  1621                           ;main.c: 110:     if(temperature >= 30)
  1622     02C2  0861               	movf	_temperature+1,w
  1623     02C3  3A80               	xorlw	128
  1624     02C4  00FF               	movwf	btemp+1
  1625     02C5  3080               	movlw	128
  1626     02C6  027F               	subwf	btemp+1,w
  1627     02C7  1D03               	skipz
  1628     02C8  2ACB               	goto	u2855
  1629     02C9  301E               	movlw	30
  1630     02CA  0260               	subwf	_temperature,w
  1631     02CB                     u2855:
  1632     02CB  1C03               	skipc
  1633     02CC  2ACE               	goto	u2851
  1634     02CD  2ACF               	goto	u2850
  1635     02CE                     u2851:
  1636     02CE  2AD3               	goto	l261
  1637     02CF                     u2850:
  1638     02CF                     l2901:
  1639                           
  1640                           ;main.c: 111:       PORTCbits.RC4 = 0;
  1641     02CF  1283               	bcf	3,5	;RP0=0, select bank0
  1642     02D0  1303               	bcf	3,6	;RP1=0, select bank0
  1643     02D1  1207               	bcf	7,4	;volatile
  1644     02D2  2A6B               	goto	l256
  1645     02D3                     l261:	
  1646                           ;main.c: 112:     else
  1647                           
  1648                           
  1649                           ;main.c: 113:       PORTCbits.RC4 = 1;
  1650     02D3  1283               	bcf	3,5	;RP0=0, select bank0
  1651     02D4  1303               	bcf	3,6	;RP1=0, select bank0
  1652     02D5  1607               	bsf	7,4	;volatile
  1653     02D6  2A6B               	goto	l256
  1654     02D7  120A  118A  280C   	ljmp	start
  1655     02DA                     __end_of_main:
  1656                           
  1657                           	psect	text1
  1658     0AFF                     __ptext1:	
  1659 ;; *************** function _timer1_1ms_init *****************
  1660 ;; Defined at:
  1661 ;;		line 51 in file "./config.h"
  1662 ;; Parameters:    Size  Location     Type
  1663 ;;		None
  1664 ;; Auto vars:     Size  Location     Type
  1665 ;;		None
  1666 ;; Return value:  Size  Location     Type
  1667 ;;                  1    wreg      void 
  1668 ;; Registers used:
  1669 ;;		None
  1670 ;; Tracked objects:
  1671 ;;		On entry : 0/0
  1672 ;;		On exit  : 0/0
  1673 ;;		Unchanged: 0/0
  1674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1675 ;;      Params:         0       0       0       0       0
  1676 ;;      Locals:         0       0       0       0       0
  1677 ;;      Temps:          0       0       0       0       0
  1678 ;;      Totals:         0       0       0       0       0
  1679 ;;Total ram usage:        0 bytes
  1680 ;; Hardware stack levels used: 1
  1681 ;; Hardware stack levels required when called: 1
  1682 ;; This function calls:
  1683 ;;		Nothing
  1684 ;; This function is called by:
  1685 ;;		_main
  1686 ;; This function uses a non-reentrant model
  1687 ;;
  1688                           
  1689     0AFF                     _timer1_1ms_init:	
  1690                           ;psect for function _timer1_1ms_init
  1691                           
  1692     0AFF                     l2281:	
  1693                           ;incstack = 0
  1694                           ; Regs used in _timer1_1ms_init: []
  1695                           
  1696     0AFF  1283               	bcf	3,5	;RP0=0, select bank0
  1697     0B00  1303               	bcf	3,6	;RP1=0, select bank0
  1698     0B01  1090               	bcf	16,1	;volatile
  1699     0B02  1610               	bsf	16,4	;volatile
  1700     0B03  1690               	bsf	16,5	;volatile
  1701     0B04  300B               	movlw	11
  1702     0B05  008F               	movwf	15	;volatile
  1703     0B06  30DB               	movlw	219
  1704     0B07  008E               	movwf	14	;volatile
  1705                           
  1706                           ;./config.h: 75:   T1CONbits.TMR1ON = 1;
  1707     0B08  1410               	bsf	16,0	;volatile
  1708     0B09                     l94:
  1709     0B09  0008               	return
  1710     0B0A                     __end_of_timer1_1ms_init:
  1711                           
  1712                           	psect	text2
  1713     0D8F                     __ptext2:	
  1714 ;; *************** function _run_waterTankLogic *****************
  1715 ;; Defined at:
  1716 ;;		line 43 in file "waterTankManager.c"
  1717 ;; Parameters:    Size  Location     Type
  1718 ;;		None
  1719 ;; Auto vars:     Size  Location     Type
  1720 ;;		None
  1721 ;; Return value:  Size  Location     Type
  1722 ;;                  1    wreg      void 
  1723 ;; Registers used:
  1724 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1725 ;; Tracked objects:
  1726 ;;		On entry : 0/0
  1727 ;;		On exit  : 0/0
  1728 ;;		Unchanged: 0/0
  1729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1730 ;;      Params:         0       0       0       0       0
  1731 ;;      Locals:         0       0       0       0       0
  1732 ;;      Temps:          2       0       0       0       0
  1733 ;;      Totals:         2       0       0       0       0
  1734 ;;Total ram usage:        2 bytes
  1735 ;; Hardware stack levels used: 1
  1736 ;; Hardware stack levels required when called: 3
  1737 ;; This function calls:
  1738 ;;		_check_TankStatus
  1739 ;;		_startFilling
  1740 ;;		_stopFilling
  1741 ;; This function is called by:
  1742 ;;		_main
  1743 ;; This function uses a non-reentrant model
  1744 ;;
  1745                           
  1746     0D8F                     _run_waterTankLogic:	
  1747                           ;psect for function _run_waterTankLogic
  1748                           
  1749     0D8F                     l2335:	
  1750                           ;incstack = 0
  1751                           ; Regs used in _run_waterTankLogic: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1752                           
  1753                           
  1754                           ;waterTankManager.c: 46:   check_TankStatus();
  1755     0D8F  120A  158A  276F  120A  158A  	fcall	_check_TankStatus
  1756                           
  1757                           ;waterTankManager.c: 48:   switch (tankState)
  1758     0D94  2DA1               	goto	l2345
  1759     0D95                     l2337:
  1760                           
  1761                           ;waterTankManager.c: 51:     stopFilling();
  1762     0D95  120A  158A  237F  120A  158A  	fcall	_stopFilling
  1763                           
  1764                           ;waterTankManager.c: 53:     break;
  1765     0D9A  2DB9               	goto	l308
  1766     0D9B                     l2339:
  1767                           
  1768                           ;waterTankManager.c: 56:     startFilling();
  1769     0D9B  120A  158A  2392  120A  158A  	fcall	_startFilling
  1770                           
  1771                           ;waterTankManager.c: 57:     break;
  1772     0DA0  2DB9               	goto	l308
  1773     0DA1                     l2345:
  1774     0DA1  087B               	movf	_tankState,w
  1775     0DA2  00F6               	movwf	??_run_waterTankLogic
  1776     0DA3  01F7               	clrf	??_run_waterTankLogic+1
  1777     0DA4  1BF6               	btfsc	??_run_waterTankLogic,7
  1778     0DA5  03F7               	decf	??_run_waterTankLogic+1,f
  1779                           
  1780                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1781                           ; Switch size 1, requested type "simple"
  1782                           ; Number of cases is 1, Range of values is 0 to 0
  1783                           ; switch strategies available:
  1784                           ; Name         Instructions Cycles
  1785                           ; simple_byte            4     3 (average)
  1786                           ; direct_byte           11     8 (fixed)
  1787                           ; jumptable            260     6 (fixed)
  1788                           ;	Chosen strategy is simple_byte
  1789     0DA6  0877               	movf	??_run_waterTankLogic+1,w
  1790     0DA7  3A00               	xorlw	0	; case 0
  1791     0DA8  1903               	skipnz
  1792     0DA9  2DAB               	goto	l2923
  1793     0DAA  2D95               	goto	l2337
  1794     0DAB                     l2923:
  1795                           
  1796                           ; Switch size 1, requested type "simple"
  1797                           ; Number of cases is 4, Range of values is 0 to 3
  1798                           ; switch strategies available:
  1799                           ; Name         Instructions Cycles
  1800                           ; simple_byte           13     7 (average)
  1801                           ; direct_byte           20     8 (fixed)
  1802                           ; jumptable            260     6 (fixed)
  1803                           ;	Chosen strategy is simple_byte
  1804     0DAB  0876               	movf	??_run_waterTankLogic,w
  1805     0DAC  3A00               	xorlw	0	; case 0
  1806     0DAD  1903               	skipnz
  1807     0DAE  2D95               	goto	l2337
  1808     0DAF  3A01               	xorlw	1	; case 1
  1809     0DB0  1903               	skipnz
  1810     0DB1  2DB9               	goto	l308
  1811     0DB2  3A03               	xorlw	3	; case 2
  1812     0DB3  1903               	skipnz
  1813     0DB4  2D9B               	goto	l2339
  1814     0DB5  3A01               	xorlw	1	; case 3
  1815     0DB6  1903               	skipnz
  1816     0DB7  2D95               	goto	l2337
  1817     0DB8  2D95               	goto	l2337
  1818     0DB9                     l308:
  1819     0DB9  0008               	return
  1820     0DBA                     __end_of_run_waterTankLogic:
  1821                           
  1822                           	psect	text3
  1823     0B92                     __ptext3:	
  1824 ;; *************** function _startFilling *****************
  1825 ;; Defined at:
  1826 ;;		line 72 in file "waterTankManager.c"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;		None
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;		None
  1831 ;; Return value:  Size  Location     Type
  1832 ;;                  1    wreg      void 
  1833 ;; Registers used:
  1834 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1835 ;; Tracked objects:
  1836 ;;		On entry : 0/0
  1837 ;;		On exit  : 0/0
  1838 ;;		Unchanged: 0/0
  1839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1840 ;;      Params:         0       0       0       0       0
  1841 ;;      Locals:         0       0       0       0       0
  1842 ;;      Temps:          0       0       0       0       0
  1843 ;;      Totals:         0       0       0       0       0
  1844 ;;Total ram usage:        0 bytes
  1845 ;; Hardware stack levels used: 1
  1846 ;; Hardware stack levels required when called: 2
  1847 ;; This function calls:
  1848 ;;		_startTimer
  1849 ;; This function is called by:
  1850 ;;		_run_waterTankLogic
  1851 ;; This function uses a non-reentrant model
  1852 ;;
  1853                           
  1854     0B92                     _startFilling:	
  1855                           ;psect for function _startFilling
  1856                           
  1857     0B92                     l2255:	
  1858                           ;incstack = 0
  1859                           ; Regs used in _startFilling: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1860                           
  1861                           
  1862                           ;waterTankManager.c: 74:   if(isFilling)
  1863     0B92  1CFA               	btfss	_isFilling/(0+8),_isFilling& (0+7)
  1864     0B93  2B95               	goto	u2101
  1865     0B94  2B96               	goto	u2100
  1866     0B95                     u2101:
  1867     0B95  2B97               	goto	l311
  1868     0B96                     u2100:
  1869     0B96  2BA4               	goto	l312
  1870     0B97                     l311:
  1871                           
  1872                           ;waterTankManager.c: 77:   isFilling = 1;
  1873     0B97  14FA               	bsf	_isFilling/(0+8),_isFilling& (0+7)
  1874                           
  1875                           ;waterTankManager.c: 78:   PORTCbits.RC0 = 0;
  1876     0B98  1283               	bcf	3,5	;RP0=0, select bank0
  1877     0B99  1303               	bcf	3,6	;RP1=0, select bank0
  1878     0B9A  1007               	bcf	7,0	;volatile
  1879     0B9B                     l2259:
  1880                           
  1881                           ;waterTankManager.c: 79:   startTimer(&timer_WTANK_Timeout);
  1882     0B9B  30E0               	movlw	low _timer_WTANK_Timeout
  1883     0B9C  00F2               	movwf	startTimer@timer
  1884     0B9D  3000               	movlw	high _timer_WTANK_Timeout
  1885     0B9E  00F3               	movwf	startTimer@timer+1
  1886     0B9F  120A  158A  25EF  120A  158A  	fcall	_startTimer
  1887     0BA4                     l312:
  1888     0BA4  0008               	return
  1889     0BA5                     __end_of_startFilling:
  1890                           
  1891                           	psect	text4
  1892     0F6F                     __ptext4:	
  1893 ;; *************** function _check_TankStatus *****************
  1894 ;; Defined at:
  1895 ;;		line 14 in file "waterTankManager.c"
  1896 ;; Parameters:    Size  Location     Type
  1897 ;;		None
  1898 ;; Auto vars:     Size  Location     Type
  1899 ;;  bot             1    4[COMMON] unsigned char 
  1900 ;;  top             1    3[COMMON] unsigned char 
  1901 ;; Return value:  Size  Location     Type
  1902 ;;                  1    wreg      void 
  1903 ;; Registers used:
  1904 ;;		wreg, status,2, status,0
  1905 ;; Tracked objects:
  1906 ;;		On entry : 0/0
  1907 ;;		On exit  : 0/0
  1908 ;;		Unchanged: 0/0
  1909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1910 ;;      Params:         0       0       0       0       0
  1911 ;;      Locals:         2       0       0       0       0
  1912 ;;      Temps:          1       0       0       0       0
  1913 ;;      Totals:         3       0       0       0       0
  1914 ;;Total ram usage:        3 bytes
  1915 ;; Hardware stack levels used: 1
  1916 ;; Hardware stack levels required when called: 1
  1917 ;; This function calls:
  1918 ;;		Nothing
  1919 ;; This function is called by:
  1920 ;;		_run_waterTankLogic
  1921 ;; This function uses a non-reentrant model
  1922 ;;
  1923                           
  1924     0F6F                     _check_TankStatus:	
  1925                           ;psect for function _check_TankStatus
  1926                           
  1927     0F6F                     l2227:	
  1928                           ;incstack = 0
  1929                           ; Regs used in _check_TankStatus: [wreg+status,2+status,0]
  1930                           
  1931                           
  1932                           ;waterTankManager.c: 17:   unsigned char top = PORTCbits.RC6;
  1933     0F6F  1283               	bcf	3,5	;RP0=0, select bank0
  1934     0F70  1303               	bcf	3,6	;RP1=0, select bank0
  1935     0F71  0E07               	swapf	7,w	;volatile
  1936     0F72  00F2               	movwf	??_check_TankStatus
  1937     0F73  0CF2               	rrf	??_check_TankStatus,f
  1938     0F74  0C72               	rrf	??_check_TankStatus,w
  1939     0F75  3901               	andlw	1
  1940     0F76  00F3               	movwf	check_TankStatus@top
  1941                           
  1942                           ;waterTankManager.c: 18:   unsigned char bot = PORTCbits.RC7;
  1943     0F77  0D07               	rlf	7,w	;volatile
  1944     0F78  0D07               	rlf	7,w	;volatile
  1945     0F79  3901               	andlw	1
  1946     0F7A  00F4               	movwf	check_TankStatus@bot
  1947                           
  1948                           ;waterTankManager.c: 20:   if(tankState == WTANK_ERROR)
  1949     0F7B  3003               	movlw	3
  1950     0F7C  067B               	xorwf	_tankState,w
  1951     0F7D  1D03               	btfss	3,2
  1952     0F7E  2F80               	goto	u2011
  1953     0F7F  2F81               	goto	u2010
  1954     0F80                     u2011:
  1955     0F80  2F84               	goto	l2231
  1956     0F81                     u2010:
  1957     0F81                     l2229:
  1958                           
  1959                           ;waterTankManager.c: 21:     tankState = WTANK_ERROR;
  1960     0F81  3003               	movlw	3
  1961     0F82  00FB               	movwf	_tankState
  1962     0F83  2FB5               	goto	l298
  1963     0F84                     l2231:
  1964     0F84  0373               	decf	check_TankStatus@top,w
  1965     0F85  1D03               	btfss	3,2
  1966     0F86  2F88               	goto	u2021
  1967     0F87  2F89               	goto	u2020
  1968     0F88                     u2021:
  1969     0F88  2F8F               	goto	l2237
  1970     0F89                     u2020:
  1971     0F89                     l2233:
  1972     0F89  0874               	movf	check_TankStatus@bot,w
  1973     0F8A  1D03               	btfss	3,2
  1974     0F8B  2F8D               	goto	u2031
  1975     0F8C  2F8E               	goto	u2030
  1976     0F8D                     u2031:
  1977     0F8D  2F8F               	goto	l2237
  1978     0F8E                     u2030:
  1979     0F8E  2F81               	goto	l2229
  1980     0F8F                     l2237:
  1981     0F8F  0873               	movf	check_TankStatus@top,w
  1982     0F90  1D03               	btfss	3,2
  1983     0F91  2F93               	goto	u2041
  1984     0F92  2F94               	goto	u2040
  1985     0F93                     u2041:
  1986     0F93  2F9C               	goto	l2243
  1987     0F94                     u2040:
  1988     0F94                     l2239:
  1989     0F94  0374               	decf	check_TankStatus@bot,w
  1990     0F95  1D03               	btfss	3,2
  1991     0F96  2F98               	goto	u2051
  1992     0F97  2F99               	goto	u2050
  1993     0F98                     u2051:
  1994     0F98  2F9C               	goto	l2243
  1995     0F99                     u2050:
  1996     0F99                     l2241:
  1997                           
  1998                           ;waterTankManager.c: 29:     tankState = WTANK_MID;
  1999     0F99  3001               	movlw	1
  2000     0F9A  00FB               	movwf	_tankState
  2001     0F9B  2FB5               	goto	l298
  2002     0F9C                     l2243:
  2003     0F9C  0373               	decf	check_TankStatus@top,w
  2004     0F9D  1D03               	btfss	3,2
  2005     0F9E  2FA0               	goto	u2061
  2006     0F9F  2FA1               	goto	u2060
  2007     0FA0                     u2061:
  2008     0FA0  2FA8               	goto	l2249
  2009     0FA1                     u2060:
  2010     0FA1                     l2245:
  2011     0FA1  0374               	decf	check_TankStatus@bot,w
  2012     0FA2  1D03               	btfss	3,2
  2013     0FA3  2FA5               	goto	u2071
  2014     0FA4  2FA6               	goto	u2070
  2015     0FA5                     u2071:
  2016     0FA5  2FA8               	goto	l2249
  2017     0FA6                     u2070:
  2018     0FA6                     l2247:
  2019                           
  2020                           ;waterTankManager.c: 33:     tankState = WTANK_FULL;
  2021     0FA6  01FB               	clrf	_tankState
  2022     0FA7  2FB5               	goto	l298
  2023     0FA8                     l2249:
  2024     0FA8  0873               	movf	check_TankStatus@top,w
  2025     0FA9  1D03               	btfss	3,2
  2026     0FAA  2FAC               	goto	u2081
  2027     0FAB  2FAD               	goto	u2080
  2028     0FAC                     u2081:
  2029     0FAC  2FB5               	goto	l292
  2030     0FAD                     u2080:
  2031     0FAD                     l2251:
  2032     0FAD  0874               	movf	check_TankStatus@bot,w
  2033     0FAE  1D03               	btfss	3,2
  2034     0FAF  2FB1               	goto	u2091
  2035     0FB0  2FB2               	goto	u2090
  2036     0FB1                     u2091:
  2037     0FB1  2FB5               	goto	l292
  2038     0FB2                     u2090:
  2039     0FB2                     l2253:
  2040                           
  2041                           ;waterTankManager.c: 37:     tankState = WTANK_LOW;
  2042     0FB2  3002               	movlw	2
  2043     0FB3  00FB               	movwf	_tankState
  2044     0FB4  2FB5               	goto	l298
  2045     0FB5                     l292:
  2046     0FB5                     l298:
  2047     0FB5  0008               	return
  2048     0FB6                     __end_of_check_TankStatus:
  2049                           
  2050                           	psect	text5
  2051     0E62                     __ptext5:	
  2052 ;; *************** function _run_IrrigationLogic *****************
  2053 ;; Defined at:
  2054 ;;		line 17 in file "irrigation.c"
  2055 ;; Parameters:    Size  Location     Type
  2056 ;;  sMoistureVal    2    6[COMMON] int 
  2057 ;; Auto vars:     Size  Location     Type
  2058 ;;		None
  2059 ;; Return value:  Size  Location     Type
  2060 ;;                  1    wreg      void 
  2061 ;; Registers used:
  2062 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2063 ;; Tracked objects:
  2064 ;;		On entry : 0/0
  2065 ;;		On exit  : 0/0
  2066 ;;		Unchanged: 0/0
  2067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2068 ;;      Params:         2       0       0       0       0
  2069 ;;      Locals:         0       0       0       0       0
  2070 ;;      Temps:          0       0       0       0       0
  2071 ;;      Totals:         2       0       0       0       0
  2072 ;;Total ram usage:        2 bytes
  2073 ;; Hardware stack levels used: 1
  2074 ;; Hardware stack levels required when called: 3
  2075 ;; This function calls:
  2076 ;;		_startIrrigation
  2077 ;;		_stopIrrigation
  2078 ;; This function is called by:
  2079 ;;		_main
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082                           
  2083     0E62                     _run_IrrigationLogic:	
  2084                           ;psect for function _run_IrrigationLogic
  2085                           
  2086     0E62                     l2351:	
  2087                           ;incstack = 0
  2088                           ; Regs used in _run_IrrigationLogic: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  2089                           
  2090                           
  2091                           ;irrigation.c: 17: void run_IrrigationLogic(int sMoistureValue);irrigation.c: 18: {;irri
      +                          gation.c: 20:   if(irrigationState == IRRIG_ERROR)
  2092     0E62  3002               	movlw	2
  2093     0E63  1283               	bcf	3,5	;RP0=0, select bank0
  2094     0E64  1303               	bcf	3,6	;RP1=0, select bank0
  2095     0E65  066D               	xorwf	_irrigationState,w
  2096     0E66  1D03               	btfss	3,2
  2097     0E67  2E69               	goto	u2121
  2098     0E68  2E6A               	goto	u2120
  2099     0E69                     u2121:
  2100     0E69  2E70               	goto	l2355
  2101     0E6A                     u2120:
  2102     0E6A                     l2353:
  2103                           
  2104                           ;irrigation.c: 21:   {;irrigation.c: 22:     stopIrrigation();
  2105     0E6A  120A  158A  23CC  120A  158A  	fcall	_stopIrrigation
  2106                           
  2107                           ;irrigation.c: 24:   }
  2108     0E6F  2E9E               	goto	l377
  2109     0E70                     l2355:
  2110     0E70  3002               	movlw	2
  2111     0E71  067B               	xorwf	_tankState,w
  2112     0E72  1903               	btfsc	3,2
  2113     0E73  2E75               	goto	u2131
  2114     0E74  2E76               	goto	u2130
  2115     0E75                     u2131:
  2116     0E75  2E6A               	goto	l2353
  2117     0E76                     u2130:
  2118     0E76                     l2357:
  2119     0E76  3003               	movlw	3
  2120     0E77  067B               	xorwf	_tankState,w
  2121     0E78  1D03               	btfss	3,2
  2122     0E79  2E7B               	goto	u2141
  2123     0E7A  2E7C               	goto	u2140
  2124     0E7B                     u2141:
  2125     0E7B  2E7D               	goto	l2361
  2126     0E7C                     u2140:
  2127     0E7C  2E6A               	goto	l2353
  2128     0E7D                     l2361:
  2129     0E7D  0877               	movf	run_IrrigationLogic@sMoistureValue+1,w
  2130     0E7E  3A80               	xorlw	128
  2131     0E7F  00FF               	movwf	btemp+1
  2132     0E80  3080               	movlw	128
  2133     0E81  027F               	subwf	btemp+1,w
  2134     0E82  1D03               	skipz
  2135     0E83  2E86               	goto	u2155
  2136     0E84  301F               	movlw	31
  2137     0E85  0276               	subwf	run_IrrigationLogic@sMoistureValue,w
  2138     0E86                     u2155:
  2139     0E86  1803               	skipnc
  2140     0E87  2E89               	goto	u2151
  2141     0E88  2E8A               	goto	u2150
  2142     0E89                     u2151:
  2143     0E89  2E90               	goto	l2365
  2144     0E8A                     u2150:
  2145     0E8A                     l2363:
  2146                           
  2147                           ;irrigation.c: 30:     startIrrigation();
  2148     0E8A  120A  158A  23B8  120A  158A  	fcall	_startIrrigation
  2149     0E8F  2E9E               	goto	l377
  2150     0E90                     l2365:
  2151     0E90  0877               	movf	run_IrrigationLogic@sMoistureValue+1,w
  2152     0E91  3A80               	xorlw	128
  2153     0E92  00FF               	movwf	btemp+1
  2154     0E93  3080               	movlw	128
  2155     0E94  027F               	subwf	btemp+1,w
  2156     0E95  1D03               	skipz
  2157     0E96  2E99               	goto	u2165
  2158     0E97  3032               	movlw	50
  2159     0E98  0276               	subwf	run_IrrigationLogic@sMoistureValue,w
  2160     0E99                     u2165:
  2161     0E99  1C03               	skipc
  2162     0E9A  2E9C               	goto	u2161
  2163     0E9B  2E9D               	goto	u2160
  2164     0E9C                     u2161:
  2165     0E9C  2E9E               	goto	l373
  2166     0E9D                     u2160:
  2167     0E9D  2E6A               	goto	l2353
  2168     0E9E                     l373:
  2169     0E9E                     l377:
  2170     0E9E  0008               	return
  2171     0E9F                     __end_of_run_IrrigationLogic:
  2172                           
  2173                           	psect	text6
  2174     0BB8                     __ptext6:	
  2175 ;; *************** function _startIrrigation *****************
  2176 ;; Defined at:
  2177 ;;		line 36 in file "irrigation.c"
  2178 ;; Parameters:    Size  Location     Type
  2179 ;;		None
  2180 ;; Auto vars:     Size  Location     Type
  2181 ;;		None
  2182 ;; Return value:  Size  Location     Type
  2183 ;;                  1    wreg      void 
  2184 ;; Registers used:
  2185 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2186 ;; Tracked objects:
  2187 ;;		On entry : 0/0
  2188 ;;		On exit  : 0/0
  2189 ;;		Unchanged: 0/0
  2190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2191 ;;      Params:         0       0       0       0       0
  2192 ;;      Locals:         0       0       0       0       0
  2193 ;;      Temps:          0       0       0       0       0
  2194 ;;      Totals:         0       0       0       0       0
  2195 ;;Total ram usage:        0 bytes
  2196 ;; Hardware stack levels used: 1
  2197 ;; Hardware stack levels required when called: 2
  2198 ;; This function calls:
  2199 ;;		_startTimer
  2200 ;; This function is called by:
  2201 ;;		_run_IrrigationLogic
  2202 ;; This function uses a non-reentrant model
  2203 ;;
  2204                           
  2205     0BB8                     _startIrrigation:	
  2206                           ;psect for function _startIrrigation
  2207                           
  2208     0BB8                     l2265:	
  2209                           ;incstack = 0
  2210                           ; Regs used in _startIrrigation: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2211                           
  2212                           
  2213                           ;irrigation.c: 38:   if(isIrrigating)
  2214     0BB8  1C7A               	btfss	_isIrrigating/(0+8),_isIrrigating& (0+7)
  2215     0BB9  2BBB               	goto	u2111
  2216     0BBA  2BBC               	goto	u2110
  2217     0BBB                     u2111:
  2218     0BBB  2BBD               	goto	l380
  2219     0BBC                     u2110:
  2220     0BBC  2BCB               	goto	l381
  2221     0BBD                     l380:
  2222                           
  2223                           ;irrigation.c: 41:   PORTCbits.RC1 = 0;
  2224     0BBD  1283               	bcf	3,5	;RP0=0, select bank0
  2225     0BBE  1303               	bcf	3,6	;RP1=0, select bank0
  2226     0BBF  1087               	bcf	7,1	;volatile
  2227     0BC0                     l2269:
  2228                           
  2229                           ;irrigation.c: 42:   irrigationState = IRRIG_ON;
  2230     0BC0  01ED               	clrf	_irrigationState
  2231     0BC1                     l2271:
  2232                           
  2233                           ;irrigation.c: 43:   isIrrigating = 1;
  2234     0BC1  147A               	bsf	_isIrrigating/(0+8),_isIrrigating& (0+7)
  2235     0BC2                     l2273:
  2236                           
  2237                           ;irrigation.c: 44:   startTimer(&timer_IRRIG_Timeout);
  2238     0BC2  30DA               	movlw	low _timer_IRRIG_Timeout
  2239     0BC3  00F2               	movwf	startTimer@timer
  2240     0BC4  3000               	movlw	high _timer_IRRIG_Timeout
  2241     0BC5  00F3               	movwf	startTimer@timer+1
  2242     0BC6  120A  158A  25EF  120A  158A  	fcall	_startTimer
  2243     0BCB                     l381:
  2244     0BCB  0008               	return
  2245     0BCC                     __end_of_startIrrigation:
  2246                           
  2247                           	psect	text7
  2248     0DEF                     __ptext7:	
  2249 ;; *************** function _startTimer *****************
  2250 ;; Defined at:
  2251 ;;		line 25 in file "virtualTimer.c"
  2252 ;; Parameters:    Size  Location     Type
  2253 ;;  timer           2    2[COMMON] PTR struct .
  2254 ;;		 -> timer_IRRIG_Timeout(6), timer_WTANK_Timeout(6), timer_ADCReadAll(6), 
  2255 ;; Auto vars:     Size  Location     Type
  2256 ;;		None
  2257 ;; Return value:  Size  Location     Type
  2258 ;;                  1    wreg      void 
  2259 ;; Registers used:
  2260 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2261 ;; Tracked objects:
  2262 ;;		On entry : 0/0
  2263 ;;		On exit  : 0/0
  2264 ;;		Unchanged: 0/0
  2265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2266 ;;      Params:         2       0       0       0       0
  2267 ;;      Locals:         0       0       0       0       0
  2268 ;;      Temps:          2       0       0       0       0
  2269 ;;      Totals:         4       0       0       0       0
  2270 ;;Total ram usage:        4 bytes
  2271 ;; Hardware stack levels used: 1
  2272 ;; Hardware stack levels required when called: 1
  2273 ;; This function calls:
  2274 ;;		Nothing
  2275 ;; This function is called by:
  2276 ;;		_main
  2277 ;;		_startFilling
  2278 ;;		_startIrrigation
  2279 ;; This function uses a non-reentrant model
  2280 ;;
  2281                           
  2282     0DEF                     _startTimer:	
  2283                           ;psect for function _startTimer
  2284                           
  2285     0DEF                     l2079:	
  2286                           ;incstack = 0
  2287                           ; Regs used in _startTimer: [wreg-fsr0h+status,2+status,0]
  2288                           
  2289                           
  2290                           ;virtualTimer.c: 25: void startTimer(virtualTimer *timer);virtualTimer.c: 26: {;virtualT
      +                          imer.c: 27:   if(timer->active)
  2291     0DEF  0872               	movf	startTimer@timer,w
  2292     0DF0  3E04               	addlw	4
  2293     0DF1  00F4               	movwf	??_startTimer
  2294     0DF2  0873               	movf	startTimer@timer+1,w
  2295     0DF3  1803               	skipnc
  2296     0DF4  3E01               	addlw	1
  2297     0DF5  3E00               	addlw	0
  2298     0DF6  00F5               	movwf	??_startTimer+1
  2299     0DF7  0874               	movf	??_startTimer,w
  2300     0DF8  0084               	movwf	4
  2301     0DF9  1783               	bsf	3,7
  2302     0DFA  1C75               	btfss	??_startTimer+1,0
  2303     0DFB  1383               	bcf	3,7
  2304     0DFC  0800               	movf	0,w
  2305     0DFD  1903               	btfsc	3,2
  2306     0DFE  2E00               	goto	u1831
  2307     0DFF  2E01               	goto	u1830
  2308     0E00                     u1831:
  2309     0E00  2E02               	goto	l2083
  2310     0E01                     u1830:
  2311     0E01  2E25               	goto	l333
  2312     0E02                     l2083:
  2313                           
  2314                           ;virtualTimer.c: 30:   timer->startTime = timerCounter;
  2315     0E02  0872               	movf	startTimer@timer,w
  2316     0E03  3E02               	addlw	2
  2317     0E04  00F4               	movwf	??_startTimer
  2318     0E05  0873               	movf	startTimer@timer+1,w
  2319     0E06  1803               	skipnc
  2320     0E07  3E01               	addlw	1
  2321     0E08  3E00               	addlw	0
  2322     0E09  00F5               	movwf	??_startTimer+1
  2323     0E0A  0874               	movf	??_startTimer,w
  2324     0E0B  0084               	movwf	4
  2325     0E0C  1783               	bsf	3,7
  2326     0E0D  1C75               	btfss	??_startTimer+1,0
  2327     0E0E  1383               	bcf	3,7
  2328     0E0F  1283               	bcf	3,5	;RP0=0, select bank0
  2329     0E10  1303               	bcf	3,6	;RP1=0, select bank0
  2330     0E11  085C               	movf	_timerCounter,w	;volatile
  2331     0E12  0080               	movwf	0
  2332     0E13  0A84               	incf	4,f
  2333     0E14  085D               	movf	_timerCounter+1,w	;volatile
  2334     0E15  0080               	movwf	0
  2335                           
  2336                           ;virtualTimer.c: 31:   timer->active = 1;
  2337     0E16  0872               	movf	startTimer@timer,w
  2338     0E17  3E04               	addlw	4
  2339     0E18  00F4               	movwf	??_startTimer
  2340     0E19  0873               	movf	startTimer@timer+1,w
  2341     0E1A  1803               	skipnc
  2342     0E1B  3E01               	addlw	1
  2343     0E1C  3E00               	addlw	0
  2344     0E1D  00F5               	movwf	??_startTimer+1
  2345     0E1E  0874               	movf	??_startTimer,w
  2346     0E1F  0084               	movwf	4
  2347     0E20  1783               	bsf	3,7
  2348     0E21  1C75               	btfss	??_startTimer+1,0
  2349     0E22  1383               	bcf	3,7
  2350     0E23  3001               	movlw	1
  2351     0E24  0080               	movwf	0
  2352     0E25                     l333:
  2353     0E25  0008               	return
  2354     0E26                     __end_of_startTimer:
  2355                           
  2356                           	psect	text8
  2357     04A7                     __ptext8:	
  2358 ;; *************** function _runTimer *****************
  2359 ;; Defined at:
  2360 ;;		line 5 in file "virtualTimer.c"
  2361 ;; Parameters:    Size  Location     Type
  2362 ;;  timer           2   50[BANK0 ] PTR struct .
  2363 ;;		 -> timer_IRRIG_Timeout(6), timer_WTANK_Timeout(6), timer_ADCReadAll(6), 
  2364 ;; Auto vars:     Size  Location     Type
  2365 ;;  elapsedTime     2   56[BANK0 ] unsigned int 
  2366 ;; Return value:  Size  Location     Type
  2367 ;;                  1    wreg      void 
  2368 ;; Registers used:
  2369 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2370 ;; Tracked objects:
  2371 ;;		On entry : 0/0
  2372 ;;		On exit  : 0/0
  2373 ;;		Unchanged: 0/0
  2374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2375 ;;      Params:         0       2       0       0       0
  2376 ;;      Locals:         0       2       0       0       0
  2377 ;;      Temps:          0       4       0       0       0
  2378 ;;      Totals:         0       8       0       0       0
  2379 ;;Total ram usage:        8 bytes
  2380 ;; Hardware stack levels used: 1
  2381 ;; Hardware stack levels required when called: 5
  2382 ;; This function calls:
  2383 ;;		_ADC_readAll
  2384 ;;		_interrupt_IRRIG_timeout
  2385 ;;		_interrupt_WTANK_timeout
  2386 ;; This function is called by:
  2387 ;;		_main
  2388 ;; This function uses a non-reentrant model
  2389 ;;
  2390                           
  2391     04A7                     _runTimer:	
  2392                           ;psect for function _runTimer
  2393                           
  2394     04A7                     l2849:	
  2395                           ;incstack = 0
  2396                           ; Regs used in _runTimer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2397                           
  2398                           
  2399                           ;virtualTimer.c: 5: void runTimer(virtualTimer *timer);virtualTimer.c: 6: {;virtualTimer
      +                          .c: 7:   if(timer->active == 0)
  2400     04A7  1283               	bcf	3,5	;RP0=0, select bank0
  2401     04A8  1303               	bcf	3,6	;RP1=0, select bank0
  2402     04A9  0852               	movf	runTimer@timer,w
  2403     04AA  3E04               	addlw	4
  2404     04AB  00D4               	movwf	??_runTimer
  2405     04AC  0853               	movf	runTimer@timer+1,w
  2406     04AD  1803               	skipnc
  2407     04AE  3E01               	addlw	1
  2408     04AF  3E00               	addlw	0
  2409     04B0  00D5               	movwf	??_runTimer+1
  2410     04B1  0854               	movf	??_runTimer,w
  2411     04B2  0084               	movwf	4
  2412     04B3  1783               	bsf	3,7
  2413     04B4  1C55               	btfss	??_runTimer+1,0
  2414     04B5  1383               	bcf	3,7
  2415     04B6  0800               	movf	0,w
  2416     04B7  1D03               	btfss	3,2
  2417     04B8  2CBA               	goto	u2801
  2418     04B9  2CBB               	goto	u2800
  2419     04BA                     u2801:
  2420     04BA  2CBC               	goto	l2853
  2421     04BB                     u2800:
  2422     04BB  2D21               	goto	l327
  2423     04BC                     l2853:
  2424                           
  2425                           ;virtualTimer.c: 10:   unsigned int elapsedTime = timerCounter - timer->startTime;
  2426     04BC  0852               	movf	runTimer@timer,w
  2427     04BD  3E02               	addlw	2
  2428     04BE  00D4               	movwf	??_runTimer
  2429     04BF  0853               	movf	runTimer@timer+1,w
  2430     04C0  1803               	skipnc
  2431     04C1  3E01               	addlw	1
  2432     04C2  3E00               	addlw	0
  2433     04C3  00D5               	movwf	??_runTimer+1
  2434     04C4  0854               	movf	??_runTimer,w
  2435     04C5  0084               	movwf	4
  2436     04C6  1783               	bsf	3,7
  2437     04C7  1C55               	btfss	??_runTimer+1,0
  2438     04C8  1383               	bcf	3,7
  2439     04C9  0800               	movf	0,w
  2440     04CA  00D6               	movwf	??_runTimer+2
  2441     04CB  0A84               	incf	4,f
  2442     04CC  0800               	movf	0,w
  2443     04CD  00D7               	movwf	??_runTimer+3
  2444     04CE  0856               	movf	??_runTimer+2,w
  2445     04CF  025C               	subwf	_timerCounter,w	;volatile
  2446     04D0  00D8               	movwf	runTimer@elapsedTime
  2447     04D1  0857               	movf	??_runTimer+3,w
  2448     04D2  1C03               	skipc
  2449     04D3  0A57               	incf	??_runTimer+3,w
  2450     04D4  025D               	subwf	_timerCounter+1,w	;volatile
  2451     04D5  00D9               	movwf	runTimer@elapsedTime+1
  2452     04D6                     l2855:
  2453                           
  2454                           ;virtualTimer.c: 14:   if(elapsedTime >= timer->targetTime)
  2455     04D6  0852               	movf	runTimer@timer,w
  2456     04D7  0084               	movwf	4
  2457     04D8  1783               	bsf	3,7
  2458     04D9  1C53               	btfss	runTimer@timer+1,0
  2459     04DA  1383               	bcf	3,7
  2460     04DB  0800               	movf	0,w
  2461     04DC  00D4               	movwf	??_runTimer
  2462     04DD  0A84               	incf	4,f
  2463     04DE  0800               	movf	0,w
  2464     04DF  00D5               	movwf	??_runTimer+1
  2465     04E0  0855               	movf	??_runTimer+1,w
  2466     04E1  0259               	subwf	runTimer@elapsedTime+1,w
  2467     04E2  1D03               	skipz
  2468     04E3  2CE6               	goto	u2815
  2469     04E4  0854               	movf	??_runTimer,w
  2470     04E5  0258               	subwf	runTimer@elapsedTime,w
  2471     04E6                     u2815:
  2472     04E6  1C03               	skipc
  2473     04E7  2CE9               	goto	u2811
  2474     04E8  2CEA               	goto	u2810
  2475     04E9                     u2811:
  2476     04E9  2D21               	goto	l327
  2477     04EA                     u2810:
  2478     04EA                     l2857:
  2479                           
  2480                           ;virtualTimer.c: 15:   {;virtualTimer.c: 16:     timer->startTime = timerCounter;
  2481     04EA  0852               	movf	runTimer@timer,w
  2482     04EB  3E02               	addlw	2
  2483     04EC  00D4               	movwf	??_runTimer
  2484     04ED  0853               	movf	runTimer@timer+1,w
  2485     04EE  1803               	skipnc
  2486     04EF  3E01               	addlw	1
  2487     04F0  3E00               	addlw	0
  2488     04F1  00D5               	movwf	??_runTimer+1
  2489     04F2  0854               	movf	??_runTimer,w
  2490     04F3  0084               	movwf	4
  2491     04F4  1783               	bsf	3,7
  2492     04F5  1C55               	btfss	??_runTimer+1,0
  2493     04F6  1383               	bcf	3,7
  2494     04F7  085C               	movf	_timerCounter,w	;volatile
  2495     04F8  0080               	movwf	0
  2496     04F9  0A84               	incf	4,f
  2497     04FA  085D               	movf	_timerCounter+1,w	;volatile
  2498     04FB  0080               	movwf	0
  2499                           
  2500                           ;virtualTimer.c: 18:     if(timer->callback != 0)
  2501     04FC  0852               	movf	runTimer@timer,w
  2502     04FD  3E05               	addlw	5
  2503     04FE  00D4               	movwf	??_runTimer
  2504     04FF  0853               	movf	runTimer@timer+1,w
  2505     0500  1803               	skipnc
  2506     0501  3E01               	addlw	1
  2507     0502  3E00               	addlw	0
  2508     0503  00D5               	movwf	??_runTimer+1
  2509     0504  0854               	movf	??_runTimer,w
  2510     0505  0084               	movwf	4
  2511     0506  1783               	bsf	3,7
  2512     0507  1C55               	btfss	??_runTimer+1,0
  2513     0508  1383               	bcf	3,7
  2514     0509  0800               	movf	0,w
  2515     050A  1903               	btfsc	3,2
  2516     050B  2D0D               	goto	u2821
  2517     050C  2D0E               	goto	u2820
  2518     050D                     u2821:
  2519     050D  2D21               	goto	l327
  2520     050E                     u2820:
  2521     050E                     l2859:
  2522                           
  2523                           ;virtualTimer.c: 19:       timer->callback();
  2524     050E  0852               	movf	runTimer@timer,w
  2525     050F  3E05               	addlw	5
  2526     0510  00D4               	movwf	??_runTimer
  2527     0511  0853               	movf	runTimer@timer+1,w
  2528     0512  1803               	skipnc
  2529     0513  3E01               	addlw	1
  2530     0514  3E00               	addlw	0
  2531     0515  00D5               	movwf	??_runTimer+1
  2532     0516  0854               	movf	??_runTimer,w
  2533     0517  0084               	movwf	4
  2534     0518  1783               	bsf	3,7
  2535     0519  1C55               	btfss	??_runTimer+1,0
  2536     051A  1383               	bcf	3,7
  2537     051B  0800               	movf	0,w
  2538     051C  120A  118A  2045  120A  118A  	fcall	fptable
  2539     0521                     l327:
  2540     0521  0008               	return
  2541     0522                     __end_of_runTimer:
  2542                           
  2543                           	psect	text9
  2544     0AF5                     __ptext9:	
  2545 ;; *************** function _interrupt_IRRIG_timeout *****************
  2546 ;; Defined at:
  2547 ;;		line 58 in file "irrigation.c"
  2548 ;; Parameters:    Size  Location     Type
  2549 ;;		None
  2550 ;; Auto vars:     Size  Location     Type
  2551 ;;		None
  2552 ;; Return value:  Size  Location     Type
  2553 ;;                  1    wreg      void 
  2554 ;; Registers used:
  2555 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2556 ;; Tracked objects:
  2557 ;;		On entry : 0/0
  2558 ;;		On exit  : 0/0
  2559 ;;		Unchanged: 0/0
  2560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2561 ;;      Params:         0       0       0       0       0
  2562 ;;      Locals:         0       0       0       0       0
  2563 ;;      Temps:          0       0       0       0       0
  2564 ;;      Totals:         0       0       0       0       0
  2565 ;;Total ram usage:        0 bytes
  2566 ;; Hardware stack levels used: 1
  2567 ;; Hardware stack levels required when called: 3
  2568 ;; This function calls:
  2569 ;;		_stopIrrigation
  2570 ;; This function is called by:
  2571 ;;		_runTimer
  2572 ;; This function uses a non-reentrant model
  2573 ;;
  2574                           
  2575     0AF5                     _interrupt_IRRIG_timeout:	
  2576                           ;psect for function _interrupt_IRRIG_timeout
  2577                           
  2578     0AF5                     l2275:	
  2579                           ;incstack = 0
  2580                           ; Regs used in _interrupt_IRRIG_timeout: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2581                           
  2582                           
  2583                           ;irrigation.c: 60:   stopIrrigation();
  2584     0AF5  120A  158A  23CC  120A  158A  	fcall	_stopIrrigation
  2585     0AFA                     l2277:
  2586                           
  2587                           ;irrigation.c: 61:   irrigationState = IRRIG_ERROR;
  2588     0AFA  3002               	movlw	2
  2589     0AFB  1283               	bcf	3,5	;RP0=0, select bank0
  2590     0AFC  1303               	bcf	3,6	;RP1=0, select bank0
  2591     0AFD  00ED               	movwf	_irrigationState
  2592     0AFE                     l388:
  2593     0AFE  0008               	return
  2594     0AFF                     __end_of_interrupt_IRRIG_timeout:
  2595                           
  2596                           	psect	text10
  2597     0B5C                     __ptext10:	
  2598 ;; *************** function _ADC_readAll *****************
  2599 ;; Defined at:
  2600 ;;		line 197 in file "./config.h"
  2601 ;; Parameters:    Size  Location     Type
  2602 ;;		None
  2603 ;; Auto vars:     Size  Location     Type
  2604 ;;		None
  2605 ;; Return value:  Size  Location     Type
  2606 ;;                  1    wreg      void 
  2607 ;; Registers used:
  2608 ;;		wreg, status,2, status,0, pclath, cstack
  2609 ;; Tracked objects:
  2610 ;;		On entry : 0/0
  2611 ;;		On exit  : 0/0
  2612 ;;		Unchanged: 0/0
  2613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2614 ;;      Params:         0       0       0       0       0
  2615 ;;      Locals:         0       0       0       0       0
  2616 ;;      Temps:          0       0       0       0       0
  2617 ;;      Totals:         0       0       0       0       0
  2618 ;;Total ram usage:        0 bytes
  2619 ;; Hardware stack levels used: 1
  2620 ;; Hardware stack levels required when called: 4
  2621 ;; This function calls:
  2622 ;;		_readLight
  2623 ;;		_readSoilMoisture
  2624 ;;		_readTemperature
  2625 ;; This function is called by:
  2626 ;;		_main
  2627 ;;		_runTimer
  2628 ;; This function uses a non-reentrant model
  2629 ;;
  2630                           
  2631     0B5C                     _ADC_readAll:	
  2632                           ;psect for function _ADC_readAll
  2633                           
  2634     0B5C                     l2695:	
  2635                           ;incstack = 0
  2636                           ; Regs used in _ADC_readAll: [wreg+status,2+status,0+pclath+cstack]
  2637                           
  2638                           
  2639                           ;./config.h: 199:   readTemperature();
  2640     0B5C  120A  158A  253A  120A  158A  	fcall	_readTemperature
  2641                           
  2642                           ;./config.h: 200:   readSoilMoisture();
  2643     0B61  120A  158A  2510  120A  158A  	fcall	_readSoilMoisture
  2644                           
  2645                           ;./config.h: 201:   readLight();
  2646     0B66  120A  158A  2324  120A  158A  	fcall	_readLight
  2647     0B6B                     l128:
  2648     0B6B  0008               	return
  2649     0B6C                     __end_of_ADC_readAll:
  2650                           
  2651                           	psect	text11
  2652     0ADC                     __ptext11:	
  2653 ;; *************** function _interrupt_WTANK_timeout *****************
  2654 ;; Defined at:
  2655 ;;		line 100 in file "waterTankManager.c"
  2656 ;; Parameters:    Size  Location     Type
  2657 ;;		None
  2658 ;; Auto vars:     Size  Location     Type
  2659 ;;		None
  2660 ;; Return value:  Size  Location     Type
  2661 ;;                  1    wreg      void 
  2662 ;; Registers used:
  2663 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2664 ;; Tracked objects:
  2665 ;;		On entry : 0/0
  2666 ;;		On exit  : 0/0
  2667 ;;		Unchanged: 0/0
  2668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2669 ;;      Params:         0       0       0       0       0
  2670 ;;      Locals:         0       0       0       0       0
  2671 ;;      Temps:          0       0       0       0       0
  2672 ;;      Totals:         0       0       0       0       0
  2673 ;;Total ram usage:        0 bytes
  2674 ;; Hardware stack levels used: 1
  2675 ;; Hardware stack levels required when called: 3
  2676 ;; This function calls:
  2677 ;;		_stopFilling
  2678 ;; This function is called by:
  2679 ;;		_runTimer
  2680 ;; This function uses a non-reentrant model
  2681 ;;
  2682                           
  2683     0ADC                     _interrupt_WTANK_timeout:	
  2684                           ;psect for function _interrupt_WTANK_timeout
  2685                           
  2686     0ADC                     l2261:	
  2687                           ;incstack = 0
  2688                           ; Regs used in _interrupt_WTANK_timeout: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2689                           
  2690                           
  2691                           ;waterTankManager.c: 102:   stopFilling();
  2692     0ADC  120A  158A  237F  120A  158A  	fcall	_stopFilling
  2693     0AE1                     l2263:
  2694                           
  2695                           ;waterTankManager.c: 103:   tankState = WTANK_ERROR;
  2696     0AE1  3003               	movlw	3
  2697     0AE2  00FB               	movwf	_tankState
  2698     0AE3                     l319:
  2699     0AE3  0008               	return
  2700     0AE4                     __end_of_interrupt_WTANK_timeout:
  2701                           
  2702                           	psect	text12
  2703     0B7F                     __ptext12:	
  2704 ;; *************** function _stopFilling *****************
  2705 ;; Defined at:
  2706 ;;		line 83 in file "waterTankManager.c"
  2707 ;; Parameters:    Size  Location     Type
  2708 ;;		None
  2709 ;; Auto vars:     Size  Location     Type
  2710 ;;		None
  2711 ;; Return value:  Size  Location     Type
  2712 ;;                  1    wreg      void 
  2713 ;; Registers used:
  2714 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2715 ;; Tracked objects:
  2716 ;;		On entry : 0/0
  2717 ;;		On exit  : 0/0
  2718 ;;		Unchanged: 0/0
  2719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2720 ;;      Params:         0       0       0       0       0
  2721 ;;      Locals:         0       0       0       0       0
  2722 ;;      Temps:          0       0       0       0       0
  2723 ;;      Totals:         0       0       0       0       0
  2724 ;;Total ram usage:        0 bytes
  2725 ;; Hardware stack levels used: 1
  2726 ;; Hardware stack levels required when called: 2
  2727 ;; This function calls:
  2728 ;;		_stopTimer
  2729 ;; This function is called by:
  2730 ;;		_run_waterTankLogic
  2731 ;;		_interrupt_WTANK_timeout
  2732 ;; This function uses a non-reentrant model
  2733 ;;
  2734                           
  2735     0B7F                     _stopFilling:	
  2736                           ;psect for function _stopFilling
  2737                           
  2738     0B7F                     l2085:	
  2739                           ;incstack = 0
  2740                           ; Regs used in _stopFilling: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2741                           
  2742                           
  2743                           ;waterTankManager.c: 85:   if(!isFilling)
  2744     0B7F  18FA               	btfsc	_isFilling/(0+8),_isFilling& (0+7)
  2745     0B80  2B82               	goto	u1841
  2746     0B81  2B83               	goto	u1840
  2747     0B82                     u1841:
  2748     0B82  2B84               	goto	l315
  2749     0B83                     u1840:
  2750     0B83  2B91               	goto	l316
  2751     0B84                     l315:
  2752                           
  2753                           ;waterTankManager.c: 88:   isFilling = 0;
  2754     0B84  10FA               	bcf	_isFilling/(0+8),_isFilling& (0+7)
  2755                           
  2756                           ;waterTankManager.c: 89:   PORTCbits.RC0 = 1;
  2757     0B85  1283               	bcf	3,5	;RP0=0, select bank0
  2758     0B86  1303               	bcf	3,6	;RP1=0, select bank0
  2759     0B87  1407               	bsf	7,0	;volatile
  2760     0B88                     l2089:
  2761                           
  2762                           ;waterTankManager.c: 90:   stopTimer(&timer_WTANK_Timeout);
  2763     0B88  30E0               	movlw	low _timer_WTANK_Timeout
  2764     0B89  00F2               	movwf	stopTimer@timer
  2765     0B8A  3000               	movlw	high _timer_WTANK_Timeout
  2766     0B8B  00F3               	movwf	stopTimer@timer+1
  2767     0B8C  120A  158A  245D  120A  158A  	fcall	_stopTimer
  2768     0B91                     l316:
  2769     0B91  0008               	return
  2770     0B92                     __end_of_stopFilling:
  2771                           
  2772                           	psect	text13
  2773     0BCC                     __ptext13:	
  2774 ;; *************** function _stopIrrigation *****************
  2775 ;; Defined at:
  2776 ;;		line 47 in file "irrigation.c"
  2777 ;; Parameters:    Size  Location     Type
  2778 ;;		None
  2779 ;; Auto vars:     Size  Location     Type
  2780 ;;		None
  2781 ;; Return value:  Size  Location     Type
  2782 ;;                  1    wreg      void 
  2783 ;; Registers used:
  2784 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2785 ;; Tracked objects:
  2786 ;;		On entry : 0/0
  2787 ;;		On exit  : 0/0
  2788 ;;		Unchanged: 0/0
  2789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2790 ;;      Params:         0       0       0       0       0
  2791 ;;      Locals:         0       0       0       0       0
  2792 ;;      Temps:          0       0       0       0       0
  2793 ;;      Totals:         0       0       0       0       0
  2794 ;;Total ram usage:        0 bytes
  2795 ;; Hardware stack levels used: 1
  2796 ;; Hardware stack levels required when called: 2
  2797 ;; This function calls:
  2798 ;;		_stopTimer
  2799 ;; This function is called by:
  2800 ;;		_run_IrrigationLogic
  2801 ;;		_interrupt_IRRIG_timeout
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804                           
  2805     0BCC                     _stopIrrigation:	
  2806                           ;psect for function _stopIrrigation
  2807                           
  2808     0BCC                     l2091:	
  2809                           ;incstack = 0
  2810                           ; Regs used in _stopIrrigation: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2811                           
  2812                           
  2813                           ;irrigation.c: 49:   if(!isIrrigating)
  2814     0BCC  187A               	btfsc	_isIrrigating/(0+8),_isIrrigating& (0+7)
  2815     0BCD  2BCF               	goto	u1851
  2816     0BCE  2BD0               	goto	u1850
  2817     0BCF                     u1851:
  2818     0BCF  2BD1               	goto	l384
  2819     0BD0                     u1850:
  2820     0BD0  2BE0               	goto	l385
  2821     0BD1                     l384:
  2822                           
  2823                           ;irrigation.c: 52:   PORTCbits.RC1 = 1;
  2824     0BD1  1283               	bcf	3,5	;RP0=0, select bank0
  2825     0BD2  1303               	bcf	3,6	;RP1=0, select bank0
  2826     0BD3  1487               	bsf	7,1	;volatile
  2827                           
  2828                           ;irrigation.c: 53:   isIrrigating = 0;
  2829     0BD4  107A               	bcf	_isIrrigating/(0+8),_isIrrigating& (0+7)
  2830                           
  2831                           ;irrigation.c: 54:   irrigationState = IRRIG_OFF;
  2832     0BD5  3001               	movlw	1
  2833     0BD6  00ED               	movwf	_irrigationState
  2834     0BD7                     l2095:
  2835                           
  2836                           ;irrigation.c: 55:   stopTimer(&timer_IRRIG_Timeout);
  2837     0BD7  30DA               	movlw	low _timer_IRRIG_Timeout
  2838     0BD8  00F2               	movwf	stopTimer@timer
  2839     0BD9  3000               	movlw	high _timer_IRRIG_Timeout
  2840     0BDA  00F3               	movwf	stopTimer@timer+1
  2841     0BDB  120A  158A  245D  120A  158A  	fcall	_stopTimer
  2842     0BE0                     l385:
  2843     0BE0  0008               	return
  2844     0BE1                     __end_of_stopIrrigation:
  2845                           
  2846                           	psect	text14
  2847     0C5D                     __ptext14:	
  2848 ;; *************** function _stopTimer *****************
  2849 ;; Defined at:
  2850 ;;		line 35 in file "virtualTimer.c"
  2851 ;; Parameters:    Size  Location     Type
  2852 ;;  timer           2    2[COMMON] PTR struct .
  2853 ;;		 -> timer_IRRIG_Timeout(6), timer_WTANK_Timeout(6), 
  2854 ;; Auto vars:     Size  Location     Type
  2855 ;;		None
  2856 ;; Return value:  Size  Location     Type
  2857 ;;                  1    wreg      void 
  2858 ;; Registers used:
  2859 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2860 ;; Tracked objects:
  2861 ;;		On entry : 0/0
  2862 ;;		On exit  : 0/0
  2863 ;;		Unchanged: 0/0
  2864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2865 ;;      Params:         2       0       0       0       0
  2866 ;;      Locals:         0       0       0       0       0
  2867 ;;      Temps:          2       0       0       0       0
  2868 ;;      Totals:         4       0       0       0       0
  2869 ;;Total ram usage:        4 bytes
  2870 ;; Hardware stack levels used: 1
  2871 ;; Hardware stack levels required when called: 1
  2872 ;; This function calls:
  2873 ;;		Nothing
  2874 ;; This function is called by:
  2875 ;;		_stopFilling
  2876 ;;		_stopIrrigation
  2877 ;; This function uses a non-reentrant model
  2878 ;;
  2879                           
  2880     0C5D                     _stopTimer:	
  2881                           ;psect for function _stopTimer
  2882                           
  2883     0C5D                     l2017:	
  2884                           ;incstack = 0
  2885                           ; Regs used in _stopTimer: [wreg-fsr0h+status,2+status,0]
  2886                           
  2887                           
  2888                           ;virtualTimer.c: 35: void stopTimer(virtualTimer *timer);virtualTimer.c: 36: {;virtualTi
      +                          mer.c: 37:   if(timer->active == 0)
  2889     0C5D  0872               	movf	stopTimer@timer,w
  2890     0C5E  3E04               	addlw	4
  2891     0C5F  00F4               	movwf	??_stopTimer
  2892     0C60  0873               	movf	stopTimer@timer+1,w
  2893     0C61  1803               	skipnc
  2894     0C62  3E01               	addlw	1
  2895     0C63  3E00               	addlw	0
  2896     0C64  00F5               	movwf	??_stopTimer+1
  2897     0C65  0874               	movf	??_stopTimer,w
  2898     0C66  0084               	movwf	4
  2899     0C67  1783               	bsf	3,7
  2900     0C68  1C75               	btfss	??_stopTimer+1,0
  2901     0C69  1383               	bcf	3,7
  2902     0C6A  0800               	movf	0,w
  2903     0C6B  1D03               	btfss	3,2
  2904     0C6C  2C6E               	goto	u1791
  2905     0C6D  2C6F               	goto	u1790
  2906     0C6E                     u1791:
  2907     0C6E  2C70               	goto	l2021
  2908     0C6F                     u1790:
  2909     0C6F  2C7E               	goto	l337
  2910     0C70                     l2021:
  2911                           
  2912                           ;virtualTimer.c: 40:   timer->active = 0;
  2913     0C70  0872               	movf	stopTimer@timer,w
  2914     0C71  3E04               	addlw	4
  2915     0C72  00F4               	movwf	??_stopTimer
  2916     0C73  0873               	movf	stopTimer@timer+1,w
  2917     0C74  1803               	skipnc
  2918     0C75  3E01               	addlw	1
  2919     0C76  3E00               	addlw	0
  2920     0C77  00F5               	movwf	??_stopTimer+1
  2921     0C78  0874               	movf	??_stopTimer,w
  2922     0C79  0084               	movwf	4
  2923     0C7A  1783               	bsf	3,7
  2924     0C7B  1C75               	btfss	??_stopTimer+1,0
  2925     0C7C  1383               	bcf	3,7
  2926     0C7D  0180               	clrf	0
  2927     0C7E                     l337:
  2928     0C7E  0008               	return
  2929     0C7F                     __end_of_stopTimer:
  2930                           
  2931                           	psect	text15
  2932     0D3A                     __ptext15:	
  2933 ;; *************** function _readTemperature *****************
  2934 ;; Defined at:
  2935 ;;		line 186 in file "./config.h"
  2936 ;; Parameters:    Size  Location     Type
  2937 ;;		None
  2938 ;; Auto vars:     Size  Location     Type
  2939 ;;		None
  2940 ;; Return value:  Size  Location     Type
  2941 ;;                  1    wreg      void 
  2942 ;; Registers used:
  2943 ;;		wreg, status,2, status,0, pclath, cstack
  2944 ;; Tracked objects:
  2945 ;;		On entry : 0/0
  2946 ;;		On exit  : 0/0
  2947 ;;		Unchanged: 0/0
  2948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2949 ;;      Params:         0       0       0       0       0
  2950 ;;      Locals:         0       0       0       0       0
  2951 ;;      Temps:          0       0       0       0       0
  2952 ;;      Totals:         0       0       0       0       0
  2953 ;;Total ram usage:        0 bytes
  2954 ;; Hardware stack levels used: 1
  2955 ;; Hardware stack levels required when called: 3
  2956 ;; This function calls:
  2957 ;;		_ADC_Read
  2958 ;;		_map
  2959 ;; This function is called by:
  2960 ;;		_ADC_readAll
  2961 ;; This function uses a non-reentrant model
  2962 ;;
  2963                           
  2964     0D3A                     _readTemperature:	
  2965                           ;psect for function _readTemperature
  2966                           
  2967     0D3A                     l2665:	
  2968                           ;incstack = 0
  2969                           ; Regs used in _readTemperature: [wreg+status,2+status,0+pclath+cstack]
  2970                           
  2971                           
  2972                           ;./config.h: 188:   temperature = ADC_Read(1);
  2973     0D3A  3001               	movlw	1
  2974     0D3B  120A  158A  24C5  120A  158A  	fcall	_ADC_Read
  2975     0D40  0873               	movf	?_ADC_Read+1,w
  2976     0D41  1283               	bcf	3,5	;RP0=0, select bank0
  2977     0D42  1303               	bcf	3,6	;RP1=0, select bank0
  2978     0D43  00E1               	movwf	_temperature+1
  2979     0D44  0872               	movf	?_ADC_Read,w
  2980     0D45  00E0               	movwf	_temperature
  2981                           
  2982                           ;./config.h: 189:   temperature = (int)map(temperature,0,1023,0,500);
  2983     0D46  0861               	movf	_temperature+1,w
  2984     0D47  00B5               	movwf	map@x+1
  2985     0D48  0860               	movf	_temperature,w
  2986     0D49  00B4               	movwf	map@x
  2987     0D4A  3000               	movlw	0
  2988     0D4B  00B6               	movwf	map@in_min
  2989     0D4C  00B7               	movwf	map@in_min+1
  2990     0D4D  30FF               	movlw	255
  2991     0D4E  00B8               	movwf	map@in_max
  2992     0D4F  3003               	movlw	3
  2993     0D50  00B9               	movwf	map@in_max+1
  2994     0D51  3000               	movlw	0
  2995     0D52  00BA               	movwf	map@out_min
  2996     0D53  00BB               	movwf	map@out_min+1
  2997     0D54  30F4               	movlw	244
  2998     0D55  00BC               	movwf	map@out_max
  2999     0D56  3001               	movlw	1
  3000     0D57  00BD               	movwf	map@out_max+1
  3001     0D58  120A  118A  2054  120A  158A  	fcall	_map
  3002     0D5D  1283               	bcf	3,5	;RP0=0, select bank0
  3003     0D5E  1303               	bcf	3,6	;RP1=0, select bank0
  3004     0D5F  0835               	movf	?_map+1,w
  3005     0D60  00E1               	movwf	_temperature+1
  3006     0D61  0834               	movf	?_map,w
  3007     0D62  00E0               	movwf	_temperature
  3008     0D63                     l122:
  3009     0D63  0008               	return
  3010     0D64                     __end_of_readTemperature:
  3011                           
  3012                           	psect	text16
  3013     0D10                     __ptext16:	
  3014 ;; *************** function _readSoilMoisture *****************
  3015 ;; Defined at:
  3016 ;;		line 174 in file "./config.h"
  3017 ;; Parameters:    Size  Location     Type
  3018 ;;		None
  3019 ;; Auto vars:     Size  Location     Type
  3020 ;;		None
  3021 ;; Return value:  Size  Location     Type
  3022 ;;                  1    wreg      void 
  3023 ;; Registers used:
  3024 ;;		wreg, status,2, status,0, pclath, cstack
  3025 ;; Tracked objects:
  3026 ;;		On entry : 0/0
  3027 ;;		On exit  : 0/0
  3028 ;;		Unchanged: 0/0
  3029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3030 ;;      Params:         0       0       0       0       0
  3031 ;;      Locals:         0       0       0       0       0
  3032 ;;      Temps:          0       0       0       0       0
  3033 ;;      Totals:         0       0       0       0       0
  3034 ;;Total ram usage:        0 bytes
  3035 ;; Hardware stack levels used: 1
  3036 ;; Hardware stack levels required when called: 3
  3037 ;; This function calls:
  3038 ;;		_ADC_Read
  3039 ;;		_map
  3040 ;; This function is called by:
  3041 ;;		_ADC_readAll
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045     0D10                     _readSoilMoisture:	
  3046                           ;psect for function _readSoilMoisture
  3047                           
  3048     0D10                     l2663:	
  3049                           ;incstack = 0
  3050                           ; Regs used in _readSoilMoisture: [wreg+status,2+status,0+pclath+cstack]
  3051                           
  3052                           
  3053                           ;./config.h: 176:   soilMoisture = ADC_Read(0);
  3054     0D10  3000               	movlw	0
  3055     0D11  120A  158A  24C5  120A  158A  	fcall	_ADC_Read
  3056     0D16  0873               	movf	?_ADC_Read+1,w
  3057     0D17  1283               	bcf	3,5	;RP0=0, select bank0
  3058     0D18  1303               	bcf	3,6	;RP1=0, select bank0
  3059     0D19  00E3               	movwf	_soilMoisture+1
  3060     0D1A  0872               	movf	?_ADC_Read,w
  3061     0D1B  00E2               	movwf	_soilMoisture
  3062                           
  3063                           ;./config.h: 177:   soilMoisture = (int)map(soilMoisture,0,1023,0,100);
  3064     0D1C  0863               	movf	_soilMoisture+1,w
  3065     0D1D  00B5               	movwf	map@x+1
  3066     0D1E  0862               	movf	_soilMoisture,w
  3067     0D1F  00B4               	movwf	map@x
  3068     0D20  3000               	movlw	0
  3069     0D21  00B6               	movwf	map@in_min
  3070     0D22  00B7               	movwf	map@in_min+1
  3071     0D23  30FF               	movlw	255
  3072     0D24  00B8               	movwf	map@in_max
  3073     0D25  3003               	movlw	3
  3074     0D26  00B9               	movwf	map@in_max+1
  3075     0D27  3000               	movlw	0
  3076     0D28  00BA               	movwf	map@out_min
  3077     0D29  00BB               	movwf	map@out_min+1
  3078     0D2A  3064               	movlw	100
  3079     0D2B  00BC               	movwf	map@out_max
  3080     0D2C  3000               	movlw	0
  3081     0D2D  00BD               	movwf	map@out_max+1
  3082     0D2E  120A  118A  2054  120A  158A  	fcall	_map
  3083     0D33  1283               	bcf	3,5	;RP0=0, select bank0
  3084     0D34  1303               	bcf	3,6	;RP1=0, select bank0
  3085     0D35  0835               	movf	?_map+1,w
  3086     0D36  00E3               	movwf	_soilMoisture+1
  3087     0D37  0834               	movf	?_map,w
  3088     0D38  00E2               	movwf	_soilMoisture
  3089     0D39                     l119:
  3090     0D39  0008               	return
  3091     0D3A                     __end_of_readSoilMoisture:
  3092                           
  3093                           	psect	text17
  3094     0054                     __ptext17:	
  3095 ;; *************** function _map *****************
  3096 ;; Defined at:
  3097 ;;		line 161 in file "./config.h"
  3098 ;; Parameters:    Size  Location     Type
  3099 ;;  x               2   20[BANK0 ] int 
  3100 ;;  in_min          2   22[BANK0 ] int 
  3101 ;;  in_max          2   24[BANK0 ] int 
  3102 ;;  out_min         2   26[BANK0 ] int 
  3103 ;;  out_max         2   28[BANK0 ] int 
  3104 ;; Auto vars:     Size  Location     Type
  3105 ;;  run             4   46[BANK0 ] long 
  3106 ;;  delta           4   42[BANK0 ] long 
  3107 ;;  rise            4   38[BANK0 ] long 
  3108 ;; Return value:  Size  Location     Type
  3109 ;;                  4   20[BANK0 ] long 
  3110 ;; Registers used:
  3111 ;;		wreg, status,2, status,0, pclath, cstack
  3112 ;; Tracked objects:
  3113 ;;		On entry : 0/0
  3114 ;;		On exit  : 0/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3117 ;;      Params:         0      10       0       0       0
  3118 ;;      Locals:         0      12       0       0       0
  3119 ;;      Temps:          0       8       0       0       0
  3120 ;;      Totals:         0      30       0       0       0
  3121 ;;Total ram usage:       30 bytes
  3122 ;; Hardware stack levels used: 1
  3123 ;; Hardware stack levels required when called: 2
  3124 ;; This function calls:
  3125 ;;		___aldiv
  3126 ;;		___lmul
  3127 ;; This function is called by:
  3128 ;;		_readSoilMoisture
  3129 ;;		_readTemperature
  3130 ;; This function uses a non-reentrant model
  3131 ;;
  3132                           
  3133     0054                     _map:	
  3134                           ;psect for function _map
  3135                           
  3136     0054                     l2609:	
  3137                           ;incstack = 0
  3138                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  3139                           
  3140                           
  3141                           ;./config.h: 163:     long run = (long)in_max - (long)in_min;
  3142     0054  1283               	bcf	3,5	;RP0=0, select bank0
  3143     0055  1303               	bcf	3,6	;RP1=0, select bank0
  3144     0056  0836               	movf	map@in_min,w
  3145     0057  00BE               	movwf	??_map
  3146     0058  0837               	movf	map@in_min+1,w
  3147     0059  00BF               	movwf	??_map+1
  3148     005A  3000               	movlw	0
  3149     005B  1BBF               	btfsc	??_map+1,7
  3150     005C  30FF               	movlw	255
  3151     005D  00C0               	movwf	??_map+2
  3152     005E  00C1               	movwf	??_map+3
  3153     005F  0838               	movf	map@in_max,w
  3154     0060  00C2               	movwf	??_map+4
  3155     0061  0839               	movf	map@in_max+1,w
  3156     0062  00C3               	movwf	??_map+5
  3157     0063  3000               	movlw	0
  3158     0064  1BC3               	btfsc	??_map+5,7
  3159     0065  30FF               	movlw	255
  3160     0066  00C4               	movwf	??_map+6
  3161     0067  00C5               	movwf	??_map+7
  3162     0068  083E               	movf	??_map,w
  3163     0069  02C2               	subwf	??_map+4,f
  3164     006A  083F               	movf	??_map+1,w
  3165     006B  1C03               	skipc
  3166     006C  0F3F               	incfsz	??_map+1,w
  3167     006D  286F               	goto	u2561
  3168     006E  2870               	goto	u2562
  3169     006F                     u2561:
  3170     006F  02C3               	subwf	??_map+5,f
  3171     0070                     u2562:
  3172     0070  0840               	movf	??_map+2,w
  3173     0071  1C03               	skipc
  3174     0072  0F40               	incfsz	??_map+2,w
  3175     0073  2875               	goto	u2563
  3176     0074  2876               	goto	u2564
  3177     0075                     u2563:
  3178     0075  02C4               	subwf	??_map+6,f
  3179     0076                     u2564:
  3180     0076  0841               	movf	??_map+3,w
  3181     0077  1C03               	skipc
  3182     0078  0F41               	incfsz	??_map+3,w
  3183     0079  287B               	goto	u2565
  3184     007A  287C               	goto	u2566
  3185     007B                     u2565:
  3186     007B  02C5               	subwf	??_map+7,f
  3187     007C                     u2566:
  3188     007C  0845               	movf	??_map+7,w
  3189     007D  00D1               	movwf	map@run+3
  3190     007E  0844               	movf	??_map+6,w
  3191     007F  00D0               	movwf	map@run+2
  3192     0080  0843               	movf	??_map+5,w
  3193     0081  00CF               	movwf	map@run+1
  3194     0082  0842               	movf	??_map+4,w
  3195     0083  00CE               	movwf	map@run
  3196                           
  3197                           ;./config.h: 165:     if (run == 0)
  3198     0084  0851               	movf	map@run+3,w
  3199     0085  0450               	iorwf	map@run+2,w
  3200     0086  044F               	iorwf	map@run+1,w
  3201     0087  044E               	iorwf	map@run,w
  3202     0088  1D03               	skipz
  3203     0089  288B               	goto	u2571
  3204     008A  288C               	goto	u2570
  3205     008B                     u2571:
  3206     008B  2896               	goto	l2615
  3207     008C                     u2570:
  3208     008C                     l2611:
  3209                           
  3210                           ;./config.h: 166:         return out_min;
  3211     008C  083A               	movf	map@out_min,w
  3212     008D  00B4               	movwf	?_map
  3213     008E  083B               	movf	map@out_min+1,w
  3214     008F  00B5               	movwf	?_map+1
  3215     0090  3000               	movlw	0
  3216     0091  1BB5               	btfsc	?_map+1,7
  3217     0092  30FF               	movlw	255
  3218     0093  00B6               	movwf	?_map+2
  3219     0094  00B7               	movwf	?_map+3
  3220     0095  2943               	goto	l116
  3221     0096                     l2615:
  3222                           
  3223                           ;./config.h: 168:     long rise = (long)out_max - (long)out_min;
  3224     0096  083A               	movf	map@out_min,w
  3225     0097  00BE               	movwf	??_map
  3226     0098  083B               	movf	map@out_min+1,w
  3227     0099  00BF               	movwf	??_map+1
  3228     009A  3000               	movlw	0
  3229     009B  1BBF               	btfsc	??_map+1,7
  3230     009C  30FF               	movlw	255
  3231     009D  00C0               	movwf	??_map+2
  3232     009E  00C1               	movwf	??_map+3
  3233     009F  083C               	movf	map@out_max,w
  3234     00A0  00C2               	movwf	??_map+4
  3235     00A1  083D               	movf	map@out_max+1,w
  3236     00A2  00C3               	movwf	??_map+5
  3237     00A3  3000               	movlw	0
  3238     00A4  1BC3               	btfsc	??_map+5,7
  3239     00A5  30FF               	movlw	255
  3240     00A6  00C4               	movwf	??_map+6
  3241     00A7  00C5               	movwf	??_map+7
  3242     00A8  083E               	movf	??_map,w
  3243     00A9  02C2               	subwf	??_map+4,f
  3244     00AA  083F               	movf	??_map+1,w
  3245     00AB  1C03               	skipc
  3246     00AC  0F3F               	incfsz	??_map+1,w
  3247     00AD  28AF               	goto	u2581
  3248     00AE  28B0               	goto	u2582
  3249     00AF                     u2581:
  3250     00AF  02C3               	subwf	??_map+5,f
  3251     00B0                     u2582:
  3252     00B0  0840               	movf	??_map+2,w
  3253     00B1  1C03               	skipc
  3254     00B2  0F40               	incfsz	??_map+2,w
  3255     00B3  28B5               	goto	u2583
  3256     00B4  28B6               	goto	u2584
  3257     00B5                     u2583:
  3258     00B5  02C4               	subwf	??_map+6,f
  3259     00B6                     u2584:
  3260     00B6  0841               	movf	??_map+3,w
  3261     00B7  1C03               	skipc
  3262     00B8  0F41               	incfsz	??_map+3,w
  3263     00B9  28BB               	goto	u2585
  3264     00BA  28BC               	goto	u2586
  3265     00BB                     u2585:
  3266     00BB  02C5               	subwf	??_map+7,f
  3267     00BC                     u2586:
  3268     00BC  0845               	movf	??_map+7,w
  3269     00BD  00C9               	movwf	map@rise+3
  3270     00BE  0844               	movf	??_map+6,w
  3271     00BF  00C8               	movwf	map@rise+2
  3272     00C0  0843               	movf	??_map+5,w
  3273     00C1  00C7               	movwf	map@rise+1
  3274     00C2  0842               	movf	??_map+4,w
  3275     00C3  00C6               	movwf	map@rise
  3276                           
  3277                           ;./config.h: 169:     long delta = (long)x - (long)in_min;
  3278     00C4  0836               	movf	map@in_min,w
  3279     00C5  00BE               	movwf	??_map
  3280     00C6  0837               	movf	map@in_min+1,w
  3281     00C7  00BF               	movwf	??_map+1
  3282     00C8  3000               	movlw	0
  3283     00C9  1BBF               	btfsc	??_map+1,7
  3284     00CA  30FF               	movlw	255
  3285     00CB  00C0               	movwf	??_map+2
  3286     00CC  00C1               	movwf	??_map+3
  3287     00CD  0834               	movf	map@x,w
  3288     00CE  00C2               	movwf	??_map+4
  3289     00CF  0835               	movf	map@x+1,w
  3290     00D0  00C3               	movwf	??_map+5
  3291     00D1  3000               	movlw	0
  3292     00D2  1BC3               	btfsc	??_map+5,7
  3293     00D3  30FF               	movlw	255
  3294     00D4  00C4               	movwf	??_map+6
  3295     00D5  00C5               	movwf	??_map+7
  3296     00D6  083E               	movf	??_map,w
  3297     00D7  02C2               	subwf	??_map+4,f
  3298     00D8  083F               	movf	??_map+1,w
  3299     00D9  1C03               	skipc
  3300     00DA  0F3F               	incfsz	??_map+1,w
  3301     00DB  28DD               	goto	u2591
  3302     00DC  28DE               	goto	u2592
  3303     00DD                     u2591:
  3304     00DD  02C3               	subwf	??_map+5,f
  3305     00DE                     u2592:
  3306     00DE  0840               	movf	??_map+2,w
  3307     00DF  1C03               	skipc
  3308     00E0  0F40               	incfsz	??_map+2,w
  3309     00E1  28E3               	goto	u2593
  3310     00E2  28E4               	goto	u2594
  3311     00E3                     u2593:
  3312     00E3  02C4               	subwf	??_map+6,f
  3313     00E4                     u2594:
  3314     00E4  0841               	movf	??_map+3,w
  3315     00E5  1C03               	skipc
  3316     00E6  0F41               	incfsz	??_map+3,w
  3317     00E7  28E9               	goto	u2595
  3318     00E8  28EA               	goto	u2596
  3319     00E9                     u2595:
  3320     00E9  02C5               	subwf	??_map+7,f
  3321     00EA                     u2596:
  3322     00EA  0845               	movf	??_map+7,w
  3323     00EB  00CD               	movwf	map@delta+3
  3324     00EC  0844               	movf	??_map+6,w
  3325     00ED  00CC               	movwf	map@delta+2
  3326     00EE  0843               	movf	??_map+5,w
  3327     00EF  00CB               	movwf	map@delta+1
  3328     00F0  0842               	movf	??_map+4,w
  3329     00F1  00CA               	movwf	map@delta
  3330     00F2                     l2617:
  3331                           
  3332                           ;./config.h: 171:     return (delta * rise) / run + out_min;
  3333     00F2  083A               	movf	map@out_min,w
  3334     00F3  00BE               	movwf	??_map
  3335     00F4  083B               	movf	map@out_min+1,w
  3336     00F5  00BF               	movwf	??_map+1
  3337     00F6  3000               	movlw	0
  3338     00F7  1BBF               	btfsc	??_map+1,7
  3339     00F8  30FF               	movlw	255
  3340     00F9  00C0               	movwf	??_map+2
  3341     00FA  00C1               	movwf	??_map+3
  3342     00FB  0851               	movf	map@run+3,w
  3343     00FC  00A8               	movwf	___aldiv@divisor+3
  3344     00FD  0850               	movf	map@run+2,w
  3345     00FE  00A7               	movwf	___aldiv@divisor+2
  3346     00FF  084F               	movf	map@run+1,w
  3347     0100  00A6               	movwf	___aldiv@divisor+1
  3348     0101  084E               	movf	map@run,w
  3349     0102  00A5               	movwf	___aldiv@divisor
  3350     0103  084D               	movf	map@delta+3,w
  3351     0104  00F5               	movwf	___lmul@multiplier+3
  3352     0105  084C               	movf	map@delta+2,w
  3353     0106  00F4               	movwf	___lmul@multiplier+2
  3354     0107  084B               	movf	map@delta+1,w
  3355     0108  00F3               	movwf	___lmul@multiplier+1
  3356     0109  084A               	movf	map@delta,w
  3357     010A  00F2               	movwf	___lmul@multiplier
  3358     010B  0849               	movf	map@rise+3,w
  3359     010C  00F9               	movwf	___lmul@multiplicand+3
  3360     010D  0848               	movf	map@rise+2,w
  3361     010E  00F8               	movwf	___lmul@multiplicand+2
  3362     010F  0847               	movf	map@rise+1,w
  3363     0110  00F7               	movwf	___lmul@multiplicand+1
  3364     0111  0846               	movf	map@rise,w
  3365     0112  00F6               	movwf	___lmul@multiplicand
  3366     0113  120A  118A  27B7  120A  118A  	fcall	___lmul
  3367     0118  0875               	movf	?___lmul+3,w
  3368     0119  1283               	bcf	3,5	;RP0=0, select bank0
  3369     011A  1303               	bcf	3,6	;RP1=0, select bank0
  3370     011B  00AC               	movwf	___aldiv@dividend+3
  3371     011C  0874               	movf	?___lmul+2,w
  3372     011D  00AB               	movwf	___aldiv@dividend+2
  3373     011E  0873               	movf	?___lmul+1,w
  3374     011F  00AA               	movwf	___aldiv@dividend+1
  3375     0120  0872               	movf	?___lmul,w
  3376     0121  00A9               	movwf	___aldiv@dividend
  3377     0122  120A  118A  237A  120A  118A  	fcall	___aldiv
  3378     0127  1283               	bcf	3,5	;RP0=0, select bank0
  3379     0128  1303               	bcf	3,6	;RP1=0, select bank0
  3380     0129  0825               	movf	?___aldiv,w
  3381     012A  07BE               	addwf	??_map,f
  3382     012B  0826               	movf	?___aldiv+1,w
  3383     012C  1803               	skipnc
  3384     012D  0F26               	incfsz	?___aldiv+1,w
  3385     012E  2930               	goto	u2600
  3386     012F  2931               	goto	u2601
  3387     0130                     u2600:
  3388     0130  07BF               	addwf	??_map+1,f
  3389     0131                     u2601:
  3390     0131  0827               	movf	?___aldiv+2,w
  3391     0132  1803               	skipnc
  3392     0133  0F27               	incfsz	?___aldiv+2,w
  3393     0134  2936               	goto	u2602
  3394     0135  2937               	goto	u2603
  3395     0136                     u2602:
  3396     0136  07C0               	addwf	??_map+2,f
  3397     0137                     u2603:
  3398     0137  0828               	movf	?___aldiv+3,w
  3399     0138  1803               	skipnc
  3400     0139  0A28               	incf	?___aldiv+3,w
  3401     013A  07C1               	addwf	??_map+3,f
  3402     013B  0841               	movf	??_map+3,w
  3403     013C  00B7               	movwf	?_map+3
  3404     013D  0840               	movf	??_map+2,w
  3405     013E  00B6               	movwf	?_map+2
  3406     013F  083F               	movf	??_map+1,w
  3407     0140  00B5               	movwf	?_map+1
  3408     0141  083E               	movf	??_map,w
  3409     0142  00B4               	movwf	?_map
  3410     0143                     l116:
  3411     0143  0008               	return
  3412     0144                     __end_of_map:
  3413                           
  3414                           	psect	text18
  3415     07B7                     __ptext18:	
  3416 ;; *************** function ___lmul *****************
  3417 ;; Defined at:
  3418 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\Umul32.c"
  3419 ;; Parameters:    Size  Location     Type
  3420 ;;  multiplier      4    2[COMMON] unsigned long 
  3421 ;;  multiplicand    4    6[COMMON] unsigned long 
  3422 ;; Auto vars:     Size  Location     Type
  3423 ;;  product         4    1[BANK0 ] unsigned long 
  3424 ;; Return value:  Size  Location     Type
  3425 ;;                  4    2[COMMON] unsigned long 
  3426 ;; Registers used:
  3427 ;;		wreg, status,2, status,0
  3428 ;; Tracked objects:
  3429 ;;		On entry : 0/0
  3430 ;;		On exit  : 0/0
  3431 ;;		Unchanged: 0/0
  3432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3433 ;;      Params:         8       0       0       0       0
  3434 ;;      Locals:         0       4       0       0       0
  3435 ;;      Temps:          0       1       0       0       0
  3436 ;;      Totals:         8       5       0       0       0
  3437 ;;Total ram usage:       13 bytes
  3438 ;; Hardware stack levels used: 1
  3439 ;; Hardware stack levels required when called: 1
  3440 ;; This function calls:
  3441 ;;		Nothing
  3442 ;; This function is called by:
  3443 ;;		_map
  3444 ;; This function uses a non-reentrant model
  3445 ;;
  3446                           
  3447     07B7                     ___lmul:	
  3448                           ;psect for function ___lmul
  3449                           
  3450     07B7                     l2503:	
  3451                           ;incstack = 0
  3452                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  3453                           
  3454     07B7  3000               	movlw	0
  3455     07B8  1283               	bcf	3,5	;RP0=0, select bank0
  3456     07B9  1303               	bcf	3,6	;RP1=0, select bank0
  3457     07BA  00A4               	movwf	___lmul@product+3
  3458     07BB  3000               	movlw	0
  3459     07BC  00A3               	movwf	___lmul@product+2
  3460     07BD  3000               	movlw	0
  3461     07BE  00A2               	movwf	___lmul@product+1
  3462     07BF  3000               	movlw	0
  3463     07C0  00A1               	movwf	___lmul@product
  3464     07C1                     l2505:
  3465     07C1  1C72               	btfss	___lmul@multiplier,0
  3466     07C2  2FC4               	goto	u2311
  3467     07C3  2FC5               	goto	u2310
  3468     07C4                     u2311:
  3469     07C4  2FDC               	goto	l2509
  3470     07C5                     u2310:
  3471     07C5                     l2507:
  3472     07C5  0876               	movf	___lmul@multiplicand,w
  3473     07C6  07A1               	addwf	___lmul@product,f
  3474     07C7  0877               	movf	___lmul@multiplicand+1,w
  3475     07C8  1103               	clrz
  3476     07C9  1803               	skipnc
  3477     07CA  3E01               	addlw	1
  3478     07CB  1903               	skipnz
  3479     07CC  2FCE               	goto	u2321
  3480     07CD  07A2               	addwf	___lmul@product+1,f
  3481     07CE                     u2321:
  3482     07CE  0878               	movf	___lmul@multiplicand+2,w
  3483     07CF  1103               	clrz
  3484     07D0  1803               	skipnc
  3485     07D1  3E01               	addlw	1
  3486     07D2  1903               	skipnz
  3487     07D3  2FD5               	goto	u2322
  3488     07D4  07A3               	addwf	___lmul@product+2,f
  3489     07D5                     u2322:
  3490     07D5  0879               	movf	___lmul@multiplicand+3,w
  3491     07D6  1103               	clrz
  3492     07D7  1803               	skipnc
  3493     07D8  3E01               	addlw	1
  3494     07D9  1903               	skipnz
  3495     07DA  2FDC               	goto	u2323
  3496     07DB  07A4               	addwf	___lmul@product+3,f
  3497     07DC                     u2323:
  3498     07DC                     l2509:
  3499     07DC  3001               	movlw	1
  3500     07DD  00A0               	movwf	??___lmul
  3501     07DE                     u2335:
  3502     07DE  1003               	clrc
  3503     07DF  0DF6               	rlf	___lmul@multiplicand,f
  3504     07E0  0DF7               	rlf	___lmul@multiplicand+1,f
  3505     07E1  0DF8               	rlf	___lmul@multiplicand+2,f
  3506     07E2  0DF9               	rlf	___lmul@multiplicand+3,f
  3507     07E3  0BA0               	decfsz	??___lmul,f
  3508     07E4  2FDE               	goto	u2335
  3509     07E5                     l2511:
  3510     07E5  3001               	movlw	1
  3511     07E6                     u2345:
  3512     07E6  1003               	clrc
  3513     07E7  0CF5               	rrf	___lmul@multiplier+3,f
  3514     07E8  0CF4               	rrf	___lmul@multiplier+2,f
  3515     07E9  0CF3               	rrf	___lmul@multiplier+1,f
  3516     07EA  0CF2               	rrf	___lmul@multiplier,f
  3517     07EB  3EFF               	addlw	-1
  3518     07EC  1D03               	skipz
  3519     07ED  2FE6               	goto	u2345
  3520     07EE  0875               	movf	___lmul@multiplier+3,w
  3521     07EF  0474               	iorwf	___lmul@multiplier+2,w
  3522     07F0  0473               	iorwf	___lmul@multiplier+1,w
  3523     07F1  0472               	iorwf	___lmul@multiplier,w
  3524     07F2  1D03               	skipz
  3525     07F3  2FF5               	goto	u2351
  3526     07F4  2FF6               	goto	u2350
  3527     07F5                     u2351:
  3528     07F5  2FC1               	goto	l2505
  3529     07F6                     u2350:
  3530     07F6                     l2513:
  3531     07F6  0824               	movf	___lmul@product+3,w
  3532     07F7  00F5               	movwf	?___lmul+3
  3533     07F8  0823               	movf	___lmul@product+2,w
  3534     07F9  00F4               	movwf	?___lmul+2
  3535     07FA  0822               	movf	___lmul@product+1,w
  3536     07FB  00F3               	movwf	?___lmul+1
  3537     07FC  0821               	movf	___lmul@product,w
  3538     07FD  00F2               	movwf	?___lmul
  3539     07FE                     l488:
  3540     07FE  0008               	return
  3541     07FF                     __end_of___lmul:
  3542                           
  3543                           	psect	text19
  3544     037A                     __ptext19:	
  3545 ;; *************** function ___aldiv *****************
  3546 ;; Defined at:
  3547 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\aldiv.c"
  3548 ;; Parameters:    Size  Location     Type
  3549 ;;  divisor         4    5[BANK0 ] long 
  3550 ;;  dividend        4    9[BANK0 ] long 
  3551 ;; Auto vars:     Size  Location     Type
  3552 ;;  quotient        4   16[BANK0 ] long 
  3553 ;;  sign            1   15[BANK0 ] unsigned char 
  3554 ;;  counter         1   14[BANK0 ] unsigned char 
  3555 ;; Return value:  Size  Location     Type
  3556 ;;                  4    5[BANK0 ] long 
  3557 ;; Registers used:
  3558 ;;		wreg, status,2, status,0
  3559 ;; Tracked objects:
  3560 ;;		On entry : 0/0
  3561 ;;		On exit  : 0/0
  3562 ;;		Unchanged: 0/0
  3563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3564 ;;      Params:         0       8       0       0       0
  3565 ;;      Locals:         0       6       0       0       0
  3566 ;;      Temps:          0       1       0       0       0
  3567 ;;      Totals:         0      15       0       0       0
  3568 ;;Total ram usage:       15 bytes
  3569 ;; Hardware stack levels used: 1
  3570 ;; Hardware stack levels required when called: 1
  3571 ;; This function calls:
  3572 ;;		Nothing
  3573 ;; This function is called by:
  3574 ;;		_map
  3575 ;; This function uses a non-reentrant model
  3576 ;;
  3577                           
  3578     037A                     ___aldiv:	
  3579                           ;psect for function ___aldiv
  3580                           
  3581     037A                     l2517:	
  3582                           ;incstack = 0
  3583                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  3584                           
  3585     037A  1283               	bcf	3,5	;RP0=0, select bank0
  3586     037B  1303               	bcf	3,6	;RP1=0, select bank0
  3587     037C  01AF               	clrf	___aldiv@sign
  3588     037D                     l2519:
  3589     037D  1FA8               	btfss	___aldiv@divisor+3,7
  3590     037E  2B80               	goto	u2361
  3591     037F  2B81               	goto	u2360
  3592     0380                     u2361:
  3593     0380  2B8E               	goto	l539
  3594     0381                     u2360:
  3595     0381                     l2521:
  3596     0381  09A5               	comf	___aldiv@divisor,f
  3597     0382  09A6               	comf	___aldiv@divisor+1,f
  3598     0383  09A7               	comf	___aldiv@divisor+2,f
  3599     0384  09A8               	comf	___aldiv@divisor+3,f
  3600     0385  0AA5               	incf	___aldiv@divisor,f
  3601     0386  1903               	skipnz
  3602     0387  0AA6               	incf	___aldiv@divisor+1,f
  3603     0388  1903               	skipnz
  3604     0389  0AA7               	incf	___aldiv@divisor+2,f
  3605     038A  1903               	skipnz
  3606     038B  0AA8               	incf	___aldiv@divisor+3,f
  3607     038C  3001               	movlw	1
  3608     038D  00AF               	movwf	___aldiv@sign
  3609     038E                     l539:
  3610     038E  1FAC               	btfss	___aldiv@dividend+3,7
  3611     038F  2B91               	goto	u2371
  3612     0390  2B92               	goto	u2370
  3613     0391                     u2371:
  3614     0391  2B9F               	goto	l2527
  3615     0392                     u2370:
  3616     0392                     l2523:
  3617     0392  09A9               	comf	___aldiv@dividend,f
  3618     0393  09AA               	comf	___aldiv@dividend+1,f
  3619     0394  09AB               	comf	___aldiv@dividend+2,f
  3620     0395  09AC               	comf	___aldiv@dividend+3,f
  3621     0396  0AA9               	incf	___aldiv@dividend,f
  3622     0397  1903               	skipnz
  3623     0398  0AAA               	incf	___aldiv@dividend+1,f
  3624     0399  1903               	skipnz
  3625     039A  0AAB               	incf	___aldiv@dividend+2,f
  3626     039B  1903               	skipnz
  3627     039C  0AAC               	incf	___aldiv@dividend+3,f
  3628     039D                     l2525:
  3629     039D  3001               	movlw	1
  3630     039E  06AF               	xorwf	___aldiv@sign,f
  3631     039F                     l2527:
  3632     039F  3000               	movlw	0
  3633     03A0  00B3               	movwf	___aldiv@quotient+3
  3634     03A1  3000               	movlw	0
  3635     03A2  00B2               	movwf	___aldiv@quotient+2
  3636     03A3  3000               	movlw	0
  3637     03A4  00B1               	movwf	___aldiv@quotient+1
  3638     03A5  3000               	movlw	0
  3639     03A6  00B0               	movwf	___aldiv@quotient
  3640     03A7                     l2529:
  3641     03A7  0828               	movf	___aldiv@divisor+3,w
  3642     03A8  0427               	iorwf	___aldiv@divisor+2,w
  3643     03A9  0426               	iorwf	___aldiv@divisor+1,w
  3644     03AA  0425               	iorwf	___aldiv@divisor,w
  3645     03AB  1903               	skipnz
  3646     03AC  2BAE               	goto	u2381
  3647     03AD  2BAF               	goto	u2380
  3648     03AE                     u2381:
  3649     03AE  2BFA               	goto	l2549
  3650     03AF                     u2380:
  3651     03AF                     l2531:
  3652     03AF  3001               	movlw	1
  3653     03B0  00AE               	movwf	___aldiv@counter
  3654     03B1  2BBD               	goto	l2535
  3655     03B2                     l2533:
  3656     03B2  3001               	movlw	1
  3657     03B3  00AD               	movwf	??___aldiv
  3658     03B4                     u2395:
  3659     03B4  1003               	clrc
  3660     03B5  0DA5               	rlf	___aldiv@divisor,f
  3661     03B6  0DA6               	rlf	___aldiv@divisor+1,f
  3662     03B7  0DA7               	rlf	___aldiv@divisor+2,f
  3663     03B8  0DA8               	rlf	___aldiv@divisor+3,f
  3664     03B9  0BAD               	decfsz	??___aldiv,f
  3665     03BA  2BB4               	goto	u2395
  3666     03BB  3001               	movlw	1
  3667     03BC  07AE               	addwf	___aldiv@counter,f
  3668     03BD                     l2535:
  3669     03BD  1FA8               	btfss	___aldiv@divisor+3,7
  3670     03BE  2BC0               	goto	u2401
  3671     03BF  2BC1               	goto	u2400
  3672     03C0                     u2401:
  3673     03C0  2BB2               	goto	l2533
  3674     03C1                     u2400:
  3675     03C1                     l2537:
  3676     03C1  3001               	movlw	1
  3677     03C2  00AD               	movwf	??___aldiv
  3678     03C3                     u2415:
  3679     03C3  1003               	clrc
  3680     03C4  0DB0               	rlf	___aldiv@quotient,f
  3681     03C5  0DB1               	rlf	___aldiv@quotient+1,f
  3682     03C6  0DB2               	rlf	___aldiv@quotient+2,f
  3683     03C7  0DB3               	rlf	___aldiv@quotient+3,f
  3684     03C8  0BAD               	decfsz	??___aldiv,f
  3685     03C9  2BC3               	goto	u2415
  3686     03CA                     l2539:
  3687     03CA  0828               	movf	___aldiv@divisor+3,w
  3688     03CB  022C               	subwf	___aldiv@dividend+3,w
  3689     03CC  1D03               	skipz
  3690     03CD  2BD8               	goto	u2425
  3691     03CE  0827               	movf	___aldiv@divisor+2,w
  3692     03CF  022B               	subwf	___aldiv@dividend+2,w
  3693     03D0  1D03               	skipz
  3694     03D1  2BD8               	goto	u2425
  3695     03D2  0826               	movf	___aldiv@divisor+1,w
  3696     03D3  022A               	subwf	___aldiv@dividend+1,w
  3697     03D4  1D03               	skipz
  3698     03D5  2BD8               	goto	u2425
  3699     03D6  0825               	movf	___aldiv@divisor,w
  3700     03D7  0229               	subwf	___aldiv@dividend,w
  3701     03D8                     u2425:
  3702     03D8  1C03               	skipc
  3703     03D9  2BDB               	goto	u2421
  3704     03DA  2BDC               	goto	u2420
  3705     03DB                     u2421:
  3706     03DB  2BEB               	goto	l2545
  3707     03DC                     u2420:
  3708     03DC                     l2541:
  3709     03DC  0825               	movf	___aldiv@divisor,w
  3710     03DD  02A9               	subwf	___aldiv@dividend,f
  3711     03DE  0826               	movf	___aldiv@divisor+1,w
  3712     03DF  1C03               	skipc
  3713     03E0  0F26               	incfsz	___aldiv@divisor+1,w
  3714     03E1  02AA               	subwf	___aldiv@dividend+1,f
  3715     03E2  0827               	movf	___aldiv@divisor+2,w
  3716     03E3  1C03               	skipc
  3717     03E4  0F27               	incfsz	___aldiv@divisor+2,w
  3718     03E5  02AB               	subwf	___aldiv@dividend+2,f
  3719     03E6  0828               	movf	___aldiv@divisor+3,w
  3720     03E7  1C03               	skipc
  3721     03E8  0F28               	incfsz	___aldiv@divisor+3,w
  3722     03E9  02AC               	subwf	___aldiv@dividend+3,f
  3723     03EA                     l2543:
  3724     03EA  1430               	bsf	___aldiv@quotient,0
  3725     03EB                     l2545:
  3726     03EB  3001               	movlw	1
  3727     03EC                     u2435:
  3728     03EC  1003               	clrc
  3729     03ED  0CA8               	rrf	___aldiv@divisor+3,f
  3730     03EE  0CA7               	rrf	___aldiv@divisor+2,f
  3731     03EF  0CA6               	rrf	___aldiv@divisor+1,f
  3732     03F0  0CA5               	rrf	___aldiv@divisor,f
  3733     03F1  3EFF               	addlw	-1
  3734     03F2  1D03               	skipz
  3735     03F3  2BEC               	goto	u2435
  3736     03F4                     l2547:
  3737     03F4  3001               	movlw	1
  3738     03F5  02AE               	subwf	___aldiv@counter,f
  3739     03F6  1D03               	btfss	3,2
  3740     03F7  2BF9               	goto	u2441
  3741     03F8  2BFA               	goto	u2440
  3742     03F9                     u2441:
  3743     03F9  2BC1               	goto	l2537
  3744     03FA                     u2440:
  3745     03FA                     l2549:
  3746     03FA  082F               	movf	___aldiv@sign,w
  3747     03FB  1903               	btfsc	3,2
  3748     03FC  2BFE               	goto	u2451
  3749     03FD  2BFF               	goto	u2450
  3750     03FE                     u2451:
  3751     03FE  2C0A               	goto	l2553
  3752     03FF                     u2450:
  3753     03FF                     l2551:
  3754     03FF  09B0               	comf	___aldiv@quotient,f
  3755     0400  09B1               	comf	___aldiv@quotient+1,f
  3756     0401  09B2               	comf	___aldiv@quotient+2,f
  3757     0402  09B3               	comf	___aldiv@quotient+3,f
  3758     0403  0AB0               	incf	___aldiv@quotient,f
  3759     0404  1903               	skipnz
  3760     0405  0AB1               	incf	___aldiv@quotient+1,f
  3761     0406  1903               	skipnz
  3762     0407  0AB2               	incf	___aldiv@quotient+2,f
  3763     0408  1903               	skipnz
  3764     0409  0AB3               	incf	___aldiv@quotient+3,f
  3765     040A                     l2553:
  3766     040A  0833               	movf	___aldiv@quotient+3,w
  3767     040B  00A8               	movwf	?___aldiv+3
  3768     040C  0832               	movf	___aldiv@quotient+2,w
  3769     040D  00A7               	movwf	?___aldiv+2
  3770     040E  0831               	movf	___aldiv@quotient+1,w
  3771     040F  00A6               	movwf	?___aldiv+1
  3772     0410  0830               	movf	___aldiv@quotient,w
  3773     0411  00A5               	movwf	?___aldiv
  3774     0412                     l549:
  3775     0412  0008               	return
  3776     0413                     __end_of___aldiv:
  3777                           
  3778                           	psect	text20
  3779     0B24                     __ptext20:	
  3780 ;; *************** function _readLight *****************
  3781 ;; Defined at:
  3782 ;;		line 192 in file "./config.h"
  3783 ;; Parameters:    Size  Location     Type
  3784 ;;		None
  3785 ;; Auto vars:     Size  Location     Type
  3786 ;;		None
  3787 ;; Return value:  Size  Location     Type
  3788 ;;                  1    wreg      void 
  3789 ;; Registers used:
  3790 ;;		wreg, status,2, status,0, pclath, cstack
  3791 ;; Tracked objects:
  3792 ;;		On entry : 0/0
  3793 ;;		On exit  : 0/0
  3794 ;;		Unchanged: 0/0
  3795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3796 ;;      Params:         0       0       0       0       0
  3797 ;;      Locals:         0       0       0       0       0
  3798 ;;      Temps:          0       0       0       0       0
  3799 ;;      Totals:         0       0       0       0       0
  3800 ;;Total ram usage:        0 bytes
  3801 ;; Hardware stack levels used: 1
  3802 ;; Hardware stack levels required when called: 2
  3803 ;; This function calls:
  3804 ;;		_ADC_Read
  3805 ;; This function is called by:
  3806 ;;		_ADC_readAll
  3807 ;; This function uses a non-reentrant model
  3808 ;;
  3809                           
  3810     0B24                     _readLight:	
  3811                           ;psect for function _readLight
  3812                           
  3813     0B24                     l2037:	
  3814                           ;incstack = 0
  3815                           ; Regs used in _readLight: [wreg+status,2+status,0+pclath+cstack]
  3816                           
  3817                           
  3818                           ;./config.h: 194:   light = ADC_Read(2);
  3819     0B24  3002               	movlw	2
  3820     0B25  120A  158A  24C5  120A  158A  	fcall	_ADC_Read
  3821     0B2A  0873               	movf	?_ADC_Read+1,w
  3822     0B2B  1283               	bcf	3,5	;RP0=0, select bank0
  3823     0B2C  1303               	bcf	3,6	;RP1=0, select bank0
  3824     0B2D  00DF               	movwf	_light+1
  3825     0B2E  0872               	movf	?_ADC_Read,w
  3826     0B2F  00DE               	movwf	_light
  3827     0B30                     l125:
  3828     0B30  0008               	return
  3829     0B31                     __end_of_readLight:
  3830                           
  3831                           	psect	text21
  3832     0CC5                     __ptext21:	
  3833 ;; *************** function _ADC_Read *****************
  3834 ;; Defined at:
  3835 ;;		line 141 in file "./config.h"
  3836 ;; Parameters:    Size  Location     Type
  3837 ;;  channel         1    wreg     unsigned char 
  3838 ;; Auto vars:     Size  Location     Type
  3839 ;;  channel         1    5[COMMON] unsigned char 
  3840 ;; Return value:  Size  Location     Type
  3841 ;;                  2    2[COMMON] int 
  3842 ;; Registers used:
  3843 ;;		wreg, status,2, status,0
  3844 ;; Tracked objects:
  3845 ;;		On entry : 0/0
  3846 ;;		On exit  : 0/0
  3847 ;;		Unchanged: 0/0
  3848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3849 ;;      Params:         2       0       0       0       0
  3850 ;;      Locals:         1       0       0       0       0
  3851 ;;      Temps:          1       0       0       0       0
  3852 ;;      Totals:         4       0       0       0       0
  3853 ;;Total ram usage:        4 bytes
  3854 ;; Hardware stack levels used: 1
  3855 ;; Hardware stack levels required when called: 1
  3856 ;; This function calls:
  3857 ;;		Nothing
  3858 ;; This function is called by:
  3859 ;;		_readSoilMoisture
  3860 ;;		_readTemperature
  3861 ;;		_readLight
  3862 ;; This function uses a non-reentrant model
  3863 ;;
  3864                           
  3865     0CC5                     _ADC_Read:	
  3866                           ;psect for function _ADC_Read
  3867                           
  3868                           
  3869                           ;incstack = 0
  3870                           ; Regs used in _ADC_Read: [wreg+status,2+status,0]
  3871                           ;ADC_Read@channel stored from wreg
  3872     0CC5  00F5               	movwf	ADC_Read@channel
  3873     0CC6                     l1965:
  3874                           
  3875                           ;./config.h: 144:   ADCON0bits.CHS = channel;
  3876     0CC6  0875               	movf	ADC_Read@channel,w
  3877     0CC7  00F4               	movwf	??_ADC_Read
  3878     0CC8  0DF4               	rlf	??_ADC_Read,f
  3879     0CC9  0DF4               	rlf	??_ADC_Read,f
  3880     0CCA  0DF4               	rlf	??_ADC_Read,f
  3881     0CCB  1283               	bcf	3,5	;RP0=0, select bank0
  3882     0CCC  1303               	bcf	3,6	;RP1=0, select bank0
  3883     0CCD  081F               	movf	31,w	;volatile
  3884     0CCE  0674               	xorwf	??_ADC_Read,w
  3885     0CCF  39C7               	andlw	-57
  3886     0CD0  0674               	xorwf	??_ADC_Read,w
  3887     0CD1  009F               	movwf	31	;volatile
  3888     0CD2                     l1967:
  3889                           
  3890                           ;./config.h: 147:   _delay((unsigned long)((20)*(4000000/4000000.0)));
  3891     0CD2  3006               	movlw	6
  3892     0CD3  00F4               	movwf	??_ADC_Read
  3893     0CD4                     u2867:
  3894     0CD4  0BF4               	decfsz	??_ADC_Read,f
  3895     0CD5  2CD4               	goto	u2867
  3896     0CD6  0000               	nop
  3897     0CD7                     l106:	
  3898                           ;./config.h: 149:   while (ADCON0bits.nDONE) {};
  3899                           
  3900     0CD7  1283               	bcf	3,5	;RP0=0, select bank0
  3901     0CD8  1303               	bcf	3,6	;RP1=0, select bank0
  3902     0CD9  191F               	btfsc	31,2	;volatile
  3903     0CDA  2CDC               	goto	u1651
  3904     0CDB  2CDD               	goto	u1650
  3905     0CDC                     u1651:
  3906     0CDC  2CD7               	goto	l106
  3907     0CDD                     u1650:
  3908     0CDD                     l108:
  3909                           
  3910                           ;./config.h: 152:   ADCON0bits.GO = 1;
  3911     0CDD  151F               	bsf	31,2	;volatile
  3912     0CDE                     l109:	
  3913                           ;./config.h: 155:     {};
  3914                           
  3915                           
  3916                           ;./config.h: 154:   while (ADCON0bits.nDONE)
  3917     0CDE  191F               	btfsc	31,2	;volatile
  3918     0CDF  2CE1               	goto	u1661
  3919     0CE0  2CE2               	goto	u1660
  3920     0CE1                     u1661:
  3921     0CE1  2CDE               	goto	l109
  3922     0CE2                     u1660:
  3923     0CE2                     l1969:
  3924                           
  3925                           ;./config.h: 157:   return((ADRESH<<8) + ADRESL);
  3926     0CE2  081E               	movf	30,w	;volatile
  3927     0CE3  00F3               	movwf	?_ADC_Read+1
  3928     0CE4  1683               	bsf	3,5	;RP0=1, select bank1
  3929     0CE5  1303               	bcf	3,6	;RP1=0, select bank1
  3930     0CE6  081E               	movf	30,w	;volatile
  3931     0CE7  00F2               	movwf	?_ADC_Read
  3932     0CE8                     l112:
  3933     0CE8  0008               	return
  3934     0CE9                     __end_of_ADC_Read:
  3935                           
  3936                           	psect	text22
  3937     0FB6                     __ptext22:	
  3938 ;; *************** function _print_Emergency *****************
  3939 ;; Defined at:
  3940 ;;		line 238 in file "./lcdFunctions.h"
  3941 ;; Parameters:    Size  Location     Type
  3942 ;;		None
  3943 ;; Auto vars:     Size  Location     Type
  3944 ;;		None
  3945 ;; Return value:  Size  Location     Type
  3946 ;;                  1    wreg      void 
  3947 ;; Registers used:
  3948 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3949 ;; Tracked objects:
  3950 ;;		On entry : 0/0
  3951 ;;		On exit  : 0/0
  3952 ;;		Unchanged: 0/0
  3953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3954 ;;      Params:         0       0       0       0       0
  3955 ;;      Locals:         0       0       0       0       0
  3956 ;;      Temps:          0       3       0       0       0
  3957 ;;      Totals:         0       3       0       0       0
  3958 ;;Total ram usage:        3 bytes
  3959 ;; Hardware stack levels used: 1
  3960 ;; Hardware stack levels required when called: 4
  3961 ;; This function calls:
  3962 ;;		_Lcd_Clear
  3963 ;;		_Lcd_Set_Cursor
  3964 ;;		_Lcd_Write_String
  3965 ;; This function is called by:
  3966 ;;		_main
  3967 ;; This function uses a non-reentrant model
  3968 ;;
  3969                           
  3970     0FB6                     _print_Emergency:	
  3971                           ;psect for function _print_Emergency
  3972                           
  3973     0FB6                     l2837:	
  3974                           ;incstack = 0
  3975                           ; Regs used in _print_Emergency: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3976                           
  3977                           
  3978                           ;./lcdFunctions.h: 240:   Lcd_Clear();
  3979     0FB6  120A  158A  2317  120A  158A  	fcall	_Lcd_Clear
  3980                           
  3981                           ;./lcdFunctions.h: 241:   Lcd_Set_Cursor(1,5);
  3982     0FBB  3005               	movlw	5
  3983     0FBC  00F6               	movwf	Lcd_Set_Cursor@b
  3984     0FBD  3001               	movlw	1
  3985     0FBE  120A  118A  2769  120A  158A  	fcall	_Lcd_Set_Cursor
  3986     0FC3                     l2839:
  3987                           
  3988                           ;./lcdFunctions.h: 242:   Lcd_Write_String("EMERGENCY");
  3989     0FC3  304D               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  3990     0FC4  00F7               	movwf	Lcd_Write_String@a
  3991     0FC5  3080               	movlw	128
  3992     0FC6  00F8               	movwf	Lcd_Write_String@a+1
  3993     0FC7  120A  158A  26E3  120A  158A  	fcall	_Lcd_Write_String
  3994     0FCC                     l2841:
  3995                           
  3996                           ;./lcdFunctions.h: 243:   Lcd_Set_Cursor(2,6);
  3997     0FCC  3006               	movlw	6
  3998     0FCD  00F6               	movwf	Lcd_Set_Cursor@b
  3999     0FCE  3002               	movlw	2
  4000     0FCF  120A  118A  2769  120A  158A  	fcall	_Lcd_Set_Cursor
  4001                           
  4002                           ;./lcdFunctions.h: 244:   Lcd_Write_String("STATE!!");
  4003     0FD4  3057               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  4004     0FD5  00F7               	movwf	Lcd_Write_String@a
  4005     0FD6  3080               	movlw	128
  4006     0FD7  00F8               	movwf	Lcd_Write_String@a+1
  4007     0FD8  120A  158A  26E3  120A  158A  	fcall	_Lcd_Write_String
  4008     0FDD                     l2843:
  4009                           
  4010                           ;./lcdFunctions.h: 245:   _delay((unsigned long)((700)*(4000000/4000.0)));
  4011     0FDD  3004               	movlw	4
  4012     0FDE  1283               	bcf	3,5	;RP0=0, select bank0
  4013     0FDF  1303               	bcf	3,6	;RP1=0, select bank0
  4014     0FE0  00A7               	movwf	??_print_Emergency+2
  4015     0FE1  308E               	movlw	142
  4016     0FE2  00A6               	movwf	??_print_Emergency+1
  4017     0FE3  3011               	movlw	17
  4018     0FE4  00A5               	movwf	??_print_Emergency
  4019     0FE5                     u2877:
  4020     0FE5  0BA5               	decfsz	??_print_Emergency,f
  4021     0FE6  2FE5               	goto	u2877
  4022     0FE7  0BA6               	decfsz	??_print_Emergency+1,f
  4023     0FE8  2FE5               	goto	u2877
  4024     0FE9  0BA7               	decfsz	??_print_Emergency+2,f
  4025     0FEA  2FE5               	goto	u2877
  4026     0FEB  2FEC               	nop2
  4027     0FEC                     l2845:
  4028                           
  4029                           ;./lcdFunctions.h: 246:   Lcd_Clear();
  4030     0FEC  120A  158A  2317  120A  158A  	fcall	_Lcd_Clear
  4031     0FF1                     l2847:
  4032                           
  4033                           ;./lcdFunctions.h: 247:   _delay((unsigned long)((500)*(4000000/4000.0)));
  4034     0FF1  3003               	movlw	3
  4035     0FF2  1283               	bcf	3,5	;RP0=0, select bank0
  4036     0FF3  1303               	bcf	3,6	;RP1=0, select bank0
  4037     0FF4  00A7               	movwf	??_print_Emergency+2
  4038     0FF5  308A               	movlw	138
  4039     0FF6  00A6               	movwf	??_print_Emergency+1
  4040     0FF7  3055               	movlw	85
  4041     0FF8  00A5               	movwf	??_print_Emergency
  4042     0FF9                     u2887:
  4043     0FF9  0BA5               	decfsz	??_print_Emergency,f
  4044     0FFA  2FF9               	goto	u2887
  4045     0FFB  0BA6               	decfsz	??_print_Emergency+1,f
  4046     0FFC  2FF9               	goto	u2887
  4047     0FFD  0BA7               	decfsz	??_print_Emergency+2,f
  4048     0FFE  2FF9               	goto	u2887
  4049     0FFF                     l239:
  4050     0FFF  0008               	return
  4051     1000                     __end_of_print_Emergency:
  4052                           
  4053                           	psect	text23
  4054     0B4D                     __ptext23:	
  4055 ;; *************** function _pins_init *****************
  4056 ;; Defined at:
  4057 ;;		line 99 in file "./config.h"
  4058 ;; Parameters:    Size  Location     Type
  4059 ;;  _TRISA          1    wreg     unsigned char 
  4060 ;;  _TRISB          1    2[COMMON] unsigned char 
  4061 ;;  _TRISC          1    3[COMMON] unsigned char 
  4062 ;;  _TRISD          1    4[COMMON] unsigned char 
  4063 ;; Auto vars:     Size  Location     Type
  4064 ;;  _TRISA          1    5[COMMON] unsigned char 
  4065 ;; Return value:  Size  Location     Type
  4066 ;;                  1    wreg      void 
  4067 ;; Registers used:
  4068 ;;		wreg
  4069 ;; Tracked objects:
  4070 ;;		On entry : 0/0
  4071 ;;		On exit  : 0/0
  4072 ;;		Unchanged: 0/0
  4073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4074 ;;      Params:         3       0       0       0       0
  4075 ;;      Locals:         1       0       0       0       0
  4076 ;;      Temps:          0       0       0       0       0
  4077 ;;      Totals:         4       0       0       0       0
  4078 ;;Total ram usage:        4 bytes
  4079 ;; Hardware stack levels used: 1
  4080 ;; Hardware stack levels required when called: 1
  4081 ;; This function calls:
  4082 ;;		Nothing
  4083 ;; This function is called by:
  4084 ;;		_main
  4085 ;; This function uses a non-reentrant model
  4086 ;;
  4087                           
  4088     0B4D                     _pins_init:	
  4089                           ;psect for function _pins_init
  4090                           
  4091                           
  4092                           ;incstack = 0
  4093                           ; Regs used in _pins_init: [wreg]
  4094                           ;pins_init@_TRISA stored from wreg
  4095     0B4D  00F5               	movwf	pins_init@_TRISA
  4096     0B4E                     l2283:
  4097                           
  4098                           ;./config.h: 100:   TRISA = _TRISA;
  4099     0B4E  0875               	movf	pins_init@_TRISA,w
  4100     0B4F  1683               	bsf	3,5	;RP0=1, select bank1
  4101     0B50  1303               	bcf	3,6	;RP1=0, select bank1
  4102     0B51  0085               	movwf	5	;volatile
  4103                           
  4104                           ;./config.h: 101:   TRISB = _TRISB;
  4105     0B52  0872               	movf	pins_init@_TRISB,w
  4106     0B53  0086               	movwf	6	;volatile
  4107                           
  4108                           ;./config.h: 102:   TRISC = _TRISC;
  4109     0B54  0873               	movf	pins_init@_TRISC,w
  4110     0B55  0087               	movwf	7	;volatile
  4111                           
  4112                           ;./config.h: 103:   TRISD = _TRISD;
  4113     0B56  0874               	movf	pins_init@_TRISD,w
  4114     0B57  0088               	movwf	8	;volatile
  4115     0B58                     l2285:
  4116                           
  4117                           ;./config.h: 105:   OPTION_REGbits.nRBPU = 0;
  4118     0B58  1381               	bcf	1,7	;volatile
  4119     0B59                     l2287:
  4120                           
  4121                           ;./config.h: 107:   TRISCbits.TRISC6 = 1;
  4122     0B59  1707               	bsf	7,6	;volatile
  4123     0B5A                     l2289:
  4124                           
  4125                           ;./config.h: 108:   TRISCbits.TRISC7 = 1;
  4126     0B5A  1787               	bsf	7,7	;volatile
  4127     0B5B                     l97:
  4128     0B5B  0008               	return
  4129     0B5C                     __end_of_pins_init:
  4130                           
  4131                           	psect	text24
  4132     0E26                     __ptext24:	
  4133 ;; *************** function _lcd_run *****************
  4134 ;; Defined at:
  4135 ;;		line 191 in file "./lcdFunctions.h"
  4136 ;; Parameters:    Size  Location     Type
  4137 ;;		None
  4138 ;; Auto vars:     Size  Location     Type
  4139 ;;		None
  4140 ;; Return value:  Size  Location     Type
  4141 ;;                  1    wreg      void 
  4142 ;; Registers used:
  4143 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4144 ;; Tracked objects:
  4145 ;;		On entry : 0/0
  4146 ;;		On exit  : 0/0
  4147 ;;		Unchanged: 0/0
  4148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4149 ;;      Params:         0       0       0       0       0
  4150 ;;      Locals:         0       0       0       0       0
  4151 ;;      Temps:          0       0       0       0       0
  4152 ;;      Totals:         0       0       0       0       0
  4153 ;;Total ram usage:        0 bytes
  4154 ;; Hardware stack levels used: 1
  4155 ;; Hardware stack levels required when called: 7
  4156 ;; This function calls:
  4157 ;;		_lcd_debounceButtons
  4158 ;;		_print_ArtificialLight
  4159 ;;		_print_Irrigation
  4160 ;;		_print_SoilMoisture
  4161 ;;		_print_TankState
  4162 ;;		_print_Temperature
  4163 ;; This function is called by:
  4164 ;;		_main
  4165 ;; This function uses a non-reentrant model
  4166 ;;
  4167                           
  4168     0E26                     _lcd_run:	
  4169                           ;psect for function _lcd_run
  4170                           
  4171     0E26                     l2819:	
  4172                           ;incstack = 0
  4173                           ; Regs used in _lcd_run: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4174                           
  4175                           
  4176                           ;./lcdFunctions.h: 194:   lcd_debounceButtons();
  4177     0E26  120A  158A  2564  120A  158A  	fcall	_lcd_debounceButtons
  4178                           
  4179                           ;./lcdFunctions.h: 196:   switch(lcd_index)
  4180     0E2B  2E4A               	goto	l2833
  4181     0E2C                     l2821:
  4182                           
  4183                           ;./lcdFunctions.h: 199:     print_TankState();
  4184     0E2C  120A  158A  269F  120A  158A  	fcall	_print_TankState
  4185                           
  4186                           ;./lcdFunctions.h: 200:     break;
  4187     0E31  2E5D               	goto	l2835
  4188     0E32                     l2823:
  4189                           
  4190                           ;./lcdFunctions.h: 202:     print_Irrigation();
  4191     0E32  120A  158A  2729  120A  158A  	fcall	_print_Irrigation
  4192                           
  4193                           ;./lcdFunctions.h: 203:     break;
  4194     0E37  2E5D               	goto	l2835
  4195     0E38                     l2825:
  4196                           
  4197                           ;./lcdFunctions.h: 205:     print_SoilMoisture();
  4198     0E38  120A  118A  258D  120A  158A  	fcall	_print_SoilMoisture
  4199                           
  4200                           ;./lcdFunctions.h: 206:     break;
  4201     0E3D  2E5D               	goto	l2835
  4202     0E3E                     l2827:
  4203                           
  4204                           ;./lcdFunctions.h: 208:     print_Temperature();
  4205     0E3E  120A  118A  2522  120A  158A  	fcall	_print_Temperature
  4206                           
  4207                           ;./lcdFunctions.h: 209:     break;
  4208     0E43  2E5D               	goto	l2835
  4209     0E44                     l2829:
  4210                           
  4211                           ;./lcdFunctions.h: 211:     print_ArtificialLight();
  4212     0E44  120A  118A  2655  120A  158A  	fcall	_print_ArtificialLight
  4213     0E49  2E5D               	goto	l2835
  4214     0E4A                     l2833:
  4215     0E4A  1283               	bcf	3,5	;RP0=0, select bank0
  4216     0E4B  1303               	bcf	3,6	;RP1=0, select bank0
  4217     0E4C  086A               	movf	_lcd_index,w
  4218                           
  4219                           ; Switch size 1, requested type "simple"
  4220                           ; Number of cases is 5, Range of values is 1 to 5
  4221                           ; switch strategies available:
  4222                           ; Name         Instructions Cycles
  4223                           ; simple_byte           16     9 (average)
  4224                           ; direct_byte           26    11 (fixed)
  4225                           ; jumptable            263     9 (fixed)
  4226                           ;	Chosen strategy is simple_byte
  4227     0E4D  3A01               	xorlw	1	; case 1
  4228     0E4E  1903               	skipnz
  4229     0E4F  2E2C               	goto	l2821
  4230     0E50  3A03               	xorlw	3	; case 2
  4231     0E51  1903               	skipnz
  4232     0E52  2E32               	goto	l2823
  4233     0E53  3A01               	xorlw	1	; case 3
  4234     0E54  1903               	skipnz
  4235     0E55  2E38               	goto	l2825
  4236     0E56  3A07               	xorlw	7	; case 4
  4237     0E57  1903               	skipnz
  4238     0E58  2E3E               	goto	l2827
  4239     0E59  3A01               	xorlw	1	; case 5
  4240     0E5A  1903               	skipnz
  4241     0E5B  2E44               	goto	l2829
  4242     0E5C  2E5D               	goto	l2835
  4243     0E5D                     l2835:
  4244                           
  4245                           ;./lcdFunctions.h: 216:   lcd_lastIndex = lcd_index;
  4246     0E5D  1283               	bcf	3,5	;RP0=0, select bank0
  4247     0E5E  1303               	bcf	3,6	;RP1=0, select bank0
  4248     0E5F  086A               	movf	_lcd_index,w
  4249     0E60  00E5               	movwf	_lcd_lastIndex
  4250     0E61                     l226:
  4251     0E61  0008               	return
  4252     0E62                     __end_of_lcd_run:
  4253                           
  4254                           	psect	text25
  4255     0522                     __ptext25:	
  4256 ;; *************** function _print_Temperature *****************
  4257 ;; Defined at:
  4258 ;;		line 148 in file "./lcdFunctions.h"
  4259 ;; Parameters:    Size  Location     Type
  4260 ;;		None
  4261 ;; Auto vars:     Size  Location     Type
  4262 ;;  buffer         16   44[BANK0 ] unsigned char [16]
  4263 ;; Return value:  Size  Location     Type
  4264 ;;                  1    wreg      void 
  4265 ;; Registers used:
  4266 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4267 ;; Tracked objects:
  4268 ;;		On entry : 0/0
  4269 ;;		On exit  : 0/0
  4270 ;;		Unchanged: 0/0
  4271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4272 ;;      Params:         0       0       0       0       0
  4273 ;;      Locals:         0      16       0       0       0
  4274 ;;      Temps:          0       0       0       0       0
  4275 ;;      Totals:         0      16       0       0       0
  4276 ;;Total ram usage:       16 bytes
  4277 ;; Hardware stack levels used: 1
  4278 ;; Hardware stack levels required when called: 6
  4279 ;; This function calls:
  4280 ;;		_Lcd_Clear
  4281 ;;		_Lcd_Set_Cursor
  4282 ;;		_Lcd_Write_Char
  4283 ;;		_Lcd_Write_String
  4284 ;;		_draw_Index
  4285 ;;		_sprintf
  4286 ;; This function is called by:
  4287 ;;		_lcd_run
  4288 ;; This function uses a non-reentrant model
  4289 ;;
  4290                           
  4291     0522                     _print_Temperature:	
  4292                           ;psect for function _print_Temperature
  4293                           
  4294     0522                     l2783:	
  4295                           ;incstack = 0
  4296                           ; Regs used in _print_Temperature: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4297                           
  4298                           
  4299                           ;./lcdFunctions.h: 150:   if(temperature == old_temperature && lcd_lastIndex == lcd_inde
      +                          x)
  4300     0522  1683               	bsf	3,5	;RP0=1, select bank1
  4301     0523  1303               	bcf	3,6	;RP1=0, select bank1
  4302     0524  0851               	movf	(_old_temperature+1)^(0+128),w
  4303     0525  1283               	bcf	3,5	;RP0=0, select bank0
  4304     0526  1303               	bcf	3,6	;RP1=0, select bank0
  4305     0527  0661               	xorwf	_temperature+1,w
  4306     0528  1D03               	skipz
  4307     0529  2D30               	goto	u2785
  4308     052A  1683               	bsf	3,5	;RP0=1, select bank1
  4309     052B  1303               	bcf	3,6	;RP1=0, select bank1
  4310     052C  0850               	movf	_old_temperature^(0+128),w
  4311     052D  1283               	bcf	3,5	;RP0=0, select bank0
  4312     052E  1303               	bcf	3,6	;RP1=0, select bank0
  4313     052F  0660               	xorwf	_temperature,w
  4314     0530                     u2785:
  4315     0530  1D03               	skipz
  4316     0531  2D33               	goto	u2781
  4317     0532  2D34               	goto	u2780
  4318     0533                     u2781:
  4319     0533  2D3B               	goto	l2789
  4320     0534                     u2780:
  4321     0534                     l2785:
  4322     0534  0865               	movf	_lcd_lastIndex,w
  4323     0535  066A               	xorwf	_lcd_index,w
  4324     0536  1D03               	skipz
  4325     0537  2D39               	goto	u2791
  4326     0538  2D3A               	goto	u2790
  4327     0539                     u2791:
  4328     0539  2D3B               	goto	l2789
  4329     053A                     u2790:
  4330     053A  2D8C               	goto	l210
  4331     053B                     l2789:
  4332                           
  4333                           ;./lcdFunctions.h: 153:   old_temperature = temperature;
  4334     053B  0861               	movf	_temperature+1,w
  4335     053C  1683               	bsf	3,5	;RP0=1, select bank1
  4336     053D  1303               	bcf	3,6	;RP1=0, select bank1
  4337     053E  00D1               	movwf	(_old_temperature+1)^(0+128)
  4338     053F  1283               	bcf	3,5	;RP0=0, select bank0
  4339     0540  1303               	bcf	3,6	;RP1=0, select bank0
  4340     0541  0860               	movf	_temperature,w
  4341     0542  1683               	bsf	3,5	;RP0=1, select bank1
  4342     0543  1303               	bcf	3,6	;RP1=0, select bank1
  4343     0544  00D0               	movwf	_old_temperature^(0+128)
  4344     0545                     l2791:
  4345                           
  4346                           ;./lcdFunctions.h: 155:   Lcd_Clear();
  4347     0545  120A  158A  2317  120A  118A  	fcall	_Lcd_Clear
  4348     054A                     l2793:
  4349                           
  4350                           ;./lcdFunctions.h: 157:   char buffer[16];;./lcdFunctions.h: 159:   Lcd_Set_Cursor(1,3);
  4351     054A  3003               	movlw	3
  4352     054B  00F6               	movwf	Lcd_Set_Cursor@b
  4353     054C  3001               	movlw	1
  4354     054D  120A  118A  2769  120A  118A  	fcall	_Lcd_Set_Cursor
  4355     0552                     l2795:
  4356                           
  4357                           ;./lcdFunctions.h: 160:   Lcd_Write_String("TEMPERATURA:");
  4358     0552  301E               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  4359     0553  00F7               	movwf	Lcd_Write_String@a
  4360     0554  3080               	movlw	128
  4361     0555  00F8               	movwf	Lcd_Write_String@a+1
  4362     0556  120A  158A  26E3  120A  118A  	fcall	_Lcd_Write_String
  4363     055B                     l2797:
  4364                           
  4365                           ;./lcdFunctions.h: 162:   Lcd_Set_Cursor(2,7);
  4366     055B  3007               	movlw	7
  4367     055C  00F6               	movwf	Lcd_Set_Cursor@b
  4368     055D  3002               	movlw	2
  4369     055E  120A  118A  2769  120A  118A  	fcall	_Lcd_Set_Cursor
  4370     0563                     l2799:
  4371                           
  4372                           ;./lcdFunctions.h: 164:   sprintf(buffer,"%d",temperature);
  4373     0563  304C               	movlw	(low (print_Temperature@buffer| 0))& (0+255)
  4374     0564  1283               	bcf	3,5	;RP0=0, select bank0
  4375     0565  1303               	bcf	3,6	;RP1=0, select bank0
  4376     0566  00BB               	movwf	sprintf@s
  4377     0567  3082               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  4378     0568  00BC               	movwf	sprintf@fmt
  4379     0569  0861               	movf	_temperature+1,w
  4380     056A  00BE               	movwf	?_sprintf+3
  4381     056B  0860               	movf	_temperature,w
  4382     056C  00BD               	movwf	?_sprintf+2
  4383     056D  120A  158A  24A2  120A  118A  	fcall	_sprintf
  4384     0572                     l2801:
  4385                           
  4386                           ;./lcdFunctions.h: 165:   Lcd_Write_String(buffer);
  4387     0572  304C               	movlw	(low (print_Temperature@buffer| 0))& (0+255)
  4388     0573  00F7               	movwf	Lcd_Write_String@a
  4389     0574  3000               	movlw	0
  4390     0575  00F8               	movwf	Lcd_Write_String@a+1
  4391     0576  120A  158A  26E3  120A  118A  	fcall	_Lcd_Write_String
  4392     057B                     l2803:
  4393                           
  4394                           ;./lcdFunctions.h: 166:   Lcd_Write_Char((char)223);
  4395     057B  30DF               	movlw	223
  4396     057C  120A  158A  25BA  120A  118A  	fcall	_Lcd_Write_Char
  4397     0581                     l2805:
  4398                           
  4399                           ;./lcdFunctions.h: 167:   Lcd_Write_Char('C');
  4400     0581  3043               	movlw	67
  4401     0582  120A  158A  25BA  120A  118A  	fcall	_Lcd_Write_Char
  4402     0587                     l2807:
  4403                           
  4404                           ;./lcdFunctions.h: 170:   draw_Index();
  4405     0587  120A  158A  241A  120A  118A  	fcall	_draw_Index
  4406     058C                     l210:
  4407     058C  0008               	return
  4408     058D                     __end_of_print_Temperature:
  4409                           
  4410                           	psect	text26
  4411     0E9F                     __ptext26:	
  4412 ;; *************** function _print_TankState *****************
  4413 ;; Defined at:
  4414 ;;		line 67 in file "./lcdFunctions.h"
  4415 ;; Parameters:    Size  Location     Type
  4416 ;;		None
  4417 ;; Auto vars:     Size  Location     Type
  4418 ;;		None
  4419 ;; Return value:  Size  Location     Type
  4420 ;;                  1    wreg      void 
  4421 ;; Registers used:
  4422 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4423 ;; Tracked objects:
  4424 ;;		On entry : 0/0
  4425 ;;		On exit  : 0/0
  4426 ;;		Unchanged: 0/0
  4427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4428 ;;      Params:         0       0       0       0       0
  4429 ;;      Locals:         0       0       0       0       0
  4430 ;;      Temps:          0       0       0       0       0
  4431 ;;      Totals:         0       0       0       0       0
  4432 ;;Total ram usage:        0 bytes
  4433 ;; Hardware stack levels used: 1
  4434 ;; Hardware stack levels required when called: 5
  4435 ;; This function calls:
  4436 ;;		_Lcd_Clear
  4437 ;;		_Lcd_Set_Cursor
  4438 ;;		_Lcd_Write_String
  4439 ;;		_draw_Index
  4440 ;; This function is called by:
  4441 ;;		_lcd_run
  4442 ;; This function uses a non-reentrant model
  4443 ;;
  4444                           
  4445     0E9F                     _print_TankState:	
  4446                           ;psect for function _print_TankState
  4447                           
  4448     0E9F                     l2697:	
  4449                           ;incstack = 0
  4450                           ; Regs used in _print_TankState: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4451                           
  4452                           
  4453                           ;./lcdFunctions.h: 70:   if(tankState == lastTankState && lcd_lastIndex == lcd_index)
  4454     0E9F  087B               	movf	_tankState,w
  4455     0EA0  1283               	bcf	3,5	;RP0=0, select bank0
  4456     0EA1  1303               	bcf	3,6	;RP1=0, select bank0
  4457     0EA2  066E               	xorwf	_lastTankState,w
  4458     0EA3  1D03               	skipz
  4459     0EA4  2EA6               	goto	u2691
  4460     0EA5  2EA7               	goto	u2690
  4461     0EA6                     u2691:
  4462     0EA6  2EAE               	goto	l2703
  4463     0EA7                     u2690:
  4464     0EA7                     l2699:
  4465     0EA7  0865               	movf	_lcd_lastIndex,w
  4466     0EA8  066A               	xorwf	_lcd_index,w
  4467     0EA9  1D03               	skipz
  4468     0EAA  2EAC               	goto	u2701
  4469     0EAB  2EAD               	goto	u2700
  4470     0EAC                     u2701:
  4471     0EAC  2EAE               	goto	l2703
  4472     0EAD                     u2700:
  4473     0EAD  2EE2               	goto	l192
  4474     0EAE                     l2703:
  4475                           
  4476                           ;./lcdFunctions.h: 73:   lastTankState = tankState;
  4477     0EAE  087B               	movf	_tankState,w
  4478     0EAF  00EE               	movwf	_lastTankState
  4479     0EB0                     l2705:
  4480                           
  4481                           ;./lcdFunctions.h: 75:   Lcd_Clear();
  4482     0EB0  120A  158A  2317  120A  158A  	fcall	_Lcd_Clear
  4483     0EB5                     l2707:
  4484                           
  4485                           ;./lcdFunctions.h: 77:   Lcd_Set_Cursor(1,2);
  4486     0EB5  3002               	movlw	2
  4487     0EB6  00F6               	movwf	Lcd_Set_Cursor@b
  4488     0EB7  3001               	movlw	1
  4489     0EB8  120A  118A  2769  120A  158A  	fcall	_Lcd_Set_Cursor
  4490     0EBD                     l2709:
  4491                           
  4492                           ;./lcdFunctions.h: 78:   Lcd_Write_String("ESTADO TANQUE");
  4493     0EBD  3010               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  4494     0EBE  00F7               	movwf	Lcd_Write_String@a
  4495     0EBF  3080               	movlw	128
  4496     0EC0  00F8               	movwf	Lcd_Write_String@a+1
  4497     0EC1  120A  158A  26E3  120A  158A  	fcall	_Lcd_Write_String
  4498     0EC6                     l2711:
  4499                           
  4500                           ;./lcdFunctions.h: 80:   Lcd_Set_Cursor(2,6);
  4501     0EC6  3006               	movlw	6
  4502     0EC7  00F6               	movwf	Lcd_Set_Cursor@b
  4503     0EC8  3002               	movlw	2
  4504     0EC9  120A  118A  2769  120A  158A  	fcall	_Lcd_Set_Cursor
  4505     0ECE                     l2713:
  4506                           
  4507                           ;./lcdFunctions.h: 81:   Lcd_Write_String( TankStateString[tankState] );
  4508     0ECE  087B               	movf	_tankState,w
  4509     0ECF  3EC7               	addlw	(low (_TankStateString| 0))& (0+255)
  4510     0ED0  0084               	movwf	4
  4511     0ED1  1383               	bcf	3,7	;select IRP bank1
  4512     0ED2  0800               	movf	0,w
  4513     0ED3  00F7               	movwf	Lcd_Write_String@a
  4514     0ED4  3000               	movlw	0
  4515     0ED5  1D03               	btfss	3,2
  4516     0ED6  3080               	movlw	128
  4517     0ED7  00F8               	movwf	Lcd_Write_String@a+1
  4518     0ED8  120A  158A  26E3  120A  158A  	fcall	_Lcd_Write_String
  4519     0EDD                     l2715:
  4520                           
  4521                           ;./lcdFunctions.h: 83:   draw_Index();
  4522     0EDD  120A  158A  241A  120A  158A  	fcall	_draw_Index
  4523     0EE2                     l192:
  4524     0EE2  0008               	return
  4525     0EE3                     __end_of_print_TankState:
  4526                           
  4527                           	psect	text27
  4528     058D                     __ptext27:	
  4529 ;; *************** function _print_SoilMoisture *****************
  4530 ;; Defined at:
  4531 ;;		line 105 in file "./lcdFunctions.h"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;		None
  4534 ;; Auto vars:     Size  Location     Type
  4535 ;;  buffer         16   44[BANK0 ] unsigned char [16]
  4536 ;; Return value:  Size  Location     Type
  4537 ;;                  1    wreg      void 
  4538 ;; Registers used:
  4539 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4540 ;; Tracked objects:
  4541 ;;		On entry : 0/0
  4542 ;;		On exit  : 0/0
  4543 ;;		Unchanged: 0/0
  4544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4545 ;;      Params:         0       0       0       0       0
  4546 ;;      Locals:         0      16       0       0       0
  4547 ;;      Temps:          0       0       0       0       0
  4548 ;;      Totals:         0      16       0       0       0
  4549 ;;Total ram usage:       16 bytes
  4550 ;; Hardware stack levels used: 1
  4551 ;; Hardware stack levels required when called: 6
  4552 ;; This function calls:
  4553 ;;		_Lcd_Clear
  4554 ;;		_Lcd_Set_Cursor
  4555 ;;		_Lcd_Write_Char
  4556 ;;		_Lcd_Write_String
  4557 ;;		_draw_Index
  4558 ;;		_sprintf
  4559 ;; This function is called by:
  4560 ;;		_lcd_run
  4561 ;; This function uses a non-reentrant model
  4562 ;;
  4563                           
  4564     058D                     _print_SoilMoisture:	
  4565                           ;psect for function _print_SoilMoisture
  4566                           
  4567     058D                     l2737:	
  4568                           ;incstack = 0
  4569                           ; Regs used in _print_SoilMoisture: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4570                           
  4571                           
  4572                           ;./lcdFunctions.h: 107:   if(soilMoisture == old_soilMoisture && lcd_lastIndex == lcd_in
      +                          dex)
  4573     058D  1683               	bsf	3,5	;RP0=1, select bank1
  4574     058E  1303               	bcf	3,6	;RP1=0, select bank1
  4575     058F  0853               	movf	(_old_soilMoisture+1)^(0+128),w
  4576     0590  1283               	bcf	3,5	;RP0=0, select bank0
  4577     0591  1303               	bcf	3,6	;RP1=0, select bank0
  4578     0592  0663               	xorwf	_soilMoisture+1,w
  4579     0593  1D03               	skipz
  4580     0594  2D9B               	goto	u2735
  4581     0595  1683               	bsf	3,5	;RP0=1, select bank1
  4582     0596  1303               	bcf	3,6	;RP1=0, select bank1
  4583     0597  0852               	movf	_old_soilMoisture^(0+128),w
  4584     0598  1283               	bcf	3,5	;RP0=0, select bank0
  4585     0599  1303               	bcf	3,6	;RP1=0, select bank0
  4586     059A  0662               	xorwf	_soilMoisture,w
  4587     059B                     u2735:
  4588     059B  1D03               	skipz
  4589     059C  2D9E               	goto	u2731
  4590     059D  2D9F               	goto	u2730
  4591     059E                     u2731:
  4592     059E  2DA6               	goto	l2743
  4593     059F                     u2730:
  4594     059F                     l2739:
  4595     059F  0865               	movf	_lcd_lastIndex,w
  4596     05A0  066A               	xorwf	_lcd_index,w
  4597     05A1  1D03               	skipz
  4598     05A2  2DA4               	goto	u2741
  4599     05A3  2DA5               	goto	u2740
  4600     05A4                     u2741:
  4601     05A4  2DA6               	goto	l2743
  4602     05A5                     u2740:
  4603     05A5  2DF1               	goto	l200
  4604     05A6                     l2743:
  4605                           
  4606                           ;./lcdFunctions.h: 110:   old_soilMoisture = soilMoisture;
  4607     05A6  0863               	movf	_soilMoisture+1,w
  4608     05A7  1683               	bsf	3,5	;RP0=1, select bank1
  4609     05A8  1303               	bcf	3,6	;RP1=0, select bank1
  4610     05A9  00D3               	movwf	(_old_soilMoisture+1)^(0+128)
  4611     05AA  1283               	bcf	3,5	;RP0=0, select bank0
  4612     05AB  1303               	bcf	3,6	;RP1=0, select bank0
  4613     05AC  0862               	movf	_soilMoisture,w
  4614     05AD  1683               	bsf	3,5	;RP0=1, select bank1
  4615     05AE  1303               	bcf	3,6	;RP1=0, select bank1
  4616     05AF  00D2               	movwf	_old_soilMoisture^(0+128)
  4617     05B0                     l2745:
  4618                           
  4619                           ;./lcdFunctions.h: 112:   Lcd_Clear();
  4620     05B0  120A  158A  2317  120A  118A  	fcall	_Lcd_Clear
  4621     05B5                     l2747:
  4622                           
  4623                           ;./lcdFunctions.h: 114:   char buffer[16];;./lcdFunctions.h: 117:   Lcd_Set_Cursor(1,2);
  4624     05B5  3002               	movlw	2
  4625     05B6  00F6               	movwf	Lcd_Set_Cursor@b
  4626     05B7  3001               	movlw	1
  4627     05B8  120A  118A  2769  120A  118A  	fcall	_Lcd_Set_Cursor
  4628     05BD                     l2749:
  4629                           
  4630                           ;./lcdFunctions.h: 118:   Lcd_Write_String("UMIDADE SOLO");
  4631     05BD  302B               	movlw	(low ((STR_10-__stringbase)| (0+32768)))& (0+255)
  4632     05BE  00F7               	movwf	Lcd_Write_String@a
  4633     05BF  3080               	movlw	128
  4634     05C0  00F8               	movwf	Lcd_Write_String@a+1
  4635     05C1  120A  158A  26E3  120A  118A  	fcall	_Lcd_Write_String
  4636     05C6                     l2751:
  4637                           
  4638                           ;./lcdFunctions.h: 120:   Lcd_Set_Cursor(2,6);
  4639     05C6  3006               	movlw	6
  4640     05C7  00F6               	movwf	Lcd_Set_Cursor@b
  4641     05C8  3002               	movlw	2
  4642     05C9  120A  118A  2769  120A  118A  	fcall	_Lcd_Set_Cursor
  4643     05CE                     l2753:
  4644                           
  4645                           ;./lcdFunctions.h: 121:   sprintf(buffer,"%d",soilMoisture);
  4646     05CE  304C               	movlw	(low (print_SoilMoisture@buffer| 0))& (0+255)
  4647     05CF  1283               	bcf	3,5	;RP0=0, select bank0
  4648     05D0  1303               	bcf	3,6	;RP1=0, select bank0
  4649     05D1  00BB               	movwf	sprintf@s
  4650     05D2  3082               	movlw	(low ((STR_11-__stringbase)| (0+32768)))& (0+255)
  4651     05D3  00BC               	movwf	sprintf@fmt
  4652     05D4  0863               	movf	_soilMoisture+1,w
  4653     05D5  00BE               	movwf	?_sprintf+3
  4654     05D6  0862               	movf	_soilMoisture,w
  4655     05D7  00BD               	movwf	?_sprintf+2
  4656     05D8  120A  158A  24A2  120A  118A  	fcall	_sprintf
  4657     05DD                     l2755:
  4658                           
  4659                           ;./lcdFunctions.h: 122:   Lcd_Write_String(buffer);
  4660     05DD  304C               	movlw	(low (print_SoilMoisture@buffer| 0))& (0+255)
  4661     05DE  00F7               	movwf	Lcd_Write_String@a
  4662     05DF  3000               	movlw	0
  4663     05E0  00F8               	movwf	Lcd_Write_String@a+1
  4664     05E1  120A  158A  26E3  120A  118A  	fcall	_Lcd_Write_String
  4665     05E6                     l2757:
  4666                           
  4667                           ;./lcdFunctions.h: 123:   Lcd_Write_Char('%');
  4668     05E6  3025               	movlw	37
  4669     05E7  120A  158A  25BA  120A  118A  	fcall	_Lcd_Write_Char
  4670     05EC                     l2759:
  4671                           
  4672                           ;./lcdFunctions.h: 125:   draw_Index();
  4673     05EC  120A  158A  241A  120A  118A  	fcall	_draw_Index
  4674     05F1                     l200:
  4675     05F1  0008               	return
  4676     05F2                     __end_of_print_SoilMoisture:
  4677                           
  4678                           	psect	text28
  4679     0CA2                     __ptext28:	
  4680 ;; *************** function _sprintf *****************
  4681 ;; Defined at:
  4682 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_sprintf.c"
  4683 ;; Parameters:    Size  Location     Type
  4684 ;;  s               1   27[BANK0 ] PTR unsigned char 
  4685 ;;		 -> print_Temperature@buffer(16), print_SoilMoisture@buffer(16), 
  4686 ;;  fmt             1   28[BANK0 ] PTR const unsigned char 
  4687 ;;		 -> STR_16(3), STR_11(3), 
  4688 ;; Auto vars:     Size  Location     Type
  4689 ;;  f              11   33[BANK0 ] struct _IO_FILE
  4690 ;;  ret             2    0        int 
  4691 ;;  ap              1   32[BANK0 ] PTR void [1]
  4692 ;;		 -> ?_sprintf(2), 
  4693 ;; Return value:  Size  Location     Type
  4694 ;;                  2   27[BANK0 ] int 
  4695 ;; Registers used:
  4696 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4697 ;; Tracked objects:
  4698 ;;		On entry : 0/0
  4699 ;;		On exit  : 0/0
  4700 ;;		Unchanged: 0/0
  4701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4702 ;;      Params:         0       4       0       0       0
  4703 ;;      Locals:         0      12       0       0       0
  4704 ;;      Temps:          0       1       0       0       0
  4705 ;;      Totals:         0      17       0       0       0
  4706 ;;Total ram usage:       17 bytes
  4707 ;; Hardware stack levels used: 1
  4708 ;; Hardware stack levels required when called: 5
  4709 ;; This function calls:
  4710 ;;		_vfprintf
  4711 ;; This function is called by:
  4712 ;;		_print_SoilMoisture
  4713 ;;		_print_Temperature
  4714 ;; This function uses a non-reentrant model
  4715 ;;
  4716                           
  4717     0CA2                     _sprintf:	
  4718                           ;psect for function _sprintf
  4719                           
  4720     0CA2                     l2681:	
  4721                           ;incstack = 0
  4722                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4723                           
  4724     0CA2  303D               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  4725     0CA3  1283               	bcf	3,5	;RP0=0, select bank0
  4726     0CA4  1303               	bcf	3,6	;RP1=0, select bank0
  4727     0CA5  00C0               	movwf	sprintf@ap
  4728     0CA6                     l2683:
  4729     0CA6  083B               	movf	sprintf@s,w
  4730     0CA7  00C1               	movwf	sprintf@f
  4731     0CA8  3000               	movlw	0
  4732     0CA9  00C2               	movwf	sprintf@f+1
  4733     0CAA                     l2685:
  4734     0CAA  01C3               	clrf	sprintf@f+2
  4735     0CAB  01C4               	clrf	sprintf@f+3
  4736     0CAC                     l2687:
  4737     0CAC  01CA               	clrf	sprintf@f+9
  4738     0CAD  01CB               	clrf	sprintf@f+10
  4739     0CAE                     l2689:
  4740     0CAE  3041               	movlw	low sprintf@f
  4741     0CAF  00B6               	movwf	vfprintf@fp
  4742     0CB0  3000               	movlw	high sprintf@f
  4743     0CB1  00B7               	movwf	vfprintf@fp+1
  4744     0CB2  083C               	movf	sprintf@fmt,w
  4745     0CB3  00B8               	movwf	vfprintf@fmt
  4746     0CB4  3040               	movlw	(low (sprintf@ap| 0))& (0+255)
  4747     0CB5  00B9               	movwf	vfprintf@ap
  4748     0CB6  120A  158A  247F  120A  158A  	fcall	_vfprintf
  4749     0CBB                     l2691:
  4750     0CBB  1283               	bcf	3,5	;RP0=0, select bank0
  4751     0CBC  1303               	bcf	3,6	;RP1=0, select bank0
  4752     0CBD  0843               	movf	sprintf@f+2,w
  4753     0CBE  073B               	addwf	sprintf@s,w
  4754     0CBF  00BF               	movwf	??_sprintf
  4755     0CC0  083F               	movf	??_sprintf,w
  4756     0CC1  0084               	movwf	4
  4757     0CC2  1383               	bcf	3,7	;select IRP bank0
  4758     0CC3  0180               	clrf	0
  4759     0CC4                     l937:
  4760     0CC4  0008               	return
  4761     0CC5                     __end_of_sprintf:
  4762                           
  4763                           	psect	text29
  4764     0C7F                     __ptext29:	
  4765 ;; *************** function _vfprintf *****************
  4766 ;; Defined at:
  4767 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  4768 ;; Parameters:    Size  Location     Type
  4769 ;;  fp              2   22[BANK0 ] PTR struct _IO_FILE
  4770 ;;		 -> sprintf@f(11), 
  4771 ;;  fmt             1   24[BANK0 ] PTR const unsigned char 
  4772 ;;		 -> STR_16(3), STR_11(3), 
  4773 ;;  ap              1   25[BANK0 ] PTR PTR void 
  4774 ;;		 -> sprintf@ap(1), 
  4775 ;; Auto vars:     Size  Location     Type
  4776 ;;  cfmt            1   26[BANK0 ] PTR unsigned char 
  4777 ;;		 -> STR_16(3), STR_11(3), 
  4778 ;; Return value:  Size  Location     Type
  4779 ;;                  2   22[BANK0 ] int 
  4780 ;; Registers used:
  4781 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4782 ;; Tracked objects:
  4783 ;;		On entry : 0/0
  4784 ;;		On exit  : 0/0
  4785 ;;		Unchanged: 0/0
  4786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4787 ;;      Params:         0       4       0       0       0
  4788 ;;      Locals:         0       1       0       0       0
  4789 ;;      Temps:          0       0       0       0       0
  4790 ;;      Totals:         0       5       0       0       0
  4791 ;;Total ram usage:        5 bytes
  4792 ;; Hardware stack levels used: 1
  4793 ;; Hardware stack levels required when called: 4
  4794 ;; This function calls:
  4795 ;;		_vfpfcnvrt
  4796 ;; This function is called by:
  4797 ;;		_sprintf
  4798 ;; This function uses a non-reentrant model
  4799 ;;
  4800                           
  4801     0C7F                     _vfprintf:	
  4802                           ;psect for function _vfprintf
  4803                           
  4804     0C7F                     l2653:	
  4805                           ;incstack = 0
  4806 ;; using string table level
  4807                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4808                           
  4809                           
  4810                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  4811     0C7F  1283               	bcf	3,5	;RP0=0, select bank0
  4812     0C80  1303               	bcf	3,6	;RP1=0, select bank0
  4813     0C81  0838               	movf	vfprintf@fmt,w
  4814     0C82  00BA               	movwf	vfprintf@cfmt
  4815                           
  4816                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  4817     0C83  2C91               	goto	l2657
  4818     0C84                     l2655:
  4819                           
  4820                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  4821     0C84  0836               	movf	vfprintf@fp,w
  4822     0C85  00A9               	movwf	vfpfcnvrt@fp
  4823     0C86  0837               	movf	vfprintf@fp+1,w
  4824     0C87  00AA               	movwf	vfpfcnvrt@fp+1
  4825     0C88  303A               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  4826     0C89  00AB               	movwf	vfpfcnvrt@fmt
  4827     0C8A  0839               	movf	vfprintf@ap,w
  4828     0C8B  00AC               	movwf	vfpfcnvrt@ap
  4829     0C8C  120A  118A  2144  120A  158A  	fcall	_vfpfcnvrt
  4830     0C91                     l2657:
  4831                           
  4832                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  4833     0C91  1283               	bcf	3,5	;RP0=0, select bank0
  4834     0C92  1303               	bcf	3,6	;RP1=0, select bank0
  4835     0C93  083A               	movf	vfprintf@cfmt,w
  4836     0C94  0084               	movwf	4
  4837     0C95  120A  118A  241D  120A  158A  	fcall	stringdir
  4838     0C9A  3A00               	xorlw	0
  4839     0C9B  1D03               	skipz
  4840     0C9C  2C9E               	goto	u2681
  4841     0C9D  2C9F               	goto	u2680
  4842     0C9E                     u2681:
  4843     0C9E  2C84               	goto	l2655
  4844     0C9F                     u2680:
  4845     0C9F                     l2659:
  4846                           
  4847                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  4848     0C9F  01B6               	clrf	?_vfprintf
  4849     0CA0  01B7               	clrf	?_vfprintf+1
  4850     0CA1                     l981:
  4851     0CA1  0008               	return
  4852     0CA2                     __end_of_vfprintf:
  4853                           
  4854                           	psect	text30
  4855     0144                     __ptext30:	
  4856 ;; *************** function _vfpfcnvrt *****************
  4857 ;; Defined at:
  4858 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  4859 ;; Parameters:    Size  Location     Type
  4860 ;;  fp              2    9[BANK0 ] PTR struct _IO_FILE
  4861 ;;		 -> sprintf@f(11), 
  4862 ;;  fmt             1   11[BANK0 ] PTR PTR unsigned char 
  4863 ;;		 -> vfprintf@cfmt(1), 
  4864 ;;  ap              1   12[BANK0 ] PTR PTR void 
  4865 ;;		 -> sprintf@ap(1), 
  4866 ;; Auto vars:     Size  Location     Type
  4867 ;;  convarg         4   17[BANK0 ] struct .
  4868 ;;  c               1   21[BANK0 ] unsigned char 
  4869 ;;  cp              1   16[BANK0 ] PTR unsigned char 
  4870 ;;		 -> STR_16(3), STR_11(3), 
  4871 ;;  done            1   15[BANK0 ] _Bool 
  4872 ;; Return value:  Size  Location     Type
  4873 ;;                  1    wreg      void 
  4874 ;; Registers used:
  4875 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4876 ;; Tracked objects:
  4877 ;;		On entry : 0/0
  4878 ;;		On exit  : 0/0
  4879 ;;		Unchanged: 0/0
  4880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4881 ;;      Params:         0       4       0       0       0
  4882 ;;      Locals:         0       7       0       0       0
  4883 ;;      Temps:          0       2       0       0       0
  4884 ;;      Totals:         0      13       0       0       0
  4885 ;;Total ram usage:       13 bytes
  4886 ;; Hardware stack levels used: 1
  4887 ;; Hardware stack levels required when called: 3
  4888 ;; This function calls:
  4889 ;;		___awdiv
  4890 ;;		___awmod
  4891 ;;		_abs
  4892 ;;		_fputc
  4893 ;; This function is called by:
  4894 ;;		_vfprintf
  4895 ;; This function uses a non-reentrant model
  4896 ;;
  4897                           
  4898     0144                     _vfpfcnvrt:	
  4899                           ;psect for function _vfpfcnvrt
  4900                           
  4901     0144                     l2557:	
  4902                           ;incstack = 0
  4903 ;; using string table level
  4904                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4905                           
  4906                           
  4907                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  4908     0144  1283               	bcf	3,5	;RP0=0, select bank0
  4909     0145  1303               	bcf	3,6	;RP1=0, select bank0
  4910     0146  082B               	movf	vfpfcnvrt@fmt,w
  4911     0147  0084               	movwf	4
  4912     0148  1383               	bcf	3,7	;select IRP bank0
  4913     0149  0800               	movf	0,w
  4914     014A  0084               	movwf	4
  4915     014B  120A  118A  241D  120A  118A  	fcall	stringdir
  4916     0150  3A25               	xorlw	37
  4917     0151  1D03               	skipz
  4918     0152  2954               	goto	u2461
  4919     0153  2955               	goto	u2460
  4920     0154                     u2461:
  4921     0154  2A19               	goto	l2603
  4922     0155                     u2460:
  4923     0155                     l2559:
  4924                           
  4925                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  4926     0155  082B               	movf	vfpfcnvrt@fmt,w
  4927     0156  0084               	movwf	4
  4928     0157  3001               	movlw	1
  4929     0158  0780               	addwf	0,f
  4930     0159                     l2561:
  4931                           
  4932                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  4933     0159  1683               	bsf	3,5	;RP0=1, select bank1
  4934     015A  1303               	bcf	3,6	;RP1=0, select bank1
  4935     015B  01C3               	clrf	_width^(0+128)
  4936     015C  01C4               	clrf	(_width+1)^(0+128)
  4937     015D  3000               	movlw	0
  4938     015E  1283               	bcf	3,5	;RP0=0, select bank0
  4939     015F  1303               	bcf	3,6	;RP1=0, select bank0
  4940     0160  00E4               	movwf	_flags
  4941     0161                     l2563:
  4942                           
  4943                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  4944     0161  30FF               	movlw	255
  4945     0162  1683               	bsf	3,5	;RP0=1, select bank1
  4946     0163  1303               	bcf	3,6	;RP1=0, select bank1
  4947     0164  00C5               	movwf	_prec^(0+128)
  4948     0165  30FF               	movlw	255
  4949     0166  00C6               	movwf	(_prec^(0+128)+1)
  4950     0167                     l2565:
  4951                           
  4952                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  4953     0167  1283               	bcf	3,5	;RP0=0, select bank0
  4954     0168  1303               	bcf	3,6	;RP1=0, select bank0
  4955     0169  082B               	movf	vfpfcnvrt@fmt,w
  4956     016A  0084               	movwf	4
  4957     016B  0800               	movf	0,w
  4958     016C  00B0               	movwf	vfpfcnvrt@cp
  4959     016D                     l2567:
  4960                           
  4961                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  4962     016D  0830               	movf	vfpfcnvrt@cp,w
  4963     016E  0084               	movwf	4
  4964     016F  120A  118A  241D  120A  118A  	fcall	stringdir
  4965     0174  3A64               	xorlw	100
  4966     0175  1903               	skipnz
  4967     0176  2978               	goto	u2471
  4968     0177  2979               	goto	u2470
  4969     0178                     u2471:
  4970     0178  2985               	goto	l2571
  4971     0179                     u2470:
  4972     0179                     l2569:
  4973     0179  0830               	movf	vfpfcnvrt@cp,w
  4974     017A  0084               	movwf	4
  4975     017B  120A  118A  241D  120A  118A  	fcall	stringdir
  4976     0180  3A69               	xorlw	105
  4977     0181  1D03               	skipz
  4978     0182  2984               	goto	u2481
  4979     0183  2985               	goto	u2480
  4980     0184                     u2481:
  4981     0184  2A11               	goto	l2599
  4982     0185                     u2480:
  4983     0185                     l2571:
  4984                           
  4985                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  4986     0185  082C               	movf	vfpfcnvrt@ap,w
  4987     0186  0084               	movwf	4
  4988     0187  0800               	movf	0,w
  4989     0188  00FF               	movwf	btemp+1
  4990     0189  3002               	movlw	2
  4991     018A  0780               	addwf	0,f
  4992     018B  087F               	movf	btemp+1,w
  4993     018C  0084               	movwf	4
  4994     018D  0800               	movf	0,w
  4995     018E  00B1               	movwf	vfpfcnvrt@convarg
  4996     018F  0A84               	incf	4,f
  4997     0190  0800               	movf	0,w
  4998     0191  00B2               	movwf	vfpfcnvrt@convarg+1
  4999     0192                     l2573:
  5000                           
  5001                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  5002     0192  082B               	movf	vfpfcnvrt@fmt,w
  5003     0193  0084               	movwf	4
  5004     0194  0830               	movf	vfpfcnvrt@cp,w
  5005     0195  3E01               	addlw	1
  5006     0196  0080               	movwf	0
  5007     0197                     l2575:
  5008                           
  5009                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  5010     0197  3020               	movlw	32
  5011     0198  00B5               	movwf	vfpfcnvrt@c
  5012     0199                     l2577:
  5013                           
  5014                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  5015     0199  1BB2               	btfsc	vfpfcnvrt@convarg+1,7
  5016     019A  299C               	goto	u2491
  5017     019B  299E               	goto	u2490
  5018     019C                     u2491:
  5019     019C  3001               	movlw	1
  5020     019D  299F               	goto	u2500
  5021     019E                     u2490:
  5022     019E  3000               	movlw	0
  5023     019F                     u2500:
  5024     019F  00AF               	movwf	vfpfcnvrt@done
  5025     01A0                     l2579:
  5026                           
  5027                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  5028     01A0  3001               	movlw	1
  5029     01A1  02B5               	subwf	vfpfcnvrt@c,f
  5030     01A2  0835               	movf	vfpfcnvrt@c,w
  5031     01A3  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  5032     01A4  0084               	movwf	4
  5033     01A5  300A               	movlw	10
  5034     01A6  00F2               	movwf	___awmod@divisor
  5035     01A7  3000               	movlw	0
  5036     01A8  00F3               	movwf	___awmod@divisor+1
  5037     01A9  0832               	movf	vfpfcnvrt@convarg+1,w
  5038     01AA  00F5               	movwf	___awmod@dividend+1
  5039     01AB  0831               	movf	vfpfcnvrt@convarg,w
  5040     01AC  00F4               	movwf	___awmod@dividend
  5041     01AD  120A  118A  2712  120A  118A  	fcall	___awmod
  5042     01B2  0873               	movf	?___awmod+1,w
  5043     01B3  00F9               	movwf	abs@a+1
  5044     01B4  0872               	movf	?___awmod,w
  5045     01B5  00F8               	movwf	abs@a
  5046     01B6  120A  158A  236C  120A  118A  	fcall	_abs
  5047     01BB  0878               	movf	?_abs,w
  5048     01BC  3E30               	addlw	48
  5049     01BD  1383               	bcf	3,7	;select IRP bank1
  5050     01BE  0080               	movwf	0
  5051     01BF                     l2581:
  5052                           
  5053                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  5054     01BF  300A               	movlw	10
  5055     01C0  00F2               	movwf	___awdiv@divisor
  5056     01C1  3000               	movlw	0
  5057     01C2  00F3               	movwf	___awdiv@divisor+1
  5058     01C3  1283               	bcf	3,5	;RP0=0, select bank0
  5059     01C4  1303               	bcf	3,6	;RP1=0, select bank0
  5060     01C5  0832               	movf	vfpfcnvrt@convarg+1,w
  5061     01C6  00F5               	movwf	___awdiv@dividend+1
  5062     01C7  0831               	movf	vfpfcnvrt@convarg,w
  5063     01C8  00F4               	movwf	___awdiv@dividend
  5064     01C9  120A  118A  25F2  120A  118A  	fcall	___awdiv
  5065     01CE  0873               	movf	?___awdiv+1,w
  5066     01CF  1283               	bcf	3,5	;RP0=0, select bank0
  5067     01D0  1303               	bcf	3,6	;RP1=0, select bank0
  5068     01D1  00B2               	movwf	vfpfcnvrt@convarg+1
  5069     01D2  0872               	movf	?___awdiv,w
  5070     01D3  00B1               	movwf	vfpfcnvrt@convarg
  5071     01D4                     l2583:
  5072                           
  5073                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  5074     01D4  0831               	movf	vfpfcnvrt@convarg,w
  5075     01D5  0432               	iorwf	vfpfcnvrt@convarg+1,w
  5076     01D6  1903               	btfsc	3,2
  5077     01D7  29D9               	goto	u2511
  5078     01D8  29DA               	goto	u2510
  5079     01D9                     u2511:
  5080     01D9  29DF               	goto	l2587
  5081     01DA                     u2510:
  5082     01DA                     l2585:
  5083     01DA  0835               	movf	vfpfcnvrt@c,w
  5084     01DB  1D03               	btfss	3,2
  5085     01DC  29DE               	goto	u2521
  5086     01DD  29DF               	goto	u2520
  5087     01DE                     u2521:
  5088     01DE  29A0               	goto	l2579
  5089     01DF                     u2520:
  5090     01DF                     l2587:
  5091                           
  5092                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  5093     01DF  0835               	movf	vfpfcnvrt@c,w
  5094     01E0  1903               	btfsc	3,2
  5095     01E1  29E3               	goto	u2531
  5096     01E2  29E4               	goto	u2530
  5097     01E3                     u2531:
  5098     01E3  2A0A               	goto	l2597
  5099     01E4                     u2530:
  5100     01E4                     l2589:
  5101     01E4  082F               	movf	vfpfcnvrt@done,w
  5102     01E5  1903               	btfsc	3,2
  5103     01E6  29E8               	goto	u2541
  5104     01E7  29E9               	goto	u2540
  5105     01E8                     u2541:
  5106     01E8  2A0A               	goto	l2597
  5107     01E9                     u2540:
  5108     01E9                     l2591:
  5109                           
  5110                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  5111     01E9  3001               	movlw	1
  5112     01EA  02B5               	subwf	vfpfcnvrt@c,f
  5113     01EB  0835               	movf	vfpfcnvrt@c,w
  5114     01EC  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  5115     01ED  0084               	movwf	4
  5116     01EE  302D               	movlw	45
  5117     01EF  1383               	bcf	3,7	;select IRP bank1
  5118     01F0  0080               	movwf	0
  5119     01F1  2A0A               	goto	l2597
  5120     01F2                     l2593:
  5121                           
  5122                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  5123     01F2  0835               	movf	vfpfcnvrt@c,w
  5124     01F3  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  5125     01F4  0084               	movwf	4
  5126     01F5  1383               	bcf	3,7	;select IRP bank1
  5127     01F6  0800               	movf	0,w
  5128     01F7  00AD               	movwf	??_vfpfcnvrt
  5129     01F8  01AE               	clrf	??_vfpfcnvrt+1
  5130     01F9  082D               	movf	??_vfpfcnvrt,w
  5131     01FA  00F2               	movwf	fputc@c
  5132     01FB  082E               	movf	??_vfpfcnvrt+1,w
  5133     01FC  00F3               	movwf	fputc@c+1
  5134     01FD  0829               	movf	vfpfcnvrt@fp,w
  5135     01FE  00F4               	movwf	fputc@fp
  5136     01FF  082A               	movf	vfpfcnvrt@fp+1,w
  5137     0200  00F5               	movwf	fputc@fp+1
  5138     0201  120A  118A  22DA  120A  118A  	fcall	_fputc
  5139     0206                     l2595:
  5140     0206  3001               	movlw	1
  5141     0207  1283               	bcf	3,5	;RP0=0, select bank0
  5142     0208  1303               	bcf	3,6	;RP1=0, select bank0
  5143     0209  07B5               	addwf	vfpfcnvrt@c,f
  5144     020A                     l2597:
  5145                           
  5146                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  5147     020A  3020               	movlw	32
  5148     020B  0635               	xorwf	vfpfcnvrt@c,w
  5149     020C  1D03               	btfss	3,2
  5150     020D  2A0F               	goto	u2551
  5151     020E  2A10               	goto	u2550
  5152     020F                     u2551:
  5153     020F  29F2               	goto	l2593
  5154     0210                     u2550:
  5155     0210  2A32               	goto	l975
  5156     0211                     l2599:
  5157                           
  5158                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  5159     0211  1283               	bcf	3,5	;RP0=0, select bank0
  5160     0212  1303               	bcf	3,6	;RP1=0, select bank0
  5161     0213  082B               	movf	vfpfcnvrt@fmt,w
  5162     0214  0084               	movwf	4
  5163     0215  3001               	movlw	1
  5164     0216  1383               	bcf	3,7	;select IRP bank0
  5165     0217  0780               	addwf	0,f
  5166     0218  2A32               	goto	l975
  5167     0219                     l2603:
  5168                           
  5169                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  5170     0219  082B               	movf	vfpfcnvrt@fmt,w
  5171     021A  0084               	movwf	4
  5172     021B  0800               	movf	0,w
  5173     021C  0084               	movwf	4
  5174     021D  120A  118A  241D  120A  118A  	fcall	stringdir
  5175     0222  00AD               	movwf	??_vfpfcnvrt
  5176     0223  01AE               	clrf	??_vfpfcnvrt+1
  5177     0224  082D               	movf	??_vfpfcnvrt,w
  5178     0225  00F2               	movwf	fputc@c
  5179     0226  082E               	movf	??_vfpfcnvrt+1,w
  5180     0227  00F3               	movwf	fputc@c+1
  5181     0228  0829               	movf	vfpfcnvrt@fp,w
  5182     0229  00F4               	movwf	fputc@fp
  5183     022A  082A               	movf	vfpfcnvrt@fp+1,w
  5184     022B  00F5               	movwf	fputc@fp+1
  5185     022C  120A  118A  22DA  120A  118A  	fcall	_fputc
  5186     0231  2A11               	goto	l2599
  5187     0232                     l975:
  5188     0232  0008               	return
  5189     0233                     __end_of_vfpfcnvrt:
  5190                           
  5191                           	psect	text31
  5192     02DA                     __ptext31:	
  5193 ;; *************** function _fputc *****************
  5194 ;; Defined at:
  5195 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_fputc.c"
  5196 ;; Parameters:    Size  Location     Type
  5197 ;;  c               2    2[COMMON] int 
  5198 ;;  fp              2    4[COMMON] PTR struct _IO_FILE
  5199 ;;		 -> sprintf@f(11), 
  5200 ;; Auto vars:     Size  Location     Type
  5201 ;;		None
  5202 ;; Return value:  Size  Location     Type
  5203 ;;                  2    2[COMMON] int 
  5204 ;; Registers used:
  5205 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5206 ;; Tracked objects:
  5207 ;;		On entry : 0/0
  5208 ;;		On exit  : 0/0
  5209 ;;		Unchanged: 0/0
  5210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5211 ;;      Params:         4       0       0       0       0
  5212 ;;      Locals:         0       0       0       0       0
  5213 ;;      Temps:          0       9       0       0       0
  5214 ;;      Totals:         4       9       0       0       0
  5215 ;;Total ram usage:       13 bytes
  5216 ;; Hardware stack levels used: 1
  5217 ;; Hardware stack levels required when called: 2
  5218 ;; This function calls:
  5219 ;;		_putch
  5220 ;; This function is called by:
  5221 ;;		_vfpfcnvrt
  5222 ;; This function uses a non-reentrant model
  5223 ;;
  5224                           
  5225     02DA                     _fputc:	
  5226                           ;psect for function _fputc
  5227                           
  5228     02DA                     l1803:	
  5229                           ;incstack = 0
  5230                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5231                           
  5232     02DA  0874               	movf	fputc@fp,w
  5233     02DB  0475               	iorwf	fputc@fp+1,w
  5234     02DC  1903               	btfsc	3,2
  5235     02DD  2ADF               	goto	u1331
  5236     02DE  2AE0               	goto	u1330
  5237     02DF                     u1331:
  5238     02DF  2AE6               	goto	l1807
  5239     02E0                     u1330:
  5240     02E0                     l1805:
  5241     02E0  0874               	movf	fputc@fp,w
  5242     02E1  0475               	iorwf	fputc@fp+1,w
  5243     02E2  1D03               	btfss	3,2
  5244     02E3  2AE5               	goto	u1341
  5245     02E4  2AE6               	goto	u1340
  5246     02E5                     u1341:
  5247     02E5  2AED               	goto	l1809
  5248     02E6                     u1340:
  5249     02E6                     l1807:
  5250     02E6  0872               	movf	fputc@c,w
  5251     02E7  120A  118A  2003  120A  118A  	fcall	_putch
  5252     02EC  2B79               	goto	l1000
  5253     02ED                     l1809:
  5254     02ED  0874               	movf	fputc@fp,w
  5255     02EE  3E09               	addlw	9
  5256     02EF  1283               	bcf	3,5	;RP0=0, select bank0
  5257     02F0  1303               	bcf	3,6	;RP1=0, select bank0
  5258     02F1  00A0               	movwf	??_fputc
  5259     02F2  0875               	movf	fputc@fp+1,w
  5260     02F3  1803               	skipnc
  5261     02F4  3E01               	addlw	1
  5262     02F5  3E00               	addlw	0
  5263     02F6  00A1               	movwf	??_fputc+1
  5264     02F7  0820               	movf	??_fputc,w
  5265     02F8  0084               	movwf	4
  5266     02F9  1783               	bsf	3,7
  5267     02FA  1C21               	btfss	??_fputc+1,0
  5268     02FB  1383               	bcf	3,7
  5269     02FC  0800               	movf	0,w
  5270     02FD  00A2               	movwf	??_fputc+2
  5271     02FE  0A84               	incf	4,f
  5272     02FF  0800               	movf	0,w
  5273     0300  00A3               	movwf	??_fputc+3
  5274     0301  0822               	movf	??_fputc+2,w
  5275     0302  0423               	iorwf	??_fputc+3,w
  5276     0303  1903               	btfsc	3,2
  5277     0304  2B06               	goto	u1351
  5278     0305  2B07               	goto	u1350
  5279     0306                     u1351:
  5280     0306  2B39               	goto	l1813
  5281     0307                     u1350:
  5282     0307                     l1811:
  5283     0307  0874               	movf	fputc@fp,w
  5284     0308  3E09               	addlw	9
  5285     0309  00A0               	movwf	??_fputc
  5286     030A  0875               	movf	fputc@fp+1,w
  5287     030B  1803               	skipnc
  5288     030C  3E01               	addlw	1
  5289     030D  3E00               	addlw	0
  5290     030E  00A1               	movwf	??_fputc+1
  5291     030F  0820               	movf	??_fputc,w
  5292     0310  0084               	movwf	4
  5293     0311  1783               	bsf	3,7
  5294     0312  1C21               	btfss	??_fputc+1,0
  5295     0313  1383               	bcf	3,7
  5296     0314  0800               	movf	0,w
  5297     0315  00A2               	movwf	??_fputc+2
  5298     0316  0A84               	incf	4,f
  5299     0317  0800               	movf	0,w
  5300     0318  00A3               	movwf	??_fputc+3
  5301     0319  0874               	movf	fputc@fp,w
  5302     031A  3E02               	addlw	2
  5303     031B  00A4               	movwf	??_fputc+4
  5304     031C  0875               	movf	fputc@fp+1,w
  5305     031D  1803               	skipnc
  5306     031E  3E01               	addlw	1
  5307     031F  3E00               	addlw	0
  5308     0320  00A5               	movwf	??_fputc+5
  5309     0321  0824               	movf	??_fputc+4,w
  5310     0322  0084               	movwf	4
  5311     0323  1783               	bsf	3,7
  5312     0324  1C25               	btfss	??_fputc+5,0
  5313     0325  1383               	bcf	3,7
  5314     0326  0800               	movf	0,w
  5315     0327  00A6               	movwf	??_fputc+6
  5316     0328  0A84               	incf	4,f
  5317     0329  0800               	movf	0,w
  5318     032A  00A7               	movwf	??_fputc+7
  5319     032B  0827               	movf	??_fputc+7,w
  5320     032C  3A80               	xorlw	128
  5321     032D  00A8               	movwf	??_fputc+8
  5322     032E  0823               	movf	??_fputc+3,w
  5323     032F  3A80               	xorlw	128
  5324     0330  0228               	subwf	??_fputc+8,w
  5325     0331  1D03               	skipz
  5326     0332  2B35               	goto	u1365
  5327     0333  0822               	movf	??_fputc+2,w
  5328     0334  0226               	subwf	??_fputc+6,w
  5329     0335                     u1365:
  5330     0335  1803               	skipnc
  5331     0336  2B38               	goto	u1361
  5332     0337  2B39               	goto	u1360
  5333     0338                     u1361:
  5334     0338  2B79               	goto	l1000
  5335     0339                     u1360:
  5336     0339                     l1813:
  5337     0339  0874               	movf	fputc@fp,w
  5338     033A  0084               	movwf	4
  5339     033B  1783               	bsf	3,7
  5340     033C  1C75               	btfss	fputc@fp+1,0
  5341     033D  1383               	bcf	3,7
  5342     033E  0800               	movf	0,w
  5343     033F  1283               	bcf	3,5	;RP0=0, select bank0
  5344     0340  1303               	bcf	3,6	;RP1=0, select bank0
  5345     0341  00A0               	movwf	??_fputc
  5346     0342  0A84               	incf	4,f
  5347     0343  0800               	movf	0,w
  5348     0344  00A1               	movwf	??_fputc+1
  5349     0345  0874               	movf	fputc@fp,w
  5350     0346  3E02               	addlw	2
  5351     0347  00A2               	movwf	??_fputc+2
  5352     0348  0875               	movf	fputc@fp+1,w
  5353     0349  1803               	skipnc
  5354     034A  3E01               	addlw	1
  5355     034B  3E00               	addlw	0
  5356     034C  00A3               	movwf	??_fputc+3
  5357     034D  0822               	movf	??_fputc+2,w
  5358     034E  0084               	movwf	4
  5359     034F  1783               	bsf	3,7
  5360     0350  1C23               	btfss	??_fputc+3,0
  5361     0351  1383               	bcf	3,7
  5362     0352  0800               	movf	0,w
  5363     0353  0720               	addwf	??_fputc,w
  5364     0354  00A5               	movwf	??_fputc+5
  5365     0355  0821               	movf	??_fputc+1,w
  5366     0356  00A4               	movwf	??_fputc+4
  5367     0357  1803               	skipnc
  5368     0358  0AA4               	incf	??_fputc+4,f
  5369     0359  1F80               	btfss	0,7
  5370     035A  2B5C               	goto	u1370
  5371     035B  03A4               	decf	??_fputc+4,f
  5372     035C                     u1370:
  5373     035C  1283               	bcf	3,5	;RP0=0, select bank0
  5374     035D  1303               	bcf	3,6	;RP1=0, select bank0
  5375     035E  0824               	movf	??_fputc+4,w
  5376     035F  00A6               	movwf	??_fputc+6
  5377     0360  0825               	movf	??_fputc+5,w
  5378     0361  0084               	movwf	4
  5379     0362  1783               	bsf	3,7
  5380     0363  1C26               	btfss	??_fputc+6,0
  5381     0364  1383               	bcf	3,7
  5382     0365  0872               	movf	fputc@c,w
  5383     0366  0080               	movwf	0
  5384     0367  0874               	movf	fputc@fp,w
  5385     0368  3E02               	addlw	2
  5386     0369  00A0               	movwf	??_fputc
  5387     036A  0875               	movf	fputc@fp+1,w
  5388     036B  1803               	skipnc
  5389     036C  3E01               	addlw	1
  5390     036D  3E00               	addlw	0
  5391     036E  00A1               	movwf	??_fputc+1
  5392     036F  0820               	movf	??_fputc,w
  5393     0370  0084               	movwf	4
  5394     0371  1783               	bsf	3,7
  5395     0372  1C21               	btfss	??_fputc+1,0
  5396     0373  1383               	bcf	3,7
  5397     0374  3001               	movlw	1
  5398     0375  0780               	addwf	0,f
  5399     0376  0A84               	incf	4,f
  5400     0377  1803               	skipnc
  5401     0378  0A80               	incf	0,f
  5402     0379                     l1000:
  5403     0379  0008               	return
  5404     037A                     __end_of_fputc:
  5405                           
  5406                           	psect	text32
  5407     0003                     __ptext32:	
  5408 ;; *************** function _putch *****************
  5409 ;; Defined at:
  5410 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\putch.c"
  5411 ;; Parameters:    Size  Location     Type
  5412 ;;  c               1    wreg     unsigned char 
  5413 ;; Auto vars:     Size  Location     Type
  5414 ;;  c               1    0[COMMON] unsigned char 
  5415 ;; Return value:  Size  Location     Type
  5416 ;;                  1    wreg      void 
  5417 ;; Registers used:
  5418 ;;		wreg
  5419 ;; Tracked objects:
  5420 ;;		On entry : 0/0
  5421 ;;		On exit  : 0/0
  5422 ;;		Unchanged: 0/0
  5423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5424 ;;      Params:         0       0       0       0       0
  5425 ;;      Locals:         0       0       0       0       0
  5426 ;;      Temps:          0       0       0       0       0
  5427 ;;      Totals:         0       0       0       0       0
  5428 ;;Total ram usage:        0 bytes
  5429 ;; Hardware stack levels used: 1
  5430 ;; Hardware stack levels required when called: 1
  5431 ;; This function calls:
  5432 ;;		Nothing
  5433 ;; This function is called by:
  5434 ;;		_fputc
  5435 ;; This function uses a non-reentrant model
  5436 ;;
  5437                           
  5438     0003                     _putch:	
  5439                           ;psect for function _putch
  5440                           
  5441     0003                     l1011:	
  5442                           ;incstack = 0
  5443                           ; Regs used in _putch: [wreg]
  5444                           
  5445     0003  0008               	return
  5446     0004                     __end_of_putch:
  5447                           
  5448                           	psect	text33
  5449     0B6C                     __ptext33:	
  5450 ;; *************** function _abs *****************
  5451 ;; Defined at:
  5452 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\abs.c"
  5453 ;; Parameters:    Size  Location     Type
  5454 ;;  a               2    8[COMMON] int 
  5455 ;; Auto vars:     Size  Location     Type
  5456 ;;		None
  5457 ;; Return value:  Size  Location     Type
  5458 ;;                  2    8[COMMON] int 
  5459 ;; Registers used:
  5460 ;;		wreg, status,2, status,0
  5461 ;; Tracked objects:
  5462 ;;		On entry : 0/0
  5463 ;;		On exit  : 0/0
  5464 ;;		Unchanged: 0/0
  5465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5466 ;;      Params:         2       0       0       0       0
  5467 ;;      Locals:         0       0       0       0       0
  5468 ;;      Temps:          0       2       0       0       0
  5469 ;;      Totals:         2       2       0       0       0
  5470 ;;Total ram usage:        4 bytes
  5471 ;; Hardware stack levels used: 1
  5472 ;; Hardware stack levels required when called: 1
  5473 ;; This function calls:
  5474 ;;		Nothing
  5475 ;; This function is called by:
  5476 ;;		_vfpfcnvrt
  5477 ;; This function uses a non-reentrant model
  5478 ;;
  5479                           
  5480     0B6C                     _abs:	
  5481                           ;psect for function _abs
  5482                           
  5483     0B6C                     l2461:	
  5484                           ;incstack = 0
  5485                           ; Regs used in _abs: [wreg+status,2+status,0]
  5486                           
  5487     0B6C  1BF9               	btfsc	abs@a+1,7
  5488     0B6D  2B6F               	goto	u2291
  5489     0B6E  2B70               	goto	u2290
  5490     0B6F                     u2291:
  5491     0B6F  2B71               	goto	l2465
  5492     0B70                     u2290:
  5493     0B70                     l2463:
  5494     0B70  2B7E               	goto	l988
  5495     0B71                     l2465:
  5496     0B71  0978               	comf	abs@a,w
  5497     0B72  1283               	bcf	3,5	;RP0=0, select bank0
  5498     0B73  1303               	bcf	3,6	;RP1=0, select bank0
  5499     0B74  00A0               	movwf	??_abs
  5500     0B75  0979               	comf	abs@a+1,w
  5501     0B76  00A1               	movwf	??_abs+1
  5502     0B77  0AA0               	incf	??_abs,f
  5503     0B78  1903               	skipnz
  5504     0B79  0AA1               	incf	??_abs+1,f
  5505     0B7A  0820               	movf	??_abs,w
  5506     0B7B  00F8               	movwf	?_abs
  5507     0B7C  0821               	movf	??_abs+1,w
  5508     0B7D  00F9               	movwf	?_abs+1
  5509     0B7E                     l988:
  5510     0B7E  0008               	return
  5511     0B7F                     __end_of_abs:
  5512                           
  5513                           	psect	text34
  5514     0712                     __ptext34:	
  5515 ;; *************** function ___awmod *****************
  5516 ;; Defined at:
  5517 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awmod.c"
  5518 ;; Parameters:    Size  Location     Type
  5519 ;;  divisor         2    2[COMMON] int 
  5520 ;;  dividend        2    4[COMMON] int 
  5521 ;; Auto vars:     Size  Location     Type
  5522 ;;  sign            1    7[COMMON] unsigned char 
  5523 ;;  counter         1    6[COMMON] unsigned char 
  5524 ;; Return value:  Size  Location     Type
  5525 ;;                  2    2[COMMON] int 
  5526 ;; Registers used:
  5527 ;;		wreg, status,2, status,0
  5528 ;; Tracked objects:
  5529 ;;		On entry : 0/0
  5530 ;;		On exit  : 0/0
  5531 ;;		Unchanged: 0/0
  5532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5533 ;;      Params:         4       0       0       0       0
  5534 ;;      Locals:         2       0       0       0       0
  5535 ;;      Temps:          0       0       0       0       0
  5536 ;;      Totals:         6       0       0       0       0
  5537 ;;Total ram usage:        6 bytes
  5538 ;; Hardware stack levels used: 1
  5539 ;; Hardware stack levels required when called: 1
  5540 ;; This function calls:
  5541 ;;		Nothing
  5542 ;; This function is called by:
  5543 ;;		_vfpfcnvrt
  5544 ;; This function uses a non-reentrant model
  5545 ;;
  5546                           
  5547     0712                     ___awmod:	
  5548                           ;psect for function ___awmod
  5549                           
  5550     0712                     l1765:	
  5551                           ;incstack = 0
  5552                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  5553                           
  5554     0712  01F7               	clrf	___awmod@sign
  5555     0713                     l1767:
  5556     0713  1FF5               	btfss	___awmod@dividend+1,7
  5557     0714  2F16               	goto	u1241
  5558     0715  2F17               	goto	u1240
  5559     0716                     u1241:
  5560     0716  2F1E               	goto	l1773
  5561     0717                     u1240:
  5562     0717                     l1769:
  5563     0717  09F4               	comf	___awmod@dividend,f
  5564     0718  09F5               	comf	___awmod@dividend+1,f
  5565     0719  0AF4               	incf	___awmod@dividend,f
  5566     071A  1903               	skipnz
  5567     071B  0AF5               	incf	___awmod@dividend+1,f
  5568     071C                     l1771:
  5569     071C  3001               	movlw	1
  5570     071D  00F7               	movwf	___awmod@sign
  5571     071E                     l1773:
  5572     071E  1FF3               	btfss	___awmod@divisor+1,7
  5573     071F  2F21               	goto	u1251
  5574     0720  2F22               	goto	u1250
  5575     0721                     u1251:
  5576     0721  2F27               	goto	l1777
  5577     0722                     u1250:
  5578     0722                     l1775:
  5579     0722  09F2               	comf	___awmod@divisor,f
  5580     0723  09F3               	comf	___awmod@divisor+1,f
  5581     0724  0AF2               	incf	___awmod@divisor,f
  5582     0725  1903               	skipnz
  5583     0726  0AF3               	incf	___awmod@divisor+1,f
  5584     0727                     l1777:
  5585     0727  0872               	movf	___awmod@divisor,w
  5586     0728  0473               	iorwf	___awmod@divisor+1,w
  5587     0729  1903               	btfsc	3,2
  5588     072A  2F2C               	goto	u1261
  5589     072B  2F2D               	goto	u1260
  5590     072C                     u1261:
  5591     072C  2F5A               	goto	l1795
  5592     072D                     u1260:
  5593     072D                     l1779:
  5594     072D  3001               	movlw	1
  5595     072E  00F6               	movwf	___awmod@counter
  5596     072F  2F39               	goto	l1785
  5597     0730                     l1781:
  5598     0730  3001               	movlw	1
  5599     0731                     u1275:
  5600     0731  1003               	clrc
  5601     0732  0DF2               	rlf	___awmod@divisor,f
  5602     0733  0DF3               	rlf	___awmod@divisor+1,f
  5603     0734  3EFF               	addlw	-1
  5604     0735  1D03               	skipz
  5605     0736  2F31               	goto	u1275
  5606     0737                     l1783:
  5607     0737  3001               	movlw	1
  5608     0738  07F6               	addwf	___awmod@counter,f
  5609     0739                     l1785:
  5610     0739  1FF3               	btfss	___awmod@divisor+1,7
  5611     073A  2F3C               	goto	u1281
  5612     073B  2F3D               	goto	u1280
  5613     073C                     u1281:
  5614     073C  2F30               	goto	l1781
  5615     073D                     u1280:
  5616     073D                     l1787:
  5617     073D  0873               	movf	___awmod@divisor+1,w
  5618     073E  0275               	subwf	___awmod@dividend+1,w
  5619     073F  1D03               	skipz
  5620     0740  2F43               	goto	u1295
  5621     0741  0872               	movf	___awmod@divisor,w
  5622     0742  0274               	subwf	___awmod@dividend,w
  5623     0743                     u1295:
  5624     0743  1C03               	skipc
  5625     0744  2F46               	goto	u1291
  5626     0745  2F47               	goto	u1290
  5627     0746                     u1291:
  5628     0746  2F4D               	goto	l1791
  5629     0747                     u1290:
  5630     0747                     l1789:
  5631     0747  0872               	movf	___awmod@divisor,w
  5632     0748  02F4               	subwf	___awmod@dividend,f
  5633     0749  0873               	movf	___awmod@divisor+1,w
  5634     074A  1C03               	skipc
  5635     074B  03F5               	decf	___awmod@dividend+1,f
  5636     074C  02F5               	subwf	___awmod@dividend+1,f
  5637     074D                     l1791:
  5638     074D  3001               	movlw	1
  5639     074E                     u1305:
  5640     074E  1003               	clrc
  5641     074F  0CF3               	rrf	___awmod@divisor+1,f
  5642     0750  0CF2               	rrf	___awmod@divisor,f
  5643     0751  3EFF               	addlw	-1
  5644     0752  1D03               	skipz
  5645     0753  2F4E               	goto	u1305
  5646     0754                     l1793:
  5647     0754  3001               	movlw	1
  5648     0755  02F6               	subwf	___awmod@counter,f
  5649     0756  1D03               	btfss	3,2
  5650     0757  2F59               	goto	u1311
  5651     0758  2F5A               	goto	u1310
  5652     0759                     u1311:
  5653     0759  2F3D               	goto	l1787
  5654     075A                     u1310:
  5655     075A                     l1795:
  5656     075A  0877               	movf	___awmod@sign,w
  5657     075B  1903               	btfsc	3,2
  5658     075C  2F5E               	goto	u1321
  5659     075D  2F5F               	goto	u1320
  5660     075E                     u1321:
  5661     075E  2F64               	goto	l1799
  5662     075F                     u1320:
  5663     075F                     l1797:
  5664     075F  09F4               	comf	___awmod@dividend,f
  5665     0760  09F5               	comf	___awmod@dividend+1,f
  5666     0761  0AF4               	incf	___awmod@dividend,f
  5667     0762  1903               	skipnz
  5668     0763  0AF5               	incf	___awmod@dividend+1,f
  5669     0764                     l1799:
  5670     0764  0875               	movf	___awmod@dividend+1,w
  5671     0765  00F3               	movwf	?___awmod+1
  5672     0766  0874               	movf	___awmod@dividend,w
  5673     0767  00F2               	movwf	?___awmod
  5674     0768                     l640:
  5675     0768  0008               	return
  5676     0769                     __end_of___awmod:
  5677                           
  5678                           	psect	text35
  5679     05F2                     __ptext35:	
  5680 ;; *************** function ___awdiv *****************
  5681 ;; Defined at:
  5682 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awdiv.c"
  5683 ;; Parameters:    Size  Location     Type
  5684 ;;  divisor         2    2[COMMON] int 
  5685 ;;  dividend        2    4[COMMON] int 
  5686 ;; Auto vars:     Size  Location     Type
  5687 ;;  quotient        2    8[COMMON] int 
  5688 ;;  sign            1    7[COMMON] unsigned char 
  5689 ;;  counter         1    6[COMMON] unsigned char 
  5690 ;; Return value:  Size  Location     Type
  5691 ;;                  2    2[COMMON] int 
  5692 ;; Registers used:
  5693 ;;		wreg, status,2, status,0
  5694 ;; Tracked objects:
  5695 ;;		On entry : 0/0
  5696 ;;		On exit  : 0/0
  5697 ;;		Unchanged: 0/0
  5698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5699 ;;      Params:         4       0       0       0       0
  5700 ;;      Locals:         4       0       0       0       0
  5701 ;;      Temps:          0       0       0       0       0
  5702 ;;      Totals:         8       0       0       0       0
  5703 ;;Total ram usage:        8 bytes
  5704 ;; Hardware stack levels used: 1
  5705 ;; Hardware stack levels required when called: 1
  5706 ;; This function calls:
  5707 ;;		Nothing
  5708 ;; This function is called by:
  5709 ;;		_vfpfcnvrt
  5710 ;; This function uses a non-reentrant model
  5711 ;;
  5712                           
  5713     05F2                     ___awdiv:	
  5714                           ;psect for function ___awdiv
  5715                           
  5716     05F2                     l1721:	
  5717                           ;incstack = 0
  5718                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  5719                           
  5720     05F2  01F7               	clrf	___awdiv@sign
  5721     05F3                     l1723:
  5722     05F3  1FF3               	btfss	___awdiv@divisor+1,7
  5723     05F4  2DF6               	goto	u1141
  5724     05F5  2DF7               	goto	u1140
  5725     05F6                     u1141:
  5726     05F6  2DFE               	goto	l1729
  5727     05F7                     u1140:
  5728     05F7                     l1725:
  5729     05F7  09F2               	comf	___awdiv@divisor,f
  5730     05F8  09F3               	comf	___awdiv@divisor+1,f
  5731     05F9  0AF2               	incf	___awdiv@divisor,f
  5732     05FA  1903               	skipnz
  5733     05FB  0AF3               	incf	___awdiv@divisor+1,f
  5734     05FC                     l1727:
  5735     05FC  3001               	movlw	1
  5736     05FD  00F7               	movwf	___awdiv@sign
  5737     05FE                     l1729:
  5738     05FE  1FF5               	btfss	___awdiv@dividend+1,7
  5739     05FF  2E01               	goto	u1151
  5740     0600  2E02               	goto	u1150
  5741     0601                     u1151:
  5742     0601  2E09               	goto	l1735
  5743     0602                     u1150:
  5744     0602                     l1731:
  5745     0602  09F4               	comf	___awdiv@dividend,f
  5746     0603  09F5               	comf	___awdiv@dividend+1,f
  5747     0604  0AF4               	incf	___awdiv@dividend,f
  5748     0605  1903               	skipnz
  5749     0606  0AF5               	incf	___awdiv@dividend+1,f
  5750     0607                     l1733:
  5751     0607  3001               	movlw	1
  5752     0608  06F7               	xorwf	___awdiv@sign,f
  5753     0609                     l1735:
  5754     0609  01F8               	clrf	___awdiv@quotient
  5755     060A  01F9               	clrf	___awdiv@quotient+1
  5756     060B                     l1737:
  5757     060B  0872               	movf	___awdiv@divisor,w
  5758     060C  0473               	iorwf	___awdiv@divisor+1,w
  5759     060D  1903               	btfsc	3,2
  5760     060E  2E10               	goto	u1161
  5761     060F  2E11               	goto	u1160
  5762     0610                     u1161:
  5763     0610  2E46               	goto	l1757
  5764     0611                     u1160:
  5765     0611                     l1739:
  5766     0611  3001               	movlw	1
  5767     0612  00F6               	movwf	___awdiv@counter
  5768     0613  2E1D               	goto	l1745
  5769     0614                     l1741:
  5770     0614  3001               	movlw	1
  5771     0615                     u1175:
  5772     0615  1003               	clrc
  5773     0616  0DF2               	rlf	___awdiv@divisor,f
  5774     0617  0DF3               	rlf	___awdiv@divisor+1,f
  5775     0618  3EFF               	addlw	-1
  5776     0619  1D03               	skipz
  5777     061A  2E15               	goto	u1175
  5778     061B                     l1743:
  5779     061B  3001               	movlw	1
  5780     061C  07F6               	addwf	___awdiv@counter,f
  5781     061D                     l1745:
  5782     061D  1FF3               	btfss	___awdiv@divisor+1,7
  5783     061E  2E20               	goto	u1181
  5784     061F  2E21               	goto	u1180
  5785     0620                     u1181:
  5786     0620  2E14               	goto	l1741
  5787     0621                     u1180:
  5788     0621                     l1747:
  5789     0621  3001               	movlw	1
  5790     0622                     u1195:
  5791     0622  1003               	clrc
  5792     0623  0DF8               	rlf	___awdiv@quotient,f
  5793     0624  0DF9               	rlf	___awdiv@quotient+1,f
  5794     0625  3EFF               	addlw	-1
  5795     0626  1D03               	skipz
  5796     0627  2E22               	goto	u1195
  5797     0628  0873               	movf	___awdiv@divisor+1,w
  5798     0629  0275               	subwf	___awdiv@dividend+1,w
  5799     062A  1D03               	skipz
  5800     062B  2E2E               	goto	u1205
  5801     062C  0872               	movf	___awdiv@divisor,w
  5802     062D  0274               	subwf	___awdiv@dividend,w
  5803     062E                     u1205:
  5804     062E  1C03               	skipc
  5805     062F  2E31               	goto	u1201
  5806     0630  2E32               	goto	u1200
  5807     0631                     u1201:
  5808     0631  2E39               	goto	l1753
  5809     0632                     u1200:
  5810     0632                     l1749:
  5811     0632  0872               	movf	___awdiv@divisor,w
  5812     0633  02F4               	subwf	___awdiv@dividend,f
  5813     0634  0873               	movf	___awdiv@divisor+1,w
  5814     0635  1C03               	skipc
  5815     0636  03F5               	decf	___awdiv@dividend+1,f
  5816     0637  02F5               	subwf	___awdiv@dividend+1,f
  5817     0638                     l1751:
  5818     0638  1478               	bsf	___awdiv@quotient,0
  5819     0639                     l1753:
  5820     0639  3001               	movlw	1
  5821     063A                     u1215:
  5822     063A  1003               	clrc
  5823     063B  0CF3               	rrf	___awdiv@divisor+1,f
  5824     063C  0CF2               	rrf	___awdiv@divisor,f
  5825     063D  3EFF               	addlw	-1
  5826     063E  1D03               	skipz
  5827     063F  2E3A               	goto	u1215
  5828     0640                     l1755:
  5829     0640  3001               	movlw	1
  5830     0641  02F6               	subwf	___awdiv@counter,f
  5831     0642  1D03               	btfss	3,2
  5832     0643  2E45               	goto	u1221
  5833     0644  2E46               	goto	u1220
  5834     0645                     u1221:
  5835     0645  2E21               	goto	l1747
  5836     0646                     u1220:
  5837     0646                     l1757:
  5838     0646  0877               	movf	___awdiv@sign,w
  5839     0647  1903               	btfsc	3,2
  5840     0648  2E4A               	goto	u1231
  5841     0649  2E4B               	goto	u1230
  5842     064A                     u1231:
  5843     064A  2E50               	goto	l1761
  5844     064B                     u1230:
  5845     064B                     l1759:
  5846     064B  09F8               	comf	___awdiv@quotient,f
  5847     064C  09F9               	comf	___awdiv@quotient+1,f
  5848     064D  0AF8               	incf	___awdiv@quotient,f
  5849     064E  1903               	skipnz
  5850     064F  0AF9               	incf	___awdiv@quotient+1,f
  5851     0650                     l1761:
  5852     0650  0879               	movf	___awdiv@quotient+1,w
  5853     0651  00F3               	movwf	?___awdiv+1
  5854     0652  0878               	movf	___awdiv@quotient,w
  5855     0653  00F2               	movwf	?___awdiv
  5856     0654                     l627:
  5857     0654  0008               	return
  5858     0655                     __end_of___awdiv:
  5859                           
  5860                           	psect	text36
  5861     0F29                     __ptext36:	
  5862 ;; *************** function _print_Irrigation *****************
  5863 ;; Defined at:
  5864 ;;		line 86 in file "./lcdFunctions.h"
  5865 ;; Parameters:    Size  Location     Type
  5866 ;;		None
  5867 ;; Auto vars:     Size  Location     Type
  5868 ;;		None
  5869 ;; Return value:  Size  Location     Type
  5870 ;;                  1    wreg      void 
  5871 ;; Registers used:
  5872 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5873 ;; Tracked objects:
  5874 ;;		On entry : 0/0
  5875 ;;		On exit  : 0/0
  5876 ;;		Unchanged: 0/0
  5877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5878 ;;      Params:         0       0       0       0       0
  5879 ;;      Locals:         0       0       0       0       0
  5880 ;;      Temps:          0       0       0       0       0
  5881 ;;      Totals:         0       0       0       0       0
  5882 ;;Total ram usage:        0 bytes
  5883 ;; Hardware stack levels used: 1
  5884 ;; Hardware stack levels required when called: 5
  5885 ;; This function calls:
  5886 ;;		_Lcd_Clear
  5887 ;;		_Lcd_Set_Cursor
  5888 ;;		_Lcd_Write_String
  5889 ;;		_draw_Index
  5890 ;; This function is called by:
  5891 ;;		_lcd_run
  5892 ;; This function uses a non-reentrant model
  5893 ;;
  5894                           
  5895     0F29                     _print_Irrigation:	
  5896                           ;psect for function _print_Irrigation
  5897                           
  5898     0F29                     l2717:	
  5899                           ;incstack = 0
  5900                           ; Regs used in _print_Irrigation: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5901                           
  5902                           
  5903                           ;./lcdFunctions.h: 89:   if(irrigationState == lastIrrigationState && lcd_lastIndex == l
      +                          cd_index)
  5904     0F29  1283               	bcf	3,5	;RP0=0, select bank0
  5905     0F2A  1303               	bcf	3,6	;RP1=0, select bank0
  5906     0F2B  086D               	movf	_irrigationState,w
  5907     0F2C  066C               	xorwf	_lastIrrigationState,w
  5908     0F2D  1D03               	skipz
  5909     0F2E  2F30               	goto	u2711
  5910     0F2F  2F31               	goto	u2710
  5911     0F30                     u2711:
  5912     0F30  2F38               	goto	l2723
  5913     0F31                     u2710:
  5914     0F31                     l2719:
  5915     0F31  0865               	movf	_lcd_lastIndex,w
  5916     0F32  066A               	xorwf	_lcd_index,w
  5917     0F33  1D03               	skipz
  5918     0F34  2F36               	goto	u2721
  5919     0F35  2F37               	goto	u2720
  5920     0F36                     u2721:
  5921     0F36  2F38               	goto	l2723
  5922     0F37                     u2720:
  5923     0F37  2F6E               	goto	l196
  5924     0F38                     l2723:
  5925                           
  5926                           ;./lcdFunctions.h: 92:   lastIrrigationState = irrigationState;
  5927     0F38  086D               	movf	_irrigationState,w
  5928     0F39  00EC               	movwf	_lastIrrigationState
  5929     0F3A                     l2725:
  5930                           
  5931                           ;./lcdFunctions.h: 94:   Lcd_Clear();
  5932     0F3A  120A  158A  2317  120A  158A  	fcall	_Lcd_Clear
  5933     0F3F                     l2727:
  5934                           
  5935                           ;./lcdFunctions.h: 96:   Lcd_Set_Cursor(1,2);
  5936     0F3F  3002               	movlw	2
  5937     0F40  00F6               	movwf	Lcd_Set_Cursor@b
  5938     0F41  3001               	movlw	1
  5939     0F42  120A  118A  2769  120A  158A  	fcall	_Lcd_Set_Cursor
  5940     0F47                     l2729:
  5941                           
  5942                           ;./lcdFunctions.h: 97:   Lcd_Write_String("IRRIGACAO:");
  5943     0F47  3038               	movlw	(low ((STR_9-__stringbase)| (0+32768)))& (0+255)
  5944     0F48  00F7               	movwf	Lcd_Write_String@a
  5945     0F49  3080               	movlw	128
  5946     0F4A  00F8               	movwf	Lcd_Write_String@a+1
  5947     0F4B  120A  158A  26E3  120A  158A  	fcall	_Lcd_Write_String
  5948     0F50                     l2731:
  5949                           
  5950                           ;./lcdFunctions.h: 99:   Lcd_Set_Cursor(2,4);
  5951     0F50  3004               	movlw	4
  5952     0F51  00F6               	movwf	Lcd_Set_Cursor@b
  5953     0F52  3002               	movlw	2
  5954     0F53  120A  118A  2769  120A  158A  	fcall	_Lcd_Set_Cursor
  5955     0F58                     l2733:
  5956                           
  5957                           ;./lcdFunctions.h: 100:   Lcd_Write_String( IrrigationStateString[irrigationState] );
  5958     0F58  1283               	bcf	3,5	;RP0=0, select bank0
  5959     0F59  1303               	bcf	3,6	;RP1=0, select bank0
  5960     0F5A  086D               	movf	_irrigationState,w
  5961     0F5B  3ECB               	addlw	(low (_IrrigationStateString| 0))& (0+255)
  5962     0F5C  0084               	movwf	4
  5963     0F5D  1383               	bcf	3,7	;select IRP bank1
  5964     0F5E  0800               	movf	0,w
  5965     0F5F  00F7               	movwf	Lcd_Write_String@a
  5966     0F60  3000               	movlw	0
  5967     0F61  1D03               	btfss	3,2
  5968     0F62  3080               	movlw	128
  5969     0F63  00F8               	movwf	Lcd_Write_String@a+1
  5970     0F64  120A  158A  26E3  120A  158A  	fcall	_Lcd_Write_String
  5971     0F69                     l2735:
  5972                           
  5973                           ;./lcdFunctions.h: 102:   draw_Index();
  5974     0F69  120A  158A  241A  120A  158A  	fcall	_draw_Index
  5975     0F6E                     l196:
  5976     0F6E  0008               	return
  5977     0F6F                     __end_of_print_Irrigation:
  5978                           
  5979                           	psect	text37
  5980     0655                     __ptext37:	
  5981 ;; *************** function _print_ArtificialLight *****************
  5982 ;; Defined at:
  5983 ;;		line 127 in file "./lcdFunctions.h"
  5984 ;; Parameters:    Size  Location     Type
  5985 ;;		None
  5986 ;; Auto vars:     Size  Location     Type
  5987 ;;		None
  5988 ;; Return value:  Size  Location     Type
  5989 ;;                  1    wreg      void 
  5990 ;; Registers used:
  5991 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5992 ;; Tracked objects:
  5993 ;;		On entry : 0/0
  5994 ;;		On exit  : 0/0
  5995 ;;		Unchanged: 0/0
  5996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5997 ;;      Params:         0       0       0       0       0
  5998 ;;      Locals:         0       0       0       0       0
  5999 ;;      Temps:          0       0       0       0       0
  6000 ;;      Totals:         0       0       0       0       0
  6001 ;;Total ram usage:        0 bytes
  6002 ;; Hardware stack levels used: 1
  6003 ;; Hardware stack levels required when called: 5
  6004 ;; This function calls:
  6005 ;;		_Lcd_Clear
  6006 ;;		_Lcd_Set_Cursor
  6007 ;;		_Lcd_Write_String
  6008 ;;		_draw_Index
  6009 ;; This function is called by:
  6010 ;;		_lcd_run
  6011 ;; This function uses a non-reentrant model
  6012 ;;
  6013                           
  6014     0655                     _print_ArtificialLight:	
  6015                           ;psect for function _print_ArtificialLight
  6016                           
  6017     0655                     l2761:	
  6018                           ;incstack = 0
  6019                           ; Regs used in _print_ArtificialLight: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  6020                           
  6021                           
  6022                           ;./lcdFunctions.h: 129:   if(light == old_light && lcd_lastIndex == lcd_index )
  6023     0655  1683               	bsf	3,5	;RP0=1, select bank1
  6024     0656  1303               	bcf	3,6	;RP1=0, select bank1
  6025     0657  084F               	movf	(_old_light+1)^(0+128),w
  6026     0658  1283               	bcf	3,5	;RP0=0, select bank0
  6027     0659  1303               	bcf	3,6	;RP1=0, select bank0
  6028     065A  065F               	xorwf	_light+1,w
  6029     065B  1D03               	skipz
  6030     065C  2E63               	goto	u2755
  6031     065D  1683               	bsf	3,5	;RP0=1, select bank1
  6032     065E  1303               	bcf	3,6	;RP1=0, select bank1
  6033     065F  084E               	movf	_old_light^(0+128),w
  6034     0660  1283               	bcf	3,5	;RP0=0, select bank0
  6035     0661  1303               	bcf	3,6	;RP1=0, select bank0
  6036     0662  065E               	xorwf	_light,w
  6037     0663                     u2755:
  6038     0663  1D03               	skipz
  6039     0664  2E66               	goto	u2751
  6040     0665  2E67               	goto	u2750
  6041     0666                     u2751:
  6042     0666  2E6E               	goto	l2767
  6043     0667                     u2750:
  6044     0667                     l2763:
  6045     0667  0865               	movf	_lcd_lastIndex,w
  6046     0668  066A               	xorwf	_lcd_index,w
  6047     0669  1D03               	skipz
  6048     066A  2E6C               	goto	u2761
  6049     066B  2E6D               	goto	u2760
  6050     066C                     u2761:
  6051     066C  2E6E               	goto	l2767
  6052     066D                     u2760:
  6053     066D  2EB4               	goto	l204
  6054     066E                     l2767:
  6055                           
  6056                           ;./lcdFunctions.h: 132:   old_light = light;
  6057     066E  085F               	movf	_light+1,w
  6058     066F  1683               	bsf	3,5	;RP0=1, select bank1
  6059     0670  1303               	bcf	3,6	;RP1=0, select bank1
  6060     0671  00CF               	movwf	(_old_light+1)^(0+128)
  6061     0672  1283               	bcf	3,5	;RP0=0, select bank0
  6062     0673  1303               	bcf	3,6	;RP1=0, select bank0
  6063     0674  085E               	movf	_light,w
  6064     0675  1683               	bsf	3,5	;RP0=1, select bank1
  6065     0676  1303               	bcf	3,6	;RP1=0, select bank1
  6066     0677  00CE               	movwf	_old_light^(0+128)
  6067     0678                     l2769:
  6068                           
  6069                           ;./lcdFunctions.h: 134:   Lcd_Clear();
  6070     0678  120A  158A  2317  120A  118A  	fcall	_Lcd_Clear
  6071     067D                     l2771:
  6072                           
  6073                           ;./lcdFunctions.h: 136:   Lcd_Set_Cursor(1,2);
  6074     067D  3002               	movlw	2
  6075     067E  00F6               	movwf	Lcd_Set_Cursor@b
  6076     067F  3001               	movlw	1
  6077     0680  120A  118A  2769  120A  118A  	fcall	_Lcd_Set_Cursor
  6078     0685                     l2773:
  6079                           
  6080                           ;./lcdFunctions.h: 137:   Lcd_Write_String("LUZ ARTIFICIAL");
  6081     0685  3001               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  6082     0686  00F7               	movwf	Lcd_Write_String@a
  6083     0687  3080               	movlw	128
  6084     0688  00F8               	movwf	Lcd_Write_String@a+1
  6085     0689  120A  158A  26E3  120A  118A  	fcall	_Lcd_Write_String
  6086     068E                     l2775:
  6087                           
  6088                           ;./lcdFunctions.h: 139:   Lcd_Set_Cursor(2,4);
  6089     068E  3004               	movlw	4
  6090     068F  00F6               	movwf	Lcd_Set_Cursor@b
  6091     0690  3002               	movlw	2
  6092     0691  120A  118A  2769  120A  118A  	fcall	_Lcd_Set_Cursor
  6093     0696                     l2777:
  6094                           
  6095                           ;./lcdFunctions.h: 140:   if(PORTCbits.RC3 == 0)
  6096     0696  1283               	bcf	3,5	;RP0=0, select bank0
  6097     0697  1303               	bcf	3,6	;RP1=0, select bank0
  6098     0698  1987               	btfsc	7,3	;volatile
  6099     0699  2E9B               	goto	u2771
  6100     069A  2E9C               	goto	u2770
  6101     069B                     u2771:
  6102     069B  2EA6               	goto	l2781
  6103     069C                     u2770:
  6104     069C                     l2779:
  6105                           
  6106                           ;./lcdFunctions.h: 141:     Lcd_Write_String("LIGADA");
  6107     069C  3046               	movlw	(low (((STR_14+3)-__stringbase)| (0+32768)))& (0+255)
  6108     069D  00F7               	movwf	Lcd_Write_String@a
  6109     069E  3080               	movlw	128
  6110     069F  00F8               	movwf	Lcd_Write_String@a+1
  6111     06A0  120A  158A  26E3  120A  118A  	fcall	_Lcd_Write_String
  6112     06A5  2EAF               	goto	l206
  6113     06A6                     l2781:
  6114                           
  6115                           ;./lcdFunctions.h: 143:     Lcd_Write_String("DESLIGADA");
  6116     06A6  3043               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  6117     06A7  00F7               	movwf	Lcd_Write_String@a
  6118     06A8  3080               	movlw	128
  6119     06A9  00F8               	movwf	Lcd_Write_String@a+1
  6120     06AA  120A  158A  26E3  120A  118A  	fcall	_Lcd_Write_String
  6121     06AF                     l206:
  6122                           
  6123                           ;./lcdFunctions.h: 145:   draw_Index();
  6124     06AF  120A  158A  241A  120A  118A  	fcall	_draw_Index
  6125     06B4                     l204:
  6126     06B4  0008               	return
  6127     06B5                     __end_of_print_ArtificialLight:
  6128                           
  6129                           	psect	text38
  6130     0C1A                     __ptext38:	
  6131 ;; *************** function _draw_Index *****************
  6132 ;; Defined at:
  6133 ;;		line 59 in file "./lcdFunctions.h"
  6134 ;; Parameters:    Size  Location     Type
  6135 ;;		None
  6136 ;; Auto vars:     Size  Location     Type
  6137 ;;  temp_index      3    5[BANK0 ] unsigned char [3]
  6138 ;; Return value:  Size  Location     Type
  6139 ;;                  1    wreg      void 
  6140 ;; Registers used:
  6141 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6142 ;; Tracked objects:
  6143 ;;		On entry : 0/0
  6144 ;;		On exit  : 0/0
  6145 ;;		Unchanged: 0/0
  6146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6147 ;;      Params:         0       0       0       0       0
  6148 ;;      Locals:         0       3       0       0       0
  6149 ;;      Temps:          0       0       0       0       0
  6150 ;;      Totals:         0       3       0       0       0
  6151 ;;Total ram usage:        3 bytes
  6152 ;; Hardware stack levels used: 1
  6153 ;; Hardware stack levels required when called: 4
  6154 ;; This function calls:
  6155 ;;		_Lcd_Set_Cursor
  6156 ;;		_Lcd_Write_String
  6157 ;; This function is called by:
  6158 ;;		_print_TankState
  6159 ;;		_print_Irrigation
  6160 ;;		_print_SoilMoisture
  6161 ;;		_print_ArtificialLight
  6162 ;;		_print_Temperature
  6163 ;; This function uses a non-reentrant model
  6164 ;;
  6165                           
  6166     0C1A                     _draw_Index:	
  6167                           ;psect for function _draw_Index
  6168                           
  6169     0C1A                     l2669:	
  6170                           ;incstack = 0
  6171                           ; Regs used in _draw_Index: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6172                           
  6173                           
  6174                           ;./lcdFunctions.h: 61:   char temp_index[3] = {lcd_index + '0' , '/' , lcd_maxIndex + '0
      +                          ' };
  6175     0C1A  3000               	movlw	0
  6176     0C1B  1283               	bcf	3,5	;RP0=0, select bank0
  6177     0C1C  1303               	bcf	3,6	;RP1=0, select bank0
  6178     0C1D  00A5               	movwf	draw_Index@temp_index
  6179     0C1E  3000               	movlw	0
  6180     0C1F  00A6               	movwf	draw_Index@temp_index+1
  6181     0C20  3000               	movlw	0
  6182     0C21  00A7               	movwf	draw_Index@temp_index+2
  6183     0C22                     l2671:
  6184     0C22  086A               	movf	_lcd_index,w
  6185     0C23  3E30               	addlw	48
  6186     0C24  00A5               	movwf	draw_Index@temp_index
  6187     0C25                     l2673:
  6188     0C25  302F               	movlw	47
  6189     0C26  00A6               	movwf	draw_Index@temp_index+1
  6190     0C27                     l2675:
  6191     0C27  3035               	movlw	53
  6192     0C28  00A7               	movwf	draw_Index@temp_index+2
  6193     0C29                     l2677:
  6194                           
  6195                           ;./lcdFunctions.h: 62:   Lcd_Set_Cursor(2,14);
  6196     0C29  300E               	movlw	14
  6197     0C2A  00F6               	movwf	Lcd_Set_Cursor@b
  6198     0C2B  3002               	movlw	2
  6199     0C2C  120A  118A  2769  120A  158A  	fcall	_Lcd_Set_Cursor
  6200     0C31                     l2679:
  6201                           
  6202                           ;./lcdFunctions.h: 63:   Lcd_Write_String(temp_index);
  6203     0C31  3025               	movlw	(low (draw_Index@temp_index| 0))& (0+255)
  6204     0C32  00F7               	movwf	Lcd_Write_String@a
  6205     0C33  3000               	movlw	0
  6206     0C34  00F8               	movwf	Lcd_Write_String@a+1
  6207     0C35  120A  158A  26E3  120A  158A  	fcall	_Lcd_Write_String
  6208     0C3A                     l188:
  6209     0C3A  0008               	return
  6210     0C3B                     __end_of_draw_Index:
  6211                           
  6212                           	psect	text39
  6213     0EE3                     __ptext39:	
  6214 ;; *************** function _Lcd_Write_String *****************
  6215 ;; Defined at:
  6216 ;;		line 105 in file "./lcd.h"
  6217 ;; Parameters:    Size  Location     Type
  6218 ;;  a               2    7[COMMON] PTR unsigned char 
  6219 ;;		 -> STR_18(8), STR_17(10), print_Temperature@buffer(16), STR_15(13), 
  6220 ;;		 -> STR_14(10), STR_13(7), STR_12(15), print_SoilMoisture@buffer(16), 
  6221 ;;		 -> STR_10(13), STR_9(11), STR_8(14), draw_Index@temp_index(3), 
  6222 ;;		 -> STR_7(6), STR_6(4), STR_5(3), STR_4(5), 
  6223 ;;		 -> STR_3(6), STR_2(5), STR_1(6), 
  6224 ;; Auto vars:     Size  Location     Type
  6225 ;;  i               2    3[BANK0 ] int 
  6226 ;; Return value:  Size  Location     Type
  6227 ;;                  1    wreg      void 
  6228 ;; Registers used:
  6229 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6230 ;; Tracked objects:
  6231 ;;		On entry : 0/0
  6232 ;;		On exit  : 0/0
  6233 ;;		Unchanged: 0/0
  6234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6235 ;;      Params:         2       0       0       0       0
  6236 ;;      Locals:         0       2       0       0       0
  6237 ;;      Temps:          0       3       0       0       0
  6238 ;;      Totals:         2       5       0       0       0
  6239 ;;Total ram usage:        7 bytes
  6240 ;; Hardware stack levels used: 1
  6241 ;; Hardware stack levels required when called: 3
  6242 ;; This function calls:
  6243 ;;		_Lcd_Write_Char
  6244 ;; This function is called by:
  6245 ;;		_draw_Index
  6246 ;;		_print_TankState
  6247 ;;		_print_Irrigation
  6248 ;;		_print_SoilMoisture
  6249 ;;		_print_ArtificialLight
  6250 ;;		_print_Temperature
  6251 ;;		_print_Emergency
  6252 ;; This function uses a non-reentrant model
  6253 ;;
  6254                           
  6255     0EE3                     _Lcd_Write_String:	
  6256                           ;psect for function _Lcd_Write_String
  6257                           
  6258     0EE3                     l2645:	
  6259                           ;incstack = 0
  6260                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6261                           
  6262                           
  6263                           ;./lcd.h: 105: void Lcd_Write_String(char *a);./lcd.h: 106: {;./lcd.h: 107:  int i;;./lc
      +                          d.h: 108:  for(i=0;a[i]!='\0';i++)
  6264     0EE3  1283               	bcf	3,5	;RP0=0, select bank0
  6265     0EE4  1303               	bcf	3,6	;RP1=0, select bank0
  6266     0EE5  01A3               	clrf	Lcd_Write_String@i
  6267     0EE6  01A4               	clrf	Lcd_Write_String@i+1
  6268     0EE7  2F0C               	goto	l2651
  6269     0EE8                     l2647:
  6270                           
  6271                           ;./lcd.h: 109:     Lcd_Write_Char(a[i]);
  6272     0EE8  0823               	movf	Lcd_Write_String@i,w
  6273     0EE9  0777               	addwf	Lcd_Write_String@a,w
  6274     0EEA  00A1               	movwf	??_Lcd_Write_String+1
  6275     0EEB  0878               	movf	Lcd_Write_String@a+1,w
  6276     0EEC  00A0               	movwf	??_Lcd_Write_String
  6277     0EED  1803               	skipnc
  6278     0EEE  0AA0               	incf	??_Lcd_Write_String,f
  6279     0EEF  1FA3               	btfss	Lcd_Write_String@i,7
  6280     0EF0  2EF2               	goto	u2650
  6281     0EF1  03A0               	decf	??_Lcd_Write_String,f
  6282     0EF2                     u2650:
  6283     0EF2  1283               	bcf	3,5	;RP0=0, select bank0
  6284     0EF3  1303               	bcf	3,6	;RP1=0, select bank0
  6285     0EF4  0820               	movf	??_Lcd_Write_String,w
  6286     0EF5  00A2               	movwf	??_Lcd_Write_String+2
  6287     0EF6  0822               	movf	??_Lcd_Write_String+2,w
  6288     0EF7  00FF               	movwf	btemp+1
  6289     0EF8  0821               	movf	??_Lcd_Write_String+1,w
  6290     0EF9  0084               	movwf	4
  6291     0EFA  120A  118A  2413  120A  158A  	fcall	stringtab
  6292     0EFF  120A  158A  25BA  120A  158A  	fcall	_Lcd_Write_Char
  6293     0F04                     l2649:
  6294     0F04  3001               	movlw	1
  6295     0F05  1283               	bcf	3,5	;RP0=0, select bank0
  6296     0F06  1303               	bcf	3,6	;RP1=0, select bank0
  6297     0F07  07A3               	addwf	Lcd_Write_String@i,f
  6298     0F08  1803               	skipnc
  6299     0F09  0AA4               	incf	Lcd_Write_String@i+1,f
  6300     0F0A  3000               	movlw	0
  6301     0F0B  07A4               	addwf	Lcd_Write_String@i+1,f
  6302     0F0C                     l2651:
  6303     0F0C  0823               	movf	Lcd_Write_String@i,w
  6304     0F0D  0777               	addwf	Lcd_Write_String@a,w
  6305     0F0E  00A1               	movwf	??_Lcd_Write_String+1
  6306     0F0F  0878               	movf	Lcd_Write_String@a+1,w
  6307     0F10  00A0               	movwf	??_Lcd_Write_String
  6308     0F11  1803               	skipnc
  6309     0F12  0AA0               	incf	??_Lcd_Write_String,f
  6310     0F13  1FA3               	btfss	Lcd_Write_String@i,7
  6311     0F14  2F16               	goto	u2660
  6312     0F15  03A0               	decf	??_Lcd_Write_String,f
  6313     0F16                     u2660:
  6314     0F16  1283               	bcf	3,5	;RP0=0, select bank0
  6315     0F17  1303               	bcf	3,6	;RP1=0, select bank0
  6316     0F18  0820               	movf	??_Lcd_Write_String,w
  6317     0F19  00A2               	movwf	??_Lcd_Write_String+2
  6318     0F1A  0822               	movf	??_Lcd_Write_String+2,w
  6319     0F1B  00FF               	movwf	btemp+1
  6320     0F1C  0821               	movf	??_Lcd_Write_String+1,w
  6321     0F1D  0084               	movwf	4
  6322     0F1E  120A  118A  2413  120A  158A  	fcall	stringtab
  6323     0F23  3A00               	xorlw	0
  6324     0F24  1D03               	skipz
  6325     0F25  2F27               	goto	u2671
  6326     0F26  2F28               	goto	u2670
  6327     0F27                     u2671:
  6328     0F27  2EE8               	goto	l2647
  6329     0F28                     u2670:
  6330     0F28                     l163:
  6331     0F28  0008               	return
  6332     0F29                     __end_of_Lcd_Write_String:
  6333                           
  6334                           	psect	text40
  6335     0DBA                     __ptext40:	
  6336 ;; *************** function _Lcd_Write_Char *****************
  6337 ;; Defined at:
  6338 ;;		line 89 in file "./lcd.h"
  6339 ;; Parameters:    Size  Location     Type
  6340 ;;  a               1    wreg     unsigned char 
  6341 ;; Auto vars:     Size  Location     Type
  6342 ;;  a               1    6[COMMON] unsigned char 
  6343 ;;  y               1    5[COMMON] unsigned char 
  6344 ;;  temp            1    4[COMMON] unsigned char 
  6345 ;; Return value:  Size  Location     Type
  6346 ;;                  1    wreg      void 
  6347 ;; Registers used:
  6348 ;;		wreg, status,2, status,0, pclath, cstack
  6349 ;; Tracked objects:
  6350 ;;		On entry : 0/0
  6351 ;;		On exit  : 0/0
  6352 ;;		Unchanged: 0/0
  6353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6354 ;;      Params:         0       0       0       0       0
  6355 ;;      Locals:         3       0       0       0       0
  6356 ;;      Temps:          1       0       0       0       0
  6357 ;;      Totals:         4       0       0       0       0
  6358 ;;Total ram usage:        4 bytes
  6359 ;; Hardware stack levels used: 1
  6360 ;; Hardware stack levels required when called: 2
  6361 ;; This function calls:
  6362 ;;		_Lcd_Port
  6363 ;; This function is called by:
  6364 ;;		_Lcd_Write_String
  6365 ;;		_print_SoilMoisture
  6366 ;;		_print_Temperature
  6367 ;; This function uses a non-reentrant model
  6368 ;;
  6369                           
  6370     0DBA                     _Lcd_Write_Char:	
  6371                           ;psect for function _Lcd_Write_Char
  6372                           
  6373                           
  6374                           ;incstack = 0
  6375                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  6376                           ;Lcd_Write_Char@a stored from wreg
  6377     0DBA  00F6               	movwf	Lcd_Write_Char@a
  6378     0DBB                     l2479:
  6379                           
  6380                           ;./lcd.h: 89: void Lcd_Write_Char(char a);./lcd.h: 90: {;./lcd.h: 91:    char temp,y;;./
      +                          lcd.h: 92:    temp = a&0x0F;
  6381     0DBB  0876               	movf	Lcd_Write_Char@a,w
  6382     0DBC  00F4               	movwf	Lcd_Write_Char@temp
  6383     0DBD                     l2481:
  6384     0DBD  300F               	movlw	15
  6385     0DBE  05F4               	andwf	Lcd_Write_Char@temp,f
  6386     0DBF                     l2483:
  6387                           
  6388                           ;./lcd.h: 93:    y = a&0xF0;
  6389     0DBF  0876               	movf	Lcd_Write_Char@a,w
  6390     0DC0  00F5               	movwf	Lcd_Write_Char@y
  6391     0DC1  30F0               	movlw	240
  6392     0DC2  05F5               	andwf	Lcd_Write_Char@y,f
  6393     0DC3                     l2485:
  6394                           
  6395                           ;./lcd.h: 94:    RD2 = 1;
  6396     0DC3  1283               	bcf	3,5	;RP0=0, select bank0
  6397     0DC4  1303               	bcf	3,6	;RP1=0, select bank0
  6398     0DC5  1508               	bsf	8,2	;volatile
  6399     0DC6                     l2487:
  6400                           
  6401                           ;./lcd.h: 95:    Lcd_Port(y>>4);
  6402     0DC6  0875               	movf	Lcd_Write_Char@y,w
  6403     0DC7  00F3               	movwf	??_Lcd_Write_Char
  6404     0DC8  3004               	movlw	4
  6405     0DC9                     u2305:
  6406     0DC9  1003               	clrc
  6407     0DCA  0CF3               	rrf	??_Lcd_Write_Char,f
  6408     0DCB  3EFF               	addlw	-1
  6409     0DCC  1D03               	skipz
  6410     0DCD  2DC9               	goto	u2305
  6411     0DCE  0873               	movf	??_Lcd_Write_Char,w
  6412     0DCF  120A  158A  243B  120A  158A  	fcall	_Lcd_Port
  6413     0DD4                     l2489:
  6414                           
  6415                           ;./lcd.h: 96:    RD3 = 1;
  6416     0DD4  1283               	bcf	3,5	;RP0=0, select bank0
  6417     0DD5  1303               	bcf	3,6	;RP1=0, select bank0
  6418     0DD6  1588               	bsf	8,3	;volatile
  6419     0DD7                     l2491:
  6420                           
  6421                           ;./lcd.h: 97:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  6422     0DD7  300D               	movlw	13
  6423     0DD8  00F3               	movwf	??_Lcd_Write_Char
  6424     0DD9                     u2897:
  6425     0DD9  0BF3               	decfsz	??_Lcd_Write_Char,f
  6426     0DDA  2DD9               	goto	u2897
  6427     0DDB                     l2493:
  6428                           
  6429                           ;./lcd.h: 98:    RD3 = 0;
  6430     0DDB  1283               	bcf	3,5	;RP0=0, select bank0
  6431     0DDC  1303               	bcf	3,6	;RP1=0, select bank0
  6432     0DDD  1188               	bcf	8,3	;volatile
  6433     0DDE                     l2495:
  6434                           
  6435                           ;./lcd.h: 99:    Lcd_Port(temp);
  6436     0DDE  0874               	movf	Lcd_Write_Char@temp,w
  6437     0DDF  120A  158A  243B  120A  158A  	fcall	_Lcd_Port
  6438     0DE4                     l2497:
  6439                           
  6440                           ;./lcd.h: 100:    RD3 = 1;
  6441     0DE4  1283               	bcf	3,5	;RP0=0, select bank0
  6442     0DE5  1303               	bcf	3,6	;RP1=0, select bank0
  6443     0DE6  1588               	bsf	8,3	;volatile
  6444     0DE7                     l2499:
  6445                           
  6446                           ;./lcd.h: 101:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  6447     0DE7  300D               	movlw	13
  6448     0DE8  00F3               	movwf	??_Lcd_Write_Char
  6449     0DE9                     u2907:
  6450     0DE9  0BF3               	decfsz	??_Lcd_Write_Char,f
  6451     0DEA  2DE9               	goto	u2907
  6452     0DEB                     l2501:
  6453                           
  6454                           ;./lcd.h: 102:    RD3 = 0;
  6455     0DEB  1283               	bcf	3,5	;RP0=0, select bank0
  6456     0DEC  1303               	bcf	3,6	;RP1=0, select bank0
  6457     0DED  1188               	bcf	8,3	;volatile
  6458     0DEE                     l157:
  6459     0DEE  0008               	return
  6460     0DEF                     __end_of_Lcd_Write_Char:
  6461                           
  6462                           	psect	text41
  6463     0769                     __ptext41:	
  6464 ;; *************** function _Lcd_Set_Cursor *****************
  6465 ;; Defined at:
  6466 ;;		line 49 in file "./lcd.h"
  6467 ;; Parameters:    Size  Location     Type
  6468 ;;  a               1    wreg     unsigned char 
  6469 ;;  b               1    6[COMMON] unsigned char 
  6470 ;; Auto vars:     Size  Location     Type
  6471 ;;  a               1    0[BANK0 ] unsigned char 
  6472 ;;  temp            1    3[BANK0 ] unsigned char 
  6473 ;;  y               1    2[BANK0 ] unsigned char 
  6474 ;;  z               1    1[BANK0 ] unsigned char 
  6475 ;; Return value:  Size  Location     Type
  6476 ;;                  1    wreg      void 
  6477 ;; Registers used:
  6478 ;;		wreg, status,2, status,0, pclath, cstack
  6479 ;; Tracked objects:
  6480 ;;		On entry : 0/0
  6481 ;;		On exit  : 0/0
  6482 ;;		Unchanged: 0/0
  6483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6484 ;;      Params:         1       0       0       0       0
  6485 ;;      Locals:         0       4       0       0       0
  6486 ;;      Temps:          1       0       0       0       0
  6487 ;;      Totals:         2       4       0       0       0
  6488 ;;Total ram usage:        6 bytes
  6489 ;; Hardware stack levels used: 1
  6490 ;; Hardware stack levels required when called: 3
  6491 ;; This function calls:
  6492 ;;		_Lcd_Cmd
  6493 ;; This function is called by:
  6494 ;;		_draw_Index
  6495 ;;		_print_TankState
  6496 ;;		_print_Irrigation
  6497 ;;		_print_SoilMoisture
  6498 ;;		_print_ArtificialLight
  6499 ;;		_print_Temperature
  6500 ;;		_print_Emergency
  6501 ;; This function uses a non-reentrant model
  6502 ;;
  6503                           
  6504     0769                     _Lcd_Set_Cursor:	
  6505                           ;psect for function _Lcd_Set_Cursor
  6506                           
  6507                           
  6508                           ;incstack = 0
  6509                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  6510                           ;Lcd_Set_Cursor@a stored from wreg
  6511     0769  1283               	bcf	3,5	;RP0=0, select bank0
  6512     076A  1303               	bcf	3,6	;RP1=0, select bank0
  6513     076B  00A0               	movwf	Lcd_Set_Cursor@a
  6514     076C                     l2621:
  6515                           
  6516                           ;./lcd.h: 49: void Lcd_Set_Cursor(char a, char b);./lcd.h: 50: {;./lcd.h: 51:  char temp
      +                          ,z,y;;./lcd.h: 52:  if(a == 1)
  6517     076C  0320               	decf	Lcd_Set_Cursor@a,w
  6518     076D  1D03               	btfss	3,2
  6519     076E  2F70               	goto	u2611
  6520     076F  2F71               	goto	u2610
  6521     0770                     u2611:
  6522     0770  2F91               	goto	l2633
  6523     0771                     u2610:
  6524     0771                     l2623:
  6525                           
  6526                           ;./lcd.h: 53:  {;./lcd.h: 54:    temp = 0x80 + b - 1;
  6527     0771  0876               	movf	Lcd_Set_Cursor@b,w
  6528     0772  3E7F               	addlw	127
  6529     0773  00A3               	movwf	Lcd_Set_Cursor@temp
  6530                           
  6531                           ;./lcd.h: 55:   z = temp>>4;
  6532     0774  0823               	movf	Lcd_Set_Cursor@temp,w
  6533     0775  00F7               	movwf	??_Lcd_Set_Cursor
  6534     0776  3004               	movlw	4
  6535     0777                     u2625:
  6536     0777  1003               	clrc
  6537     0778  0CF7               	rrf	??_Lcd_Set_Cursor,f
  6538     0779  3EFF               	addlw	-1
  6539     077A  1D03               	skipz
  6540     077B  2F77               	goto	u2625
  6541     077C  0877               	movf	??_Lcd_Set_Cursor,w
  6542     077D  00A1               	movwf	Lcd_Set_Cursor@z
  6543     077E                     l2625:
  6544                           
  6545                           ;./lcd.h: 56:   y = temp & 0x0F;
  6546     077E  0823               	movf	Lcd_Set_Cursor@temp,w
  6547     077F  00A2               	movwf	Lcd_Set_Cursor@y
  6548     0780                     l2627:
  6549     0780  300F               	movlw	15
  6550     0781  05A2               	andwf	Lcd_Set_Cursor@y,f
  6551     0782                     l2629:
  6552                           
  6553                           ;./lcd.h: 57:   Lcd_Cmd(z);
  6554     0782  0821               	movf	Lcd_Set_Cursor@z,w
  6555     0783  120A  158A  23E1  120A  118A  	fcall	_Lcd_Cmd
  6556     0788                     l2631:
  6557                           
  6558                           ;./lcd.h: 58:   Lcd_Cmd(y);
  6559     0788  1283               	bcf	3,5	;RP0=0, select bank0
  6560     0789  1303               	bcf	3,6	;RP1=0, select bank0
  6561     078A  0822               	movf	Lcd_Set_Cursor@y,w
  6562     078B  120A  158A  23E1  120A  118A  	fcall	_Lcd_Cmd
  6563                           
  6564                           ;./lcd.h: 59:  }
  6565     0790  2FB6               	goto	l151
  6566     0791                     l2633:
  6567     0791  3002               	movlw	2
  6568     0792  0620               	xorwf	Lcd_Set_Cursor@a,w
  6569     0793  1D03               	btfss	3,2
  6570     0794  2F96               	goto	u2631
  6571     0795  2F97               	goto	u2630
  6572     0796                     u2631:
  6573     0796  2FB6               	goto	l151
  6574     0797                     u2630:
  6575     0797                     l2635:
  6576                           
  6577                           ;./lcd.h: 61:  {;./lcd.h: 62:   temp = 0xC0 + b - 1;
  6578     0797  0876               	movf	Lcd_Set_Cursor@b,w
  6579     0798  3EBF               	addlw	191
  6580     0799  00A3               	movwf	Lcd_Set_Cursor@temp
  6581                           
  6582                           ;./lcd.h: 63:   z = temp>>4;
  6583     079A  0823               	movf	Lcd_Set_Cursor@temp,w
  6584     079B  00F7               	movwf	??_Lcd_Set_Cursor
  6585     079C  3004               	movlw	4
  6586     079D                     u2645:
  6587     079D  1003               	clrc
  6588     079E  0CF7               	rrf	??_Lcd_Set_Cursor,f
  6589     079F  3EFF               	addlw	-1
  6590     07A0  1D03               	skipz
  6591     07A1  2F9D               	goto	u2645
  6592     07A2  0877               	movf	??_Lcd_Set_Cursor,w
  6593     07A3  00A1               	movwf	Lcd_Set_Cursor@z
  6594     07A4                     l2637:
  6595                           
  6596                           ;./lcd.h: 64:   y = temp & 0x0F;
  6597     07A4  0823               	movf	Lcd_Set_Cursor@temp,w
  6598     07A5  00A2               	movwf	Lcd_Set_Cursor@y
  6599     07A6                     l2639:
  6600     07A6  300F               	movlw	15
  6601     07A7  05A2               	andwf	Lcd_Set_Cursor@y,f
  6602     07A8                     l2641:
  6603                           
  6604                           ;./lcd.h: 65:   Lcd_Cmd(z);
  6605     07A8  0821               	movf	Lcd_Set_Cursor@z,w
  6606     07A9  120A  158A  23E1  120A  118A  	fcall	_Lcd_Cmd
  6607     07AE                     l2643:
  6608                           
  6609                           ;./lcd.h: 66:   Lcd_Cmd(y);
  6610     07AE  1283               	bcf	3,5	;RP0=0, select bank0
  6611     07AF  1303               	bcf	3,6	;RP1=0, select bank0
  6612     07B0  0822               	movf	Lcd_Set_Cursor@y,w
  6613     07B1  120A  158A  23E1  120A  118A  	fcall	_Lcd_Cmd
  6614     07B6                     l151:
  6615     07B6  0008               	return
  6616     07B7                     __end_of_Lcd_Set_Cursor:
  6617                           
  6618                           	psect	text42
  6619     0B17                     __ptext42:	
  6620 ;; *************** function _Lcd_Clear *****************
  6621 ;; Defined at:
  6622 ;;		line 43 in file "./lcd.h"
  6623 ;; Parameters:    Size  Location     Type
  6624 ;;		None
  6625 ;; Auto vars:     Size  Location     Type
  6626 ;;		None
  6627 ;; Return value:  Size  Location     Type
  6628 ;;                  1    wreg      void 
  6629 ;; Registers used:
  6630 ;;		wreg, status,2, status,0, pclath, cstack
  6631 ;; Tracked objects:
  6632 ;;		On entry : 0/0
  6633 ;;		On exit  : 0/0
  6634 ;;		Unchanged: 0/0
  6635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6636 ;;      Params:         0       0       0       0       0
  6637 ;;      Locals:         0       0       0       0       0
  6638 ;;      Temps:          0       0       0       0       0
  6639 ;;      Totals:         0       0       0       0       0
  6640 ;;Total ram usage:        0 bytes
  6641 ;; Hardware stack levels used: 1
  6642 ;; Hardware stack levels required when called: 3
  6643 ;; This function calls:
  6644 ;;		_Lcd_Cmd
  6645 ;; This function is called by:
  6646 ;;		_print_TankState
  6647 ;;		_print_Irrigation
  6648 ;;		_print_SoilMoisture
  6649 ;;		_print_ArtificialLight
  6650 ;;		_print_Temperature
  6651 ;;		_print_Emergency
  6652 ;; This function uses a non-reentrant model
  6653 ;;
  6654                           
  6655     0B17                     _Lcd_Clear:	
  6656                           ;psect for function _Lcd_Clear
  6657                           
  6658     0B17                     l2667:	
  6659                           ;incstack = 0
  6660                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  6661                           
  6662                           
  6663                           ;./lcd.h: 45:  Lcd_Cmd(0);
  6664     0B17  3000               	movlw	0
  6665     0B18  120A  158A  23E1  120A  158A  	fcall	_Lcd_Cmd
  6666                           
  6667                           ;./lcd.h: 46:  Lcd_Cmd(1);
  6668     0B1D  3001               	movlw	1
  6669     0B1E  120A  158A  23E1  120A  158A  	fcall	_Lcd_Cmd
  6670     0B23                     l145:
  6671     0B23  0008               	return
  6672     0B24                     __end_of_Lcd_Clear:
  6673                           
  6674                           	psect	text43
  6675     0D64                     __ptext43:	
  6676 ;; *************** function _lcd_debounceButtons *****************
  6677 ;; Defined at:
  6678 ;;		line 173 in file "./lcdFunctions.h"
  6679 ;; Parameters:    Size  Location     Type
  6680 ;;		None
  6681 ;; Auto vars:     Size  Location     Type
  6682 ;;		None
  6683 ;; Return value:  Size  Location     Type
  6684 ;;                  1    wreg      void 
  6685 ;; Registers used:
  6686 ;;		wreg, status,2, status,0, pclath, cstack
  6687 ;; Tracked objects:
  6688 ;;		On entry : 0/0
  6689 ;;		On exit  : 0/0
  6690 ;;		Unchanged: 0/0
  6691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6692 ;;      Params:         0       0       0       0       0
  6693 ;;      Locals:         0       0       0       0       0
  6694 ;;      Temps:          1       0       0       0       0
  6695 ;;      Totals:         1       0       0       0       0
  6696 ;;Total ram usage:        1 bytes
  6697 ;; Hardware stack levels used: 1
  6698 ;; Hardware stack levels required when called: 2
  6699 ;; This function calls:
  6700 ;;		_lcd_turnLeft
  6701 ;;		_lcd_turnRight
  6702 ;; This function is called by:
  6703 ;;		_lcd_run
  6704 ;; This function uses a non-reentrant model
  6705 ;;
  6706                           
  6707     0D64                     _lcd_debounceButtons:	
  6708                           ;psect for function _lcd_debounceButtons
  6709                           
  6710     0D64                     l2211:	
  6711                           ;incstack = 0
  6712                           ; Regs used in _lcd_debounceButtons: [wreg+status,2+status,0+pclath+cstack]
  6713                           
  6714                           
  6715                           ;./lcdFunctions.h: 177:   if (PORTBbits.RB1 == 0 && lastLeftButtonState != 0) {
  6716     0D64  1283               	bcf	3,5	;RP0=0, select bank0
  6717     0D65  1303               	bcf	3,6	;RP1=0, select bank0
  6718     0D66  1886               	btfsc	6,1	;volatile
  6719     0D67  2D69               	goto	u1971
  6720     0D68  2D6A               	goto	u1970
  6721     0D69                     u1971:
  6722     0D69  2D74               	goto	l2217
  6723     0D6A                     u1970:
  6724     0D6A                     l2213:
  6725     0D6A  0869               	movf	_lastLeftButtonState,w
  6726     0D6B  1903               	btfsc	3,2
  6727     0D6C  2D6E               	goto	u1981
  6728     0D6D  2D6F               	goto	u1980
  6729     0D6E                     u1981:
  6730     0D6E  2D74               	goto	l2217
  6731     0D6F                     u1980:
  6732     0D6F                     l2215:
  6733                           
  6734                           ;./lcdFunctions.h: 178:       lcd_turnLeft();
  6735     0D6F  120A  158A  2331  120A  158A  	fcall	_lcd_turnLeft
  6736     0D74                     l2217:
  6737                           
  6738                           ;./lcdFunctions.h: 182:   if (PORTBbits.RB2 == 0 && lastRightButtonState != 0) {
  6739     0D74  1283               	bcf	3,5	;RP0=0, select bank0
  6740     0D75  1303               	bcf	3,6	;RP1=0, select bank0
  6741     0D76  1906               	btfsc	6,2	;volatile
  6742     0D77  2D79               	goto	u1991
  6743     0D78  2D7A               	goto	u1990
  6744     0D79                     u1991:
  6745     0D79  2D84               	goto	l2223
  6746     0D7A                     u1990:
  6747     0D7A                     l2219:
  6748     0D7A  0868               	movf	_lastRightButtonState,w
  6749     0D7B  1903               	btfsc	3,2
  6750     0D7C  2D7E               	goto	u2001
  6751     0D7D  2D7F               	goto	u2000
  6752     0D7E                     u2001:
  6753     0D7E  2D84               	goto	l2223
  6754     0D7F                     u2000:
  6755     0D7F                     l2221:
  6756                           
  6757                           ;./lcdFunctions.h: 183:       lcd_turnRight();
  6758     0D7F  120A  158A  233F  120A  158A  	fcall	_lcd_turnRight
  6759     0D84                     l2223:
  6760                           
  6761                           ;./lcdFunctions.h: 187:   lastLeftButtonState = PORTBbits.RB1;
  6762     0D84  1283               	bcf	3,5	;RP0=0, select bank0
  6763     0D85  1303               	bcf	3,6	;RP1=0, select bank0
  6764     0D86  0C06               	rrf	6,w	;volatile
  6765     0D87  3901               	andlw	1
  6766     0D88  00E9               	movwf	_lastLeftButtonState
  6767     0D89                     l2225:
  6768                           
  6769                           ;./lcdFunctions.h: 188:   lastRightButtonState = PORTBbits.RB2;
  6770     0D89  0C06               	rrf	6,w	;volatile
  6771     0D8A  00F2               	movwf	??_lcd_debounceButtons
  6772     0D8B  0C72               	rrf	??_lcd_debounceButtons,w
  6773     0D8C  3901               	andlw	1
  6774     0D8D  00E8               	movwf	_lastRightButtonState
  6775     0D8E                     l215:
  6776     0D8E  0008               	return
  6777     0D8F                     __end_of_lcd_debounceButtons:
  6778                           
  6779                           	psect	text44
  6780     0B3F                     __ptext44:	
  6781 ;; *************** function _lcd_turnRight *****************
  6782 ;; Defined at:
  6783 ;;		line 219 in file "./lcdFunctions.h"
  6784 ;; Parameters:    Size  Location     Type
  6785 ;;		None
  6786 ;; Auto vars:     Size  Location     Type
  6787 ;;		None
  6788 ;; Return value:  Size  Location     Type
  6789 ;;                  1    wreg      void 
  6790 ;; Registers used:
  6791 ;;		wreg, status,2, status,0
  6792 ;; Tracked objects:
  6793 ;;		On entry : 0/0
  6794 ;;		On exit  : 0/0
  6795 ;;		Unchanged: 0/0
  6796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6797 ;;      Params:         0       0       0       0       0
  6798 ;;      Locals:         0       0       0       0       0
  6799 ;;      Temps:          0       0       0       0       0
  6800 ;;      Totals:         0       0       0       0       0
  6801 ;;Total ram usage:        0 bytes
  6802 ;; Hardware stack levels used: 1
  6803 ;; Hardware stack levels required when called: 1
  6804 ;; This function calls:
  6805 ;;		Nothing
  6806 ;; This function is called by:
  6807 ;;		_lcd_debounceButtons
  6808 ;; This function uses a non-reentrant model
  6809 ;;
  6810                           
  6811     0B3F                     _lcd_turnRight:	
  6812                           ;psect for function _lcd_turnRight
  6813                           
  6814     0B3F                     l2073:	
  6815                           ;incstack = 0
  6816                           ; Regs used in _lcd_turnRight: [wreg+status,2+status,0]
  6817                           
  6818                           
  6819                           ;./lcdFunctions.h: 222:   if(lcd_index >= lcd_maxIndex)
  6820     0B3F  3005               	movlw	5
  6821     0B40  1283               	bcf	3,5	;RP0=0, select bank0
  6822     0B41  1303               	bcf	3,6	;RP1=0, select bank0
  6823     0B42  026A               	subwf	_lcd_index,w
  6824     0B43  1C03               	skipc
  6825     0B44  2B46               	goto	u1821
  6826     0B45  2B47               	goto	u1820
  6827     0B46                     u1821:
  6828     0B46  2B4A               	goto	l2077
  6829     0B47                     u1820:
  6830     0B47                     l2075:
  6831                           
  6832                           ;./lcdFunctions.h: 223:     lcd_index = 1;
  6833     0B47  3001               	movlw	1
  6834     0B48  00EA               	movwf	_lcd_index
  6835     0B49  2B4C               	goto	l231
  6836     0B4A                     l2077:
  6837                           
  6838                           ;./lcdFunctions.h: 225:     lcd_index++;
  6839     0B4A  3001               	movlw	1
  6840     0B4B  07EA               	addwf	_lcd_index,f
  6841     0B4C                     l231:
  6842     0B4C  0008               	return
  6843     0B4D                     __end_of_lcd_turnRight:
  6844                           
  6845                           	psect	text45
  6846     0B31                     __ptext45:	
  6847 ;; *************** function _lcd_turnLeft *****************
  6848 ;; Defined at:
  6849 ;;		line 228 in file "./lcdFunctions.h"
  6850 ;; Parameters:    Size  Location     Type
  6851 ;;		None
  6852 ;; Auto vars:     Size  Location     Type
  6853 ;;		None
  6854 ;; Return value:  Size  Location     Type
  6855 ;;                  1    wreg      void 
  6856 ;; Registers used:
  6857 ;;		wreg, status,2, status,0
  6858 ;; Tracked objects:
  6859 ;;		On entry : 0/0
  6860 ;;		On exit  : 0/0
  6861 ;;		Unchanged: 0/0
  6862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6863 ;;      Params:         0       0       0       0       0
  6864 ;;      Locals:         0       0       0       0       0
  6865 ;;      Temps:          0       0       0       0       0
  6866 ;;      Totals:         0       0       0       0       0
  6867 ;;Total ram usage:        0 bytes
  6868 ;; Hardware stack levels used: 1
  6869 ;; Hardware stack levels required when called: 1
  6870 ;; This function calls:
  6871 ;;		Nothing
  6872 ;; This function is called by:
  6873 ;;		_lcd_debounceButtons
  6874 ;; This function uses a non-reentrant model
  6875 ;;
  6876                           
  6877     0B31                     _lcd_turnLeft:	
  6878                           ;psect for function _lcd_turnLeft
  6879                           
  6880     0B31                     l2067:	
  6881                           ;incstack = 0
  6882                           ; Regs used in _lcd_turnLeft: [wreg+status,2+status,0]
  6883                           
  6884                           
  6885                           ;./lcdFunctions.h: 231:   if(lcd_index <= 1)
  6886     0B31  3002               	movlw	2
  6887     0B32  1283               	bcf	3,5	;RP0=0, select bank0
  6888     0B33  1303               	bcf	3,6	;RP1=0, select bank0
  6889     0B34  026A               	subwf	_lcd_index,w
  6890     0B35  1803               	skipnc
  6891     0B36  2B38               	goto	u1811
  6892     0B37  2B39               	goto	u1810
  6893     0B38                     u1811:
  6894     0B38  2B3C               	goto	l2071
  6895     0B39                     u1810:
  6896     0B39                     l2069:
  6897                           
  6898                           ;./lcdFunctions.h: 232:     lcd_index = lcd_maxIndex;
  6899     0B39  3005               	movlw	5
  6900     0B3A  00EA               	movwf	_lcd_index
  6901     0B3B  2B3E               	goto	l236
  6902     0B3C                     l2071:
  6903                           
  6904                           ;./lcdFunctions.h: 234:     lcd_index--;
  6905     0B3C  3001               	movlw	1
  6906     0B3D  02EA               	subwf	_lcd_index,f
  6907     0B3E                     l236:
  6908     0B3E  0008               	return
  6909     0B3F                     __end_of_lcd_turnLeft:
  6910                           
  6911                           	psect	text46
  6912     0AD4                     __ptext46:	
  6913 ;; *************** function _interruption_init *****************
  6914 ;; Defined at:
  6915 ;;		line 111 in file "./config.h"
  6916 ;; Parameters:    Size  Location     Type
  6917 ;;		None
  6918 ;; Auto vars:     Size  Location     Type
  6919 ;;		None
  6920 ;; Return value:  Size  Location     Type
  6921 ;;                  1    wreg      void 
  6922 ;; Registers used:
  6923 ;;		None
  6924 ;; Tracked objects:
  6925 ;;		On entry : 0/0
  6926 ;;		On exit  : 0/0
  6927 ;;		Unchanged: 0/0
  6928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6929 ;;      Params:         0       0       0       0       0
  6930 ;;      Locals:         0       0       0       0       0
  6931 ;;      Temps:          0       0       0       0       0
  6932 ;;      Totals:         0       0       0       0       0
  6933 ;;Total ram usage:        0 bytes
  6934 ;; Hardware stack levels used: 1
  6935 ;; Hardware stack levels required when called: 1
  6936 ;; This function calls:
  6937 ;;		Nothing
  6938 ;; This function is called by:
  6939 ;;		_main
  6940 ;; This function uses a non-reentrant model
  6941 ;;
  6942                           
  6943     0AD4                     _interruption_init:	
  6944                           ;psect for function _interruption_init
  6945                           
  6946     0AD4                     l2291:	
  6947                           ;incstack = 0
  6948                           ; Regs used in _interruption_init: []
  6949                           
  6950                           
  6951                           ;./config.h: 113:   INTCONbits.GIE=1;
  6952     0AD4  178B               	bsf	11,7	;volatile
  6953                           
  6954                           ;./config.h: 115:   INTCONbits.INTE = 1;
  6955     0AD5  160B               	bsf	11,4	;volatile
  6956                           
  6957                           ;./config.h: 116:   OPTION_REGbits.INTEDG = 1;
  6958     0AD6  1683               	bsf	3,5	;RP0=1, select bank1
  6959     0AD7  1303               	bcf	3,6	;RP1=0, select bank1
  6960     0AD8  1701               	bsf	1,6	;volatile
  6961                           
  6962                           ;./config.h: 119:   INTCONbits.PEIE = 1;
  6963     0AD9  170B               	bsf	11,6	;volatile
  6964                           
  6965                           ;./config.h: 121:   PIE1bits.TMR1IE = 1;
  6966     0ADA  140C               	bsf	12,0	;volatile
  6967     0ADB                     l100:
  6968     0ADB  0008               	return
  6969     0ADC                     __end_of_interruption_init:
  6970                           
  6971                           	psect	text47
  6972     0ACC                     __ptext47:	
  6973 ;; *************** function _WDT_init *****************
  6974 ;; Defined at:
  6975 ;;		line 39 in file "./config.h"
  6976 ;; Parameters:    Size  Location     Type
  6977 ;;		None
  6978 ;; Auto vars:     Size  Location     Type
  6979 ;;		None
  6980 ;; Return value:  Size  Location     Type
  6981 ;;                  1    wreg      void 
  6982 ;; Registers used:
  6983 ;;		None
  6984 ;; Tracked objects:
  6985 ;;		On entry : 0/0
  6986 ;;		On exit  : 0/0
  6987 ;;		Unchanged: 0/0
  6988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6989 ;;      Params:         0       0       0       0       0
  6990 ;;      Locals:         0       0       0       0       0
  6991 ;;      Temps:          0       0       0       0       0
  6992 ;;      Totals:         0       0       0       0       0
  6993 ;;Total ram usage:        0 bytes
  6994 ;; Hardware stack levels used: 1
  6995 ;; Hardware stack levels required when called: 1
  6996 ;; This function calls:
  6997 ;;		Nothing
  6998 ;; This function is called by:
  6999 ;;		_main
  7000 ;; This function uses a non-reentrant model
  7001 ;;
  7002                           
  7003     0ACC                     _WDT_init:	
  7004                           ;psect for function _WDT_init
  7005                           
  7006     0ACC                     l2279:	
  7007                           ;incstack = 0
  7008                           ; Regs used in _WDT_init: []
  7009                           
  7010     0ACC  1683               	bsf	3,5	;RP0=1, select bank1
  7011     0ACD  1303               	bcf	3,6	;RP1=0, select bank1
  7012     0ACE  1581               	bsf	1,3	;volatile
  7013     0ACF  1401               	bsf	1,0	;volatile
  7014     0AD0  1481               	bsf	1,1	;volatile
  7015     0AD1  1501               	bsf	1,2	;volatile
  7016     0AD2  0064               	clrwdt	;# 
  7017     0AD3                     l91:
  7018     0AD3  0008               	return
  7019     0AD4                     __end_of_WDT_init:
  7020                           
  7021                           	psect	text48
  7022     06B5                     __ptext48:	
  7023 ;; *************** function _Lcd_Init *****************
  7024 ;; Defined at:
  7025 ;;		line 70 in file "./lcd.h"
  7026 ;; Parameters:    Size  Location     Type
  7027 ;;		None
  7028 ;; Auto vars:     Size  Location     Type
  7029 ;;		None
  7030 ;; Return value:  Size  Location     Type
  7031 ;;                  1    wreg      void 
  7032 ;; Registers used:
  7033 ;;		wreg, status,2, status,0, pclath, cstack
  7034 ;; Tracked objects:
  7035 ;;		On entry : 0/0
  7036 ;;		On exit  : 0/0
  7037 ;;		Unchanged: 0/0
  7038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7039 ;;      Params:         0       0       0       0       0
  7040 ;;      Locals:         0       0       0       0       0
  7041 ;;      Temps:          2       0       0       0       0
  7042 ;;      Totals:         2       0       0       0       0
  7043 ;;Total ram usage:        2 bytes
  7044 ;; Hardware stack levels used: 1
  7045 ;; Hardware stack levels required when called: 3
  7046 ;; This function calls:
  7047 ;;		_Lcd_Cmd
  7048 ;;		_Lcd_Port
  7049 ;; This function is called by:
  7050 ;;		_main
  7051 ;; This function uses a non-reentrant model
  7052 ;;
  7053                           
  7054     06B5                     _Lcd_Init:	
  7055                           ;psect for function _Lcd_Init
  7056                           
  7057     06B5                     l2809:	
  7058                           ;incstack = 0
  7059                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  7060                           
  7061                           
  7062                           ;./lcd.h: 72:   Lcd_Port(0x00);
  7063     06B5  3000               	movlw	0
  7064     06B6  120A  158A  243B  120A  118A  	fcall	_Lcd_Port
  7065     06BB                     l2811:
  7066                           
  7067                           ;./lcd.h: 73:    _delay((unsigned long)((20)*(4000000/4000.0)));
  7068     06BB  301A               	movlw	26
  7069     06BC  00F7               	movwf	??_Lcd_Init+1
  7070     06BD  30F8               	movlw	248
  7071     06BE  00F6               	movwf	??_Lcd_Init
  7072     06BF                     u2917:
  7073     06BF  0BF6               	decfsz	??_Lcd_Init,f
  7074     06C0  2EBF               	goto	u2917
  7075     06C1  0BF7               	decfsz	??_Lcd_Init+1,f
  7076     06C2  2EBF               	goto	u2917
  7077     06C3  0000               	nop
  7078     06C4                     l2813:
  7079                           
  7080                           ;./lcd.h: 74:   Lcd_Cmd(0x03);
  7081     06C4  3003               	movlw	3
  7082     06C5  120A  158A  23E1  120A  118A  	fcall	_Lcd_Cmd
  7083                           
  7084                           ;./lcd.h: 75:  _delay((unsigned long)((5)*(4000000/4000.0)));
  7085     06CA  3007               	movlw	7
  7086     06CB  00F7               	movwf	??_Lcd_Init+1
  7087     06CC  307D               	movlw	125
  7088     06CD  00F6               	movwf	??_Lcd_Init
  7089     06CE                     u2927:
  7090     06CE  0BF6               	decfsz	??_Lcd_Init,f
  7091     06CF  2ECE               	goto	u2927
  7092     06D0  0BF7               	decfsz	??_Lcd_Init+1,f
  7093     06D1  2ECE               	goto	u2927
  7094     06D2                     l2815:
  7095                           
  7096                           ;./lcd.h: 76:   Lcd_Cmd(0x03);
  7097     06D2  3003               	movlw	3
  7098     06D3  120A  158A  23E1  120A  118A  	fcall	_Lcd_Cmd
  7099     06D8                     l2817:
  7100                           
  7101                           ;./lcd.h: 77:  _delay((unsigned long)((11)*(4000000/4000.0)));
  7102     06D8  300F               	movlw	15
  7103     06D9  00F7               	movwf	??_Lcd_Init+1
  7104     06DA  3047               	movlw	71
  7105     06DB  00F6               	movwf	??_Lcd_Init
  7106     06DC                     u2937:
  7107     06DC  0BF6               	decfsz	??_Lcd_Init,f
  7108     06DD  2EDC               	goto	u2937
  7109     06DE  0BF7               	decfsz	??_Lcd_Init+1,f
  7110     06DF  2EDC               	goto	u2937
  7111     06E0  2EE1               	nop2
  7112                           
  7113                           ;./lcd.h: 78:   Lcd_Cmd(0x03);
  7114     06E1  3003               	movlw	3
  7115     06E2  120A  158A  23E1  120A  118A  	fcall	_Lcd_Cmd
  7116                           
  7117                           ;./lcd.h: 80:   Lcd_Cmd(0x02);
  7118     06E7  3002               	movlw	2
  7119     06E8  120A  158A  23E1  120A  118A  	fcall	_Lcd_Cmd
  7120                           
  7121                           ;./lcd.h: 81:   Lcd_Cmd(0x02);
  7122     06ED  3002               	movlw	2
  7123     06EE  120A  158A  23E1  120A  118A  	fcall	_Lcd_Cmd
  7124                           
  7125                           ;./lcd.h: 82:   Lcd_Cmd(0x08);
  7126     06F3  3008               	movlw	8
  7127     06F4  120A  158A  23E1  120A  118A  	fcall	_Lcd_Cmd
  7128                           
  7129                           ;./lcd.h: 83:   Lcd_Cmd(0x00);
  7130     06F9  3000               	movlw	0
  7131     06FA  120A  158A  23E1  120A  118A  	fcall	_Lcd_Cmd
  7132                           
  7133                           ;./lcd.h: 84:   Lcd_Cmd(0x0C);
  7134     06FF  300C               	movlw	12
  7135     0700  120A  158A  23E1  120A  118A  	fcall	_Lcd_Cmd
  7136                           
  7137                           ;./lcd.h: 85:   Lcd_Cmd(0x00);
  7138     0705  3000               	movlw	0
  7139     0706  120A  158A  23E1  120A  118A  	fcall	_Lcd_Cmd
  7140                           
  7141                           ;./lcd.h: 86:   Lcd_Cmd(0x06);
  7142     070B  3006               	movlw	6
  7143     070C  120A  158A  23E1  120A  118A  	fcall	_Lcd_Cmd
  7144     0711                     l154:
  7145     0711  0008               	return
  7146     0712                     __end_of_Lcd_Init:
  7147                           
  7148                           	psect	text49
  7149     0BE1                     __ptext49:	
  7150 ;; *************** function _Lcd_Cmd *****************
  7151 ;; Defined at:
  7152 ;;		line 34 in file "./lcd.h"
  7153 ;; Parameters:    Size  Location     Type
  7154 ;;  a               1    wreg     unsigned char 
  7155 ;; Auto vars:     Size  Location     Type
  7156 ;;  a               1    5[COMMON] unsigned char 
  7157 ;; Return value:  Size  Location     Type
  7158 ;;                  1    wreg      void 
  7159 ;; Registers used:
  7160 ;;		wreg, status,2, status,0, pclath, cstack
  7161 ;; Tracked objects:
  7162 ;;		On entry : 0/0
  7163 ;;		On exit  : 0/0
  7164 ;;		Unchanged: 0/0
  7165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7166 ;;      Params:         0       0       0       0       0
  7167 ;;      Locals:         1       0       0       0       0
  7168 ;;      Temps:          2       0       0       0       0
  7169 ;;      Totals:         3       0       0       0       0
  7170 ;;Total ram usage:        3 bytes
  7171 ;; Hardware stack levels used: 1
  7172 ;; Hardware stack levels required when called: 2
  7173 ;; This function calls:
  7174 ;;		_Lcd_Port
  7175 ;; This function is called by:
  7176 ;;		_Lcd_Clear
  7177 ;;		_Lcd_Set_Cursor
  7178 ;;		_Lcd_Init
  7179 ;; This function uses a non-reentrant model
  7180 ;;
  7181                           
  7182     0BE1                     _Lcd_Cmd:	
  7183                           ;psect for function _Lcd_Cmd
  7184                           
  7185                           
  7186                           ;incstack = 0
  7187                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  7188                           ;Lcd_Cmd@a stored from wreg
  7189     0BE1  00F5               	movwf	Lcd_Cmd@a
  7190     0BE2                     l2469:
  7191                           
  7192                           ;./lcd.h: 34: void Lcd_Cmd(char a);./lcd.h: 35: {;./lcd.h: 36:  RD2 = 0;
  7193     0BE2  1283               	bcf	3,5	;RP0=0, select bank0
  7194     0BE3  1303               	bcf	3,6	;RP1=0, select bank0
  7195     0BE4  1108               	bcf	8,2	;volatile
  7196     0BE5                     l2471:
  7197                           
  7198                           ;./lcd.h: 37:  Lcd_Port(a);
  7199     0BE5  0875               	movf	Lcd_Cmd@a,w
  7200     0BE6  120A  158A  243B  120A  158A  	fcall	_Lcd_Port
  7201     0BEB                     l2473:
  7202                           
  7203                           ;./lcd.h: 38:  RD3 = 1;
  7204     0BEB  1283               	bcf	3,5	;RP0=0, select bank0
  7205     0BEC  1303               	bcf	3,6	;RP1=0, select bank0
  7206     0BED  1588               	bsf	8,3	;volatile
  7207     0BEE                     l2475:
  7208                           
  7209                           ;./lcd.h: 39:         _delay((unsigned long)((4)*(4000000/4000.0)));
  7210     0BEE  3006               	movlw	6
  7211     0BEF  00F4               	movwf	??_Lcd_Cmd+1
  7212     0BF0  3030               	movlw	48
  7213     0BF1  00F3               	movwf	??_Lcd_Cmd
  7214     0BF2                     u2947:
  7215     0BF2  0BF3               	decfsz	??_Lcd_Cmd,f
  7216     0BF3  2BF2               	goto	u2947
  7217     0BF4  0BF4               	decfsz	??_Lcd_Cmd+1,f
  7218     0BF5  2BF2               	goto	u2947
  7219     0BF6  0000               	nop
  7220     0BF7                     l2477:
  7221                           
  7222                           ;./lcd.h: 40:         RD3 = 0;
  7223     0BF7  1283               	bcf	3,5	;RP0=0, select bank0
  7224     0BF8  1303               	bcf	3,6	;RP1=0, select bank0
  7225     0BF9  1188               	bcf	8,3	;volatile
  7226     0BFA                     l142:
  7227     0BFA  0008               	return
  7228     0BFB                     __end_of_Lcd_Cmd:
  7229                           
  7230                           	psect	text50
  7231     0C3B                     __ptext50:	
  7232 ;; *************** function _Lcd_Port *****************
  7233 ;; Defined at:
  7234 ;;		line 12 in file "./lcd.h"
  7235 ;; Parameters:    Size  Location     Type
  7236 ;;  a               1    wreg     unsigned char 
  7237 ;; Auto vars:     Size  Location     Type
  7238 ;;  a               1    2[COMMON] unsigned char 
  7239 ;; Return value:  Size  Location     Type
  7240 ;;                  1    wreg      void 
  7241 ;; Registers used:
  7242 ;;		wreg
  7243 ;; Tracked objects:
  7244 ;;		On entry : 0/0
  7245 ;;		On exit  : 0/0
  7246 ;;		Unchanged: 0/0
  7247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7248 ;;      Params:         0       0       0       0       0
  7249 ;;      Locals:         1       0       0       0       0
  7250 ;;      Temps:          0       0       0       0       0
  7251 ;;      Totals:         1       0       0       0       0
  7252 ;;Total ram usage:        1 bytes
  7253 ;; Hardware stack levels used: 1
  7254 ;; Hardware stack levels required when called: 1
  7255 ;; This function calls:
  7256 ;;		Nothing
  7257 ;; This function is called by:
  7258 ;;		_Lcd_Cmd
  7259 ;;		_Lcd_Init
  7260 ;;		_Lcd_Write_Char
  7261 ;; This function uses a non-reentrant model
  7262 ;;
  7263                           
  7264     0C3B                     _Lcd_Port:	
  7265                           ;psect for function _Lcd_Port
  7266                           
  7267                           
  7268                           ;incstack = 0
  7269                           ; Regs used in _Lcd_Port: [wreg]
  7270                           ;Lcd_Port@a stored from wreg
  7271     0C3B  00F2               	movwf	Lcd_Port@a
  7272     0C3C                     l2451:
  7273                           
  7274                           ;./lcd.h: 12: void Lcd_Port(char a);./lcd.h: 13: {;./lcd.h: 14:  if(a & 1)
  7275     0C3C  1C72               	btfss	Lcd_Port@a,0
  7276     0C3D  2C3F               	goto	u2251
  7277     0C3E  2C40               	goto	u2250
  7278     0C3F                     u2251:
  7279     0C3F  2C44               	goto	l131
  7280     0C40                     u2250:
  7281     0C40                     l2453:
  7282                           
  7283                           ;./lcd.h: 15:   RD4 = 1;
  7284     0C40  1283               	bcf	3,5	;RP0=0, select bank0
  7285     0C41  1303               	bcf	3,6	;RP1=0, select bank0
  7286     0C42  1608               	bsf	8,4	;volatile
  7287     0C43  2C47               	goto	l132
  7288     0C44                     l131:	
  7289                           ;./lcd.h: 16:  else
  7290                           
  7291                           
  7292                           ;./lcd.h: 17:   RD4 = 0;
  7293     0C44  1283               	bcf	3,5	;RP0=0, select bank0
  7294     0C45  1303               	bcf	3,6	;RP1=0, select bank0
  7295     0C46  1208               	bcf	8,4	;volatile
  7296     0C47                     l132:
  7297                           
  7298                           ;./lcd.h: 19:  if(a & 2)
  7299     0C47  1CF2               	btfss	Lcd_Port@a,1
  7300     0C48  2C4A               	goto	u2261
  7301     0C49  2C4B               	goto	u2260
  7302     0C4A                     u2261:
  7303     0C4A  2C4D               	goto	l133
  7304     0C4B                     u2260:
  7305     0C4B                     l2455:
  7306                           
  7307                           ;./lcd.h: 20:   RD5 = 1;
  7308     0C4B  1688               	bsf	8,5	;volatile
  7309     0C4C  2C4E               	goto	l134
  7310     0C4D                     l133:	
  7311                           ;./lcd.h: 21:  else
  7312                           
  7313                           
  7314                           ;./lcd.h: 22:   RD5 = 0;
  7315     0C4D  1288               	bcf	8,5	;volatile
  7316     0C4E                     l134:
  7317                           
  7318                           ;./lcd.h: 24:  if(a & 4)
  7319     0C4E  1D72               	btfss	Lcd_Port@a,2
  7320     0C4F  2C51               	goto	u2271
  7321     0C50  2C52               	goto	u2270
  7322     0C51                     u2271:
  7323     0C51  2C54               	goto	l135
  7324     0C52                     u2270:
  7325     0C52                     l2457:
  7326                           
  7327                           ;./lcd.h: 25:   RD6 = 1;
  7328     0C52  1708               	bsf	8,6	;volatile
  7329     0C53  2C55               	goto	l136
  7330     0C54                     l135:	
  7331                           ;./lcd.h: 26:  else
  7332                           
  7333                           
  7334                           ;./lcd.h: 27:   RD6 = 0;
  7335     0C54  1308               	bcf	8,6	;volatile
  7336     0C55                     l136:
  7337                           
  7338                           ;./lcd.h: 29:  if(a & 8)
  7339     0C55  1DF2               	btfss	Lcd_Port@a,3
  7340     0C56  2C58               	goto	u2281
  7341     0C57  2C59               	goto	u2280
  7342     0C58                     u2281:
  7343     0C58  2C5B               	goto	l137
  7344     0C59                     u2280:
  7345     0C59                     l2459:
  7346                           
  7347                           ;./lcd.h: 30:   RD7 = 1;
  7348     0C59  1788               	bsf	8,7	;volatile
  7349     0C5A  2C5C               	goto	l139
  7350     0C5B                     l137:	
  7351                           ;./lcd.h: 31:  else
  7352                           
  7353                           
  7354                           ;./lcd.h: 32:   RD7 = 0;
  7355     0C5B  1388               	bcf	8,7	;volatile
  7356     0C5C                     l139:
  7357     0C5C  0008               	return
  7358     0C5D                     __end_of_Lcd_Port:
  7359                           
  7360                           	psect	text51
  7361     0B0A                     __ptext51:	
  7362 ;; *************** function _ADC_init *****************
  7363 ;; Defined at:
  7364 ;;		line 124 in file "./config.h"
  7365 ;; Parameters:    Size  Location     Type
  7366 ;;		None
  7367 ;; Auto vars:     Size  Location     Type
  7368 ;;		None
  7369 ;; Return value:  Size  Location     Type
  7370 ;;                  1    wreg      void 
  7371 ;; Registers used:
  7372 ;;		None
  7373 ;; Tracked objects:
  7374 ;;		On entry : 0/0
  7375 ;;		On exit  : 0/0
  7376 ;;		Unchanged: 0/0
  7377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7378 ;;      Params:         0       0       0       0       0
  7379 ;;      Locals:         0       0       0       0       0
  7380 ;;      Temps:          0       0       0       0       0
  7381 ;;      Totals:         0       0       0       0       0
  7382 ;;Total ram usage:        0 bytes
  7383 ;; Hardware stack levels used: 1
  7384 ;; Hardware stack levels required when called: 1
  7385 ;; This function calls:
  7386 ;;		Nothing
  7387 ;; This function is called by:
  7388 ;;		_main
  7389 ;; This function uses a non-reentrant model
  7390 ;;
  7391                           
  7392     0B0A                     _ADC_init:	
  7393                           ;psect for function _ADC_init
  7394                           
  7395     0B0A                     l2293:	
  7396                           ;incstack = 0
  7397                           ; Regs used in _ADC_init: []
  7398                           
  7399                           
  7400                           ;./config.h: 126:    ADCON1bits.PCFG0=0;
  7401     0B0A  1683               	bsf	3,5	;RP0=1, select bank1
  7402     0B0B  1303               	bcf	3,6	;RP1=0, select bank1
  7403     0B0C  101F               	bcf	31,0	;volatile
  7404                           
  7405                           ;./config.h: 127:    ADCON1bits.PCFG1=0;
  7406     0B0D  109F               	bcf	31,1	;volatile
  7407                           
  7408                           ;./config.h: 128:    ADCON1bits.PCFG2=0;
  7409     0B0E  111F               	bcf	31,2	;volatile
  7410                           
  7411                           ;./config.h: 129:    ADCON1bits.PCFG3=0;
  7412     0B0F  119F               	bcf	31,3	;volatile
  7413                           
  7414                           ;./config.h: 132:    ADCON1bits.ADFM = 1;
  7415     0B10  179F               	bsf	31,7	;volatile
  7416                           
  7417                           ;./config.h: 135:    ADCON0bits.ADCS0 = 0 ;
  7418     0B11  1283               	bcf	3,5	;RP0=0, select bank0
  7419     0B12  1303               	bcf	3,6	;RP1=0, select bank0
  7420     0B13  131F               	bcf	31,6	;volatile
  7421                           
  7422                           ;./config.h: 136:    ADCON0bits.ADCS1 = 0 ;
  7423     0B14  139F               	bcf	31,7	;volatile
  7424                           
  7425                           ;./config.h: 138:    ADCON0bits.ADON = 1;
  7426     0B15  141F               	bsf	31,0	;volatile
  7427     0B16                     l103:
  7428     0B16  0008               	return
  7429     0B17                     __end_of_ADC_init:
  7430                           
  7431                           	psect	text52
  7432     0CE9                     __ptext52:	
  7433 ;; *************** function _interruptionHandler *****************
  7434 ;; Defined at:
  7435 ;;		line 27 in file "main.c"
  7436 ;; Parameters:    Size  Location     Type
  7437 ;;		None
  7438 ;; Auto vars:     Size  Location     Type
  7439 ;;		None
  7440 ;; Return value:  Size  Location     Type
  7441 ;;                  1    wreg      void 
  7442 ;; Registers used:
  7443 ;;		wreg
  7444 ;; Tracked objects:
  7445 ;;		On entry : 0/0
  7446 ;;		On exit  : 0/0
  7447 ;;		Unchanged: 0/0
  7448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7449 ;;      Params:         0       0       0       0       0
  7450 ;;      Locals:         0       0       0       0       0
  7451 ;;      Temps:          2       0       0       0       0
  7452 ;;      Totals:         2       0       0       0       0
  7453 ;;Total ram usage:        2 bytes
  7454 ;; Hardware stack levels used: 1
  7455 ;; This function calls:
  7456 ;;		Nothing
  7457 ;; This function is called by:
  7458 ;;		Interrupt level 1
  7459 ;; This function uses a non-reentrant model
  7460 ;;
  7461                           
  7462     0CE9                     _interruptionHandler:	
  7463                           ;psect for function _interruptionHandler
  7464                           
  7465     0CE9                     i1l2383:
  7466                           
  7467                           ;main.c: 29:   if(INTCONbits.INTF)
  7468     0CE9  1C8B               	btfss	11,1	;volatile
  7469     0CEA  2CEC               	goto	u220_21
  7470     0CEB  2CED               	goto	u220_20
  7471     0CEC                     u220_21:
  7472     0CEC  2CF8               	goto	i1l248
  7473     0CED                     u220_20:
  7474     0CED                     i1l2385:
  7475                           
  7476                           ;main.c: 30:   {;main.c: 31:     INTCONbits.INTF = 0;
  7477     0CED  108B               	bcf	11,1	;volatile
  7478                           
  7479                           ;main.c: 32:     flag_emergencyButton = 1;
  7480     0CEE  157A               	bsf	_flag_emergencyButton/(0+8),_flag_emergencyButton& (0+7)
  7481                           
  7482                           ;main.c: 34:     PORTCbits.RC0 = 1;
  7483     0CEF  1283               	bcf	3,5	;RP0=0, select bank0
  7484     0CF0  1303               	bcf	3,6	;RP1=0, select bank0
  7485     0CF1  1407               	bsf	7,0	;volatile
  7486                           
  7487                           ;main.c: 35:     PORTCbits.RC1 = 1;
  7488     0CF2  1487               	bsf	7,1	;volatile
  7489                           
  7490                           ;main.c: 36:     PORTCbits.RC4 = 1;
  7491     0CF3  1607               	bsf	7,4	;volatile
  7492                           
  7493                           ;main.c: 37:     PORTCbits.RC2 = 1;
  7494     0CF4  1507               	bsf	7,2	;volatile
  7495                           
  7496                           ;main.c: 38:     PORTCbits.RC3 = 1;
  7497     0CF5  1587               	bsf	7,3	;volatile
  7498                           
  7499                           ;main.c: 40:     PORTCbits.RC2 = 0;
  7500     0CF6  1107               	bcf	7,2	;volatile
  7501                           
  7502                           ;main.c: 42:   }
  7503     0CF7  2D09               	goto	i1l251
  7504     0CF8                     i1l248:	
  7505                           ;main.c: 43:   else if(PIR1bits.TMR1IF)
  7506                           
  7507     0CF8  1283               	bcf	3,5	;RP0=0, select bank0
  7508     0CF9  1303               	bcf	3,6	;RP1=0, select bank0
  7509     0CFA  1C0C               	btfss	12,0	;volatile
  7510     0CFB  2CFD               	goto	u221_21
  7511     0CFC  2CFE               	goto	u221_20
  7512     0CFD                     u221_21:
  7513     0CFD  2D09               	goto	i1l251
  7514     0CFE                     u221_20:
  7515     0CFE                     i1l2387:
  7516                           
  7517                           ;main.c: 44:   {;main.c: 45:     PIR1bits.TMR1IF = 0;
  7518     0CFE  100C               	bcf	12,0	;volatile
  7519                           
  7520                           ;main.c: 48:     TMR1L = 0xDC;
  7521     0CFF  30DC               	movlw	220
  7522     0D00  008E               	movwf	14	;volatile
  7523                           
  7524                           ;main.c: 49:     TMR1H = 0x0B;
  7525     0D01  300B               	movlw	11
  7526     0D02  008F               	movwf	15	;volatile
  7527     0D03                     i1l2389:
  7528                           
  7529                           ;main.c: 51:     timerCounter++;
  7530     0D03  3001               	movlw	1
  7531     0D04  07DC               	addwf	_timerCounter,f	;volatile
  7532     0D05  1803               	skipnc
  7533     0D06  0ADD               	incf	_timerCounter+1,f	;volatile
  7534     0D07  3000               	movlw	0
  7535     0D08  07DD               	addwf	_timerCounter+1,f	;volatile
  7536     0D09                     i1l251:
  7537     0D09  0871               	movf	??_interruptionHandler+1,w
  7538     0D0A  008A               	movwf	10
  7539     0D0B  0E70               	swapf	??_interruptionHandler,w
  7540     0D0C  0083               	movwf	3
  7541     0D0D  0EFE               	swapf	btemp,f
  7542     0D0E  0E7E               	swapf	btemp,w
  7543     0D0F  0009               	retfie
  7544     0D10                     __end_of_interruptionHandler:
  7545     0002                     ___latbits      equ	2
  7546     0006                     fptotal         equ	6
  7547                           
  7548                           	psect	intentry
  7549     0004                     __pintentry:	
  7550                           ;incstack = 0
  7551                           ; Regs used in _interruptionHandler: [wreg]
  7552                           
  7553     0004                     interrupt_function:
  7554     007E                     saved_w         set	btemp
  7555     0004  00FE               	movwf	btemp
  7556     0005  0E03               	swapf	3,w
  7557     0006  00F0               	movwf	??_interruptionHandler
  7558     0007  080A               	movf	10,w
  7559     0008  00F1               	movwf	??_interruptionHandler+1
  7560     0009  120A  158A  2CE9   	ljmp	_interruptionHandler
  7561                           
  7562                           	psect	functab
  7563     0045                     __pfunctab:
  7564     0045                     __fptable:
  7565     0045                     fptable:
  7566     0045  00FF               	movwf	(btemp+1)& (0+127)
  7567     0046  3000               	movlw	high fptable
  7568     0047  008A               	movwf	10
  7569     0048  087F               	movf	(btemp+1)& (0+127),w
  7570     0049  0782               	addwf	2,f
  7571     004A                     fpbase:
  7572     004A  284A               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  7573     004B                     fp__interrupt_WTANK_timeout:
  7574     004B  120A  158A  2ADC   	ljmp	_interrupt_WTANK_timeout
  7575     004E                     fp__ADC_readAll:
  7576     004E                     entry__ADC_readAll:
  7577     004E  120A  158A  2B5C   	ljmp	_ADC_readAll
  7578     0051                     fp__interrupt_IRRIG_timeout:
  7579     0051  120A  158A  2AF5   	ljmp	_interrupt_IRRIG_timeout
  7580     0054                     __end_of__fptable:
  7581     000F                     __size_of__fptable equ	__end_of__fptable-__fptable
  7582     007E                     btemp           set	126	;btemp
  7583     007E                     wtemp0          set	126
  7584                           
  7585                           	psect	config
  7586                           
  7587                           ;Config register CONFIG @ 0x2007
  7588                           ;	Oscillator Selection bits
  7589                           ;	FOSC = HS, HS oscillator
  7590                           ;	Watchdog Timer Enable bit
  7591                           ;	WDTE = ON, WDT enabled
  7592                           ;	Power-up Timer Enable bit
  7593                           ;	PWRTE = ON, PWRT enabled
  7594                           ;	Brown-out Reset Enable bit
  7595                           ;	BOREN = ON, BOR enabled
  7596                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  7597                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  7598                           ;	Data EEPROM Memory Code Protection bit
  7599                           ;	CPD = OFF, Data EEPROM code protection off
  7600                           ;	Flash Program Memory Write Enable bits
  7601                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  7602                           ;	In-Circuit Debugger Mode bit
  7603                           ;	DEBUG = 0x1, unprogrammed default
  7604                           ;	Flash Program Memory Code Protection bit
  7605                           ;	CP = OFF, Code protection off
  7606     2007                     	org	8199
  7607     2007  3F76               	dw	16246

Data Sizes:
    Strings     132
    Constant    0
    Data        41
    BSS         54
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     60      79
    BANK1            80      0      70
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> print_SoilMoisture@buffer(BANK0[16]), print_Temperature@buffer(BANK0[16]), 

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> print_SoilMoisture@buffer(BANK0[16]), print_Temperature@buffer(BANK0[16]), 

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    IrrigationStateString	PTR unsigned char [3] size(1) Largest target is 6
		 -> STR_5(CODE[3]), STR_6(CODE[4]), STR_7(CODE[6]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 16
		 -> draw_Index@temp_index(BANK0[3]), print_SoilMoisture@buffer(BANK0[16]), print_Temperature@buffer(BANK0[16]), STR_1(CODE[6]), 
		 -> STR_10(CODE[13]), STR_12(CODE[15]), STR_13(CODE[7]), STR_14(CODE[10]), 
		 -> STR_15(CODE[13]), STR_17(CODE[10]), STR_18(CODE[8]), STR_2(CODE[5]), 
		 -> STR_3(CODE[6]), STR_4(CODE[5]), STR_5(CODE[3]), STR_6(CODE[4]), 
		 -> STR_7(CODE[6]), STR_8(CODE[14]), STR_9(CODE[11]), 

    runTimer@timer	PTR struct . size(2) Largest target is 6
		 -> timer_ADCReadAll(BANK1[6]), timer_IRRIG_Timeout(BANK1[6]), timer_WTANK_Timeout(BANK1[6]), 

    runTimer@timer$callback	PTR FTN()void  size(1) Largest target is 1
		 -> ADC_readAll(), interrupt_IRRIG_timeout(), interrupt_WTANK_timeout(), 

    S1161$buffer	PTR unsigned char  size(2) Largest target is 16
		 -> print_SoilMoisture@buffer(BANK0[16]), print_Temperature@buffer(BANK0[16]), 

    S1161$source	PTR const unsigned char  size(1) Largest target is 0

    S319$callback	PTR FTN()void  size(1) Largest target is 1
		 -> ADC_readAll(), interrupt_IRRIG_timeout(), interrupt_WTANK_timeout(), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_11(CODE[3]), STR_16(CODE[3]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 16
		 -> print_SoilMoisture@buffer(BANK0[16]), print_Temperature@buffer(BANK0[16]), 

    startTimer@timer	PTR struct . size(2) Largest target is 6
		 -> timer_ADCReadAll(BANK1[6]), timer_IRRIG_Timeout(BANK1[6]), timer_WTANK_Timeout(BANK1[6]), 

    startTimer@timer$callback	PTR FTN()void  size(1) Largest target is 1
		 -> ADC_readAll(), interrupt_IRRIG_timeout(), interrupt_WTANK_timeout(), 

    stopTimer@timer	PTR struct . size(2) Largest target is 6
		 -> timer_IRRIG_Timeout(BANK1[6]), timer_WTANK_Timeout(BANK1[6]), 

    stopTimer@timer$callback	PTR FTN()void  size(1) Largest target is 1
		 -> ADC_readAll(), interrupt_IRRIG_timeout(), interrupt_WTANK_timeout(), 

    TankStateString	PTR unsigned char [4] size(1) Largest target is 6
		 -> STR_1(CODE[6]), STR_2(CODE[5]), STR_3(CODE[6]), STR_4(CODE[5]), 

    timer_ADCReadAll$callback	PTR FTN()void  size(1) Largest target is 1
		 -> ADC_readAll(), interrupt_IRRIG_timeout(), interrupt_WTANK_timeout(), 

    timer_IRRIG_Timeout$callback	PTR FTN()void  size(1) Largest target is 1
		 -> ADC_readAll(), interrupt_IRRIG_timeout(), interrupt_WTANK_timeout(), 

    timer_WTANK_Timeout$callback	PTR FTN()void  size(1) Largest target is 1
		 -> ADC_readAll(), interrupt_IRRIG_timeout(), interrupt_WTANK_timeout(), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 3
		 -> STR_11(CODE[3]), STR_16(CODE[3]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 3
		 -> STR_11(CODE[3]), STR_16(CODE[3]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_11(CODE[3]), STR_16(CODE[3]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 


Critical Paths under _main in COMMON

    _startFilling->_startTimer
    _startIrrigation->_startTimer
    _stopFilling->_stopTimer
    _stopIrrigation->_stopTimer
    _map->___lmul
    ___aldiv->___lmul
    _readLight->_ADC_Read
    _print_Emergency->_Lcd_Write_String
    _print_TankState->_Lcd_Write_String
    _vfpfcnvrt->___awdiv
    _vfpfcnvrt->_abs
    _abs->___awmod
    _print_Irrigation->_Lcd_Write_String
    _print_ArtificialLight->_Lcd_Write_String
    _draw_Index->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _interruptionHandler in COMMON

    None.

Critical Paths under _main in BANK0

    _readTemperature->_map
    _readSoilMoisture->_map
    _map->___aldiv
    ___aldiv->___lmul
    _print_Emergency->_Lcd_Write_String
    _lcd_run->_print_SoilMoisture
    _lcd_run->_print_Temperature
    _print_Temperature->_sprintf
    _print_TankState->_draw_Index
    _print_SoilMoisture->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_fputc
    _print_Irrigation->_draw_Index
    _print_ArtificialLight->_draw_Index
    _draw_Index->_Lcd_Write_String

Critical Paths under _interruptionHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptionHandler in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptionHandler in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptionHandler in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   26381
                           _ADC_init
                        _ADC_readAll
                           _Lcd_Init
                           _WDT_init
                  _interruption_init
                            _lcd_run
                          _pins_init
                    _print_Emergency
                           _runTimer
                _run_IrrigationLogic
                 _run_waterTankLogic
                         _startTimer
                    _timer1_1ms_init
 ---------------------------------------------------------------------------------
 (1) _timer1_1ms_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _run_waterTankLogic                                   2     2      0     293
                                              6 COMMON     2     2      0
                   _check_TankStatus
                       _startFilling
                        _stopFilling
 ---------------------------------------------------------------------------------
 (2) _startFilling                                         0     0      0      69
                         _startTimer
 ---------------------------------------------------------------------------------
 (2) _check_TankStatus                                     3     3      0     178
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _run_IrrigationLogic                                  2     0      2     160
                                              6 COMMON     2     0      2
                    _startIrrigation
                     _stopIrrigation
 ---------------------------------------------------------------------------------
 (2) _startIrrigation                                      0     0      0      69
                         _startTimer
 ---------------------------------------------------------------------------------
 (1) _startTimer                                           4     2      2      69
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _runTimer                                             8     6      2    2416
                                             50 BANK0      8     6      2
                        _ADC_readAll *
            _interrupt_IRRIG_timeout *
            _interrupt_WTANK_timeout *
 ---------------------------------------------------------------------------------
 (2) _interrupt_WTANK_timeout                              0     0      0      46
                        _stopFilling
 ---------------------------------------------------------------------------------
 (2) _stopFilling                                          0     0      0      46
                          _stopTimer
 ---------------------------------------------------------------------------------
 (2) _interrupt_IRRIG_timeout                              0     0      0      46
                     _stopIrrigation
 ---------------------------------------------------------------------------------
 (2) _stopIrrigation                                       0     0      0      46
                          _stopTimer
 ---------------------------------------------------------------------------------
 (3) _stopTimer                                            4     2      2      46
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _ADC_readAll                                          0     0      0    2095
                          _readLight
                   _readSoilMoisture
                    _readTemperature
 ---------------------------------------------------------------------------------
 (3) _readTemperature                                      0     0      0    1033
                           _ADC_Read
                                _map
 ---------------------------------------------------------------------------------
 (3) _readSoilMoisture                                     0     0      0    1033
                           _ADC_Read
                                _map
 ---------------------------------------------------------------------------------
 (4) _map                                                 30    20     10    1004
                                             20 BANK0     30    20     10
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              13     5      8     142
                                              2 COMMON     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (5) ___aldiv                                             15     7      8     451
                                              5 BANK0     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _readLight                                            0     0      0      29
                           _ADC_Read
 ---------------------------------------------------------------------------------
 (4) _ADC_Read                                             4     2      2      29
                                              2 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _print_Emergency                                      3     3      0    1465
                                              5 BANK0      3     3      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _pins_init                                            4     1      3      98
                                              2 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _lcd_run                                              0     0      0   19362
                _lcd_debounceButtons
              _print_ArtificialLight
                   _print_Irrigation
                 _print_SoilMoisture
                    _print_TankState
                  _print_Temperature
 ---------------------------------------------------------------------------------
 (2) _print_Temperature                                   16    16      0    5463
                                             44 BANK0     16    16      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                         _draw_Index
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _print_TankState                                      0     0      0    2812
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _draw_Index
 ---------------------------------------------------------------------------------
 (2) _print_SoilMoisture                                  16    16      0    5463
                                             44 BANK0     16    16      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                         _draw_Index
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             19    15      4    2215
                                             27 BANK0     17    13      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             5     1      4    1897
                                             22 BANK0      5     1      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           13     9      4    1697
                                              9 BANK0     13     9      4
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                               13     9      4     230
                                              2 COMMON     4     0      4
                                              0 BANK0      9     9      0
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2      96
                                              8 COMMON     2     0      2
                                              0 BANK0      2     2      0
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     298
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     302
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) _print_Irrigation                                     0     0      0    2812
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _draw_Index
 ---------------------------------------------------------------------------------
 (2) _print_ArtificialLight                                0     0      0    2812
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                         _draw_Index
 ---------------------------------------------------------------------------------
 (3) _draw_Index                                           3     3      0    1347
                                              5 BANK0      3     3      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     7     5      2     528
                                              7 COMMON     2     0      2
                                              0 BANK0      5     5      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       4     4      0     356
                                              3 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       6     5      1     702
                                              6 COMMON     2     1      1
                                              0 BANK0      4     4      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     235
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_debounceButtons                                  1     1      0       0
                                              2 COMMON     1     1      0
                       _lcd_turnLeft
                      _lcd_turnRight
 ---------------------------------------------------------------------------------
 (3) _lcd_turnRight                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _lcd_turnLeft                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruption_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     423
                                              6 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              3     3      0     235
                                              3 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0     188
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interruptionHandler                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _ADC_readAll
     _readLight
       _ADC_Read
     _readSoilMoisture
       _ADC_Read
       _map
         ___aldiv
           ___lmul (ARG)
         ___lmul
     _readTemperature
       _ADC_Read
       _map
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _WDT_init
   _interruption_init
   _lcd_run
     _lcd_debounceButtons
       _lcd_turnLeft
       _lcd_turnRight
     _print_ArtificialLight
       _Lcd_Clear
         _Lcd_Cmd
       _Lcd_Set_Cursor
         _Lcd_Cmd
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _draw_Index
         _Lcd_Set_Cursor
         _Lcd_Write_String
     _print_Irrigation
       _Lcd_Clear
       _Lcd_Set_Cursor
       _Lcd_Write_String
       _draw_Index
     _print_SoilMoisture
       _Lcd_Clear
       _Lcd_Set_Cursor
       _Lcd_Write_Char
       _Lcd_Write_String
       _draw_Index
       _sprintf
         _vfprintf
           _vfpfcnvrt
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _fputc
               _putch
     _print_TankState
       _Lcd_Clear
       _Lcd_Set_Cursor
       _Lcd_Write_String
       _draw_Index
     _print_Temperature
       _Lcd_Clear
       _Lcd_Set_Cursor
       _Lcd_Write_Char
       _Lcd_Write_String
       _draw_Index
       _sprintf
   _pins_init
   _print_Emergency
     _Lcd_Clear
     _Lcd_Set_Cursor
     _Lcd_Write_String
   _runTimer
     _ADC_readAll *
     _interrupt_IRRIG_timeout *
       _stopIrrigation
         _stopTimer
     _interrupt_WTANK_timeout *
       _stopFilling
         _stopTimer
   _run_IrrigationLogic
     _startIrrigation
       _startTimer
     _stopIrrigation
   _run_waterTankLogic
     _check_TankStatus
     _startFilling
       _startTimer
     _stopFilling
   _startTimer
   _timer1_1ms_init

 _interruptionHandler (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0      70     87.5%
BITBANK1            80      0       0      0.0%
BANK0               80     60      79     98.8%
BITBANK0            80      0       0      0.0%
COMMON              14     10      12     85.7%
BITCOMMON           14      0       1      7.1%
DATA                 0      0     163      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Thu Dec 12 11:41:35 2024

                                pc 0002                                 l91 0AD3  
                               l94 0B09                                 l97 0B5B  
                     ___awdiv@sign 0077                                 fsr 0004  
                              l100 0ADB                                l103 0B16  
                              l200 05F1                                l112 0CE8  
                              l210 058C                                l106 0CD7  
                              l122 0D63                                l131 0C44  
                              l132 0C47                                l204 06B4  
                              l108 0CDD                                l116 0143  
                              l133 0C4D                                l109 0CDE  
                              l125 0B30                                l134 0C4E  
                              l142 0BFA                                l206 06AF  
                              l135 0C54                                l231 0B4C  
                              l215 0D8E                                l151 07B6  
                              l119 0D39                                l311 0B97  
                              l136 0C55                                l128 0B6B  
                              l312 0BA4                                l137 0C5B  
                              l145 0B23                                l154 0711  
                              l226 0E61                                l139 0C5C  
                              l163 0F28                                l315 0B84  
                              l236 0B3E                                l316 0B91  
                              l308 0DB9                                l157 0DEE  
                              l333 0E25                                l261 02D3  
                              l239 0FFF                                l319 0AE3  
                              l327 0521                                l192 0EE2  
                              l256 026B                                l337 0C7E  
                              l259 02BF                                l188 0C3A  
                              l196 0F6E                                l380 0BBD  
                              l292 0FB5                                l381 0BCB  
                              l373 0E9E                                l640 0768  
                              l384 0BD1                                l385 0BE0  
                              l377 0E9E                                l298 0FB5  
                              l627 0654                                l539 038E  
                              l388 0AFE                                l549 0412  
                              l488 07FE                                l937 0CC4  
                              l981 0CA1                                l975 0232  
                              l988 0B7E                                _RD2 0042  
                              _RD3 0043                                _RD4 0044  
                              _RD5 0045                                _RD6 0046  
                              _RD7 0047                  ??_startIrrigation 0076  
                     _startFilling 0B92                                _abs 0B6C  
                              _map 0054                      ?_lcd_turnLeft 0070  
                              fsr0 0004                                indf 0000  
                     ___awmod@sign 0077                        _stopFilling 0B7F  
                             l1000 0379                               l1011 0003  
                             ?_abs 0078                               l2021 0C70  
                             l2017 0C5D                               l2211 0D64  
                             l2221 0D7F                               l2213 0D6A  
                             l2037 0B24                               l2071 0B3C  
                             l2223 0D84                               l2215 0D6F  
                             l2231 0F84                               l2073 0B3F  
                             l2225 0D89                               l2217 0D74  
                             l2241 0F99                               l2233 0F89  
                             l2067 0B31                               l2075 0B47  
                             l2219 0D7A                               l2091 0BCC  
                             l2083 0E02                               l2251 0FAD  
                             l2243 0F9C                               l2227 0F6F  
                             l2069 0B39                               l2077 0B4A  
                             l2501 0DEB                               l2085 0B7F  
                             l2261 0ADC                               l2253 0FB2  
                             l2245 0FA1                               l2237 0F8F  
                             l2229 0F81                               l2511 07E5  
                             l2503 07B7                               l2095 0BD7  
                             l2263 0AE1                               l2079 0DEF  
                             l2271 0BC1                               l2351 0E62  
                             l2247 0FA6                               l2239 0F94  
                             l2255 0B92                               l2335 0D8F  
                             l1721 05F2                               l2521 0381  
                             l2513 07F6                               l2505 07C1  
                             l2089 0B88                               l2273 0BC2  
                             l2265 0BB8                               l2361 0E7D  
                             l2353 0E6A                               l2249 0FA8  
                             l2337 0D95                               l2345 0DA1  
                             l2281 0AFF                               l2451 0C3C  
                             l2291 0AD4                               l1731 0602  
                             l1723 05F3                               l1811 0307  
                             l1803 02DA                               l2603 0219  
                             l2283 0B4E                               l2531 03AF  
                             l2523 0392                               l2507 07C5  
                             l2611 008C                               l2275 0AF5  
                             l2363 0E8A                               l2355 0E70  
                             l2259 0B9B                               l2339 0D9B  
                             l2293 0B0A                               l2453 0C40  
                             l2621 076C                               l1741 0614  
                             l1733 0607                               l1725 05F7  
                             l2461 0B6C                               l1813 0339  
                             l1805 02E0                               l2285 0B58  
                             l2541 03DC                               l2533 03B2  
                             l2525 039D                               l2517 037A  
                             l2509 07DC                               l2277 0AFA  
                             l2269 0BC0                               l2365 0E90  
                             l2357 0E76                               l2455 0C4B  
                             l2471 0BE5                               l2279 0ACC  
                             l2631 0788                               l2623 0771  
                             l1751 0638                               l1743 061B  
                             l1735 0609                               l1727 05FC  
                             l2463 0B70                               l1807 02E6  
                             l2711 0EC6                               l2703 0EAE  
                             l2287 0B59                               l2551 03FF  
                             l2543 03EA                               l2535 03BD  
                             l2527 039F                               l2519 037D  
                             l2615 0096                               l2457 0C52  
                             l2473 0BEB                               l2641 07A8  
                             l2625 077E                               l2633 0791  
                             l2481 0DBD                               l1761 0650  
                             l1753 0639                               l1745 061D  
                             l1737 060B                               l1729 05FE  
                             l2465 0B71                               l1809 02ED  
                             l2561 0159                               l2713 0ECE  
                             l2705 0EB0                               l2801 0572  
                             l2289 0B5A                               l2553 040A  
                             l2545 03EB                               l2537 03C1  
                             l2529 03A7                               l2617 00F2  
                             l2609 0054                               l2459 0C59  
                             l2475 0BEE                               l2811 06BB  
                             l2643 07AE                               l2635 0797  
                             l2627 0780                               l2491 0DD7  
                             l2483 0DBF                               l2651 0F0C  
                             l2731 0F50                               l2723 0F38  
                             l1755 0640                               l1747 0621  
                             l1739 0611                               l1771 071C  
                             l2571 0185                               l2563 0161  
                             l2715 0EDD                               l2707 0EB5  
                             l2803 057B                               l2547 03F4  
                             l2539 03CA                               l2477 0BF7  
                             l2469 0BE2                               l2813 06C4  
                             l2637 07A4                               l2629 0782  
                             l2493 0DDB                               l2485 0DC3  
                             l2645 0EE3                               l2733 0F58  
                             l2725 0F3A                               l2717 0F29  
                             l1749 0632                               l1757 0646  
                             l1781 0730                               l1773 071E  
                             l1765 0712                               l2581 01BF  
                             l2573 0192                               l2565 0167  
                             l2557 0144                               l2653 0C7F  
                             l2709 0EBD                               l2805 0581  
                             l2821 0E2C                               l2549 03FA  
                             l2901 02CF                               l2815 06D2  
                             l2639 07A6                               l2495 0DDE  
                             l2487 0DC6                               l2479 0DBB  
                             l2647 0EE8                               l2671 0C22  
                             l2735 0F69                               l2727 0F3F  
                             l2719 0F31                               l1759 064B  
                             l1791 074D                               l1783 0737  
                             l1775 0722                               l1767 0713  
                             l2591 01E9                               l2583 01D4  
                             l2575 0197                               l2567 016D  
                             l2559 0155                               l2655 0C84  
                             l2751 05C6                               l2743 05A6  
                             l2807 0587                               l2823 0E32  
                             l2663 0D10                               l2817 06D8  
                             l2809 06B5                               l2497 0DE4  
                             l2489 0DD4                               l2649 0F04  
                             l2673 0C25                               l2761 0655  
                             l2729 0F47                               l1793 0754  
                             l1785 0739                               l1777 0727  
                             l1769 0717                               l2593 01F2  
                             l2585 01DA                               l2577 0199  
                             l2569 0179                               l2657 0C91  
                             l2681 0CA2                               l2753 05CE  
                             l2745 05B0                               l2737 058D  
                             l2825 0E38                               l2833 0E4A  
                             l2841 0FCC                               l2665 0D3A  
                             l2667 0B17                               l2499 0DE7  
                             l2675 0C27                               l2771 067D  
                             l2763 0667                               l1787 073D  
                             l1779 072D                               l1795 075A  
                             l2595 0206                               l2587 01DF  
                             l2579 01A0                               l2659 0C9F  
                             l2691 0CBB                               l2683 0CA6  
                             l2755 05DD                               l2747 05B5  
                             l2739 059F                               l2827 0E3E  
                             l2835 0E5D                               l2819 0E26  
                             l2843 0FDD                               l2923 0DAB  
                             l2677 0C29                               l2669 0C1A  
                             l2781 06A6                               l2773 0685  
                             l1797 075F                               l1789 0747  
                             l2589 01E4                               l2597 020A  
                             l2685 0CAA                               l2757 05E6  
                             l2749 05BD                               l2829 0E44  
                             l2845 0FEC                               l2837 0FB6  
                             l1965 0CC6                               l2853 04BC  
                             ?_map 0034                               l2679 0C31  
                             l2775 068E                               l2767 066E  
                             l1799 0764                               l2599 0211  
                             l2687 0CAC                               l2759 05EC  
                             l2791 0545                               l2783 0522  
                             l2847 0FF1                               l2839 0FC3  
                             l1967 0CD2                               l2695 0B5C  
                             l2855 04D6                               l2871 0242  
                             l2863 0233                               l2777 0696  
                             l2769 0678                               l2689 0CAE  
                             l2697 0E9F                               l2793 054A  
                             l2785 0534                               l1969 0CE2  
                             l2857 04EA                               l2849 04A7  
                             l2881 0253                               l2873 0243  
                             l2865 023D                               l2779 069C  
                             l2699 0EA7                               l2795 0552  
                             l2859 050E                               l2891 027B  
                             l2883 0262                               l2875 0244  
                             l2867 0240                               l2797 055B  
                             l2789 053B                               l2893 0286  
                             l2885 026C                               l2877 0249  
                             l2869 0241                               l2799 0563  
                             l2895 02AC                               l2887 0270  
                             l2879 024E                               l2897 02BB  
                             l2889 0276                               l2899 02C2  
                             STR_1 0481                               STR_2 0493  
                             STR_3 0487                               STR_4 0498  
                             STR_5 04A1                               STR_6 049D  
                             STR_7 048D                               STR_8 0432  
                             STR_9 045A                               u2000 0D7F  
                             u1200 0632                               u2001 0D7E  
                             u1201 0631                               u2010 0F81  
                             u2011 0F80                               u1220 0646  
                             u1140 05F7                               u2020 0F89  
                             u2100 0B96                               u1221 0645  
                             u1205 062E                               u1141 05F6  
                             u2021 0F88                               u2101 0B95  
                             u1230 064B                               u1150 0602  
                             u1310 075A                               u2110 0BBC  
                             u2030 0F8E                               u1231 064A  
                             u1215 063A                               u1151 0601  
                             u1311 0759                               u2111 0BBB  
                             u2031 0F8D                               u1160 0611  
                             u1320 075F                               u1240 0717  
                             u2120 0E6A                               u2040 0F94  
                             u1161 0610                               u1321 075E  
                             u1305 074E                               u1241 0716  
                             u2121 0E69                               u2041 0F93  
                             u1250 0722                               u1330 02E0  
                             u2130 0E76                               u2050 0F99  
                             u1251 0721                               u1331 02DF  
                             u2131 0E75                               u2051 0F98  
                             u1180 0621                               u1260 072D  
                             u1340 02E6                               u2140 0E7C  
                             u2060 0FA1                               u1181 0620  
                             u1261 072C                               u1341 02E5  
                             u2141 0E7B                               u2061 0FA0  
                             u1350 0307                               u2310 07C5  
                             u2150 0E8A                               u2070 0FA6  
                             u1175 0615                               u1351 0306  
                             u2311 07C4                               u2151 0E89  
                             u2071 0FA5                               u1280 073D  
                             u1360 0339                               u2400 03C1  
                             u2160 0E9D                               u2080 0FAD  
                             u2305 0DC9                               u1281 073C  
                             u1361 0338                               u2401 03C0  
                             u2321 07CE                               u2161 0E9C  
                             u2081 0FAC                               u2250 0C40  
                             u1290 0747                               u1370 035C  
                             u2322 07D5                               u2090 0FB2  
                             u2251 0C3F                               u1195 0622  
                             u1291 0746                               u1275 0731  
                             u2323 07DC                               u2155 0E86  
                             u2091 0FB1                               u2260 0C4B  
                             u2500 019F                               u2420 03DC  
                             u2261 0C4A                               u1365 0335  
                             u2421 03DB                               u2165 0E99  
                             u2270 0C52                               u2510 01DA  
                             u2350 07F6                               u2271 0C51  
                             u1295 0743                               u2511 01D9  
                             u2415 03C3                               u2351 07F5  
                             u2335 07DE                               u2280 0C59  
                             u2520 01DF                               u2440 03FA  
                             u2360 0381                               u2600 0130  
                             u2281 0C58                               u2521 01DE  
                             u2441 03F9                               u2425 03D8  
                             u2361 0380                               u2345 07E6  
                             u2601 0131                               u1810 0B39  
                             u2610 0771                               u2290 0B70  
                             u2530 01E4                               u1650 0CDD  
                             u2450 03FF                               u2370 0392  
                             u2602 0136                               u1811 0B38  
                             u2611 0770                               u2291 0B6F  
                             u2531 01E3                               u1651 0CDC  
                             u2451 03FE                               u2435 03EC  
                             u2371 0391                               u2603 0137  
                             u1820 0B47                               u2540 01E9  
                             u2460 0155                               u2700 0EAD  
                             u1660 0CE2                               u2380 03AF  
                             u1821 0B46                               u2541 01E8  
                             u2461 0154                               u2701 0EAC  
                             u1661 0CE1                               u2381 03AE  
                             u2630 0797                               u2710 0F31  
                             u2550 0210                               u2470 0179  
                             u1830 0E01                               u2631 0796  
                             u2711 0F30                               u2551 020F  
                             u2471 0178                               u1831 0E00  
                             u2720 0F37                               u2480 0185  
                             u1840 0B83                               u2800 04BB  
                             u2625 0777                               u2721 0F36  
                             u2481 0184                               u2561 006F  
                             u1841 0B82                               u2801 04BA  
                             u2650 0EF2                               u2490 019E  
                             u2730 059F                               u2570 008C  
                             u2562 0070                               u1850 0BD0  
                             u2810 04EA                               u2491 019C  
                             u2731 059E                               u2395 03B4  
                             u2571 008B                               u2563 0075  
                             u1851 0BCF                               u2811 04E9  
                             u2660 0F16                               u2740 05A5  
                             u2564 0076                               u2820 050E  
                             u2645 079D                               u2741 05A4  
                             u2581 00AF                               u2565 007B  
                             u2821 050D                               u2670 0F28  
                             u2750 0667                               u2582 00B0  
                             u2566 007C                               u1790 0C6F  
                             u2830 0270                               u2671 0F27  
                             u2751 0666                               u2735 059B  
                             u2591 00DD                               u2583 00B5  
                             u1791 0C6E                               u2815 04E6  
                             u2831 026F                               u2760 066D  
                             u2680 0C9F                               u2592 00DE  
                             u2584 00B6                               u2840 02BB  
                             u2761 066C                               u2681 0C9E  
                             u2593 00E3                               u2585 00BB  
                             u2841 02BA                               u1970 0D6A  
                             u2770 069C                               u2690 0EA7  
                             u2594 00E4                               u2586 00BC  
                             u2850 02CF                               u1971 0D69  
                             u2907 0DE9                               u2771 069B  
                             u2755 0663                               u2691 0EA6  
                             u2595 00E9                               u2851 02CE  
                             u1980 0D6F                               u2780 0534  
                             u2596 00EA                               u2917 06BF  
                             u1981 0D6E                               u2781 0533  
                             u2845 02B7                               u1990 0D7A  
                             u2790 053A                               u2927 06CE  
                             u1991 0D79                               u2791 0539  
                             u2855 02CB                               u2937 06DC  
                             u2785 0530                               u2947 0BF2  
                             u2867 0CD4                               u2877 0FE5  
                             u2887 0FF9                               u2897 0DD9  
                             abs@a 0078                  ?_Lcd_Write_String 0077  
                             _dbuf 00A0                               _main 0233  
                             _prec 00C5                               map@x 0034  
                             btemp 007E                     ?_lcd_turnRight 0070  
                 __end_of_ADC_Read 0CE9                               start 000C  
               ??_Lcd_Write_String 0020                   __end_of_ADC_init 0B17  
                  __end_of_Lcd_Cmd 0BFB                              ??_abs 0020  
                            ??_map 003E                    __end_of___aldiv 0413  
                            ?_main 0070                    __end_of___awdiv 0655  
                            STR_10 044D                              STR_11 04A4  
                            STR_12 0423                              STR_13 0468  
                            STR_14 0465                              STR_15 0440  
                            STR_16 04A4                              STR_17 046F  
                            STR_18 0479                    __end_of___awmod 0769  
                  ___awdiv@divisor 0072                     ??_lcd_turnLeft 0072  
                            i1l251 0D09                              i1l248 0CF8  
                  ___awdiv@counter 0076                       vfpfcnvrt@fmt 002B  
                            _TMR1H 000F                              _TMR1L 000E  
          __end_of_timer1_1ms_init 0B0A                              _TRISA 0085  
                            _TRISB 0086                              _TRISC 0087  
                            _TRISD 0088                ___lmul@multiplicand 0076  
               _print_SoilMoisture 058D                    __end_of_lcd_run 0E62  
                            _flags 0064                              _light 005E  
                            _fputc 02DA                              _width 00C3  
                            _putch 0003                              fpbase 004A  
                   __pbitbssCOMMON 03D0                              pclath 000A  
              ?_print_SoilMoisture 0070                    _irrigationState 006D  
                 __end_of_WDT_init 0AD4                              status 0003  
                            wtemp0 007E                    __end_of_sprintf 0CC5  
         __end_of_check_TankStatus 0FB6                   __end_of_Lcd_Init 0712  
                 __end_of_Lcd_Port 0C5D                _lastLeftButtonState 0069  
                  __initialization 000F                       __end_of_main 02DA  
                entry__ADC_readAll 004E               ??_print_SoilMoisture 007A  
                           ??_main 007A           ?_interrupt_IRRIG_timeout 0070  
                  _readTemperature 0D3A                  _leftButtonPressed 03D4  
                           ?_fputc 0072                             _ADRESH 001E  
                           _ADRESL 009E                      _lastTankState 006E  
                 ___awdiv@dividend 0074                             ?_putch 0070  
                           i1l2383 0CE9                             i1l2385 0CED  
                           i1l2387 0CFE                             i1l2389 0D03  
                           u220_20 0CED                             u220_21 0CEC  
                           u221_20 0CFE                             u221_21 0CFD  
                  ??_lcd_turnRight 0072                          ??_Lcd_Cmd 0073  
                    vfpfcnvrt@done 002F                   __end_of__fptable 0054  
                     vfprintf@cfmt 003A                             ___lmul 07B7  
                        ??___aldiv 002D                          ??___awdiv 0076  
                        ??___awmod 0076                    ADC_Read@channel 0075  
                 ___awdiv@quotient 0078                    ___awmod@divisor 0072  
                  ___awmod@counter 0076                             map@run 004E  
                        ??_lcd_run 007A                             fptable 0045  
                           fputc@c 0072                       __pdataCOMMON 007B  
                           fptotal 0006                   ?_timer1_1ms_init 0070  
                 _print_Irrigation 0F29                          ?_ADC_Read 0072  
                           saved_w 007E                          ?_ADC_init 0070  
                 __end_of_runTimer 0522                             putch@c 0070  
                 __end_of_vfprintf 0CA2                          ??_sprintf 003F  
                  Lcd_Set_Cursor@a 0020                    Lcd_Set_Cursor@b 0076  
                  Lcd_Set_Cursor@y 0022                    Lcd_Set_Cursor@z 0021  
             draw_Index@temp_index 0025              _print_ArtificialLight 0655  
          __end_of__initialization 0041                  __end_of_Lcd_Clear 0B24  
             __end_of_lcd_turnLeft 0B3F                    _startIrrigation 0BB8  
                   __pcstackCOMMON 0070                       __pidataBANK0 0AEC  
                     __pidataBANK1 0BFB        __end_of_interruptionHandler 0D10  
                    __end_of_fputc 037A                      __end_of_putch 0004  
          __end_of_readTemperature 0D64                      runTimer@timer 0052  
             _flag_emergencyButton 03D2                          ?_WDT_init 0070  
                   _Lcd_Set_Cursor 0769                     _OPTION_REGbits 0081  
                       ??_ADC_Read 0074                _timer_WTANK_Timeout 00E0  
                       ??_ADC_init 0072                          ?_Lcd_Init 0070  
                     ?_stopFilling 0070                          ?_Lcd_Port 0070  
                          ??_fputc 0020                            ??_putch 0072  
                       __pbssBANK0 005C                         __pbssBANK1 00A0  
                       __pmaintext 0233                  ??_print_Emergency 0025  
                          ?___lmul 0072                         __pintentry 0004  
                   ___lmul@product 0021             __end_of_Lcd_Set_Cursor 07B7  
                       ??_WDT_init 0072                     stopTimer@timer 0072  
                 _readSoilMoisture 0D10                         _draw_Index 0C1A  
                       ??_Lcd_Init 0076                         ??_Lcd_Port 0072  
                   _stopIrrigation 0BCC                  ??_print_TankState 0079  
           ?_print_ArtificialLight 0070                         __stringtab 0413  
                   _Lcd_Write_Char 0DBA                            _Lcd_Cmd 0BE1  
          __end_of_startIrrigation 0BCC                 _rightButtonPressed 03D3  
                    ??_ADC_readAll 007A                  ?_check_TankStatus 0070  
                          ___aldiv 037A                            ___awdiv 05F2  
               ??_check_TankStatus 0072                            ___awmod 0712  
                        ?_runTimer 0052                          ?_vfprintf 0036  
                 ?_readTemperature 0070                    ?_Lcd_Set_Cursor 0076  
                          __ptext1 0AFF                            __ptext2 0D8F  
                          __ptext3 0B92                            __ptext4 0F6F  
                          __ptext5 0E62                            __ptext6 0BB8  
                          __ptext7 0DEF                            __ptext8 04A7  
                          __ptext9 0AF5                            _lcd_run 0E26  
                        _T1CONbits 0010                  __end_of_readLight 0B31  
                 ___awmod@dividend 0074                   ___aldiv@dividend 0029  
                 _timer_ADCReadAll 00D4             __end_of_stopIrrigation 0BE1  
          _interrupt_WTANK_timeout 0ADC         fp__interrupt_WTANK_timeout 004B  
                          map@rise 0046                            _sprintf 0CA2  
                          clrloop0 0AE5             __end_of_Lcd_Write_Char 0DEF  
             end_of_initialization 0041                    draw_Index@F1445 00C0  
                          fputc@fp 0074                  __end_of_pins_init 0B5C  
                     _lcd_maxIndex 006B           __end_of_print_Irrigation 0F6F  
                __end_of_vfpfcnvrt 0233                   ___aldiv@quotient 0030  
                 vfpfcnvrt@convarg 0031                          Lcd_Port@a 0072  
                       ??_runTimer 0054                         ??_vfprintf 007A  
              __end_of_ADC_readAll 0B6C                  __end_of_stopTimer 0C7F  
                        _PORTBbits 0006                          _PORTCbits 0007  
              _run_IrrigationLogic 0E62                       _lcd_turnLeft 0B31  
                     _isIrrigating 03D0                        ?_draw_Index 0070  
                        _TRISCbits 0087                    ?_stopIrrigation 0070  
run_IrrigationLogic@sMoistureValue 0076                    ?_Lcd_Write_Char 0070  
                       _startTimer 0DEF                _timer_IRRIG_Timeout 00DA  
                Lcd_Write_String@a 0077                  Lcd_Write_String@i 0023  
                       map@out_max 003C                         map@out_min 003A  
                 ?_startIrrigation 0070              __end_of_lcd_turnRight 0B4D  
             ?_run_IrrigationLogic 0076         __end_of_run_waterTankLogic 0DBA  
                _print_Temperature 0522            print_Temperature@buffer 004C  
                        _Lcd_Clear 0B17                 ?_print_Temperature 0070  
                   __end_of___lmul 07FF                        vfpfcnvrt@ap 002C  
                      vfpfcnvrt@cp 0030                        vfpfcnvrt@fp 0029  
                 _Lcd_Write_String 0EE3                      __pidataCOMMON 07FF  
              ??_print_Temperature 007A                      ?_startFilling 0070  
        ??_interrupt_WTANK_timeout 0076                start_initialization 000F  
              _lcd_debounceButtons 0D64                    pins_init@_TRISA 0075  
                  pins_init@_TRISB 0072                    pins_init@_TRISC 0073  
                  pins_init@_TRISD 0074                        __end_of_abs 0B7F  
                      __end_of_map 0144                    _print_Emergency 0FB6  
        __end_of_print_Temperature 058D              ??_run_IrrigationLogic 0078  
             ?_lcd_debounceButtons 0070           __end_of_readSoilMoisture 0D3A  
                      _ADC_readAll 0B5C           print_SoilMoisture@buffer 004C  
                      vfprintf@fmt 0038                check_TankStatus@bot 0074  
                       ?_Lcd_Clear 0070                check_TankStatus@top 0073  
                         ??___lmul 0020                         init_fetch0 0BA5  
            _IrrigationStateString 00CB                        __pdataBANK0 0066  
                      __pdataBANK1 00C7                    Lcd_Write_Char@a 0076  
                  Lcd_Write_Char@y 0075                    _print_TankState 0E9F  
                   ??_startFilling 0076                          ___latbits 0002  
          ??_print_ArtificialLight 0079                      __pcstackBANK0 0020  
                __size_of__fptable 000F                        ?_startTimer 0072  
          _interrupt_IRRIG_timeout 0AF5         fp__interrupt_IRRIG_timeout 0051  
                         ?_Lcd_Cmd 0070    __end_of_interrupt_WTANK_timeout 0AE4  
            ??_lcd_debounceButtons 0072                   ??_Lcd_Set_Cursor 0077  
                        __pfunctab 0045                    _TankStateString 00C7  
                         ?___aldiv 0025                           ?___awdiv 0072  
                         ?___awmod 0072                          _isFilling 03D1  
                        _lcd_index 006A                          __pstrings 0413  
                         ?_lcd_run 0070                    startTimer@timer 0072  
          __end_of_print_Emergency 1000                           _ADC_Read 0CC5  
                         _ADC_init 0B0A                          _readLight 0B24  
                         ?_sprintf 003B                          _old_light 00CE  
                  ___aldiv@divisor 0025                  interrupt_function 0004  
                  ___aldiv@counter 002E                  _interruption_init 0AD4  
                        _tankState 007B                          clear_ram0 0AE4  
                         _PIE1bits 008C                 ?_interruption_init 0070  
                        _pins_init 0B4D                           Lcd_Cmd@a 0075  
                ??_timer1_1ms_init 0072                           _PIR1bits 000C  
                ?_print_Irrigation 0070            __end_of_print_TankState 0EE3  
                      ??_Lcd_Clear 0076                      _idealHumidity 0066  
               ??_print_Irrigation 0079                ??_interruption_init 0072  
                        _vfpfcnvrt 0144                          map@in_max 0038  
                        map@in_min 0036                   ??_stopIrrigation 0076  
                       _ADCON0bits 001F                        __stringbase 0422  
                       _ADCON1bits 009F                           _WDT_init 0ACC  
                 ??_Lcd_Write_Char 0073                          _stopTimer 0C5D  
                     ??_draw_Index 0079                           _Lcd_Init 06B5  
                       ?_readLight 0070                           _Lcd_Port 0C3B  
        ??_interrupt_IRRIG_timeout 0076                         vfpfcnvrt@c 0035  
                ___lmul@multiplier 0072               _lastRightButtonState 0068  
        __end_of_interruption_init 0ADC           __end_of_Lcd_Write_String 0F29  
                 _old_soilMoisture 00D2               __end_of_startFilling 0BA5  
                       ?_pins_init 0072                         vfprintf@ap 0039  
                       vfprintf@fp 0036                        _minHumidity 0067  
       __end_of_print_SoilMoisture 05F2                 __end_of_draw_Index 0C3B  
                       ?_vfpfcnvrt 0029                 __end_of__stringtab 0423  
               _run_waterTankLogic 0D8F                     fp__ADC_readAll 004E  
                       sprintf@fmt 003C                           __fptable 0045  
                       ?_stopTimer 0072                   ?_print_Emergency 0070  
                    ??_stopFilling 0076                           __ptext10 0B5C  
                         __ptext11 0ADC                           __ptext20 0B24  
                         __ptext12 0B7F                           __ptext21 0CC5  
                         __ptext13 0BCC                           __ptext30 0144  
                         __ptext22 0FB6                           __ptext14 0C5D  
                         __ptext31 02DA                           __ptext23 0B4D  
                         __ptext15 0D3A                           __ptext40 0DBA  
                         __ptext32 0003                           __ptext24 0E26  
                         __ptext16 0D10                           __ptext41 0769  
                         __ptext33 0B6C                           __ptext25 0522  
                         __ptext17 0054                           __ptext50 0C3B  
                         __ptext42 0B17                           __ptext34 0712  
                         __ptext26 0E9F                           __ptext18 07B7  
                         __ptext51 0B0A                           __ptext43 0D64  
                         __ptext35 05F2                           __ptext27 058D  
                         __ptext19 037A                ?_run_waterTankLogic 0070  
                         __ptext52 0CE9                           __ptext44 0B3F  
                         __ptext36 0F29                           __ptext28 0CA2  
                         __ptext45 0B31                           __ptext37 0655  
                         __ptext29 0C7F                           __ptext46 0AD4  
                         __ptext38 0C1A                           __ptext47 0ACC  
                         __ptext39 0EE3                           __ptext48 06B5  
                         __ptext49 0BE1                runTimer@elapsedTime 0058  
              _interruptionHandler 0CE9                       ?_ADC_readAll 0070  
                ?_readSoilMoisture 0070               ??_run_waterTankLogic 0076  
                 ?_print_TankState 0070    __end_of_interrupt_IRRIG_timeout 0AFF  
                         map@delta 004A                           _runTimer 04A7  
                  _old_temperature 00D0                 ??_readSoilMoisture 007A  
                         _vfprintf 0C7F               ?_interruptionHandler 0070  
                       _INTCONbits 000B                   _check_TankStatus 0F6F  
                         init_ram0 0BA9                        ??_readLight 0076  
    __end_of_print_ArtificialLight 06B5                       ??_startTimer 0074  
      __end_of_run_IrrigationLogic 0E9F                 Lcd_Write_Char@temp 0074  
                         intlevel1 0045                          sprintf@ap 0040  
                     _timerCounter 005C                      _lcd_lastIndex 0065  
              __end_of_stopFilling 0B92                  ??_readTemperature 007A  
                        stringcode 041D                        ??_pins_init 0075  
                      ??_vfpfcnvrt 002D           ?_interrupt_WTANK_timeout 0070  
                     _soilMoisture 0062                 Lcd_Set_Cursor@temp 0023  
               __end_of_startTimer 0E26                _lastIrrigationState 006C  
            ??_interruptionHandler 0070                        _temperature 0060  
                         sprintf@f 0041                           sprintf@s 003B  
                      ??_stopTimer 0074                           stringdir 041D  
                         stringtab 0413                       ___aldiv@sign 002F  
                  _timer1_1ms_init 0AFF        __end_of_lcd_debounceButtons 0D8F  
                    _lcd_turnRight 0B3F  
