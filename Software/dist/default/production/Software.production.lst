

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Mon Dec 09 03:20:02 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,space=0,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,space=0,delta=2,noexec
     6                           	psect	idataBANK1,global,class=CODE,space=0,delta=2,noexec
     7                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     8                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     9                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1,noexec
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	inittext,global,class=CODE,space=0,delta=2
    16                           	psect	clrtext,global,class=CODE,space=0,delta=2
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    20                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2,group=3
    32                           	psect	text13,local,class=CODE,space=0,merge=1,delta=2,group=1
    33                           	psect	text14,local,class=CODE,space=0,merge=1,delta=2,group=1
    34                           	psect	text15,local,class=CODE,space=0,merge=1,delta=2,group=3
    35                           	psect	text16,local,class=CODE,space=0,merge=1,delta=2,group=3
    36                           	psect	text17,local,class=CODE,space=0,merge=1,delta=2,group=3
    37                           	psect	text18,local,class=CODE,space=0,merge=1,delta=2,group=2
    38                           	psect	text19,local,class=CODE,space=0,merge=1,delta=2,group=2
    39                           	psect	text20,local,class=CODE,space=0,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,space=0,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,space=0,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,space=0,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,space=0,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,space=0,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,space=0,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,space=0,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,space=0,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,space=0,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,space=0,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,space=0,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,space=0,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,space=0,merge=1,delta=2
    53                           	psect	intentry,global,class=CODE,space=0,delta=2
    54                           	psect	text34,local,class=CODE,space=0,merge=1,delta=2
    55                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    56                           	dabs	1,0x7E,2
    57     0000                     
    58                           ; Generated 12/10/2023 GMT
    59                           ; 
    60                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution. Publication is not required when
    74                           ;        this file is used in an embedded application.
    75                           ; 
    76                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    77                           ;        software without specific prior written permission.
    78                           ; 
    79                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    80                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    81                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    82                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    83                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    84                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    85                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    86                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    87                           ; 
    88                           ; 
    89                           ; Code-generator required, PIC16F877A Definitions
    90                           ; 
    91                           ; SFR Addresses
    92     0004                     fsr             equ	4
    93     0004                     fsr0            equ	4
    94     0000                     indf            equ	0
    95     0000                     indf0           equ	0
    96     0002                     pc              equ	2
    97     0002                     pcl             equ	2
    98     000A                     pclath          equ	10
    99     0003                     status          equ	3
   100     0000                     INDF            equ	0	;# 
   101     0001                     TMR0            equ	1	;# 
   102     0002                     PCL             equ	2	;# 
   103     0003                     STATUS          equ	3	;# 
   104     0004                     FSR             equ	4	;# 
   105     0005                     PORTA           equ	5	;# 
   106     0006                     PORTB           equ	6	;# 
   107     0007                     PORTC           equ	7	;# 
   108     0008                     PORTD           equ	8	;# 
   109     0009                     PORTE           equ	9	;# 
   110     000A                     PCLATH          equ	10	;# 
   111     000B                     INTCON          equ	11	;# 
   112     000C                     PIR1            equ	12	;# 
   113     000D                     PIR2            equ	13	;# 
   114     000E                     TMR1            equ	14	;# 
   115     000E                     TMR1L           equ	14	;# 
   116     000F                     TMR1H           equ	15	;# 
   117     0010                     T1CON           equ	16	;# 
   118     0011                     TMR2            equ	17	;# 
   119     0012                     T2CON           equ	18	;# 
   120     0013                     SSPBUF          equ	19	;# 
   121     0014                     SSPCON          equ	20	;# 
   122     0015                     CCPR1           equ	21	;# 
   123     0015                     CCPR1L          equ	21	;# 
   124     0016                     CCPR1H          equ	22	;# 
   125     0017                     CCP1CON         equ	23	;# 
   126     0018                     RCSTA           equ	24	;# 
   127     0019                     TXREG           equ	25	;# 
   128     001A                     RCREG           equ	26	;# 
   129     001B                     CCPR2           equ	27	;# 
   130     001B                     CCPR2L          equ	27	;# 
   131     001C                     CCPR2H          equ	28	;# 
   132     001D                     CCP2CON         equ	29	;# 
   133     001E                     ADRESH          equ	30	;# 
   134     001F                     ADCON0          equ	31	;# 
   135     0081                     OPTION_REG      equ	129	;# 
   136     0085                     TRISA           equ	133	;# 
   137     0086                     TRISB           equ	134	;# 
   138     0087                     TRISC           equ	135	;# 
   139     0088                     TRISD           equ	136	;# 
   140     0089                     TRISE           equ	137	;# 
   141     008C                     PIE1            equ	140	;# 
   142     008D                     PIE2            equ	141	;# 
   143     008E                     PCON            equ	142	;# 
   144     0091                     SSPCON2         equ	145	;# 
   145     0092                     PR2             equ	146	;# 
   146     0093                     SSPADD          equ	147	;# 
   147     0094                     SSPSTAT         equ	148	;# 
   148     0098                     TXSTA           equ	152	;# 
   149     0099                     SPBRG           equ	153	;# 
   150     009C                     CMCON           equ	156	;# 
   151     009D                     CVRCON          equ	157	;# 
   152     009E                     ADRESL          equ	158	;# 
   153     009F                     ADCON1          equ	159	;# 
   154     010C                     EEDATA          equ	268	;# 
   155     010D                     EEADR           equ	269	;# 
   156     010E                     EEDATH          equ	270	;# 
   157     010F                     EEADRH          equ	271	;# 
   158     018C                     EECON1          equ	396	;# 
   159     018D                     EECON2          equ	397	;# 
   160     0000                     INDF            equ	0	;# 
   161     0001                     TMR0            equ	1	;# 
   162     0002                     PCL             equ	2	;# 
   163     0003                     STATUS          equ	3	;# 
   164     0004                     FSR             equ	4	;# 
   165     0005                     PORTA           equ	5	;# 
   166     0006                     PORTB           equ	6	;# 
   167     0007                     PORTC           equ	7	;# 
   168     0008                     PORTD           equ	8	;# 
   169     0009                     PORTE           equ	9	;# 
   170     000A                     PCLATH          equ	10	;# 
   171     000B                     INTCON          equ	11	;# 
   172     000C                     PIR1            equ	12	;# 
   173     000D                     PIR2            equ	13	;# 
   174     000E                     TMR1            equ	14	;# 
   175     000E                     TMR1L           equ	14	;# 
   176     000F                     TMR1H           equ	15	;# 
   177     0010                     T1CON           equ	16	;# 
   178     0011                     TMR2            equ	17	;# 
   179     0012                     T2CON           equ	18	;# 
   180     0013                     SSPBUF          equ	19	;# 
   181     0014                     SSPCON          equ	20	;# 
   182     0015                     CCPR1           equ	21	;# 
   183     0015                     CCPR1L          equ	21	;# 
   184     0016                     CCPR1H          equ	22	;# 
   185     0017                     CCP1CON         equ	23	;# 
   186     0018                     RCSTA           equ	24	;# 
   187     0019                     TXREG           equ	25	;# 
   188     001A                     RCREG           equ	26	;# 
   189     001B                     CCPR2           equ	27	;# 
   190     001B                     CCPR2L          equ	27	;# 
   191     001C                     CCPR2H          equ	28	;# 
   192     001D                     CCP2CON         equ	29	;# 
   193     001E                     ADRESH          equ	30	;# 
   194     001F                     ADCON0          equ	31	;# 
   195     0081                     OPTION_REG      equ	129	;# 
   196     0085                     TRISA           equ	133	;# 
   197     0086                     TRISB           equ	134	;# 
   198     0087                     TRISC           equ	135	;# 
   199     0088                     TRISD           equ	136	;# 
   200     0089                     TRISE           equ	137	;# 
   201     008C                     PIE1            equ	140	;# 
   202     008D                     PIE2            equ	141	;# 
   203     008E                     PCON            equ	142	;# 
   204     0091                     SSPCON2         equ	145	;# 
   205     0092                     PR2             equ	146	;# 
   206     0093                     SSPADD          equ	147	;# 
   207     0094                     SSPSTAT         equ	148	;# 
   208     0098                     TXSTA           equ	152	;# 
   209     0099                     SPBRG           equ	153	;# 
   210     009C                     CMCON           equ	156	;# 
   211     009D                     CVRCON          equ	157	;# 
   212     009E                     ADRESL          equ	158	;# 
   213     009F                     ADCON1          equ	159	;# 
   214     010C                     EEDATA          equ	268	;# 
   215     010D                     EEADR           equ	269	;# 
   216     010E                     EEDATH          equ	270	;# 
   217     010F                     EEADRH          equ	271	;# 
   218     018C                     EECON1          equ	396	;# 
   219     018D                     EECON2          equ	397	;# 
   220     0000                     INDF            equ	0	;# 
   221     0001                     TMR0            equ	1	;# 
   222     0002                     PCL             equ	2	;# 
   223     0003                     STATUS          equ	3	;# 
   224     0004                     FSR             equ	4	;# 
   225     0005                     PORTA           equ	5	;# 
   226     0006                     PORTB           equ	6	;# 
   227     0007                     PORTC           equ	7	;# 
   228     0008                     PORTD           equ	8	;# 
   229     0009                     PORTE           equ	9	;# 
   230     000A                     PCLATH          equ	10	;# 
   231     000B                     INTCON          equ	11	;# 
   232     000C                     PIR1            equ	12	;# 
   233     000D                     PIR2            equ	13	;# 
   234     000E                     TMR1            equ	14	;# 
   235     000E                     TMR1L           equ	14	;# 
   236     000F                     TMR1H           equ	15	;# 
   237     0010                     T1CON           equ	16	;# 
   238     0011                     TMR2            equ	17	;# 
   239     0012                     T2CON           equ	18	;# 
   240     0013                     SSPBUF          equ	19	;# 
   241     0014                     SSPCON          equ	20	;# 
   242     0015                     CCPR1           equ	21	;# 
   243     0015                     CCPR1L          equ	21	;# 
   244     0016                     CCPR1H          equ	22	;# 
   245     0017                     CCP1CON         equ	23	;# 
   246     0018                     RCSTA           equ	24	;# 
   247     0019                     TXREG           equ	25	;# 
   248     001A                     RCREG           equ	26	;# 
   249     001B                     CCPR2           equ	27	;# 
   250     001B                     CCPR2L          equ	27	;# 
   251     001C                     CCPR2H          equ	28	;# 
   252     001D                     CCP2CON         equ	29	;# 
   253     001E                     ADRESH          equ	30	;# 
   254     001F                     ADCON0          equ	31	;# 
   255     0081                     OPTION_REG      equ	129	;# 
   256     0085                     TRISA           equ	133	;# 
   257     0086                     TRISB           equ	134	;# 
   258     0087                     TRISC           equ	135	;# 
   259     0088                     TRISD           equ	136	;# 
   260     0089                     TRISE           equ	137	;# 
   261     008C                     PIE1            equ	140	;# 
   262     008D                     PIE2            equ	141	;# 
   263     008E                     PCON            equ	142	;# 
   264     0091                     SSPCON2         equ	145	;# 
   265     0092                     PR2             equ	146	;# 
   266     0093                     SSPADD          equ	147	;# 
   267     0094                     SSPSTAT         equ	148	;# 
   268     0098                     TXSTA           equ	152	;# 
   269     0099                     SPBRG           equ	153	;# 
   270     009C                     CMCON           equ	156	;# 
   271     009D                     CVRCON          equ	157	;# 
   272     009E                     ADRESL          equ	158	;# 
   273     009F                     ADCON1          equ	159	;# 
   274     010C                     EEDATA          equ	268	;# 
   275     010D                     EEADR           equ	269	;# 
   276     010E                     EEDATH          equ	270	;# 
   277     010F                     EEADRH          equ	271	;# 
   278     018C                     EECON1          equ	396	;# 
   279     018D                     EECON2          equ	397	;# 
   280                           
   281                           	psect	idataCOMMON
   282     0FAA                     __pidataCOMMON:
   283                           
   284                           ;initializer for _lastRightButtonState
   285     0FAA  3401               	retlw	1
   286                           
   287                           ;initializer for _lastLeftButtonState
   288     0FAB  3401               	retlw	1
   289                           
   290                           	psect	idataBANK0
   291     0FAC                     __pidataBANK0:
   292                           
   293                           ;initializer for _lastIrrigationState
   294     0FAC  34FF               	retlw	-1
   295                           
   296                           ;initializer for _lcd_index
   297     0FAD  3401               	retlw	1
   298                           
   299                           ;initializer for _irrigationState
   300     0FAE  3401               	retlw	1
   301                           
   302                           ;initializer for _lastTankState
   303     0FAF  34FF               	retlw	-1
   304                           
   305                           ;initializer for _tankState
   306     0FB0  3401               	retlw	1
   307                           
   308                           	psect	idataBANK1
   309     05D5                     __pidataBANK1:
   310                           
   311                           ;initializer for _TankStateString
   312     05D5  340D               	retlw	low ((STR_1-__stringbase)| (0+32768))
   313     05D6  3419               	retlw	low ((STR_2-__stringbase)| (0+32768))
   314     05D7  3413               	retlw	low ((STR_3-__stringbase)| (0+32768))
   315     05D8  341E               	retlw	low ((STR_4-__stringbase)| (0+32768))
   316                           
   317                           ;initializer for _timer_WTANK_timeout
   318     05D9  3498               	retlw	152
   319     05DA  343A               	retlw	58
   320     05DB  3400               	retlw	0
   321     05DC  3400               	retlw	0
   322     05DD  3400               	retlw	0
   323     05DE  3400               	retlw	0
   324                           
   325                           ;initializer for _timer_lcdButtons
   326     05DF  340A               	retlw	10
   327     05E0  3400               	retlw	0
   328     05E1  3400               	retlw	0
   329     05E2  3400               	retlw	0
   330     05E3  3401               	retlw	1
   331     05E4  3400               	retlw	0
   332     0007                     _PORTCbits      set	7
   333     000C                     _PIR1bits       set	12
   334     0006                     _PORTBbits      set	6
   335     000B                     _INTCONbits     set	11
   336     000E                     _TMR1L          set	14
   337     000F                     _TMR1H          set	15
   338     0010                     _T1CONbits      set	16
   339     001E                     _ADRESH         set	30
   340     001F                     _ADCON0bits     set	31
   341     0043                     _RD3            set	67
   342     0042                     _RD2            set	66
   343     0047                     _RD7            set	71
   344     0046                     _RD6            set	70
   345     0045                     _RD5            set	69
   346     0044                     _RD4            set	68
   347     00FA                     _GO_nDONE       set	250
   348     008C                     _PIE1bits       set	140
   349     0087                     _TRISCbits      set	135
   350     0088                     _TRISD          set	136
   351     0087                     _TRISC          set	135
   352     0086                     _TRISB          set	134
   353     0085                     _TRISA          set	133
   354     0081                     _OPTION_REGbits set	129
   355     009E                     _ADRESL         set	158
   356     009F                     _ADCON1bits     set	159
   357                           
   358                           	psect	strings
   359     0600                     __pstrings:
   360     0600                     stringtab:
   361     0600                     __stringtab:
   362                           
   363                           ;	String table - string pointers are 1 byte each
   364     0600  1BFF               	btfsc	btemp+1,7
   365     0601  2E0A               	ljmp	stringcode
   366     0602  1383               	bcf	3,7
   367     0603  187F               	btfsc	btemp+1,0
   368     0604  1783               	bsf	3,7
   369     0605  0800               	movf	0,w
   370     0606  0A84               	incf	4,f
   371     0607  1903               	skipnz
   372     0608  0AFF               	incf	btemp+1,f
   373     0609  0008               	return
   374     060A                     stringcode:
   375     060A                     stringdir:
   376     060A  3006               	movlw	high stringdir
   377     060B  008A               	movwf	10
   378     060C  0804               	movf	4,w
   379     060D  0A84               	incf	4,f
   380     060E  0782               	addwf	2,f
   381     060F                     __stringbase:
   382     060F  3400               	retlw	0
   383     0610                     __end_of__stringtab:
   384     0610                     STR_5:
   385     0610  3454               	retlw	84	;'T'
   386     0611  3461               	retlw	97	;'a'
   387     0612  346E               	retlw	110	;'n'
   388     0613  346B               	retlw	107	;'k'
   389     0614  3420               	retlw	32	;' '
   390     0615  3453               	retlw	83	;'S'
   391     0616  3474               	retlw	116	;'t'
   392     0617  3461               	retlw	97	;'a'
   393     0618  3474               	retlw	116	;'t'
   394     0619  3465               	retlw	101	;'e'
   395     061A  343A               	retlw	58	;':'
   396     061B  3400               	retlw	0
   397     061C                     STR_1:
   398     061C  3443               	retlw	67	;'C'
   399     061D  3448               	retlw	72	;'H'
   400     061E  3445               	retlw	69	;'E'
   401     061F  3449               	retlw	73	;'I'
   402     0620  344F               	retlw	79	;'O'
   403     0621  3400               	retlw	0
   404     0622                     STR_3:
   405     0622  3456               	retlw	86	;'V'
   406     0623  3441               	retlw	65	;'A'
   407     0624  345A               	retlw	90	;'Z'
   408     0625  3449               	retlw	73	;'I'
   409     0626  344F               	retlw	79	;'O'
   410     0627  3400               	retlw	0
   411     0628                     STR_2:
   412     0628  344D               	retlw	77	;'M'
   413     0629  3445               	retlw	69	;'E'
   414     062A  3449               	retlw	73	;'I'
   415     062B  344F               	retlw	79	;'O'
   416     062C  3400               	retlw	0
   417     062D                     STR_4:
   418     062D  3445               	retlw	69	;'E'
   419     062E  3452               	retlw	82	;'R'
   420     062F  3452               	retlw	82	;'R'
   421     0630  344F               	retlw	79	;'O'
   422     0631  3400               	retlw	0
   423     0632                     STR_7:
   424     0632  3425               	retlw	37	;'%'
   425     0633  3464               	retlw	100	;'d'
   426     0634  3400               	retlw	0
   427     0635                     STR_6:
   428     0635  3425               	retlw	37	;'%'
   429     0636  3473               	retlw	115	;'s'
   430     0637  3400               	retlw	0
   431                           
   432                           	psect	cinit
   433     0011                     start_initialization:	
   434                           ; #config settings
   435                           
   436     0011                     __initialization:
   437                           
   438                           ; Initialize objects allocated to BANK1
   439     0011  1383               	bcf	3,7	;select IRP bank0
   440     0012  30D6               	movlw	low (__pdataBANK1+16)
   441     0013  00FD               	movwf	btemp+-1
   442     0014  3005               	movlw	high __pidataBANK1
   443     0015  00FE               	movwf	btemp
   444     0016  30D5               	movlw	low __pidataBANK1
   445     0017  00FF               	movwf	btemp+1
   446     0018  30C6               	movlw	low __pdataBANK1
   447     0019  0084               	movwf	4
   448     001A  120A  118A  27D6  120A  118A  	fcall	init_ram0
   449                           
   450                           ; Initialize objects allocated to BANK0
   451     001F  306E               	movlw	low (__pdataBANK0+5)
   452     0020  00FD               	movwf	btemp+-1
   453     0021  300F               	movlw	high __pidataBANK0
   454     0022  00FE               	movwf	btemp
   455     0023  30AC               	movlw	low __pidataBANK0
   456     0024  00FF               	movwf	btemp+1
   457     0025  3069               	movlw	low __pdataBANK0
   458     0026  0084               	movwf	4
   459     0027  120A  118A  27D6  120A  118A  	fcall	init_ram0
   460                           
   461                           ; Initialize objects allocated to COMMON
   462     002C  120A  158A  27AA  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   463     0031  00FC               	movwf	__pdataCOMMON& (0+127)
   464     0032  120A  158A  27AB  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   465     0037  00FD               	movwf	(__pdataCOMMON+1)& (0+127)
   466                           
   467                           ; Clear objects allocated to BANK1
   468     0038  30A0               	movlw	low __pbssBANK1
   469     0039  0084               	movwf	4
   470     003A  30C6               	movlw	low (__pbssBANK1+38)
   471     003B  120A  118A  27F8  120A  118A  	fcall	clear_ram0
   472                           
   473                           ; Clear objects allocated to BANK0
   474     0040  01EE               	clrf	__pbssBANK0& (0+127)
   475     0041  01EF               	clrf	(__pbssBANK0+1)& (0+127)
   476                           
   477                           ; Clear objects allocated to BITCOMMON
   478     0042  01FB               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   479     0043                     end_of_initialization:	
   480                           ;End of C runtime variable initialization code
   481                           
   482     0043                     __end_of__initialization:
   483     0043  0183               	clrf	3
   484     0044  120A  118A  2D9C   	ljmp	_main	;jump to C main() function
   485                           
   486                           	psect	bitbssCOMMON
   487     03D8                     __pbitbssCOMMON:
   488     03D8                     _flag_airConditioner:
   489     03D8                     	ds	1
   490     03D9                     _rightButtonPressed:
   491     03D9                     	ds	1
   492     03DA                     _leftButtonPressed:
   493     03DA                     	ds	1
   494                           
   495                           	psect	dataCOMMON
   496     007C                     __pdataCOMMON:
   497     007C                     _lastRightButtonState:
   498     007C                     	ds	1
   499     007D                     _lastLeftButtonState:
   500     007D                     	ds	1
   501                           
   502                           	psect	bssBANK0
   503     006E                     __pbssBANK0:
   504     006E                     _flags:
   505     006E                     	ds	1
   506     006F                     _temperature:
   507     006F                     	ds	1
   508                           
   509                           	psect	dataBANK0
   510     0069                     __pdataBANK0:
   511     0069                     _lastIrrigationState:
   512     0069                     	ds	1
   513     006A                     _lcd_index:
   514     006A                     	ds	1
   515     006B                     _irrigationState:
   516     006B                     	ds	1
   517     006C                     _lastTankState:
   518     006C                     	ds	1
   519     006D                     _tankState:
   520     006D                     	ds	1
   521                           
   522                           	psect	bssBANK1
   523     00A0                     __pbssBANK1:
   524     00A0                     _dbuf:
   525     00A0                     	ds	32
   526     00C0                     _width:
   527     00C0                     	ds	2
   528     00C2                     _prec:
   529     00C2                     	ds	2
   530     00C4                     _timerCounter:
   531     00C4                     	ds	2
   532                           
   533                           	psect	dataBANK1
   534     00C6                     __pdataBANK1:
   535     00C6                     _TankStateString:
   536     00C6                     	ds	4
   537     00CA                     _timer_WTANK_timeout:
   538     00CA                     	ds	6
   539     00D0                     _timer_lcdButtons:
   540     00D0                     	ds	6
   541                           
   542                           	psect	inittext
   543     07D2                     init_fetch0:	
   544                           ;	Called with low address in FSR and high address in W
   545                           
   546     07D2  087E               	movf	btemp,w
   547     07D3  008A               	movwf	10
   548     07D4  087F               	movf	btemp+1,w
   549     07D5  0082               	movwf	2
   550     07D6                     init_ram0:	
   551                           ;Called with:
   552                           ;	high address of idata address in btemp 
   553                           ;	low address of idata address in btemp+1 
   554                           ;	low address of data in FSR
   555                           ;	high address + 1 of data in btemp-1
   556                           
   557     07D6  120A  118A  27D2  120A  118A  	fcall	init_fetch0
   558     07DB  0080               	movwf	0
   559     07DC  0A84               	incf	4,f
   560     07DD  0804               	movf	4,w
   561     07DE  067D               	xorwf	btemp+-1,w
   562     07DF  1903               	btfsc	3,2
   563     07E0  3400               	retlw	0
   564     07E1  0AFF               	incf	btemp+1,f
   565     07E2  1903               	btfsc	3,2
   566     07E3  0AFE               	incf	btemp,f
   567     07E4  2FD6               	goto	init_ram0
   568                           
   569                           	psect	clrtext
   570     07F8                     clear_ram0:	
   571                           ;	Called with FSR containing the base address, and
   572                           ;	W with the last address+1
   573                           
   574     07F8  0064               	clrwdt	;clear the watchdog before getting into this loop
   575     07F9                     clrloop0:
   576     07F9  0180               	clrf	0	;clear RAM location pointed to by FSR
   577     07FA  0A84               	incf	4,f	;increment pointer
   578     07FB  0604               	xorwf	4,w	;XOR with final address
   579     07FC  1903               	btfsc	3,2	;have we reached the end yet?
   580     07FD  3400               	retlw	0	;all done for this memory range, return
   581     07FE  0604               	xorwf	4,w	;XOR again to restore value
   582     07FF  2FF9               	goto	clrloop0	;do the next byte
   583                           
   584                           	psect	cstackCOMMON
   585     0070                     __pcstackCOMMON:
   586     0070                     ?_lcd_turnLeft:
   587     0070                     ?_lcd_turnRight:	
   588                           ; 1 bytes @ 0x0
   589                           
   590     0070                     ?_runTimer:	
   591                           ; 1 bytes @ 0x0
   592                           
   593     0070                     ?_run_waterTankLogic:	
   594                           ; 1 bytes @ 0x0
   595                           
   596     0070                     ?_stopFilling:	
   597                           ; 1 bytes @ 0x0
   598                           
   599     0070                     ?_startFilling:	
   600                           ; 1 bytes @ 0x0
   601                           
   602     0070                     ?_putch:	
   603                           ; 1 bytes @ 0x0
   604                           
   605     0070                     ?_ADC_init:	
   606                           ; 1 bytes @ 0x0
   607                           
   608     0070                     ?_WDT_init:	
   609                           ; 1 bytes @ 0x0
   610                           
   611     0070                     ?_timer1_1ms_init:	
   612                           ; 1 bytes @ 0x0
   613                           
   614     0070                     ?_interruption_init:	
   615                           ; 1 bytes @ 0x0
   616                           
   617     0070                     ?_Lcd_Port:	
   618                           ; 1 bytes @ 0x0
   619                           
   620     0070                     ?_Lcd_Cmd:	
   621                           ; 1 bytes @ 0x0
   622                           
   623     0070                     ?_Lcd_Clear:	
   624                           ; 1 bytes @ 0x0
   625                           
   626     0070                     ?_Lcd_Init:	
   627                           ; 1 bytes @ 0x0
   628                           
   629     0070                     ?_Lcd_Write_Char:	
   630                           ; 1 bytes @ 0x0
   631                           
   632     0070                     ?_print_TankState:	
   633                           ; 1 bytes @ 0x0
   634                           
   635     0070                     ?_print_Index:	
   636                           ; 1 bytes @ 0x0
   637                           
   638     0070                     ?_lcd_debounceButtons:	
   639                           ; 1 bytes @ 0x0
   640                           
   641     0070                     ?_lcd_run:	
   642                           ; 1 bytes @ 0x0
   643                           
   644     0070                     ?_interruptionHandler:	
   645                           ; 1 bytes @ 0x0
   646                           
   647     0070                     ?_main:	
   648                           ; 1 bytes @ 0x0
   649                           
   650     0070                     ?_check_TankStatus:	
   651                           ; 1 bytes @ 0x0
   652                           
   653     0070                     putch@c:	
   654                           ; 1 bytes @ 0x0
   655                           
   656     0070                     runTimer@timer:	
   657                           ; 1 bytes @ 0x0
   658                           
   659                           
   660                           ; 2 bytes @ 0x0
   661     0070                     	ds	2
   662     0072                     ??_runTimer:
   663                           
   664                           ; 1 bytes @ 0x2
   665     0072                     	ds	6
   666     0078                     ??_interruptionHandler:
   667                           
   668                           ; 1 bytes @ 0x8
   669     0078                     	ds	3
   670                           
   671                           	psect	cstackBANK0
   672     0020                     __pcstackBANK0:
   673     0020                     ?_startTimer:
   674     0020                     ?_stopTimer:	
   675                           ; 1 bytes @ 0x0
   676                           
   677     0020                     ?_pins_init:	
   678                           ; 1 bytes @ 0x0
   679                           
   680     0020                     ?_fputc:	
   681                           ; 1 bytes @ 0x0
   682                           
   683     0020                     ?___awdiv:	
   684                           ; 2 bytes @ 0x0
   685                           
   686     0020                     ?___awmod:	
   687                           ; 2 bytes @ 0x0
   688                           
   689     0020                     pins_init@_TRISB:	
   690                           ; 2 bytes @ 0x0
   691                           
   692     0020                     Lcd_Port@a:	
   693                           ; 1 bytes @ 0x0
   694                           
   695     0020                     startTimer@timer:	
   696                           ; 1 bytes @ 0x0
   697                           
   698     0020                     stopTimer@timer:	
   699                           ; 2 bytes @ 0x0
   700                           
   701     0020                     ___awdiv@divisor:	
   702                           ; 2 bytes @ 0x0
   703                           
   704     0020                     ___awmod@divisor:	
   705                           ; 2 bytes @ 0x0
   706                           
   707     0020                     fputc@c:	
   708                           ; 2 bytes @ 0x0
   709                           
   710     0020                     ??_lcd_turnLeft:	
   711                           ; 2 bytes @ 0x0
   712                           
   713     0020                     ??_lcd_turnRight:	
   714                           ; 1 bytes @ 0x0
   715                           
   716     0020                     ??_putch:	
   717                           ; 1 bytes @ 0x0
   718                           
   719     0020                     ??_ADC_init:	
   720                           ; 1 bytes @ 0x0
   721                           
   722     0020                     ??_WDT_init:	
   723                           ; 1 bytes @ 0x0
   724                           
   725     0020                     ??_timer1_1ms_init:	
   726                           ; 1 bytes @ 0x0
   727                           
   728     0020                     ??_interruption_init:	
   729                           ; 1 bytes @ 0x0
   730                           
   731     0020                     ??_Lcd_Port:	
   732                           ; 1 bytes @ 0x0
   733                           
   734     0020                     ??_lcd_debounceButtons:	
   735                           ; 1 bytes @ 0x0
   736                           
   737     0020                     ??_check_TankStatus:	
   738                           ; 1 bytes @ 0x0
   739                           
   740                           
   741                           ; 1 bytes @ 0x0
   742     0020                     	ds	1
   743     0021                     pins_init@_TRISC:
   744     0021                     check_TankStatus@top:	
   745                           ; 1 bytes @ 0x1
   746                           
   747     0021                     ??_Lcd_Cmd:	
   748                           ; 1 bytes @ 0x1
   749                           
   750     0021                     ??_Lcd_Write_Char:	
   751                           ; 1 bytes @ 0x1
   752                           
   753                           
   754                           ; 1 bytes @ 0x1
   755     0021                     	ds	1
   756     0022                     pins_init@_TRISD:
   757     0022                     Lcd_Write_Char@temp:	
   758                           ; 1 bytes @ 0x2
   759                           
   760     0022                     check_TankStatus@bot:	
   761                           ; 1 bytes @ 0x2
   762                           
   763     0022                     ___awdiv@dividend:	
   764                           ; 1 bytes @ 0x2
   765                           
   766     0022                     ___awmod@dividend:	
   767                           ; 2 bytes @ 0x2
   768                           
   769     0022                     fputc@fp:	
   770                           ; 2 bytes @ 0x2
   771                           
   772     0022                     ??_startTimer:	
   773                           ; 2 bytes @ 0x2
   774                           
   775     0022                     ??_stopTimer:	
   776                           ; 1 bytes @ 0x2
   777                           
   778                           
   779                           ; 1 bytes @ 0x2
   780     0022                     	ds	1
   781     0023                     pins_init@_TRISA:
   782     0023                     Lcd_Cmd@a:	
   783                           ; 1 bytes @ 0x3
   784                           
   785     0023                     Lcd_Write_Char@y:	
   786                           ; 1 bytes @ 0x3
   787                           
   788     0023                     ??_pins_init:	
   789                           ; 1 bytes @ 0x3
   790                           
   791                           
   792                           ; 1 bytes @ 0x3
   793     0023                     	ds	1
   794     0024                     ?_Lcd_Set_Cursor:
   795     0024                     Lcd_Set_Cursor@b:	
   796                           ; 1 bytes @ 0x4
   797                           
   798     0024                     Lcd_Write_Char@a:	
   799                           ; 1 bytes @ 0x4
   800                           
   801     0024                     ___awdiv@counter:	
   802                           ; 1 bytes @ 0x4
   803                           
   804     0024                     ___awmod@counter:	
   805                           ; 1 bytes @ 0x4
   806                           
   807     0024                     ??_run_waterTankLogic:	
   808                           ; 1 bytes @ 0x4
   809                           
   810     0024                     ??_stopFilling:	
   811                           ; 1 bytes @ 0x4
   812                           
   813     0024                     ??_startFilling:	
   814                           ; 1 bytes @ 0x4
   815                           
   816     0024                     ??_fputc:	
   817                           ; 1 bytes @ 0x4
   818                           
   819     0024                     ??_Lcd_Clear:	
   820                           ; 1 bytes @ 0x4
   821                           
   822     0024                     ??_Lcd_Init:	
   823                           ; 1 bytes @ 0x4
   824                           
   825     0024                     ??___awdiv:	
   826                           ; 1 bytes @ 0x4
   827                           
   828     0024                     ??___awmod:	
   829                           ; 1 bytes @ 0x4
   830                           
   831                           
   832                           ; 1 bytes @ 0x4
   833     0024                     	ds	1
   834     0025                     ?_Lcd_Write_String:
   835     0025                     ___awdiv@sign:	
   836                           ; 1 bytes @ 0x5
   837                           
   838     0025                     ___awmod@sign:	
   839                           ; 1 bytes @ 0x5
   840                           
   841     0025                     Lcd_Write_String@a:	
   842                           ; 1 bytes @ 0x5
   843                           
   844     0025                     ??_Lcd_Set_Cursor:	
   845                           ; 2 bytes @ 0x5
   846                           
   847                           
   848                           ; 1 bytes @ 0x5
   849     0025                     	ds	1
   850     0026                     ?_abs:
   851     0026                     Lcd_Set_Cursor@a:	
   852                           ; 2 bytes @ 0x6
   853                           
   854     0026                     ___awdiv@quotient:	
   855                           ; 1 bytes @ 0x6
   856                           
   857     0026                     abs@a:	
   858                           ; 2 bytes @ 0x6
   859                           
   860                           
   861                           ; 2 bytes @ 0x6
   862     0026                     	ds	1
   863     0027                     Lcd_Set_Cursor@z:
   864     0027                     ??_Lcd_Write_String:	
   865                           ; 1 bytes @ 0x7
   866                           
   867                           
   868                           ; 1 bytes @ 0x7
   869     0027                     	ds	1
   870     0028                     Lcd_Set_Cursor@y:
   871     0028                     ??_abs:	
   872                           ; 1 bytes @ 0x8
   873                           
   874                           
   875                           ; 1 bytes @ 0x8
   876     0028                     	ds	1
   877     0029                     Lcd_Set_Cursor@temp:
   878                           
   879                           ; 1 bytes @ 0x9
   880     0029                     	ds	1
   881     002A                     Lcd_Write_String@i:
   882                           
   883                           ; 2 bytes @ 0xA
   884     002A                     	ds	3
   885     002D                     ?_vfpfcnvrt:
   886     002D                     vfpfcnvrt@fp:	
   887                           ; 1 bytes @ 0xD
   888                           
   889                           
   890                           ; 2 bytes @ 0xD
   891     002D                     	ds	2
   892     002F                     vfpfcnvrt@fmt:
   893                           
   894                           ; 1 bytes @ 0xF
   895     002F                     	ds	1
   896     0030                     vfpfcnvrt@ap:
   897                           
   898                           ; 2 bytes @ 0x10
   899     0030                     	ds	2
   900     0032                     ??_vfpfcnvrt:
   901                           
   902                           ; 1 bytes @ 0x12
   903     0032                     	ds	2
   904     0034                     vfpfcnvrt@cp_1120:
   905                           
   906                           ; 2 bytes @ 0x14
   907     0034                     	ds	2
   908     0036                     vfpfcnvrt@done:
   909                           
   910                           ; 1 bytes @ 0x16
   911     0036                     	ds	1
   912     0037                     vfpfcnvrt@cp:
   913                           
   914                           ; 1 bytes @ 0x17
   915     0037                     	ds	1
   916     0038                     vfpfcnvrt@convarg:
   917                           
   918                           ; 4 bytes @ 0x18
   919     0038                     	ds	4
   920     003C                     vfpfcnvrt@c:
   921                           
   922                           ; 1 bytes @ 0x1C
   923     003C                     	ds	1
   924     003D                     ?_vfprintf:
   925     003D                     vfprintf@fp:	
   926                           ; 2 bytes @ 0x1D
   927                           
   928                           
   929                           ; 2 bytes @ 0x1D
   930     003D                     	ds	2
   931     003F                     vfprintf@fmt:
   932                           
   933                           ; 1 bytes @ 0x1F
   934     003F                     	ds	1
   935     0040                     vfprintf@ap:
   936                           
   937                           ; 1 bytes @ 0x20
   938     0040                     	ds	1
   939     0041                     vfprintf@cfmt:
   940     0041                     ??_vfprintf:	
   941                           ; 1 bytes @ 0x21
   942                           
   943                           
   944                           ; 1 bytes @ 0x21
   945     0041                     	ds	1
   946     0042                     ?_sprintf:
   947     0042                     sprintf@s:	
   948                           ; 2 bytes @ 0x22
   949                           
   950                           
   951                           ; 1 bytes @ 0x22
   952     0042                     	ds	1
   953     0043                     sprintf@fmt:
   954                           
   955                           ; 1 bytes @ 0x23
   956     0043                     	ds	3
   957     0046                     ??_sprintf:
   958                           
   959                           ; 1 bytes @ 0x26
   960     0046                     	ds	1
   961     0047                     sprintf@ap:
   962                           
   963                           ; 1 bytes @ 0x27
   964     0047                     	ds	1
   965     0048                     sprintf@f:
   966                           
   967                           ; 11 bytes @ 0x28
   968     0048                     	ds	11
   969     0053                     print_TankState@buffer:
   970     0053                     ??_print_TankState:	
   971                           ; 20 bytes @ 0x33
   972                           
   973     0053                     ??_print_Index:	
   974                           ; 1 bytes @ 0x33
   975                           
   976                           
   977                           ; 1 bytes @ 0x33
   978     0053                     	ds	2
   979     0055                     print_Index@buffer:
   980                           
   981                           ; 20 bytes @ 0x35
   982     0055                     	ds	20
   983     0069                     ??_lcd_run:
   984     0069                     ??_main:	
   985                           ; 1 bytes @ 0x49
   986                           
   987                           
   988                           	psect	maintext
   989     059C                     __pmaintext:	
   990                           ; 1 bytes @ 0x49
   991 ;;
   992 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   993 ;;
   994 ;; *************** function _main *****************
   995 ;; Defined at:
   996 ;;		line 37 in file "main.c"
   997 ;; Parameters:    Size  Location     Type
   998 ;;		None
   999 ;; Auto vars:     Size  Location     Type
  1000 ;;		None
  1001 ;; Return value:  Size  Location     Type
  1002 ;;                  1    wreg      void 
  1003 ;; Registers used:
  1004 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1005 ;; Tracked objects:
  1006 ;;		On entry : B00/0
  1007 ;;		On exit  : 0/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1010 ;;      Params:         0       0       0       0       0
  1011 ;;      Locals:         0       0       0       0       0
  1012 ;;      Temps:          0       0       0       0       0
  1013 ;;      Totals:         0       0       0       0       0
  1014 ;;Total ram usage:        0 bytes
  1015 ;; Hardware stack levels required when called: 9
  1016 ;; This function calls:
  1017 ;;		_ADC_init
  1018 ;;		_Lcd_Init
  1019 ;;		_WDT_init
  1020 ;;		_interruption_init
  1021 ;;		_lcd_run
  1022 ;;		_pins_init
  1023 ;;		_run_waterTankLogic
  1024 ;;		_timer1_1ms_init
  1025 ;; This function is called by:
  1026 ;;		Startup code after reset
  1027 ;; This function uses a non-reentrant model
  1028 ;;
  1029                           
  1030     059C                     _main:	
  1031                           ;psect for function _main
  1032                           
  1033     059C                     l1841:	
  1034                           ;incstack = 0
  1035 ;; hardware stack exceeded
  1036                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1037                           
  1038                           
  1039                           ;main.c: 41:   PORTCbits.RC0 = 1;
  1040     059C  1283               	bcf	3,5	;RP0=0, select bank0
  1041     059D  1303               	bcf	3,6	;RP1=0, select bank0
  1042     059E  1407               	bsf	7,0	;volatile
  1043                           
  1044                           ;main.c: 42:   PORTCbits.RC1 = 1;
  1045     059F  1487               	bsf	7,1	;volatile
  1046                           
  1047                           ;main.c: 43:   PORTCbits.RC4 = 1;
  1048     05A0  1607               	bsf	7,4	;volatile
  1049                           
  1050                           ;main.c: 44:   PORTCbits.RC2 = 1;
  1051     05A1  1507               	bsf	7,2	;volatile
  1052                           
  1053                           ;main.c: 46:   PORTCbits.RC3 = 0;
  1054     05A2  1187               	bcf	7,3	;volatile
  1055     05A3                     l1843:
  1056                           
  1057                           ;main.c: 50:   pins_init(0xFF ,0xFF ,0x00 ,0x00);
  1058     05A3  30FF               	movlw	255
  1059     05A4  00A0               	movwf	pins_init@_TRISB
  1060     05A5  01A1               	clrf	pins_init@_TRISC
  1061     05A6  01A2               	clrf	pins_init@_TRISD
  1062     05A7  30FF               	movlw	255
  1063     05A8  120A  118A  2799  120A  118A  	fcall	_pins_init
  1064     05AD                     l1845:
  1065                           
  1066                           ;main.c: 51:   WDT_init();
  1067     05AD  120A  158A  27B1  120A  118A  	fcall	_WDT_init
  1068     05B2                     l1847:
  1069                           
  1070                           ;main.c: 52:   interruption_init();
  1071     05B2  120A  158A  27B9  120A  118A  	fcall	_interruption_init
  1072     05B7                     l1849:
  1073                           
  1074                           ;main.c: 53:   timer1_1ms_init();
  1075     05B7  120A  158A  27C1  120A  118A  	fcall	_timer1_1ms_init
  1076     05BC                     l1851:
  1077                           
  1078                           ;main.c: 54:   ADC_init();
  1079     05BC  120A  158A  27CC  120A  118A  	fcall	_ADC_init
  1080                           
  1081                           ;main.c: 55:   Lcd_Init();
  1082     05C1  120A  118A  233B  120A  118A  	fcall	_Lcd_Init
  1083     05C6                     l188:	
  1084                           ;main.c: 57:   while(1)
  1085                           
  1086     05C6  0064               	clrwdt	;# 
  1087     05C7                     l1853:
  1088                           
  1089                           ;main.c: 61:     run_waterTankLogic();
  1090     05C7  120A  118A  2522  120A  118A  	fcall	_run_waterTankLogic
  1091     05CC                     l1855:
  1092                           
  1093                           ;main.c: 62:     lcd_run();
  1094     05CC  120A  118A  26F0  120A  118A  	fcall	_lcd_run
  1095     05D1  2DC6               	goto	l188
  1096     05D2  120A  118A  280E   	ljmp	start
  1097     05D5                     __end_of_main:
  1098                           
  1099                           	psect	text1
  1100     0FC1                     __ptext1:	
  1101 ;; *************** function _timer1_1ms_init *****************
  1102 ;; Defined at:
  1103 ;;		line 74 in file "./config.h"
  1104 ;; Parameters:    Size  Location     Type
  1105 ;;		None
  1106 ;; Auto vars:     Size  Location     Type
  1107 ;;		None
  1108 ;; Return value:  Size  Location     Type
  1109 ;;                  1    wreg      void 
  1110 ;; Registers used:
  1111 ;;		None
  1112 ;; Tracked objects:
  1113 ;;		On entry : 0/0
  1114 ;;		On exit  : 0/0
  1115 ;;		Unchanged: 0/0
  1116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1117 ;;      Params:         0       0       0       0       0
  1118 ;;      Locals:         0       0       0       0       0
  1119 ;;      Temps:          0       0       0       0       0
  1120 ;;      Totals:         0       0       0       0       0
  1121 ;;Total ram usage:        0 bytes
  1122 ;; Hardware stack levels used: 1
  1123 ;; Hardware stack levels required when called: 2
  1124 ;; This function calls:
  1125 ;;		Nothing
  1126 ;; This function is called by:
  1127 ;;		_main
  1128 ;; This function uses a non-reentrant model
  1129 ;;
  1130                           
  1131     0FC1                     _timer1_1ms_init:	
  1132                           ;psect for function _timer1_1ms_init
  1133                           
  1134     0FC1                     l1763:	
  1135                           ;incstack = 0
  1136                           ; Regs used in _timer1_1ms_init: []
  1137                           
  1138     0FC1  1283               	bcf	3,5	;RP0=0, select bank0
  1139     0FC2  1303               	bcf	3,6	;RP1=0, select bank0
  1140     0FC3  1090               	bcf	16,1	;volatile
  1141     0FC4  1610               	bsf	16,4	;volatile
  1142     0FC5  1690               	bsf	16,5	;volatile
  1143     0FC6  30FF               	movlw	255
  1144     0FC7  008F               	movwf	15	;volatile
  1145     0FC8  3083               	movlw	131
  1146     0FC9  008E               	movwf	14	;volatile
  1147     0FCA  1410               	bsf	16,0	;volatile
  1148     0FCB                     l87:
  1149     0FCB  0008               	return
  1150     0FCC                     __end_of_timer1_1ms_init:
  1151                           
  1152                           	psect	text2
  1153     0522                     __ptext2:	
  1154 ;; *************** function _run_waterTankLogic *****************
  1155 ;; Defined at:
  1156 ;;		line 42 in file "waterTankManager.c"
  1157 ;; Parameters:    Size  Location     Type
  1158 ;;		None
  1159 ;; Auto vars:     Size  Location     Type
  1160 ;;		None
  1161 ;; Return value:  Size  Location     Type
  1162 ;;                  1    wreg      void 
  1163 ;; Registers used:
  1164 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1165 ;; Tracked objects:
  1166 ;;		On entry : 0/0
  1167 ;;		On exit  : 0/0
  1168 ;;		Unchanged: 0/0
  1169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1170 ;;      Params:         0       0       0       0       0
  1171 ;;      Locals:         0       0       0       0       0
  1172 ;;      Temps:          0       2       0       0       0
  1173 ;;      Totals:         0       2       0       0       0
  1174 ;;Total ram usage:        2 bytes
  1175 ;; Hardware stack levels used: 1
  1176 ;; Hardware stack levels required when called: 4
  1177 ;; This function calls:
  1178 ;;		_check_TankStatus
  1179 ;;		_startFilling
  1180 ;;		_stopFilling
  1181 ;; This function is called by:
  1182 ;;		_main
  1183 ;; This function uses a non-reentrant model
  1184 ;;
  1185                           
  1186     0522                     _run_waterTankLogic:	
  1187                           ;psect for function _run_waterTankLogic
  1188                           
  1189     0522                     l1813:	
  1190                           ;incstack = 0
  1191                           ; Regs used in _run_waterTankLogic: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1192                           
  1193                           
  1194                           ;waterTankManager.c: 45:   check_TankStatus();
  1195     0522  120A  118A  2495  120A  118A  	fcall	_check_TankStatus
  1196                           
  1197                           ;waterTankManager.c: 47:   switch (tankState)
  1198     0527  2D46               	goto	l1827
  1199     0528                     l1815:
  1200                           
  1201                           ;waterTankManager.c: 50:     stopFilling();
  1202     0528  120A  118A  25F3  120A  118A  	fcall	_stopFilling
  1203     052D                     l1817:
  1204                           
  1205                           ;waterTankManager.c: 51:     PORTCbits.RC2 = 0;
  1206     052D  1283               	bcf	3,5	;RP0=0, select bank0
  1207     052E  1303               	bcf	3,6	;RP1=0, select bank0
  1208     052F  1107               	bcf	7,2	;volatile
  1209                           
  1210                           ;waterTankManager.c: 52:     break;
  1211     0530  2D60               	goto	l229
  1212     0531                     l1819:
  1213                           
  1214                           ;waterTankManager.c: 55:     startFilling();
  1215     0531  120A  158A  27E5  120A  118A  	fcall	_startFilling
  1216                           
  1217                           ;waterTankManager.c: 56:     break;
  1218     0536  2D60               	goto	l229
  1219     0537                     l1821:
  1220                           
  1221                           ;waterTankManager.c: 59:     stopFilling();
  1222     0537  120A  118A  25F3  120A  118A  	fcall	_stopFilling
  1223                           
  1224                           ;waterTankManager.c: 60:     break;
  1225     053C  2D60               	goto	l229
  1226     053D                     l1823:
  1227                           
  1228                           ;waterTankManager.c: 66:     stopFilling();
  1229     053D  120A  118A  25F3  120A  118A  	fcall	_stopFilling
  1230     0542                     l1825:
  1231                           
  1232                           ;waterTankManager.c: 67:     PORTCbits.RC2 = 0;
  1233     0542  1283               	bcf	3,5	;RP0=0, select bank0
  1234     0543  1303               	bcf	3,6	;RP1=0, select bank0
  1235     0544  1107               	bcf	7,2	;volatile
  1236                           
  1237                           ;waterTankManager.c: 68:   };
  1238     0545  2D60               	goto	l229
  1239     0546                     l1827:
  1240     0546  1283               	bcf	3,5	;RP0=0, select bank0
  1241     0547  1303               	bcf	3,6	;RP1=0, select bank0
  1242     0548  086D               	movf	_tankState,w
  1243     0549  00A4               	movwf	??_run_waterTankLogic
  1244     054A  01A5               	clrf	??_run_waterTankLogic+1
  1245     054B  1BA4               	btfsc	??_run_waterTankLogic,7
  1246     054C  03A5               	decf	??_run_waterTankLogic+1,f
  1247                           
  1248                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1249                           ; Switch size 1, requested type "simple"
  1250                           ; Number of cases is 1, Range of values is 0 to 0
  1251                           ; switch strategies available:
  1252                           ; Name         Instructions Cycles
  1253                           ; simple_byte            4     3 (average)
  1254                           ; direct_byte           11     8 (fixed)
  1255                           ; jumptable            260     6 (fixed)
  1256                           ;	Chosen strategy is simple_byte
  1257     054D  0825               	movf	??_run_waterTankLogic+1,w
  1258     054E  3A00               	xorlw	0	; case 0
  1259     054F  1903               	skipnz
  1260     0550  2D52               	goto	l1877
  1261     0551  2D3D               	goto	l1823
  1262     0552                     l1877:
  1263                           
  1264                           ; Switch size 1, requested type "simple"
  1265                           ; Number of cases is 4, Range of values is 0 to 3
  1266                           ; switch strategies available:
  1267                           ; Name         Instructions Cycles
  1268                           ; simple_byte           13     7 (average)
  1269                           ; direct_byte           20     8 (fixed)
  1270                           ; jumptable            260     6 (fixed)
  1271                           ;	Chosen strategy is simple_byte
  1272     0552  0824               	movf	??_run_waterTankLogic,w
  1273     0553  3A00               	xorlw	0	; case 0
  1274     0554  1903               	skipnz
  1275     0555  2D37               	goto	l1821
  1276     0556  3A01               	xorlw	1	; case 1
  1277     0557  1903               	skipnz
  1278     0558  2D60               	goto	l229
  1279     0559  3A03               	xorlw	3	; case 2
  1280     055A  1903               	skipnz
  1281     055B  2D31               	goto	l1819
  1282     055C  3A01               	xorlw	1	; case 3
  1283     055D  1903               	skipnz
  1284     055E  2D28               	goto	l1815
  1285     055F  2D3D               	goto	l1823
  1286     0560                     l229:
  1287     0560  0008               	return
  1288     0561                     __end_of_run_waterTankLogic:
  1289                           
  1290                           	psect	text3
  1291     05F3                     __ptext3:	
  1292 ;; *************** function _stopFilling *****************
  1293 ;; Defined at:
  1294 ;;		line 76 in file "waterTankManager.c"
  1295 ;; Parameters:    Size  Location     Type
  1296 ;;		None
  1297 ;; Auto vars:     Size  Location     Type
  1298 ;;		None
  1299 ;; Return value:  Size  Location     Type
  1300 ;;                  1    wreg      void 
  1301 ;; Registers used:
  1302 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1303 ;; Tracked objects:
  1304 ;;		On entry : 0/0
  1305 ;;		On exit  : 0/0
  1306 ;;		Unchanged: 0/0
  1307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1308 ;;      Params:         0       0       0       0       0
  1309 ;;      Locals:         0       0       0       0       0
  1310 ;;      Temps:          0       0       0       0       0
  1311 ;;      Totals:         0       0       0       0       0
  1312 ;;Total ram usage:        0 bytes
  1313 ;; Hardware stack levels used: 1
  1314 ;; Hardware stack levels required when called: 3
  1315 ;; This function calls:
  1316 ;;		_stopTimer
  1317 ;; This function is called by:
  1318 ;;		_run_waterTankLogic
  1319 ;; This function uses a non-reentrant model
  1320 ;;
  1321                           
  1322     05F3                     _stopFilling:	
  1323                           ;psect for function _stopFilling
  1324                           
  1325     05F3                     l1751:	
  1326                           ;incstack = 0
  1327                           ; Regs used in _stopFilling: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1328                           
  1329                           
  1330                           ;waterTankManager.c: 78:   PORTCbits.RC0 = 1;
  1331     05F3  1283               	bcf	3,5	;RP0=0, select bank0
  1332     05F4  1303               	bcf	3,6	;RP1=0, select bank0
  1333     05F5  1407               	bsf	7,0	;volatile
  1334     05F6                     l1753:
  1335                           
  1336                           ;waterTankManager.c: 79:   stopTimer(&timer_WTANK_timeout);
  1337     05F6  30CA               	movlw	low _timer_WTANK_timeout
  1338     05F7  00A0               	movwf	stopTimer@timer
  1339     05F8  3000               	movlw	high _timer_WTANK_timeout
  1340     05F9  00A1               	movwf	stopTimer@timer+1
  1341     05FA  120A  118A  2758  120A  118A  	fcall	_stopTimer
  1342     05FF                     l235:
  1343     05FF  0008               	return
  1344     0600                     __end_of_stopFilling:
  1345                           
  1346                           	psect	text4
  1347     0758                     __ptext4:	
  1348 ;; *************** function _stopTimer *****************
  1349 ;; Defined at:
  1350 ;;		line 28 in file "virtualTimer.c"
  1351 ;; Parameters:    Size  Location     Type
  1352 ;;  timer           2    0[BANK0 ] PTR struct .
  1353 ;;		 -> timer_WTANK_timeout(6), 
  1354 ;; Auto vars:     Size  Location     Type
  1355 ;;		None
  1356 ;; Return value:  Size  Location     Type
  1357 ;;                  1    wreg      void 
  1358 ;; Registers used:
  1359 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1360 ;; Tracked objects:
  1361 ;;		On entry : 0/0
  1362 ;;		On exit  : 0/0
  1363 ;;		Unchanged: 0/0
  1364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1365 ;;      Params:         0       2       0       0       0
  1366 ;;      Locals:         0       0       0       0       0
  1367 ;;      Temps:          0       2       0       0       0
  1368 ;;      Totals:         0       4       0       0       0
  1369 ;;Total ram usage:        4 bytes
  1370 ;; Hardware stack levels used: 1
  1371 ;; Hardware stack levels required when called: 2
  1372 ;; This function calls:
  1373 ;;		Nothing
  1374 ;; This function is called by:
  1375 ;;		_stopFilling
  1376 ;; This function uses a non-reentrant model
  1377 ;;
  1378                           
  1379     0758                     _stopTimer:	
  1380                           ;psect for function _stopTimer
  1381                           
  1382     0758                     l1675:	
  1383                           ;incstack = 0
  1384                           ; Regs used in _stopTimer: [wreg-fsr0h+status,2+status,0]
  1385                           
  1386                           
  1387                           ;virtualTimer.c: 28: void stopTimer(virtualTimer *timer);virtualTimer.c: 29: {;virtualTi
      +                          mer.c: 30:   timer->active = 0;
  1388     0758  1283               	bcf	3,5	;RP0=0, select bank0
  1389     0759  1303               	bcf	3,6	;RP1=0, select bank0
  1390     075A  0820               	movf	stopTimer@timer,w
  1391     075B  3E04               	addlw	4
  1392     075C  00A2               	movwf	??_stopTimer
  1393     075D  0821               	movf	stopTimer@timer+1,w
  1394     075E  1803               	skipnc
  1395     075F  3E01               	addlw	1
  1396     0760  3E00               	addlw	0
  1397     0761  00A3               	movwf	??_stopTimer+1
  1398     0762  0822               	movf	??_stopTimer,w
  1399     0763  0084               	movwf	4
  1400     0764  1783               	bsf	3,7
  1401     0765  1C23               	btfss	??_stopTimer+1,0
  1402     0766  1383               	bcf	3,7
  1403     0767  0180               	clrf	0
  1404                           
  1405                           ;virtualTimer.c: 31:   timer->elapsedTime = 0;
  1406     0768  0820               	movf	stopTimer@timer,w
  1407     0769  3E02               	addlw	2
  1408     076A  00A2               	movwf	??_stopTimer
  1409     076B  0821               	movf	stopTimer@timer+1,w
  1410     076C  1803               	skipnc
  1411     076D  3E01               	addlw	1
  1412     076E  3E00               	addlw	0
  1413     076F  00A3               	movwf	??_stopTimer+1
  1414     0770  0822               	movf	??_stopTimer,w
  1415     0771  0084               	movwf	4
  1416     0772  1783               	bsf	3,7
  1417     0773  1C23               	btfss	??_stopTimer+1,0
  1418     0774  1383               	bcf	3,7
  1419     0775  0180               	clrf	0
  1420     0776  0A84               	incf	4,f
  1421     0777  0180               	clrf	0
  1422     0778                     l248:
  1423     0778  0008               	return
  1424     0779                     __end_of_stopTimer:
  1425                           
  1426                           	psect	text5
  1427     0FE5                     __ptext5:	
  1428 ;; *************** function _startFilling *****************
  1429 ;; Defined at:
  1430 ;;		line 71 in file "waterTankManager.c"
  1431 ;; Parameters:    Size  Location     Type
  1432 ;;		None
  1433 ;; Auto vars:     Size  Location     Type
  1434 ;;		None
  1435 ;; Return value:  Size  Location     Type
  1436 ;;                  1    wreg      void 
  1437 ;; Registers used:
  1438 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1439 ;; Tracked objects:
  1440 ;;		On entry : 0/0
  1441 ;;		On exit  : 0/0
  1442 ;;		Unchanged: 0/0
  1443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1444 ;;      Params:         0       0       0       0       0
  1445 ;;      Locals:         0       0       0       0       0
  1446 ;;      Temps:          0       0       0       0       0
  1447 ;;      Totals:         0       0       0       0       0
  1448 ;;Total ram usage:        0 bytes
  1449 ;; Hardware stack levels used: 1
  1450 ;; Hardware stack levels required when called: 3
  1451 ;; This function calls:
  1452 ;;		_startTimer
  1453 ;; This function is called by:
  1454 ;;		_run_waterTankLogic
  1455 ;; This function uses a non-reentrant model
  1456 ;;
  1457                           
  1458     0FE5                     _startFilling:	
  1459                           ;psect for function _startFilling
  1460                           
  1461     0FE5                     l1755:	
  1462                           ;incstack = 0
  1463                           ; Regs used in _startFilling: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1464                           
  1465                           
  1466                           ;waterTankManager.c: 73:   PORTCbits.RC0 = 0;
  1467     0FE5  1283               	bcf	3,5	;RP0=0, select bank0
  1468     0FE6  1303               	bcf	3,6	;RP1=0, select bank0
  1469     0FE7  1007               	bcf	7,0	;volatile
  1470     0FE8                     l1757:
  1471                           
  1472                           ;waterTankManager.c: 74:   startTimer(&timer_WTANK_timeout);
  1473     0FE8  30CA               	movlw	low _timer_WTANK_timeout
  1474     0FE9  00A0               	movwf	startTimer@timer
  1475     0FEA  3000               	movlw	high _timer_WTANK_timeout
  1476     0FEB  00A1               	movwf	startTimer@timer+1
  1477     0FEC  120A  118A  2736  120A  158A  	fcall	_startTimer
  1478     0FF1                     l232:
  1479     0FF1  0008               	return
  1480     0FF2                     __end_of_startFilling:
  1481                           
  1482                           	psect	text6
  1483     0736                     __ptext6:	
  1484 ;; *************** function _startTimer *****************
  1485 ;; Defined at:
  1486 ;;		line 21 in file "virtualTimer.c"
  1487 ;; Parameters:    Size  Location     Type
  1488 ;;  timer           2    0[BANK0 ] PTR struct .
  1489 ;;		 -> timer_WTANK_timeout(6), 
  1490 ;; Auto vars:     Size  Location     Type
  1491 ;;		None
  1492 ;; Return value:  Size  Location     Type
  1493 ;;                  1    wreg      void 
  1494 ;; Registers used:
  1495 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1496 ;; Tracked objects:
  1497 ;;		On entry : 0/0
  1498 ;;		On exit  : 0/0
  1499 ;;		Unchanged: 0/0
  1500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1501 ;;      Params:         0       2       0       0       0
  1502 ;;      Locals:         0       0       0       0       0
  1503 ;;      Temps:          0       2       0       0       0
  1504 ;;      Totals:         0       4       0       0       0
  1505 ;;Total ram usage:        4 bytes
  1506 ;; Hardware stack levels used: 1
  1507 ;; Hardware stack levels required when called: 2
  1508 ;; This function calls:
  1509 ;;		Nothing
  1510 ;; This function is called by:
  1511 ;;		_startFilling
  1512 ;; This function uses a non-reentrant model
  1513 ;;
  1514                           
  1515     0736                     _startTimer:	
  1516                           ;psect for function _startTimer
  1517                           
  1518     0736                     l1673:	
  1519                           ;incstack = 0
  1520                           ; Regs used in _startTimer: [wreg-fsr0h+status,2+status,0]
  1521                           
  1522                           
  1523                           ;virtualTimer.c: 21: void startTimer(virtualTimer *timer);virtualTimer.c: 22: {;virtualT
      +                          imer.c: 23:   timer->active = 1;
  1524     0736  1283               	bcf	3,5	;RP0=0, select bank0
  1525     0737  1303               	bcf	3,6	;RP1=0, select bank0
  1526     0738  0820               	movf	startTimer@timer,w
  1527     0739  3E04               	addlw	4
  1528     073A  00A2               	movwf	??_startTimer
  1529     073B  0821               	movf	startTimer@timer+1,w
  1530     073C  1803               	skipnc
  1531     073D  3E01               	addlw	1
  1532     073E  3E00               	addlw	0
  1533     073F  00A3               	movwf	??_startTimer+1
  1534     0740  0822               	movf	??_startTimer,w
  1535     0741  0084               	movwf	4
  1536     0742  1783               	bsf	3,7
  1537     0743  1C23               	btfss	??_startTimer+1,0
  1538     0744  1383               	bcf	3,7
  1539     0745  3001               	movlw	1
  1540     0746  0080               	movwf	0
  1541                           
  1542                           ;virtualTimer.c: 24:   timer->elapsedTime = 0;
  1543     0747  0820               	movf	startTimer@timer,w
  1544     0748  3E02               	addlw	2
  1545     0749  00A2               	movwf	??_startTimer
  1546     074A  0821               	movf	startTimer@timer+1,w
  1547     074B  1803               	skipnc
  1548     074C  3E01               	addlw	1
  1549     074D  3E00               	addlw	0
  1550     074E  00A3               	movwf	??_startTimer+1
  1551     074F  0822               	movf	??_startTimer,w
  1552     0750  0084               	movwf	4
  1553     0751  1783               	bsf	3,7
  1554     0752  1C23               	btfss	??_startTimer+1,0
  1555     0753  1383               	bcf	3,7
  1556     0754  0180               	clrf	0
  1557     0755  0A84               	incf	4,f
  1558     0756  0180               	clrf	0
  1559     0757                     l245:
  1560     0757  0008               	return
  1561     0758                     __end_of_startTimer:
  1562                           
  1563                           	psect	text7
  1564     0495                     __ptext7:	
  1565 ;; *************** function _check_TankStatus *****************
  1566 ;; Defined at:
  1567 ;;		line 14 in file "waterTankManager.c"
  1568 ;; Parameters:    Size  Location     Type
  1569 ;;		None
  1570 ;; Auto vars:     Size  Location     Type
  1571 ;;  bot             1    2[BANK0 ] unsigned char 
  1572 ;;  top             1    1[BANK0 ] unsigned char 
  1573 ;; Return value:  Size  Location     Type
  1574 ;;                  1    wreg      void 
  1575 ;; Registers used:
  1576 ;;		wreg, status,2, status,0
  1577 ;; Tracked objects:
  1578 ;;		On entry : 0/0
  1579 ;;		On exit  : 0/0
  1580 ;;		Unchanged: 0/0
  1581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1582 ;;      Params:         0       0       0       0       0
  1583 ;;      Locals:         0       2       0       0       0
  1584 ;;      Temps:          0       1       0       0       0
  1585 ;;      Totals:         0       3       0       0       0
  1586 ;;Total ram usage:        3 bytes
  1587 ;; Hardware stack levels used: 1
  1588 ;; Hardware stack levels required when called: 2
  1589 ;; This function calls:
  1590 ;;		Nothing
  1591 ;; This function is called by:
  1592 ;;		_run_waterTankLogic
  1593 ;; This function uses a non-reentrant model
  1594 ;;
  1595                           
  1596     0495                     _check_TankStatus:	
  1597                           ;psect for function _check_TankStatus
  1598                           
  1599     0495                     l1723:	
  1600                           ;incstack = 0
  1601                           ; Regs used in _check_TankStatus: [wreg+status,2+status,0]
  1602                           
  1603                           
  1604                           ;waterTankManager.c: 17:   unsigned char top = PORTCbits.RC6;
  1605     0495  1283               	bcf	3,5	;RP0=0, select bank0
  1606     0496  1303               	bcf	3,6	;RP1=0, select bank0
  1607     0497  0E07               	swapf	7,w	;volatile
  1608     0498  00A0               	movwf	??_check_TankStatus
  1609     0499  0CA0               	rrf	??_check_TankStatus,f
  1610     049A  0C20               	rrf	??_check_TankStatus,w
  1611     049B  3901               	andlw	1
  1612     049C  00A1               	movwf	check_TankStatus@top
  1613                           
  1614                           ;waterTankManager.c: 18:   unsigned char bot = PORTCbits.RC7;
  1615     049D  0D07               	rlf	7,w	;volatile
  1616     049E  0D07               	rlf	7,w	;volatile
  1617     049F  3901               	andlw	1
  1618     04A0  00A2               	movwf	check_TankStatus@bot
  1619                           
  1620                           ;waterTankManager.c: 20:   if(tankState == WTANK_ERROR)
  1621     04A1  3003               	movlw	3
  1622     04A2  066D               	xorwf	_tankState,w
  1623     04A3  1D03               	btfss	3,2
  1624     04A4  2CA6               	goto	u1371
  1625     04A5  2CA7               	goto	u1370
  1626     04A6                     u1371:
  1627     04A6  2CAA               	goto	l1727
  1628     04A7                     u1370:
  1629     04A7                     l1725:
  1630                           
  1631                           ;waterTankManager.c: 21:     tankState = WTANK_ERROR;
  1632     04A7  3003               	movlw	3
  1633     04A8  00ED               	movwf	_tankState
  1634     04A9  2CDB               	goto	l219
  1635     04AA                     l1727:
  1636     04AA  0321               	decf	check_TankStatus@top,w
  1637     04AB  1D03               	btfss	3,2
  1638     04AC  2CAE               	goto	u1381
  1639     04AD  2CAF               	goto	u1380
  1640     04AE                     u1381:
  1641     04AE  2CB5               	goto	l1733
  1642     04AF                     u1380:
  1643     04AF                     l1729:
  1644     04AF  0822               	movf	check_TankStatus@bot,w
  1645     04B0  1D03               	btfss	3,2
  1646     04B1  2CB3               	goto	u1391
  1647     04B2  2CB4               	goto	u1390
  1648     04B3                     u1391:
  1649     04B3  2CB5               	goto	l1733
  1650     04B4                     u1390:
  1651     04B4  2CA7               	goto	l1725
  1652     04B5                     l1733:
  1653     04B5  0821               	movf	check_TankStatus@top,w
  1654     04B6  1D03               	btfss	3,2
  1655     04B7  2CB9               	goto	u1401
  1656     04B8  2CBA               	goto	u1400
  1657     04B9                     u1401:
  1658     04B9  2CC2               	goto	l1739
  1659     04BA                     u1400:
  1660     04BA                     l1735:
  1661     04BA  0322               	decf	check_TankStatus@bot,w
  1662     04BB  1D03               	btfss	3,2
  1663     04BC  2CBE               	goto	u1411
  1664     04BD  2CBF               	goto	u1410
  1665     04BE                     u1411:
  1666     04BE  2CC2               	goto	l1739
  1667     04BF                     u1410:
  1668     04BF                     l1737:
  1669                           
  1670                           ;waterTankManager.c: 29:     tankState = WTANK_MID;
  1671     04BF  3001               	movlw	1
  1672     04C0  00ED               	movwf	_tankState
  1673     04C1  2CDB               	goto	l219
  1674     04C2                     l1739:
  1675     04C2  0321               	decf	check_TankStatus@top,w
  1676     04C3  1D03               	btfss	3,2
  1677     04C4  2CC6               	goto	u1421
  1678     04C5  2CC7               	goto	u1420
  1679     04C6                     u1421:
  1680     04C6  2CCE               	goto	l1745
  1681     04C7                     u1420:
  1682     04C7                     l1741:
  1683     04C7  0322               	decf	check_TankStatus@bot,w
  1684     04C8  1D03               	btfss	3,2
  1685     04C9  2CCB               	goto	u1431
  1686     04CA  2CCC               	goto	u1430
  1687     04CB                     u1431:
  1688     04CB  2CCE               	goto	l1745
  1689     04CC                     u1430:
  1690     04CC                     l1743:
  1691                           
  1692                           ;waterTankManager.c: 33:     tankState = WTANK_FULL;
  1693     04CC  01ED               	clrf	_tankState
  1694     04CD  2CDB               	goto	l219
  1695     04CE                     l1745:
  1696     04CE  0821               	movf	check_TankStatus@top,w
  1697     04CF  1D03               	btfss	3,2
  1698     04D0  2CD2               	goto	u1441
  1699     04D1  2CD3               	goto	u1440
  1700     04D2                     u1441:
  1701     04D2  2CDB               	goto	l213
  1702     04D3                     u1440:
  1703     04D3                     l1747:
  1704     04D3  0822               	movf	check_TankStatus@bot,w
  1705     04D4  1D03               	btfss	3,2
  1706     04D5  2CD7               	goto	u1451
  1707     04D6  2CD8               	goto	u1450
  1708     04D7                     u1451:
  1709     04D7  2CDB               	goto	l213
  1710     04D8                     u1450:
  1711     04D8                     l1749:
  1712                           
  1713                           ;waterTankManager.c: 37:     tankState = WTANK_LOW;
  1714     04D8  3002               	movlw	2
  1715     04D9  00ED               	movwf	_tankState
  1716     04DA  2CDB               	goto	l219
  1717     04DB                     l213:
  1718     04DB                     l219:
  1719     04DB  0008               	return
  1720     04DC                     __end_of_check_TankStatus:
  1721                           
  1722                           	psect	text8
  1723     0799                     __ptext8:	
  1724 ;; *************** function _pins_init *****************
  1725 ;; Defined at:
  1726 ;;		line 110 in file "./config.h"
  1727 ;; Parameters:    Size  Location     Type
  1728 ;;  _TRISA          1    wreg     unsigned char 
  1729 ;;  _TRISB          1    0[BANK0 ] unsigned char 
  1730 ;;  _TRISC          1    1[BANK0 ] unsigned char 
  1731 ;;  _TRISD          1    2[BANK0 ] unsigned char 
  1732 ;; Auto vars:     Size  Location     Type
  1733 ;;  _TRISA          1    3[BANK0 ] unsigned char 
  1734 ;; Return value:  Size  Location     Type
  1735 ;;                  1    wreg      void 
  1736 ;; Registers used:
  1737 ;;		wreg
  1738 ;; Tracked objects:
  1739 ;;		On entry : 0/0
  1740 ;;		On exit  : 0/0
  1741 ;;		Unchanged: 0/0
  1742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1743 ;;      Params:         0       3       0       0       0
  1744 ;;      Locals:         0       1       0       0       0
  1745 ;;      Temps:          0       0       0       0       0
  1746 ;;      Totals:         0       4       0       0       0
  1747 ;;Total ram usage:        4 bytes
  1748 ;; Hardware stack levels used: 1
  1749 ;; Hardware stack levels required when called: 2
  1750 ;; This function calls:
  1751 ;;		Nothing
  1752 ;; This function is called by:
  1753 ;;		_main
  1754 ;; This function uses a non-reentrant model
  1755 ;;
  1756                           
  1757     0799                     _pins_init:	
  1758                           ;psect for function _pins_init
  1759                           
  1760                           
  1761                           ;incstack = 0
  1762                           ; Regs used in _pins_init: [wreg]
  1763                           ;pins_init@_TRISA stored from wreg
  1764     0799  1283               	bcf	3,5	;RP0=0, select bank0
  1765     079A  1303               	bcf	3,6	;RP1=0, select bank0
  1766     079B  00A3               	movwf	pins_init@_TRISA
  1767     079C                     l1765:
  1768                           
  1769                           ;./config.h: 111:   TRISA = _TRISA;
  1770     079C  0823               	movf	pins_init@_TRISA,w
  1771     079D  1683               	bsf	3,5	;RP0=1, select bank1
  1772     079E  1303               	bcf	3,6	;RP1=0, select bank1
  1773     079F  0085               	movwf	5	;volatile
  1774                           
  1775                           ;./config.h: 112:   TRISB = _TRISB;
  1776     07A0  1283               	bcf	3,5	;RP0=0, select bank0
  1777     07A1  1303               	bcf	3,6	;RP1=0, select bank0
  1778     07A2  0820               	movf	pins_init@_TRISB,w
  1779     07A3  1683               	bsf	3,5	;RP0=1, select bank1
  1780     07A4  1303               	bcf	3,6	;RP1=0, select bank1
  1781     07A5  0086               	movwf	6	;volatile
  1782                           
  1783                           ;./config.h: 113:   TRISC = _TRISC;
  1784     07A6  1283               	bcf	3,5	;RP0=0, select bank0
  1785     07A7  1303               	bcf	3,6	;RP1=0, select bank0
  1786     07A8  0821               	movf	pins_init@_TRISC,w
  1787     07A9  1683               	bsf	3,5	;RP0=1, select bank1
  1788     07AA  1303               	bcf	3,6	;RP1=0, select bank1
  1789     07AB  0087               	movwf	7	;volatile
  1790                           
  1791                           ;./config.h: 114:   TRISD = _TRISD;
  1792     07AC  1283               	bcf	3,5	;RP0=0, select bank0
  1793     07AD  1303               	bcf	3,6	;RP1=0, select bank0
  1794     07AE  0822               	movf	pins_init@_TRISD,w
  1795     07AF  1683               	bsf	3,5	;RP0=1, select bank1
  1796     07B0  1303               	bcf	3,6	;RP1=0, select bank1
  1797     07B1  0088               	movwf	8	;volatile
  1798     07B2                     l1767:
  1799                           
  1800                           ;./config.h: 116:   OPTION_REGbits.nRBPU = 0;
  1801     07B2  1381               	bcf	1,7	;volatile
  1802     07B3                     l1769:
  1803                           
  1804                           ;./config.h: 118:   TRISCbits.TRISC6 = 1;
  1805     07B3  1707               	bsf	7,6	;volatile
  1806     07B4                     l1771:
  1807                           
  1808                           ;./config.h: 119:   TRISCbits.TRISC7 = 1;
  1809     07B4  1787               	bsf	7,7	;volatile
  1810     07B5                     l90:
  1811     07B5  0008               	return
  1812     07B6                     __end_of_pins_init:
  1813                           
  1814                           	psect	text9
  1815     06F0                     __ptext9:	
  1816 ;; *************** function _lcd_run *****************
  1817 ;; Defined at:
  1818 ;;		line 102 in file "./lcdFunctions.h"
  1819 ;; Parameters:    Size  Location     Type
  1820 ;;		None
  1821 ;; Auto vars:     Size  Location     Type
  1822 ;;		None
  1823 ;; Return value:  Size  Location     Type
  1824 ;;                  1    wreg      void 
  1825 ;; Registers used:
  1826 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1827 ;; Tracked objects:
  1828 ;;		On entry : 0/0
  1829 ;;		On exit  : 0/0
  1830 ;;		Unchanged: 0/0
  1831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1832 ;;      Params:         0       0       0       0       0
  1833 ;;      Locals:         0       0       0       0       0
  1834 ;;      Temps:          0       0       0       0       0
  1835 ;;      Totals:         0       0       0       0       0
  1836 ;;Total ram usage:        0 bytes
  1837 ;; Hardware stack levels used: 1
  1838 ;; Hardware stack levels required when called: 8
  1839 ;; This function calls:
  1840 ;;		_lcd_debounceButtons
  1841 ;;		_print_Index
  1842 ;;		_print_TankState
  1843 ;; This function is called by:
  1844 ;;		_main
  1845 ;; This function uses a non-reentrant model
  1846 ;;
  1847                           
  1848     06F0                     _lcd_run:	
  1849                           ;psect for function _lcd_run
  1850                           
  1851     06F0                     l1785:	
  1852                           ;incstack = 0
  1853 ;; hardware stack exceeded
  1854                           ; Regs used in _lcd_run: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1855                           
  1856                           
  1857                           ;./lcdFunctions.h: 105:   lcd_debounceButtons();
  1858     06F0  120A  118A  2638  120A  118A  	fcall	_lcd_debounceButtons
  1859                           
  1860                           ;./lcdFunctions.h: 107:   switch(lcd_index)
  1861     06F5  2F02               	goto	l1799
  1862     06F6                     l1787:
  1863                           
  1864                           ;./lcdFunctions.h: 110:     print_TankState();
  1865     06F6  120A  118A  23F7  120A  118A  	fcall	_print_TankState
  1866                           
  1867                           ;./lcdFunctions.h: 111:     break;
  1868     06FB  2F12               	goto	l163
  1869     06FC                     l1789:
  1870                           
  1871                           ;./lcdFunctions.h: 114:     print_Index();
  1872     06FC  120A  118A  269E  120A  118A  	fcall	_print_Index
  1873                           
  1874                           ;./lcdFunctions.h: 115:     break;
  1875     0701  2F12               	goto	l163
  1876     0702                     l1799:
  1877     0702  1283               	bcf	3,5	;RP0=0, select bank0
  1878     0703  1303               	bcf	3,6	;RP1=0, select bank0
  1879     0704  086A               	movf	_lcd_index,w
  1880                           
  1881                           ; Switch size 1, requested type "simple"
  1882                           ; Number of cases is 4, Range of values is 1 to 4
  1883                           ; switch strategies available:
  1884                           ; Name         Instructions Cycles
  1885                           ; simple_byte           13     7 (average)
  1886                           ; direct_byte           23    11 (fixed)
  1887                           ; jumptable            263     9 (fixed)
  1888                           ;	Chosen strategy is simple_byte
  1889     0705  3A01               	xorlw	1	; case 1
  1890     0706  1903               	skipnz
  1891     0707  2EF6               	goto	l1787
  1892     0708  3A03               	xorlw	3	; case 2
  1893     0709  1903               	skipnz
  1894     070A  2EFC               	goto	l1789
  1895     070B  3A01               	xorlw	1	; case 3
  1896     070C  1903               	skipnz
  1897     070D  2EFC               	goto	l1789
  1898     070E  3A07               	xorlw	7	; case 4
  1899     070F  1903               	skipnz
  1900     0710  2EFC               	goto	l1789
  1901     0711  2EFC               	goto	l1789
  1902     0712                     l163:
  1903     0712  0008               	return
  1904     0713                     __end_of_lcd_run:
  1905                           
  1906                           	psect	text10
  1907     03F7                     __ptext10:	
  1908 ;; *************** function _print_TankState *****************
  1909 ;; Defined at:
  1910 ;;		line 45 in file "./lcdFunctions.h"
  1911 ;; Parameters:    Size  Location     Type
  1912 ;;		None
  1913 ;; Auto vars:     Size  Location     Type
  1914 ;;  buffer         20   51[BANK0 ] unsigned char [20]
  1915 ;; Return value:  Size  Location     Type
  1916 ;;                  1    wreg      void 
  1917 ;; Registers used:
  1918 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1919 ;; Tracked objects:
  1920 ;;		On entry : 0/0
  1921 ;;		On exit  : 0/0
  1922 ;;		Unchanged: 0/0
  1923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1924 ;;      Params:         0       0       0       0       0
  1925 ;;      Locals:         0      20       0       0       0
  1926 ;;      Temps:          0       0       0       0       0
  1927 ;;      Totals:         0      20       0       0       0
  1928 ;;Total ram usage:       20 bytes
  1929 ;; Hardware stack levels used: 1
  1930 ;; Hardware stack levels required when called: 7
  1931 ;; This function calls:
  1932 ;;		_Lcd_Clear
  1933 ;;		_Lcd_Set_Cursor
  1934 ;;		_Lcd_Write_String
  1935 ;;		_sprintf
  1936 ;; This function is called by:
  1937 ;;		_lcd_run
  1938 ;; This function uses a non-reentrant model
  1939 ;;
  1940                           
  1941     03F7                     _print_TankState:	
  1942                           ;psect for function _print_TankState
  1943                           
  1944     03F7                     l1677:	
  1945                           ;incstack = 0
  1946 ;; hardware stack exceeded
  1947                           ; Regs used in _print_TankState: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1948                           
  1949                           
  1950                           ;./lcdFunctions.h: 48:   if(tankState == lastTankState)
  1951     03F7  1283               	bcf	3,5	;RP0=0, select bank0
  1952     03F8  1303               	bcf	3,6	;RP1=0, select bank0
  1953     03F9  086D               	movf	_tankState,w
  1954     03FA  066C               	xorwf	_lastTankState,w
  1955     03FB  1D03               	skipz
  1956     03FC  2BFE               	goto	u1311
  1957     03FD  2BFF               	goto	u1310
  1958     03FE                     u1311:
  1959     03FE  2C00               	goto	l1681
  1960     03FF                     u1310:
  1961     03FF  2C46               	goto	l144
  1962     0400                     l1681:
  1963                           
  1964                           ;./lcdFunctions.h: 51:   lastTankState = tankState;
  1965     0400  086D               	movf	_tankState,w
  1966     0401  00EC               	movwf	_lastTankState
  1967     0402                     l1683:
  1968                           
  1969                           ;./lcdFunctions.h: 53:   Lcd_Clear();
  1970     0402  120A  158A  27D8  120A  118A  	fcall	_Lcd_Clear
  1971     0407                     l1685:
  1972                           
  1973                           ;./lcdFunctions.h: 54:   char buffer[20];;./lcdFunctions.h: 56:   Lcd_Set_Cursor(1,1);
  1974     0407  1283               	bcf	3,5	;RP0=0, select bank0
  1975     0408  1303               	bcf	3,6	;RP1=0, select bank0
  1976     0409  01A4               	clrf	Lcd_Set_Cursor@b
  1977     040A  0AA4               	incf	Lcd_Set_Cursor@b,f
  1978     040B  3001               	movlw	1
  1979     040C  120A  118A  2447  120A  118A  	fcall	_Lcd_Set_Cursor
  1980     0411                     l1687:
  1981                           
  1982                           ;./lcdFunctions.h: 57:   Lcd_Write_String("Tank State:");
  1983     0411  3001               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1984     0412  1283               	bcf	3,5	;RP0=0, select bank0
  1985     0413  1303               	bcf	3,6	;RP1=0, select bank0
  1986     0414  00A5               	movwf	Lcd_Write_String@a
  1987     0415  3080               	movlw	128
  1988     0416  00A6               	movwf	Lcd_Write_String@a+1
  1989     0417  120A  118A  24DC  120A  118A  	fcall	_Lcd_Write_String
  1990     041C                     l1689:
  1991                           
  1992                           ;./lcdFunctions.h: 59:   sprintf(buffer, "%s" ,TankStateString[tankState]);
  1993     041C  3053               	movlw	(low (print_TankState@buffer| 0))& (0+255)
  1994     041D  1283               	bcf	3,5	;RP0=0, select bank0
  1995     041E  1303               	bcf	3,6	;RP1=0, select bank0
  1996     041F  00C2               	movwf	sprintf@s
  1997     0420  3026               	movlw	(low ((STR_6-__stringbase)| (0+32768)))& (0+255)
  1998     0421  00C3               	movwf	sprintf@fmt
  1999     0422  086D               	movf	_tankState,w
  2000     0423  3EC6               	addlw	(low (_TankStateString| 0))& (0+255)
  2001     0424  0084               	movwf	4
  2002     0425  1383               	bcf	3,7	;select IRP bank1
  2003     0426  0800               	movf	0,w
  2004     0427  00C4               	movwf	low ((?_sprintf| 0+2))
  2005     0428  3000               	movlw	0
  2006     0429  1D03               	btfss	3,2
  2007     042A  3080               	movlw	128
  2008     042B  00C5               	movwf	(low ((?_sprintf| 0+2))+1)
  2009     042C  120A  118A  2713  120A  118A  	fcall	_sprintf
  2010     0431                     l1691:
  2011                           
  2012                           ;./lcdFunctions.h: 61:   Lcd_Set_Cursor(2,1);
  2013     0431  1283               	bcf	3,5	;RP0=0, select bank0
  2014     0432  1303               	bcf	3,6	;RP1=0, select bank0
  2015     0433  01A4               	clrf	Lcd_Set_Cursor@b
  2016     0434  0AA4               	incf	Lcd_Set_Cursor@b,f
  2017     0435  3002               	movlw	2
  2018     0436  120A  118A  2447  120A  118A  	fcall	_Lcd_Set_Cursor
  2019     043B                     l1693:
  2020                           
  2021                           ;./lcdFunctions.h: 62:   Lcd_Write_String(buffer);
  2022     043B  3053               	movlw	(low (print_TankState@buffer| 0))& (0+255)
  2023     043C  1283               	bcf	3,5	;RP0=0, select bank0
  2024     043D  1303               	bcf	3,6	;RP1=0, select bank0
  2025     043E  00A5               	movwf	Lcd_Write_String@a
  2026     043F  3000               	movlw	0
  2027     0440  00A6               	movwf	Lcd_Write_String@a+1
  2028     0441  120A  118A  24DC  120A  118A  	fcall	_Lcd_Write_String
  2029     0446                     l144:
  2030     0446  0008               	return
  2031     0447                     __end_of_print_TankState:
  2032                           
  2033                           	psect	text11
  2034     069E                     __ptext11:	
  2035 ;; *************** function _print_Index *****************
  2036 ;; Defined at:
  2037 ;;		line 66 in file "./lcdFunctions.h"
  2038 ;; Parameters:    Size  Location     Type
  2039 ;;		None
  2040 ;; Auto vars:     Size  Location     Type
  2041 ;;  buffer         20   53[BANK0 ] unsigned char [20]
  2042 ;; Return value:  Size  Location     Type
  2043 ;;                  1    wreg      void 
  2044 ;; Registers used:
  2045 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2046 ;; Tracked objects:
  2047 ;;		On entry : 0/0
  2048 ;;		On exit  : 0/0
  2049 ;;		Unchanged: 0/0
  2050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2051 ;;      Params:         0       0       0       0       0
  2052 ;;      Locals:         0      20       0       0       0
  2053 ;;      Temps:          0       2       0       0       0
  2054 ;;      Totals:         0      22       0       0       0
  2055 ;;Total ram usage:       22 bytes
  2056 ;; Hardware stack levels used: 1
  2057 ;; Hardware stack levels required when called: 7
  2058 ;; This function calls:
  2059 ;;		_Lcd_Clear
  2060 ;;		_Lcd_Set_Cursor
  2061 ;;		_Lcd_Write_String
  2062 ;;		_sprintf
  2063 ;; This function is called by:
  2064 ;;		_lcd_run
  2065 ;; This function uses a non-reentrant model
  2066 ;;
  2067                           
  2068     069E                     _print_Index:	
  2069                           ;psect for function _print_Index
  2070                           
  2071     069E                     l1695:	
  2072                           ;incstack = 0
  2073 ;; hardware stack exceeded
  2074                           ; Regs used in _print_Index: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2075                           
  2076                           
  2077                           ;./lcdFunctions.h: 68:   Lcd_Clear();
  2078     069E  120A  158A  27D8  120A  118A  	fcall	_Lcd_Clear
  2079                           
  2080                           ;./lcdFunctions.h: 69:   char buffer[20];;./lcdFunctions.h: 71:   Lcd_Set_Cursor(1,1);
  2081     06A3  1283               	bcf	3,5	;RP0=0, select bank0
  2082     06A4  1303               	bcf	3,6	;RP1=0, select bank0
  2083     06A5  01A4               	clrf	Lcd_Set_Cursor@b
  2084     06A6  0AA4               	incf	Lcd_Set_Cursor@b,f
  2085     06A7  3001               	movlw	1
  2086     06A8  120A  118A  2447  120A  118A  	fcall	_Lcd_Set_Cursor
  2087     06AD                     l1697:
  2088                           
  2089                           ;./lcdFunctions.h: 72:   sprintf(buffer, "%d", lcd_index);
  2090     06AD  3055               	movlw	(low (print_Index@buffer| 0))& (0+255)
  2091     06AE  1283               	bcf	3,5	;RP0=0, select bank0
  2092     06AF  1303               	bcf	3,6	;RP1=0, select bank0
  2093     06B0  00C2               	movwf	sprintf@s
  2094     06B1  3023               	movlw	(low ((STR_7-__stringbase)| (0+32768)))& (0+255)
  2095     06B2  00C3               	movwf	sprintf@fmt
  2096     06B3  086A               	movf	_lcd_index,w
  2097     06B4  00D3               	movwf	??_print_Index
  2098     06B5  01D4               	clrf	??_print_Index+1
  2099     06B6  0853               	movf	??_print_Index,w
  2100     06B7  00C4               	movwf	?_sprintf+2
  2101     06B8  0854               	movf	??_print_Index+1,w
  2102     06B9  00C5               	movwf	?_sprintf+3
  2103     06BA  120A  118A  2713  120A  118A  	fcall	_sprintf
  2104     06BF                     l1699:
  2105                           
  2106                           ;./lcdFunctions.h: 74:   Lcd_Write_String(buffer);
  2107     06BF  3055               	movlw	(low (print_Index@buffer| 0))& (0+255)
  2108     06C0  1283               	bcf	3,5	;RP0=0, select bank0
  2109     06C1  1303               	bcf	3,6	;RP1=0, select bank0
  2110     06C2  00A5               	movwf	Lcd_Write_String@a
  2111     06C3  3000               	movlw	0
  2112     06C4  00A6               	movwf	Lcd_Write_String@a+1
  2113     06C5  120A  118A  24DC  120A  118A  	fcall	_Lcd_Write_String
  2114     06CA                     l147:
  2115     06CA  0008               	return
  2116     06CB                     __end_of_print_Index:
  2117                           
  2118                           	psect	text12
  2119     0713                     __ptext12:	
  2120 ;; *************** function _sprintf *****************
  2121 ;; Defined at:
  2122 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_sprintf.c"
  2123 ;; Parameters:    Size  Location     Type
  2124 ;;  s               1   34[BANK0 ] PTR unsigned char 
  2125 ;;		 -> print_Index@buffer(20), print_TankState@buffer(20), 
  2126 ;;  fmt             1   35[BANK0 ] PTR const unsigned char 
  2127 ;;		 -> STR_7(3), STR_6(3), 
  2128 ;; Auto vars:     Size  Location     Type
  2129 ;;  f              11   40[BANK0 ] struct _IO_FILE
  2130 ;;  ret             2    0        int 
  2131 ;;  ap              1   39[BANK0 ] PTR void [1]
  2132 ;;		 -> ?_sprintf(2), 
  2133 ;; Return value:  Size  Location     Type
  2134 ;;                  2   34[BANK0 ] int 
  2135 ;; Registers used:
  2136 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2137 ;; Tracked objects:
  2138 ;;		On entry : 0/0
  2139 ;;		On exit  : 0/0
  2140 ;;		Unchanged: 0/0
  2141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2142 ;;      Params:         0       4       0       0       0
  2143 ;;      Locals:         0      12       0       0       0
  2144 ;;      Temps:          0       1       0       0       0
  2145 ;;      Totals:         0      17       0       0       0
  2146 ;;Total ram usage:       17 bytes
  2147 ;; Hardware stack levels used: 1
  2148 ;; Hardware stack levels required when called: 6
  2149 ;; This function calls:
  2150 ;;		_vfprintf
  2151 ;; This function is called by:
  2152 ;;		_print_TankState
  2153 ;;		_print_Index
  2154 ;; This function uses a non-reentrant model
  2155 ;;
  2156                           
  2157     0713                     _sprintf:	
  2158                           ;psect for function _sprintf
  2159                           
  2160     0713                     l1647:	
  2161                           ;incstack = 0
  2162 ;; hardware stack exceeded
  2163                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2164                           
  2165     0713  3044               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  2166     0714  1283               	bcf	3,5	;RP0=0, select bank0
  2167     0715  1303               	bcf	3,6	;RP1=0, select bank0
  2168     0716  00C7               	movwf	sprintf@ap
  2169     0717                     l1649:
  2170     0717  0842               	movf	sprintf@s,w
  2171     0718  00C8               	movwf	sprintf@f
  2172     0719  3000               	movlw	0
  2173     071A  00C9               	movwf	sprintf@f+1
  2174     071B                     l1651:
  2175     071B  01CA               	clrf	sprintf@f+2
  2176     071C  01CB               	clrf	sprintf@f+3
  2177     071D                     l1653:
  2178     071D  01D1               	clrf	sprintf@f+9
  2179     071E  01D2               	clrf	sprintf@f+10
  2180     071F                     l1655:
  2181     071F  3048               	movlw	low sprintf@f
  2182     0720  00BD               	movwf	vfprintf@fp
  2183     0721  3000               	movlw	high sprintf@f
  2184     0722  00BE               	movwf	vfprintf@fp+1
  2185     0723  0843               	movf	sprintf@fmt,w
  2186     0724  00BF               	movwf	vfprintf@fmt
  2187     0725  3047               	movlw	(low (sprintf@ap| 0))& (0+255)
  2188     0726  00C0               	movwf	vfprintf@ap
  2189     0727  120A  118A  26CB  120A  118A  	fcall	_vfprintf
  2190     072C                     l1657:
  2191     072C  1283               	bcf	3,5	;RP0=0, select bank0
  2192     072D  1303               	bcf	3,6	;RP1=0, select bank0
  2193     072E  084A               	movf	sprintf@f+2,w
  2194     072F  0742               	addwf	sprintf@s,w
  2195     0730  00C6               	movwf	??_sprintf
  2196     0731  0846               	movf	??_sprintf,w
  2197     0732  0084               	movwf	4
  2198     0733  1383               	bcf	3,7	;select IRP bank0
  2199     0734  0180               	clrf	0
  2200     0735                     l810:
  2201     0735  0008               	return
  2202     0736                     __end_of_sprintf:
  2203                           
  2204                           	psect	text13
  2205     06CB                     __ptext13:	
  2206 ;; *************** function _vfprintf *****************
  2207 ;; Defined at:
  2208 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  2209 ;; Parameters:    Size  Location     Type
  2210 ;;  fp              2   29[BANK0 ] PTR struct _IO_FILE
  2211 ;;		 -> sprintf@f(11), 
  2212 ;;  fmt             1   31[BANK0 ] PTR const unsigned char 
  2213 ;;		 -> STR_7(3), STR_6(3), 
  2214 ;;  ap              1   32[BANK0 ] PTR PTR void 
  2215 ;;		 -> sprintf@ap(1), 
  2216 ;; Auto vars:     Size  Location     Type
  2217 ;;  cfmt            1   33[BANK0 ] PTR unsigned char 
  2218 ;;		 -> STR_7(3), STR_6(3), 
  2219 ;; Return value:  Size  Location     Type
  2220 ;;                  2   29[BANK0 ] int 
  2221 ;; Registers used:
  2222 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2223 ;; Tracked objects:
  2224 ;;		On entry : 0/0
  2225 ;;		On exit  : 0/0
  2226 ;;		Unchanged: 0/0
  2227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2228 ;;      Params:         0       4       0       0       0
  2229 ;;      Locals:         0       1       0       0       0
  2230 ;;      Temps:          0       0       0       0       0
  2231 ;;      Totals:         0       5       0       0       0
  2232 ;;Total ram usage:        5 bytes
  2233 ;; Hardware stack levels used: 1
  2234 ;; Hardware stack levels required when called: 5
  2235 ;; This function calls:
  2236 ;;		_vfpfcnvrt
  2237 ;; This function is called by:
  2238 ;;		_sprintf
  2239 ;; This function uses a non-reentrant model
  2240 ;;
  2241                           
  2242     06CB                     _vfprintf:	
  2243                           ;psect for function _vfprintf
  2244                           
  2245     06CB                     l1603:	
  2246                           ;incstack = 0
  2247 ;; hardware stack exceeded
  2248                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2249                           
  2250                           
  2251                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  2252     06CB  1283               	bcf	3,5	;RP0=0, select bank0
  2253     06CC  1303               	bcf	3,6	;RP1=0, select bank0
  2254     06CD  083F               	movf	vfprintf@fmt,w
  2255     06CE  00C1               	movwf	vfprintf@cfmt
  2256                           
  2257                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2258     06CF  2EDF               	goto	l1607
  2259     06D0                     l1605:
  2260                           
  2261                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2262     06D0  083D               	movf	vfprintf@fp,w
  2263     06D1  00AD               	movwf	vfpfcnvrt@fp
  2264     06D2  083E               	movf	vfprintf@fp+1,w
  2265     06D3  00AE               	movwf	vfpfcnvrt@fp+1
  2266     06D4  3041               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
  2267     06D5  00AF               	movwf	vfpfcnvrt@fmt
  2268     06D6  0840               	movf	vfprintf@ap,w
  2269     06D7  00B0               	movwf	vfpfcnvrt@ap
  2270     06D8  3000               	movlw	0
  2271     06D9  00B1               	movwf	vfpfcnvrt@ap+1
  2272     06DA  120A  118A  2047  120A  118A  	fcall	_vfpfcnvrt
  2273     06DF                     l1607:
  2274                           
  2275                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2276     06DF  1283               	bcf	3,5	;RP0=0, select bank0
  2277     06E0  1303               	bcf	3,6	;RP1=0, select bank0
  2278     06E1  0841               	movf	vfprintf@cfmt,w
  2279     06E2  0084               	movwf	4
  2280     06E3  120A  118A  260A  120A  118A  	fcall	stringdir
  2281     06E8  3A00               	xorlw	0
  2282     06E9  1D03               	skipz
  2283     06EA  2EEC               	goto	u1211
  2284     06EB  2EED               	goto	u1210
  2285     06EC                     u1211:
  2286     06EC  2ED0               	goto	l1605
  2287     06ED                     u1210:
  2288     06ED                     l1609:
  2289                           
  2290                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  2291     06ED  01BD               	clrf	?_vfprintf
  2292     06EE  01BE               	clrf	?_vfprintf+1
  2293     06EF                     l861:
  2294     06EF  0008               	return
  2295     06F0                     __end_of_vfprintf:
  2296                           
  2297                           	psect	text14
  2298     0047                     __ptext14:	
  2299 ;; *************** function _vfpfcnvrt *****************
  2300 ;; Defined at:
  2301 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
  2302 ;; Parameters:    Size  Location     Type
  2303 ;;  fp              2   13[BANK0 ] PTR struct _IO_FILE
  2304 ;;		 -> sprintf@f(11), 
  2305 ;;  fmt             1   15[BANK0 ] PTR PTR unsigned char 
  2306 ;;		 -> vfprintf@cfmt(1), 
  2307 ;;  ap              2   16[BANK0 ] PTR PTR void 
  2308 ;;		 -> sprintf@ap(1), 
  2309 ;; Auto vars:     Size  Location     Type
  2310 ;;  cp              2   20[BANK0 ] PTR unsigned char 
  2311 ;;		 -> ?_sprintf(2), STR_4(5), STR_3(6), STR_2(5), 
  2312 ;;		 -> STR_1(6), 
  2313 ;;  convarg         4   24[BANK0 ] struct .
  2314 ;;  c               1   28[BANK0 ] unsigned char 
  2315 ;;  cp              1   23[BANK0 ] PTR unsigned char 
  2316 ;;		 -> STR_7(3), STR_6(3), 
  2317 ;;  done            1   22[BANK0 ] _Bool 
  2318 ;; Return value:  Size  Location     Type
  2319 ;;                  1    wreg      void 
  2320 ;; Registers used:
  2321 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2322 ;; Tracked objects:
  2323 ;;		On entry : 0/0
  2324 ;;		On exit  : 0/0
  2325 ;;		Unchanged: 0/0
  2326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2327 ;;      Params:         0       5       0       0       0
  2328 ;;      Locals:         0       9       0       0       0
  2329 ;;      Temps:          0       2       0       0       0
  2330 ;;      Totals:         0      16       0       0       0
  2331 ;;Total ram usage:       16 bytes
  2332 ;; Hardware stack levels used: 1
  2333 ;; Hardware stack levels required when called: 4
  2334 ;; This function calls:
  2335 ;;		___awdiv
  2336 ;;		___awmod
  2337 ;;		_abs
  2338 ;;		_fputc
  2339 ;; This function is called by:
  2340 ;;		_vfprintf
  2341 ;; This function uses a non-reentrant model
  2342 ;;
  2343                           
  2344     0047                     _vfpfcnvrt:	
  2345                           ;psect for function _vfpfcnvrt
  2346                           
  2347     0047                     l1489:	
  2348                           ;incstack = 0
  2349 ;; hardware stack exceeded
  2350                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2351                           
  2352                           
  2353                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  2354     0047  1283               	bcf	3,5	;RP0=0, select bank0
  2355     0048  1303               	bcf	3,6	;RP1=0, select bank0
  2356     0049  082F               	movf	vfpfcnvrt@fmt,w
  2357     004A  0084               	movwf	4
  2358     004B  1383               	bcf	3,7	;select IRP bank0
  2359     004C  0800               	movf	0,w
  2360     004D  0084               	movwf	4
  2361     004E  120A  118A  260A  120A  118A  	fcall	stringdir
  2362     0053  3A25               	xorlw	37
  2363     0054  1D03               	skipz
  2364     0055  2857               	goto	u1041
  2365     0056  2858               	goto	u1040
  2366     0057                     u1041:
  2367     0057  29B0               	goto	l1563
  2368     0058                     u1040:
  2369     0058                     l1491:
  2370                           
  2371                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  2372     0058  082F               	movf	vfpfcnvrt@fmt,w
  2373     0059  0084               	movwf	4
  2374     005A  3001               	movlw	1
  2375     005B  0780               	addwf	0,f
  2376     005C                     l1493:
  2377                           
  2378                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  2379     005C  1683               	bsf	3,5	;RP0=1, select bank1
  2380     005D  1303               	bcf	3,6	;RP1=0, select bank1
  2381     005E  01C0               	clrf	_width^(0+128)
  2382     005F  01C1               	clrf	(_width+1)^(0+128)
  2383     0060  3000               	movlw	0
  2384     0061  1283               	bcf	3,5	;RP0=0, select bank0
  2385     0062  1303               	bcf	3,6	;RP1=0, select bank0
  2386     0063  00EE               	movwf	_flags
  2387     0064                     l1495:
  2388                           
  2389                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  2390     0064  30FF               	movlw	255
  2391     0065  1683               	bsf	3,5	;RP0=1, select bank1
  2392     0066  1303               	bcf	3,6	;RP1=0, select bank1
  2393     0067  00C2               	movwf	_prec^(0+128)
  2394     0068  30FF               	movlw	255
  2395     0069  00C3               	movwf	(_prec^(0+128)+1)
  2396     006A                     l1497:
  2397                           
  2398                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  2399     006A  1283               	bcf	3,5	;RP0=0, select bank0
  2400     006B  1303               	bcf	3,6	;RP1=0, select bank0
  2401     006C  082F               	movf	vfpfcnvrt@fmt,w
  2402     006D  0084               	movwf	4
  2403     006E  0800               	movf	0,w
  2404     006F  00B7               	movwf	vfpfcnvrt@cp
  2405     0070                     l1499:
  2406                           
  2407                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2408     0070  0837               	movf	vfpfcnvrt@cp,w
  2409     0071  0084               	movwf	4
  2410     0072  120A  118A  260A  120A  118A  	fcall	stringdir
  2411     0077  3A64               	xorlw	100
  2412     0078  1903               	skipnz
  2413     0079  287B               	goto	u1051
  2414     007A  287C               	goto	u1050
  2415     007B                     u1051:
  2416     007B  2888               	goto	l1503
  2417     007C                     u1050:
  2418     007C                     l1501:
  2419     007C  0837               	movf	vfpfcnvrt@cp,w
  2420     007D  0084               	movwf	4
  2421     007E  120A  118A  260A  120A  118A  	fcall	stringdir
  2422     0083  3A69               	xorlw	105
  2423     0084  1D03               	skipz
  2424     0085  2887               	goto	u1061
  2425     0086  2888               	goto	u1060
  2426     0087                     u1061:
  2427     0087  291A               	goto	l1531
  2428     0088                     u1060:
  2429     0088                     l1503:
  2430                           
  2431                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2432     0088  0830               	movf	vfpfcnvrt@ap,w
  2433     0089  0084               	movwf	4
  2434     008A  1783               	bsf	3,7
  2435     008B  1C31               	btfss	vfpfcnvrt@ap+1,0
  2436     008C  1383               	bcf	3,7
  2437     008D  0800               	movf	0,w
  2438     008E  00FF               	movwf	btemp+1
  2439     008F  3002               	movlw	2
  2440     0090  0780               	addwf	0,f
  2441     0091  087F               	movf	btemp+1,w
  2442     0092  0084               	movwf	4
  2443     0093  1383               	bcf	3,7	;select IRP bank0
  2444     0094  0800               	movf	0,w
  2445     0095  00B8               	movwf	vfpfcnvrt@convarg
  2446     0096  0A84               	incf	4,f
  2447     0097  0800               	movf	0,w
  2448     0098  00B9               	movwf	vfpfcnvrt@convarg+1
  2449     0099                     l1505:
  2450                           
  2451                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  2452     0099  082F               	movf	vfpfcnvrt@fmt,w
  2453     009A  0084               	movwf	4
  2454     009B  0837               	movf	vfpfcnvrt@cp,w
  2455     009C  3E01               	addlw	1
  2456     009D  0080               	movwf	0
  2457     009E                     l1507:
  2458                           
  2459                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  2460     009E  3020               	movlw	32
  2461     009F  00BC               	movwf	vfpfcnvrt@c
  2462     00A0                     l1509:
  2463                           
  2464                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  2465     00A0  1BB9               	btfsc	vfpfcnvrt@convarg+1,7
  2466     00A1  28A3               	goto	u1071
  2467     00A2  28A5               	goto	u1070
  2468     00A3                     u1071:
  2469     00A3  3001               	movlw	1
  2470     00A4  28A6               	goto	u1080
  2471     00A5                     u1070:
  2472     00A5  3000               	movlw	0
  2473     00A6                     u1080:
  2474     00A6  00B6               	movwf	vfpfcnvrt@done
  2475     00A7                     l1511:
  2476                           
  2477                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  2478     00A7  3001               	movlw	1
  2479     00A8  02BC               	subwf	vfpfcnvrt@c,f
  2480     00A9  083C               	movf	vfpfcnvrt@c,w
  2481     00AA  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  2482     00AB  0084               	movwf	4
  2483     00AC  300A               	movlw	10
  2484     00AD  00A0               	movwf	___awmod@divisor
  2485     00AE  3000               	movlw	0
  2486     00AF  00A1               	movwf	___awmod@divisor+1
  2487     00B0  0839               	movf	vfpfcnvrt@convarg+1,w
  2488     00B1  00A3               	movwf	___awmod@dividend+1
  2489     00B2  0838               	movf	vfpfcnvrt@convarg,w
  2490     00B3  00A2               	movwf	___awmod@dividend
  2491     00B4  120A  118A  239E  120A  118A  	fcall	___awmod
  2492     00B9  1283               	bcf	3,5	;RP0=0, select bank0
  2493     00BA  1303               	bcf	3,6	;RP1=0, select bank0
  2494     00BB  0821               	movf	?___awmod+1,w
  2495     00BC  00A7               	movwf	abs@a+1
  2496     00BD  0820               	movf	?___awmod,w
  2497     00BE  00A6               	movwf	abs@a
  2498     00BF  120A  118A  27E5  120A  118A  	fcall	_abs
  2499     00C4  1283               	bcf	3,5	;RP0=0, select bank0
  2500     00C5  1303               	bcf	3,6	;RP1=0, select bank0
  2501     00C6  0826               	movf	?_abs,w
  2502     00C7  3E30               	addlw	48
  2503     00C8  1383               	bcf	3,7	;select IRP bank1
  2504     00C9  0080               	movwf	0
  2505     00CA                     l1513:
  2506                           
  2507                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  2508     00CA  300A               	movlw	10
  2509     00CB  00A0               	movwf	___awdiv@divisor
  2510     00CC  3000               	movlw	0
  2511     00CD  00A1               	movwf	___awdiv@divisor+1
  2512     00CE  0839               	movf	vfpfcnvrt@convarg+1,w
  2513     00CF  00A3               	movwf	___awdiv@dividend+1
  2514     00D0  0838               	movf	vfpfcnvrt@convarg,w
  2515     00D1  00A2               	movwf	___awdiv@dividend
  2516     00D2  120A  118A  22D6  120A  118A  	fcall	___awdiv
  2517     00D7  1283               	bcf	3,5	;RP0=0, select bank0
  2518     00D8  1303               	bcf	3,6	;RP1=0, select bank0
  2519     00D9  0821               	movf	?___awdiv+1,w
  2520     00DA  00B9               	movwf	vfpfcnvrt@convarg+1
  2521     00DB  0820               	movf	?___awdiv,w
  2522     00DC  00B8               	movwf	vfpfcnvrt@convarg
  2523     00DD                     l1515:
  2524                           
  2525                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  2526     00DD  0838               	movf	vfpfcnvrt@convarg,w
  2527     00DE  0439               	iorwf	vfpfcnvrt@convarg+1,w
  2528     00DF  1903               	btfsc	3,2
  2529     00E0  28E2               	goto	u1091
  2530     00E1  28E3               	goto	u1090
  2531     00E2                     u1091:
  2532     00E2  28E8               	goto	l1519
  2533     00E3                     u1090:
  2534     00E3                     l1517:
  2535     00E3  083C               	movf	vfpfcnvrt@c,w
  2536     00E4  1D03               	btfss	3,2
  2537     00E5  28E7               	goto	u1101
  2538     00E6  28E8               	goto	u1100
  2539     00E7                     u1101:
  2540     00E7  28A7               	goto	l1511
  2541     00E8                     u1100:
  2542     00E8                     l1519:
  2543                           
  2544                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  2545     00E8  083C               	movf	vfpfcnvrt@c,w
  2546     00E9  1903               	btfsc	3,2
  2547     00EA  28EC               	goto	u1111
  2548     00EB  28ED               	goto	u1110
  2549     00EC                     u1111:
  2550     00EC  2913               	goto	l1529
  2551     00ED                     u1110:
  2552     00ED                     l1521:
  2553     00ED  0836               	movf	vfpfcnvrt@done,w
  2554     00EE  1903               	btfsc	3,2
  2555     00EF  28F1               	goto	u1121
  2556     00F0  28F2               	goto	u1120
  2557     00F1                     u1121:
  2558     00F1  2913               	goto	l1529
  2559     00F2                     u1120:
  2560     00F2                     l1523:
  2561                           
  2562                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  2563     00F2  3001               	movlw	1
  2564     00F3  02BC               	subwf	vfpfcnvrt@c,f
  2565     00F4  083C               	movf	vfpfcnvrt@c,w
  2566     00F5  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  2567     00F6  0084               	movwf	4
  2568     00F7  302D               	movlw	45
  2569     00F8  1383               	bcf	3,7	;select IRP bank1
  2570     00F9  0080               	movwf	0
  2571     00FA  2913               	goto	l1529
  2572     00FB                     l1525:
  2573                           
  2574                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  2575     00FB  083C               	movf	vfpfcnvrt@c,w
  2576     00FC  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  2577     00FD  0084               	movwf	4
  2578     00FE  1383               	bcf	3,7	;select IRP bank1
  2579     00FF  0800               	movf	0,w
  2580     0100  00B2               	movwf	??_vfpfcnvrt
  2581     0101  01B3               	clrf	??_vfpfcnvrt+1
  2582     0102  0832               	movf	??_vfpfcnvrt,w
  2583     0103  00A0               	movwf	fputc@c
  2584     0104  0833               	movf	??_vfpfcnvrt+1,w
  2585     0105  00A1               	movwf	fputc@c+1
  2586     0106  082D               	movf	vfpfcnvrt@fp,w
  2587     0107  00A2               	movwf	fputc@fp
  2588     0108  082E               	movf	vfpfcnvrt@fp+1,w
  2589     0109  00A3               	movwf	fputc@fp+1
  2590     010A  120A  118A  21CA  120A  118A  	fcall	_fputc
  2591     010F                     l1527:
  2592     010F  3001               	movlw	1
  2593     0110  1283               	bcf	3,5	;RP0=0, select bank0
  2594     0111  1303               	bcf	3,6	;RP1=0, select bank0
  2595     0112  07BC               	addwf	vfpfcnvrt@c,f
  2596     0113                     l1529:
  2597                           
  2598                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  2599     0113  3020               	movlw	32
  2600     0114  063C               	xorwf	vfpfcnvrt@c,w
  2601     0115  1D03               	btfss	3,2
  2602     0116  2918               	goto	u1131
  2603     0117  2919               	goto	u1130
  2604     0118                     u1131:
  2605     0118  28FB               	goto	l1525
  2606     0119                     u1130:
  2607     0119  29C9               	goto	l848
  2608     011A                     l1531:
  2609                           
  2610                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1656:   done = 0;
  2611     011A  01B6               	clrf	vfpfcnvrt@done
  2612     011B                     l1533:
  2613                           
  2614                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1657:   if ((*fmt
      +                          )[0] == 's') {
  2615     011B  082F               	movf	vfpfcnvrt@fmt,w
  2616     011C  0084               	movwf	4
  2617     011D  0800               	movf	0,w
  2618     011E  0084               	movwf	4
  2619     011F  120A  118A  260A  120A  118A  	fcall	stringdir
  2620     0124  3A73               	xorlw	115
  2621     0125  1D03               	skipz
  2622     0126  2928               	goto	u1141
  2623     0127  2929               	goto	u1140
  2624     0128                     u1141:
  2625     0128  2930               	goto	l1539
  2626     0129                     u1140:
  2627     0129                     l1535:
  2628                           
  2629                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1658:    ++*fmt;
  2630     0129  082F               	movf	vfpfcnvrt@fmt,w
  2631     012A  0084               	movwf	4
  2632     012B  3001               	movlw	1
  2633     012C  0780               	addwf	0,f
  2634     012D                     l1537:
  2635                           
  2636                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1659:    done = 1
      +                          ;
  2637     012D  3001               	movlw	1
  2638     012E  00B6               	movwf	vfpfcnvrt@done
  2639                           
  2640                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1660:   }
  2641     012F  2961               	goto	l1549
  2642     0130                     l1539:
  2643     0130  082F               	movf	vfpfcnvrt@fmt,w
  2644     0131  0084               	movwf	4
  2645     0132  0800               	movf	0,w
  2646     0133  0084               	movwf	4
  2647     0134  120A  118A  260A  120A  118A  	fcall	stringdir
  2648     0139  3A6C               	xorlw	108
  2649     013A  1D03               	skipz
  2650     013B  293D               	goto	u1151
  2651     013C  293E               	goto	u1150
  2652     013D                     u1151:
  2653     013D  2961               	goto	l1549
  2654     013E                     u1150:
  2655     013E                     l1541:
  2656     013E  082F               	movf	vfpfcnvrt@fmt,w
  2657     013F  0084               	movwf	4
  2658     0140  0800               	movf	0,w
  2659     0141  3E01               	addlw	1
  2660     0142  0084               	movwf	4
  2661     0143  120A  118A  260A  120A  118A  	fcall	stringdir
  2662     0148  3A6C               	xorlw	108
  2663     0149  1D03               	skipz
  2664     014A  294C               	goto	u1161
  2665     014B  294D               	goto	u1160
  2666     014C                     u1161:
  2667     014C  2961               	goto	l1549
  2668     014D                     u1160:
  2669     014D                     l1543:
  2670     014D  082F               	movf	vfpfcnvrt@fmt,w
  2671     014E  0084               	movwf	4
  2672     014F  0800               	movf	0,w
  2673     0150  3E02               	addlw	2
  2674     0151  0084               	movwf	4
  2675     0152  120A  118A  260A  120A  118A  	fcall	stringdir
  2676     0157  3A73               	xorlw	115
  2677     0158  1D03               	skipz
  2678     0159  295B               	goto	u1171
  2679     015A  295C               	goto	u1170
  2680     015B                     u1171:
  2681     015B  2961               	goto	l1549
  2682     015C                     u1170:
  2683     015C                     l1545:
  2684                           
  2685                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1662:    *fmt += 
      +                          3;
  2686     015C  082F               	movf	vfpfcnvrt@fmt,w
  2687     015D  0084               	movwf	4
  2688     015E  3003               	movlw	3
  2689     015F  0780               	addwf	0,f
  2690     0160  292D               	goto	l1537
  2691     0161                     l1549:
  2692                           
  2693                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1665:   if (done)
      +                           {
  2694     0161  0836               	movf	vfpfcnvrt@done,w
  2695     0162  1903               	btfsc	3,2
  2696     0163  2965               	goto	u1181
  2697     0164  2966               	goto	u1180
  2698     0165                     u1181:
  2699     0165  29A8               	goto	l1559
  2700     0166                     u1180:
  2701     0166                     l1551:
  2702                           
  2703                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1669:    for (cha
      +                          r * cp = (*(char * *)__va_arg(*(char * **)ap, (char *)0)); *cp != '\0'; cp++) {
  2704     0166  0830               	movf	vfpfcnvrt@ap,w
  2705     0167  0084               	movwf	4
  2706     0168  1783               	bsf	3,7
  2707     0169  1C31               	btfss	vfpfcnvrt@ap+1,0
  2708     016A  1383               	bcf	3,7
  2709     016B  0800               	movf	0,w
  2710     016C  00FF               	movwf	btemp+1
  2711     016D  3002               	movlw	2
  2712     016E  0780               	addwf	0,f
  2713     016F  087F               	movf	btemp+1,w
  2714     0170  0084               	movwf	4
  2715     0171  1383               	bcf	3,7	;select IRP bank0
  2716     0172  0800               	movf	0,w
  2717     0173  00B4               	movwf	vfpfcnvrt@cp_1120
  2718     0174  0A84               	incf	4,f
  2719     0175  0800               	movf	0,w
  2720     0176  0384               	decf	4,f
  2721     0177  00B5               	movwf	vfpfcnvrt@cp_1120+1
  2722     0178  2999               	goto	l1557
  2723     0179                     l1553:
  2724                           
  2725                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1670:     fputc(*
      +                          cp, fp);
  2726     0179  0835               	movf	vfpfcnvrt@cp_1120+1,w
  2727     017A  00FF               	movwf	btemp+1
  2728     017B  0834               	movf	vfpfcnvrt@cp_1120,w
  2729     017C  0084               	movwf	4
  2730     017D  120A  118A  2600  120A  118A  	fcall	stringtab
  2731     0182  00B2               	movwf	??_vfpfcnvrt
  2732     0183  01B3               	clrf	??_vfpfcnvrt+1
  2733     0184  0832               	movf	??_vfpfcnvrt,w
  2734     0185  00A0               	movwf	fputc@c
  2735     0186  0833               	movf	??_vfpfcnvrt+1,w
  2736     0187  00A1               	movwf	fputc@c+1
  2737     0188  082D               	movf	vfpfcnvrt@fp,w
  2738     0189  00A2               	movwf	fputc@fp
  2739     018A  082E               	movf	vfpfcnvrt@fp+1,w
  2740     018B  00A3               	movwf	fputc@fp+1
  2741     018C  120A  118A  21CA  120A  118A  	fcall	_fputc
  2742     0191                     l1555:
  2743                           
  2744                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1674:    }
  2745     0191  3001               	movlw	1
  2746     0192  1283               	bcf	3,5	;RP0=0, select bank0
  2747     0193  1303               	bcf	3,6	;RP1=0, select bank0
  2748     0194  07B4               	addwf	vfpfcnvrt@cp_1120,f
  2749     0195  1803               	skipnc
  2750     0196  0AB5               	incf	vfpfcnvrt@cp_1120+1,f
  2751     0197  3000               	movlw	0
  2752     0198  07B5               	addwf	vfpfcnvrt@cp_1120+1,f
  2753     0199                     l1557:
  2754     0199  0835               	movf	vfpfcnvrt@cp_1120+1,w
  2755     019A  00FF               	movwf	btemp+1
  2756     019B  0834               	movf	vfpfcnvrt@cp_1120,w
  2757     019C  0084               	movwf	4
  2758     019D  120A  118A  2600  120A  118A  	fcall	stringtab
  2759     01A2  3A00               	xorlw	0
  2760     01A3  1D03               	skipz
  2761     01A4  29A6               	goto	u1191
  2762     01A5  29A7               	goto	u1190
  2763     01A6                     u1191:
  2764     01A6  2979               	goto	l1553
  2765     01A7                     u1190:
  2766     01A7  29C9               	goto	l848
  2767     01A8                     l1559:
  2768                           
  2769                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  2770     01A8  1283               	bcf	3,5	;RP0=0, select bank0
  2771     01A9  1303               	bcf	3,6	;RP1=0, select bank0
  2772     01AA  082F               	movf	vfpfcnvrt@fmt,w
  2773     01AB  0084               	movwf	4
  2774     01AC  3001               	movlw	1
  2775     01AD  1383               	bcf	3,7	;select IRP bank0
  2776     01AE  0780               	addwf	0,f
  2777     01AF  29C9               	goto	l848
  2778     01B0                     l1563:
  2779                           
  2780                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  2781     01B0  082F               	movf	vfpfcnvrt@fmt,w
  2782     01B1  0084               	movwf	4
  2783     01B2  0800               	movf	0,w
  2784     01B3  0084               	movwf	4
  2785     01B4  120A  118A  260A  120A  118A  	fcall	stringdir
  2786     01B9  00B2               	movwf	??_vfpfcnvrt
  2787     01BA  01B3               	clrf	??_vfpfcnvrt+1
  2788     01BB  0832               	movf	??_vfpfcnvrt,w
  2789     01BC  00A0               	movwf	fputc@c
  2790     01BD  0833               	movf	??_vfpfcnvrt+1,w
  2791     01BE  00A1               	movwf	fputc@c+1
  2792     01BF  082D               	movf	vfpfcnvrt@fp,w
  2793     01C0  00A2               	movwf	fputc@fp
  2794     01C1  082E               	movf	vfpfcnvrt@fp+1,w
  2795     01C2  00A3               	movwf	fputc@fp+1
  2796     01C3  120A  118A  21CA  120A  118A  	fcall	_fputc
  2797     01C8  29A8               	goto	l1559
  2798     01C9                     l848:
  2799     01C9  0008               	return
  2800     01CA                     __end_of_vfpfcnvrt:
  2801                           
  2802                           	psect	text15
  2803     01CA                     __ptext15:	
  2804 ;; *************** function _fputc *****************
  2805 ;; Defined at:
  2806 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_fputc.c"
  2807 ;; Parameters:    Size  Location     Type
  2808 ;;  c               2    0[BANK0 ] int 
  2809 ;;  fp              2    2[BANK0 ] PTR struct _IO_FILE
  2810 ;;		 -> sprintf@f(11), 
  2811 ;; Auto vars:     Size  Location     Type
  2812 ;;		None
  2813 ;; Return value:  Size  Location     Type
  2814 ;;                  2    0[BANK0 ] int 
  2815 ;; Registers used:
  2816 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2817 ;; Tracked objects:
  2818 ;;		On entry : 0/0
  2819 ;;		On exit  : 0/0
  2820 ;;		Unchanged: 0/0
  2821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2822 ;;      Params:         0       4       0       0       0
  2823 ;;      Locals:         0       0       0       0       0
  2824 ;;      Temps:          0       9       0       0       0
  2825 ;;      Totals:         0      13       0       0       0
  2826 ;;Total ram usage:       13 bytes
  2827 ;; Hardware stack levels used: 1
  2828 ;; Hardware stack levels required when called: 3
  2829 ;; This function calls:
  2830 ;;		_putch
  2831 ;; This function is called by:
  2832 ;;		_vfpfcnvrt
  2833 ;; This function uses a non-reentrant model
  2834 ;;
  2835                           
  2836     01CA                     _fputc:	
  2837                           ;psect for function _fputc
  2838                           
  2839     01CA                     l1457:	
  2840                           ;incstack = 0
  2841 ;; hardware stack exceeded
  2842                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2843                           
  2844     01CA  1283               	bcf	3,5	;RP0=0, select bank0
  2845     01CB  1303               	bcf	3,6	;RP1=0, select bank0
  2846     01CC  0822               	movf	fputc@fp,w
  2847     01CD  0423               	iorwf	fputc@fp+1,w
  2848     01CE  1903               	btfsc	3,2
  2849     01CF  29D1               	goto	u941
  2850     01D0  29D2               	goto	u940
  2851     01D1                     u941:
  2852     01D1  29D8               	goto	l1461
  2853     01D2                     u940:
  2854     01D2                     l1459:
  2855     01D2  0822               	movf	fputc@fp,w
  2856     01D3  0423               	iorwf	fputc@fp+1,w
  2857     01D4  1D03               	btfss	3,2
  2858     01D5  29D7               	goto	u951
  2859     01D6  29D8               	goto	u950
  2860     01D7                     u951:
  2861     01D7  29DF               	goto	l1463
  2862     01D8                     u950:
  2863     01D8                     l1461:
  2864     01D8  0820               	movf	fputc@c,w
  2865     01D9  120A  118A  2003  120A  118A  	fcall	_putch
  2866     01DE  2A69               	goto	l880
  2867     01DF                     l1463:
  2868     01DF  0822               	movf	fputc@fp,w
  2869     01E0  3E09               	addlw	9
  2870     01E1  00A4               	movwf	??_fputc
  2871     01E2  0823               	movf	fputc@fp+1,w
  2872     01E3  1803               	skipnc
  2873     01E4  3E01               	addlw	1
  2874     01E5  3E00               	addlw	0
  2875     01E6  00A5               	movwf	??_fputc+1
  2876     01E7  0824               	movf	??_fputc,w
  2877     01E8  0084               	movwf	4
  2878     01E9  1783               	bsf	3,7
  2879     01EA  1C25               	btfss	??_fputc+1,0
  2880     01EB  1383               	bcf	3,7
  2881     01EC  0800               	movf	0,w
  2882     01ED  00A6               	movwf	??_fputc+2
  2883     01EE  0A84               	incf	4,f
  2884     01EF  0800               	movf	0,w
  2885     01F0  00A7               	movwf	??_fputc+3
  2886     01F1  0826               	movf	??_fputc+2,w
  2887     01F2  0427               	iorwf	??_fputc+3,w
  2888     01F3  1903               	btfsc	3,2
  2889     01F4  29F6               	goto	u961
  2890     01F5  29F7               	goto	u960
  2891     01F6                     u961:
  2892     01F6  2A29               	goto	l1467
  2893     01F7                     u960:
  2894     01F7                     l1465:
  2895     01F7  0822               	movf	fputc@fp,w
  2896     01F8  3E09               	addlw	9
  2897     01F9  00A4               	movwf	??_fputc
  2898     01FA  0823               	movf	fputc@fp+1,w
  2899     01FB  1803               	skipnc
  2900     01FC  3E01               	addlw	1
  2901     01FD  3E00               	addlw	0
  2902     01FE  00A5               	movwf	??_fputc+1
  2903     01FF  0824               	movf	??_fputc,w
  2904     0200  0084               	movwf	4
  2905     0201  1783               	bsf	3,7
  2906     0202  1C25               	btfss	??_fputc+1,0
  2907     0203  1383               	bcf	3,7
  2908     0204  0800               	movf	0,w
  2909     0205  00A6               	movwf	??_fputc+2
  2910     0206  0A84               	incf	4,f
  2911     0207  0800               	movf	0,w
  2912     0208  00A7               	movwf	??_fputc+3
  2913     0209  0822               	movf	fputc@fp,w
  2914     020A  3E02               	addlw	2
  2915     020B  00A8               	movwf	??_fputc+4
  2916     020C  0823               	movf	fputc@fp+1,w
  2917     020D  1803               	skipnc
  2918     020E  3E01               	addlw	1
  2919     020F  3E00               	addlw	0
  2920     0210  00A9               	movwf	??_fputc+5
  2921     0211  0828               	movf	??_fputc+4,w
  2922     0212  0084               	movwf	4
  2923     0213  1783               	bsf	3,7
  2924     0214  1C29               	btfss	??_fputc+5,0
  2925     0215  1383               	bcf	3,7
  2926     0216  0800               	movf	0,w
  2927     0217  00AA               	movwf	??_fputc+6
  2928     0218  0A84               	incf	4,f
  2929     0219  0800               	movf	0,w
  2930     021A  00AB               	movwf	??_fputc+7
  2931     021B  082B               	movf	??_fputc+7,w
  2932     021C  3A80               	xorlw	128
  2933     021D  00AC               	movwf	??_fputc+8
  2934     021E  0827               	movf	??_fputc+3,w
  2935     021F  3A80               	xorlw	128
  2936     0220  022C               	subwf	??_fputc+8,w
  2937     0221  1D03               	skipz
  2938     0222  2A25               	goto	u975
  2939     0223  0826               	movf	??_fputc+2,w
  2940     0224  022A               	subwf	??_fputc+6,w
  2941     0225                     u975:
  2942     0225  1803               	skipnc
  2943     0226  2A28               	goto	u971
  2944     0227  2A29               	goto	u970
  2945     0228                     u971:
  2946     0228  2A69               	goto	l880
  2947     0229                     u970:
  2948     0229                     l1467:
  2949     0229  1283               	bcf	3,5	;RP0=0, select bank0
  2950     022A  1303               	bcf	3,6	;RP1=0, select bank0
  2951     022B  0822               	movf	fputc@fp,w
  2952     022C  0084               	movwf	4
  2953     022D  1783               	bsf	3,7
  2954     022E  1C23               	btfss	fputc@fp+1,0
  2955     022F  1383               	bcf	3,7
  2956     0230  0800               	movf	0,w
  2957     0231  00A4               	movwf	??_fputc
  2958     0232  0A84               	incf	4,f
  2959     0233  0800               	movf	0,w
  2960     0234  00A5               	movwf	??_fputc+1
  2961     0235  0822               	movf	fputc@fp,w
  2962     0236  3E02               	addlw	2
  2963     0237  00A6               	movwf	??_fputc+2
  2964     0238  0823               	movf	fputc@fp+1,w
  2965     0239  1803               	skipnc
  2966     023A  3E01               	addlw	1
  2967     023B  3E00               	addlw	0
  2968     023C  00A7               	movwf	??_fputc+3
  2969     023D  0826               	movf	??_fputc+2,w
  2970     023E  0084               	movwf	4
  2971     023F  1783               	bsf	3,7
  2972     0240  1C27               	btfss	??_fputc+3,0
  2973     0241  1383               	bcf	3,7
  2974     0242  0800               	movf	0,w
  2975     0243  0724               	addwf	??_fputc,w
  2976     0244  00A9               	movwf	??_fputc+5
  2977     0245  0825               	movf	??_fputc+1,w
  2978     0246  00A8               	movwf	??_fputc+4
  2979     0247  1803               	skipnc
  2980     0248  0AA8               	incf	??_fputc+4,f
  2981     0249  1F80               	btfss	0,7
  2982     024A  2A4C               	goto	u980
  2983     024B  03A8               	decf	??_fputc+4,f
  2984     024C                     u980:
  2985     024C  1283               	bcf	3,5	;RP0=0, select bank0
  2986     024D  1303               	bcf	3,6	;RP1=0, select bank0
  2987     024E  0828               	movf	??_fputc+4,w
  2988     024F  00AA               	movwf	??_fputc+6
  2989     0250  0829               	movf	??_fputc+5,w
  2990     0251  0084               	movwf	4
  2991     0252  1783               	bsf	3,7
  2992     0253  1C2A               	btfss	??_fputc+6,0
  2993     0254  1383               	bcf	3,7
  2994     0255  0820               	movf	fputc@c,w
  2995     0256  0080               	movwf	0
  2996     0257  0822               	movf	fputc@fp,w
  2997     0258  3E02               	addlw	2
  2998     0259  00A4               	movwf	??_fputc
  2999     025A  0823               	movf	fputc@fp+1,w
  3000     025B  1803               	skipnc
  3001     025C  3E01               	addlw	1
  3002     025D  3E00               	addlw	0
  3003     025E  00A5               	movwf	??_fputc+1
  3004     025F  0824               	movf	??_fputc,w
  3005     0260  0084               	movwf	4
  3006     0261  1783               	bsf	3,7
  3007     0262  1C25               	btfss	??_fputc+1,0
  3008     0263  1383               	bcf	3,7
  3009     0264  3001               	movlw	1
  3010     0265  0780               	addwf	0,f
  3011     0266  0A84               	incf	4,f
  3012     0267  1803               	skipnc
  3013     0268  0A80               	incf	0,f
  3014     0269                     l880:
  3015     0269  0008               	return
  3016     026A                     __end_of_fputc:
  3017                           
  3018                           	psect	text16
  3019     0003                     __ptext16:	
  3020 ;; *************** function _putch *****************
  3021 ;; Defined at:
  3022 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\putch.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;  c               1    wreg     unsigned char 
  3025 ;; Auto vars:     Size  Location     Type
  3026 ;;  c               1    0[COMMON] unsigned char 
  3027 ;; Return value:  Size  Location     Type
  3028 ;;                  1    wreg      void 
  3029 ;; Registers used:
  3030 ;;		wreg
  3031 ;; Tracked objects:
  3032 ;;		On entry : 0/0
  3033 ;;		On exit  : 0/0
  3034 ;;		Unchanged: 0/0
  3035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3036 ;;      Params:         0       0       0       0       0
  3037 ;;      Locals:         0       0       0       0       0
  3038 ;;      Temps:          0       0       0       0       0
  3039 ;;      Totals:         0       0       0       0       0
  3040 ;;Total ram usage:        0 bytes
  3041 ;; Hardware stack levels used: 1
  3042 ;; Hardware stack levels required when called: 2
  3043 ;; This function calls:
  3044 ;;		Nothing
  3045 ;; This function is called by:
  3046 ;;		_fputc
  3047 ;; This function uses a non-reentrant model
  3048 ;;
  3049                           
  3050     0003                     _putch:	
  3051                           ;psect for function _putch
  3052                           
  3053     0003                     l891:	
  3054                           ;incstack = 0
  3055 ;; hardware stack exceeded
  3056                           ; Regs used in _putch: [wreg]
  3057                           
  3058     0003  0008               	return
  3059     0004                     __end_of_putch:
  3060                           
  3061                           	psect	text17
  3062     07E5                     __ptext17:	
  3063 ;; *************** function _abs *****************
  3064 ;; Defined at:
  3065 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\abs.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;  a               2    6[BANK0 ] int 
  3068 ;; Auto vars:     Size  Location     Type
  3069 ;;		None
  3070 ;; Return value:  Size  Location     Type
  3071 ;;                  2    6[BANK0 ] int 
  3072 ;; Registers used:
  3073 ;;		wreg, status,2, status,0
  3074 ;; Tracked objects:
  3075 ;;		On entry : 0/0
  3076 ;;		On exit  : 0/0
  3077 ;;		Unchanged: 0/0
  3078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3079 ;;      Params:         0       2       0       0       0
  3080 ;;      Locals:         0       0       0       0       0
  3081 ;;      Temps:          0       2       0       0       0
  3082 ;;      Totals:         0       4       0       0       0
  3083 ;;Total ram usage:        4 bytes
  3084 ;; Hardware stack levels used: 1
  3085 ;; Hardware stack levels required when called: 2
  3086 ;; This function calls:
  3087 ;;		Nothing
  3088 ;; This function is called by:
  3089 ;;		_vfpfcnvrt
  3090 ;; This function uses a non-reentrant model
  3091 ;;
  3092                           
  3093     07E5                     _abs:	
  3094                           ;psect for function _abs
  3095                           
  3096     07E5                     l1471:	
  3097                           ;incstack = 0
  3098                           ; Regs used in _abs: [wreg+status,2+status,0]
  3099                           
  3100     07E5  1283               	bcf	3,5	;RP0=0, select bank0
  3101     07E6  1303               	bcf	3,6	;RP1=0, select bank0
  3102     07E7  1BA7               	btfsc	abs@a+1,7
  3103     07E8  2FEA               	goto	u991
  3104     07E9  2FEB               	goto	u990
  3105     07EA                     u991:
  3106     07EA  2FEC               	goto	l1475
  3107     07EB                     u990:
  3108     07EB                     l1473:
  3109     07EB  2FF7               	goto	l868
  3110     07EC                     l1475:
  3111     07EC  0926               	comf	abs@a,w
  3112     07ED  00A8               	movwf	??_abs
  3113     07EE  0927               	comf	abs@a+1,w
  3114     07EF  00A9               	movwf	??_abs+1
  3115     07F0  0AA8               	incf	??_abs,f
  3116     07F1  1903               	skipnz
  3117     07F2  0AA9               	incf	??_abs+1,f
  3118     07F3  0828               	movf	??_abs,w
  3119     07F4  00A6               	movwf	?_abs
  3120     07F5  0829               	movf	??_abs+1,w
  3121     07F6  00A7               	movwf	?_abs+1
  3122     07F7                     l868:
  3123     07F7  0008               	return
  3124     07F8                     __end_of_abs:
  3125                           
  3126                           	psect	text18
  3127     039E                     __ptext18:	
  3128 ;; *************** function ___awmod *****************
  3129 ;; Defined at:
  3130 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awmod.c"
  3131 ;; Parameters:    Size  Location     Type
  3132 ;;  divisor         2    0[BANK0 ] int 
  3133 ;;  dividend        2    2[BANK0 ] int 
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;  sign            1    5[BANK0 ] unsigned char 
  3136 ;;  counter         1    4[BANK0 ] unsigned char 
  3137 ;; Return value:  Size  Location     Type
  3138 ;;                  2    0[BANK0 ] int 
  3139 ;; Registers used:
  3140 ;;		wreg, status,2, status,0
  3141 ;; Tracked objects:
  3142 ;;		On entry : 0/0
  3143 ;;		On exit  : 0/0
  3144 ;;		Unchanged: 0/0
  3145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3146 ;;      Params:         0       4       0       0       0
  3147 ;;      Locals:         0       2       0       0       0
  3148 ;;      Temps:          0       0       0       0       0
  3149 ;;      Totals:         0       6       0       0       0
  3150 ;;Total ram usage:        6 bytes
  3151 ;; Hardware stack levels used: 1
  3152 ;; Hardware stack levels required when called: 2
  3153 ;; This function calls:
  3154 ;;		Nothing
  3155 ;; This function is called by:
  3156 ;;		_vfpfcnvrt
  3157 ;; This function uses a non-reentrant model
  3158 ;;
  3159                           
  3160     039E                     ___awmod:	
  3161                           ;psect for function ___awmod
  3162                           
  3163     039E                     l1419:	
  3164                           ;incstack = 0
  3165                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  3166                           
  3167     039E  1283               	bcf	3,5	;RP0=0, select bank0
  3168     039F  1303               	bcf	3,6	;RP1=0, select bank0
  3169     03A0  01A5               	clrf	___awmod@sign
  3170     03A1                     l1421:
  3171     03A1  1FA3               	btfss	___awmod@dividend+1,7
  3172     03A2  2BA4               	goto	u851
  3173     03A3  2BA5               	goto	u850
  3174     03A4                     u851:
  3175     03A4  2BAC               	goto	l1427
  3176     03A5                     u850:
  3177     03A5                     l1423:
  3178     03A5  09A2               	comf	___awmod@dividend,f
  3179     03A6  09A3               	comf	___awmod@dividend+1,f
  3180     03A7  0AA2               	incf	___awmod@dividend,f
  3181     03A8  1903               	skipnz
  3182     03A9  0AA3               	incf	___awmod@dividend+1,f
  3183     03AA                     l1425:
  3184     03AA  3001               	movlw	1
  3185     03AB  00A5               	movwf	___awmod@sign
  3186     03AC                     l1427:
  3187     03AC  1FA1               	btfss	___awmod@divisor+1,7
  3188     03AD  2BAF               	goto	u861
  3189     03AE  2BB0               	goto	u860
  3190     03AF                     u861:
  3191     03AF  2BB5               	goto	l1431
  3192     03B0                     u860:
  3193     03B0                     l1429:
  3194     03B0  09A0               	comf	___awmod@divisor,f
  3195     03B1  09A1               	comf	___awmod@divisor+1,f
  3196     03B2  0AA0               	incf	___awmod@divisor,f
  3197     03B3  1903               	skipnz
  3198     03B4  0AA1               	incf	___awmod@divisor+1,f
  3199     03B5                     l1431:
  3200     03B5  0820               	movf	___awmod@divisor,w
  3201     03B6  0421               	iorwf	___awmod@divisor+1,w
  3202     03B7  1903               	btfsc	3,2
  3203     03B8  2BBA               	goto	u871
  3204     03B9  2BBB               	goto	u870
  3205     03BA                     u871:
  3206     03BA  2BE8               	goto	l1449
  3207     03BB                     u870:
  3208     03BB                     l1433:
  3209     03BB  3001               	movlw	1
  3210     03BC  00A4               	movwf	___awmod@counter
  3211     03BD  2BC7               	goto	l1439
  3212     03BE                     l1435:
  3213     03BE  3001               	movlw	1
  3214     03BF                     u885:
  3215     03BF  1003               	clrc
  3216     03C0  0DA0               	rlf	___awmod@divisor,f
  3217     03C1  0DA1               	rlf	___awmod@divisor+1,f
  3218     03C2  3EFF               	addlw	-1
  3219     03C3  1D03               	skipz
  3220     03C4  2BBF               	goto	u885
  3221     03C5                     l1437:
  3222     03C5  3001               	movlw	1
  3223     03C6  07A4               	addwf	___awmod@counter,f
  3224     03C7                     l1439:
  3225     03C7  1FA1               	btfss	___awmod@divisor+1,7
  3226     03C8  2BCA               	goto	u891
  3227     03C9  2BCB               	goto	u890
  3228     03CA                     u891:
  3229     03CA  2BBE               	goto	l1435
  3230     03CB                     u890:
  3231     03CB                     l1441:
  3232     03CB  0821               	movf	___awmod@divisor+1,w
  3233     03CC  0223               	subwf	___awmod@dividend+1,w
  3234     03CD  1D03               	skipz
  3235     03CE  2BD1               	goto	u905
  3236     03CF  0820               	movf	___awmod@divisor,w
  3237     03D0  0222               	subwf	___awmod@dividend,w
  3238     03D1                     u905:
  3239     03D1  1C03               	skipc
  3240     03D2  2BD4               	goto	u901
  3241     03D3  2BD5               	goto	u900
  3242     03D4                     u901:
  3243     03D4  2BDB               	goto	l1445
  3244     03D5                     u900:
  3245     03D5                     l1443:
  3246     03D5  0820               	movf	___awmod@divisor,w
  3247     03D6  02A2               	subwf	___awmod@dividend,f
  3248     03D7  0821               	movf	___awmod@divisor+1,w
  3249     03D8  1C03               	skipc
  3250     03D9  03A3               	decf	___awmod@dividend+1,f
  3251     03DA  02A3               	subwf	___awmod@dividend+1,f
  3252     03DB                     l1445:
  3253     03DB  3001               	movlw	1
  3254     03DC                     u915:
  3255     03DC  1003               	clrc
  3256     03DD  0CA1               	rrf	___awmod@divisor+1,f
  3257     03DE  0CA0               	rrf	___awmod@divisor,f
  3258     03DF  3EFF               	addlw	-1
  3259     03E0  1D03               	skipz
  3260     03E1  2BDC               	goto	u915
  3261     03E2                     l1447:
  3262     03E2  3001               	movlw	1
  3263     03E3  02A4               	subwf	___awmod@counter,f
  3264     03E4  1D03               	btfss	3,2
  3265     03E5  2BE7               	goto	u921
  3266     03E6  2BE8               	goto	u920
  3267     03E7                     u921:
  3268     03E7  2BCB               	goto	l1441
  3269     03E8                     u920:
  3270     03E8                     l1449:
  3271     03E8  0825               	movf	___awmod@sign,w
  3272     03E9  1903               	btfsc	3,2
  3273     03EA  2BEC               	goto	u931
  3274     03EB  2BED               	goto	u930
  3275     03EC                     u931:
  3276     03EC  2BF2               	goto	l1453
  3277     03ED                     u930:
  3278     03ED                     l1451:
  3279     03ED  09A2               	comf	___awmod@dividend,f
  3280     03EE  09A3               	comf	___awmod@dividend+1,f
  3281     03EF  0AA2               	incf	___awmod@dividend,f
  3282     03F0  1903               	skipnz
  3283     03F1  0AA3               	incf	___awmod@dividend+1,f
  3284     03F2                     l1453:
  3285     03F2  0823               	movf	___awmod@dividend+1,w
  3286     03F3  00A1               	movwf	?___awmod+1
  3287     03F4  0822               	movf	___awmod@dividend,w
  3288     03F5  00A0               	movwf	?___awmod
  3289     03F6                     l513:
  3290     03F6  0008               	return
  3291     03F7                     __end_of___awmod:
  3292                           
  3293                           	psect	text19
  3294     02D6                     __ptext19:	
  3295 ;; *************** function ___awdiv *****************
  3296 ;; Defined at:
  3297 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\awdiv.c"
  3298 ;; Parameters:    Size  Location     Type
  3299 ;;  divisor         2    0[BANK0 ] int 
  3300 ;;  dividend        2    2[BANK0 ] int 
  3301 ;; Auto vars:     Size  Location     Type
  3302 ;;  quotient        2    6[BANK0 ] int 
  3303 ;;  sign            1    5[BANK0 ] unsigned char 
  3304 ;;  counter         1    4[BANK0 ] unsigned char 
  3305 ;; Return value:  Size  Location     Type
  3306 ;;                  2    0[BANK0 ] int 
  3307 ;; Registers used:
  3308 ;;		wreg, status,2, status,0
  3309 ;; Tracked objects:
  3310 ;;		On entry : 0/0
  3311 ;;		On exit  : 0/0
  3312 ;;		Unchanged: 0/0
  3313 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3314 ;;      Params:         0       4       0       0       0
  3315 ;;      Locals:         0       4       0       0       0
  3316 ;;      Temps:          0       0       0       0       0
  3317 ;;      Totals:         0       8       0       0       0
  3318 ;;Total ram usage:        8 bytes
  3319 ;; Hardware stack levels used: 1
  3320 ;; Hardware stack levels required when called: 2
  3321 ;; This function calls:
  3322 ;;		Nothing
  3323 ;; This function is called by:
  3324 ;;		_vfpfcnvrt
  3325 ;; This function uses a non-reentrant model
  3326 ;;
  3327                           
  3328     02D6                     ___awdiv:	
  3329                           ;psect for function ___awdiv
  3330                           
  3331     02D6                     l1375:	
  3332                           ;incstack = 0
  3333                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3334                           
  3335     02D6  1283               	bcf	3,5	;RP0=0, select bank0
  3336     02D7  1303               	bcf	3,6	;RP1=0, select bank0
  3337     02D8  01A5               	clrf	___awdiv@sign
  3338     02D9                     l1377:
  3339     02D9  1FA1               	btfss	___awdiv@divisor+1,7
  3340     02DA  2ADC               	goto	u751
  3341     02DB  2ADD               	goto	u750
  3342     02DC                     u751:
  3343     02DC  2AE4               	goto	l1383
  3344     02DD                     u750:
  3345     02DD                     l1379:
  3346     02DD  09A0               	comf	___awdiv@divisor,f
  3347     02DE  09A1               	comf	___awdiv@divisor+1,f
  3348     02DF  0AA0               	incf	___awdiv@divisor,f
  3349     02E0  1903               	skipnz
  3350     02E1  0AA1               	incf	___awdiv@divisor+1,f
  3351     02E2                     l1381:
  3352     02E2  3001               	movlw	1
  3353     02E3  00A5               	movwf	___awdiv@sign
  3354     02E4                     l1383:
  3355     02E4  1FA3               	btfss	___awdiv@dividend+1,7
  3356     02E5  2AE7               	goto	u761
  3357     02E6  2AE8               	goto	u760
  3358     02E7                     u761:
  3359     02E7  2AEF               	goto	l1389
  3360     02E8                     u760:
  3361     02E8                     l1385:
  3362     02E8  09A2               	comf	___awdiv@dividend,f
  3363     02E9  09A3               	comf	___awdiv@dividend+1,f
  3364     02EA  0AA2               	incf	___awdiv@dividend,f
  3365     02EB  1903               	skipnz
  3366     02EC  0AA3               	incf	___awdiv@dividend+1,f
  3367     02ED                     l1387:
  3368     02ED  3001               	movlw	1
  3369     02EE  06A5               	xorwf	___awdiv@sign,f
  3370     02EF                     l1389:
  3371     02EF  01A6               	clrf	___awdiv@quotient
  3372     02F0  01A7               	clrf	___awdiv@quotient+1
  3373     02F1                     l1391:
  3374     02F1  0820               	movf	___awdiv@divisor,w
  3375     02F2  0421               	iorwf	___awdiv@divisor+1,w
  3376     02F3  1903               	btfsc	3,2
  3377     02F4  2AF6               	goto	u771
  3378     02F5  2AF7               	goto	u770
  3379     02F6                     u771:
  3380     02F6  2B2C               	goto	l1411
  3381     02F7                     u770:
  3382     02F7                     l1393:
  3383     02F7  3001               	movlw	1
  3384     02F8  00A4               	movwf	___awdiv@counter
  3385     02F9  2B03               	goto	l1399
  3386     02FA                     l1395:
  3387     02FA  3001               	movlw	1
  3388     02FB                     u785:
  3389     02FB  1003               	clrc
  3390     02FC  0DA0               	rlf	___awdiv@divisor,f
  3391     02FD  0DA1               	rlf	___awdiv@divisor+1,f
  3392     02FE  3EFF               	addlw	-1
  3393     02FF  1D03               	skipz
  3394     0300  2AFB               	goto	u785
  3395     0301                     l1397:
  3396     0301  3001               	movlw	1
  3397     0302  07A4               	addwf	___awdiv@counter,f
  3398     0303                     l1399:
  3399     0303  1FA1               	btfss	___awdiv@divisor+1,7
  3400     0304  2B06               	goto	u791
  3401     0305  2B07               	goto	u790
  3402     0306                     u791:
  3403     0306  2AFA               	goto	l1395
  3404     0307                     u790:
  3405     0307                     l1401:
  3406     0307  3001               	movlw	1
  3407     0308                     u805:
  3408     0308  1003               	clrc
  3409     0309  0DA6               	rlf	___awdiv@quotient,f
  3410     030A  0DA7               	rlf	___awdiv@quotient+1,f
  3411     030B  3EFF               	addlw	-1
  3412     030C  1D03               	skipz
  3413     030D  2B08               	goto	u805
  3414     030E  0821               	movf	___awdiv@divisor+1,w
  3415     030F  0223               	subwf	___awdiv@dividend+1,w
  3416     0310  1D03               	skipz
  3417     0311  2B14               	goto	u815
  3418     0312  0820               	movf	___awdiv@divisor,w
  3419     0313  0222               	subwf	___awdiv@dividend,w
  3420     0314                     u815:
  3421     0314  1C03               	skipc
  3422     0315  2B17               	goto	u811
  3423     0316  2B18               	goto	u810
  3424     0317                     u811:
  3425     0317  2B1F               	goto	l1407
  3426     0318                     u810:
  3427     0318                     l1403:
  3428     0318  0820               	movf	___awdiv@divisor,w
  3429     0319  02A2               	subwf	___awdiv@dividend,f
  3430     031A  0821               	movf	___awdiv@divisor+1,w
  3431     031B  1C03               	skipc
  3432     031C  03A3               	decf	___awdiv@dividend+1,f
  3433     031D  02A3               	subwf	___awdiv@dividend+1,f
  3434     031E                     l1405:
  3435     031E  1426               	bsf	___awdiv@quotient,0
  3436     031F                     l1407:
  3437     031F  3001               	movlw	1
  3438     0320                     u825:
  3439     0320  1003               	clrc
  3440     0321  0CA1               	rrf	___awdiv@divisor+1,f
  3441     0322  0CA0               	rrf	___awdiv@divisor,f
  3442     0323  3EFF               	addlw	-1
  3443     0324  1D03               	skipz
  3444     0325  2B20               	goto	u825
  3445     0326                     l1409:
  3446     0326  3001               	movlw	1
  3447     0327  02A4               	subwf	___awdiv@counter,f
  3448     0328  1D03               	btfss	3,2
  3449     0329  2B2B               	goto	u831
  3450     032A  2B2C               	goto	u830
  3451     032B                     u831:
  3452     032B  2B07               	goto	l1401
  3453     032C                     u830:
  3454     032C                     l1411:
  3455     032C  0825               	movf	___awdiv@sign,w
  3456     032D  1903               	btfsc	3,2
  3457     032E  2B30               	goto	u841
  3458     032F  2B31               	goto	u840
  3459     0330                     u841:
  3460     0330  2B36               	goto	l1415
  3461     0331                     u840:
  3462     0331                     l1413:
  3463     0331  09A6               	comf	___awdiv@quotient,f
  3464     0332  09A7               	comf	___awdiv@quotient+1,f
  3465     0333  0AA6               	incf	___awdiv@quotient,f
  3466     0334  1903               	skipnz
  3467     0335  0AA7               	incf	___awdiv@quotient+1,f
  3468     0336                     l1415:
  3469     0336  0827               	movf	___awdiv@quotient+1,w
  3470     0337  00A1               	movwf	?___awdiv+1
  3471     0338  0826               	movf	___awdiv@quotient,w
  3472     0339  00A0               	movwf	?___awdiv
  3473     033A                     l500:
  3474     033A  0008               	return
  3475     033B                     __end_of___awdiv:
  3476                           
  3477                           	psect	text20
  3478     04DC                     __ptext20:	
  3479 ;; *************** function _Lcd_Write_String *****************
  3480 ;; Defined at:
  3481 ;;		line 105 in file "./lcd.h"
  3482 ;; Parameters:    Size  Location     Type
  3483 ;;  a               2    5[BANK0 ] PTR unsigned char 
  3484 ;;		 -> print_Index@buffer(20), print_TankState@buffer(20), STR_5(12), 
  3485 ;; Auto vars:     Size  Location     Type
  3486 ;;  i               2   10[BANK0 ] int 
  3487 ;; Return value:  Size  Location     Type
  3488 ;;                  1    wreg      void 
  3489 ;; Registers used:
  3490 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3491 ;; Tracked objects:
  3492 ;;		On entry : 0/0
  3493 ;;		On exit  : 0/0
  3494 ;;		Unchanged: 0/0
  3495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3496 ;;      Params:         0       2       0       0       0
  3497 ;;      Locals:         0       2       0       0       0
  3498 ;;      Temps:          0       3       0       0       0
  3499 ;;      Totals:         0       7       0       0       0
  3500 ;;Total ram usage:        7 bytes
  3501 ;; Hardware stack levels used: 1
  3502 ;; Hardware stack levels required when called: 4
  3503 ;; This function calls:
  3504 ;;		_Lcd_Write_Char
  3505 ;; This function is called by:
  3506 ;;		_print_TankState
  3507 ;;		_print_Index
  3508 ;; This function uses a non-reentrant model
  3509 ;;
  3510                           
  3511     04DC                     _Lcd_Write_String:	
  3512                           ;psect for function _Lcd_Write_String
  3513                           
  3514     04DC                     l1639:	
  3515                           ;incstack = 0
  3516                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3517                           
  3518                           
  3519                           ;./lcd.h: 105: void Lcd_Write_String(char *a);./lcd.h: 106: {;./lcd.h: 107:  int i;;./lc
      +                          d.h: 108:  for(i=0;a[i]!='\0';i++)
  3520     04DC  1283               	bcf	3,5	;RP0=0, select bank0
  3521     04DD  1303               	bcf	3,6	;RP1=0, select bank0
  3522     04DE  01AA               	clrf	Lcd_Write_String@i
  3523     04DF  01AB               	clrf	Lcd_Write_String@i+1
  3524     04E0  2D05               	goto	l1645
  3525     04E1                     l1641:
  3526                           
  3527                           ;./lcd.h: 109:     Lcd_Write_Char(a[i]);
  3528     04E1  082A               	movf	Lcd_Write_String@i,w
  3529     04E2  0725               	addwf	Lcd_Write_String@a,w
  3530     04E3  00A8               	movwf	??_Lcd_Write_String+1
  3531     04E4  0826               	movf	Lcd_Write_String@a+1,w
  3532     04E5  00A7               	movwf	??_Lcd_Write_String
  3533     04E6  1803               	skipnc
  3534     04E7  0AA7               	incf	??_Lcd_Write_String,f
  3535     04E8  1FAA               	btfss	Lcd_Write_String@i,7
  3536     04E9  2CEB               	goto	u1260
  3537     04EA  03A7               	decf	??_Lcd_Write_String,f
  3538     04EB                     u1260:
  3539     04EB  1283               	bcf	3,5	;RP0=0, select bank0
  3540     04EC  1303               	bcf	3,6	;RP1=0, select bank0
  3541     04ED  0827               	movf	??_Lcd_Write_String,w
  3542     04EE  00A9               	movwf	??_Lcd_Write_String+2
  3543     04EF  0829               	movf	??_Lcd_Write_String+2,w
  3544     04F0  00FF               	movwf	btemp+1
  3545     04F1  0828               	movf	??_Lcd_Write_String+1,w
  3546     04F2  0084               	movwf	4
  3547     04F3  120A  118A  2600  120A  118A  	fcall	stringtab
  3548     04F8  120A  118A  2561  120A  118A  	fcall	_Lcd_Write_Char
  3549     04FD                     l1643:
  3550     04FD  3001               	movlw	1
  3551     04FE  1283               	bcf	3,5	;RP0=0, select bank0
  3552     04FF  1303               	bcf	3,6	;RP1=0, select bank0
  3553     0500  07AA               	addwf	Lcd_Write_String@i,f
  3554     0501  1803               	skipnc
  3555     0502  0AAB               	incf	Lcd_Write_String@i+1,f
  3556     0503  3000               	movlw	0
  3557     0504  07AB               	addwf	Lcd_Write_String@i+1,f
  3558     0505                     l1645:
  3559     0505  082A               	movf	Lcd_Write_String@i,w
  3560     0506  0725               	addwf	Lcd_Write_String@a,w
  3561     0507  00A8               	movwf	??_Lcd_Write_String+1
  3562     0508  0826               	movf	Lcd_Write_String@a+1,w
  3563     0509  00A7               	movwf	??_Lcd_Write_String
  3564     050A  1803               	skipnc
  3565     050B  0AA7               	incf	??_Lcd_Write_String,f
  3566     050C  1FAA               	btfss	Lcd_Write_String@i,7
  3567     050D  2D0F               	goto	u1270
  3568     050E  03A7               	decf	??_Lcd_Write_String,f
  3569     050F                     u1270:
  3570     050F  1283               	bcf	3,5	;RP0=0, select bank0
  3571     0510  1303               	bcf	3,6	;RP1=0, select bank0
  3572     0511  0827               	movf	??_Lcd_Write_String,w
  3573     0512  00A9               	movwf	??_Lcd_Write_String+2
  3574     0513  0829               	movf	??_Lcd_Write_String+2,w
  3575     0514  00FF               	movwf	btemp+1
  3576     0515  0828               	movf	??_Lcd_Write_String+1,w
  3577     0516  0084               	movwf	4
  3578     0517  120A  118A  2600  120A  118A  	fcall	stringtab
  3579     051C  3A00               	xorlw	0
  3580     051D  1D03               	skipz
  3581     051E  2D20               	goto	u1281
  3582     051F  2D21               	goto	u1280
  3583     0520                     u1281:
  3584     0520  2CE1               	goto	l1641
  3585     0521                     u1280:
  3586     0521                     l128:
  3587     0521  0008               	return
  3588     0522                     __end_of_Lcd_Write_String:
  3589                           
  3590                           	psect	text21
  3591     0561                     __ptext21:	
  3592 ;; *************** function _Lcd_Write_Char *****************
  3593 ;; Defined at:
  3594 ;;		line 89 in file "./lcd.h"
  3595 ;; Parameters:    Size  Location     Type
  3596 ;;  a               1    wreg     unsigned char 
  3597 ;; Auto vars:     Size  Location     Type
  3598 ;;  a               1    4[BANK0 ] unsigned char 
  3599 ;;  y               1    3[BANK0 ] unsigned char 
  3600 ;;  temp            1    2[BANK0 ] unsigned char 
  3601 ;; Return value:  Size  Location     Type
  3602 ;;                  1    wreg      void 
  3603 ;; Registers used:
  3604 ;;		wreg, status,2, status,0, pclath, cstack
  3605 ;; Tracked objects:
  3606 ;;		On entry : 0/0
  3607 ;;		On exit  : 0/0
  3608 ;;		Unchanged: 0/0
  3609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3610 ;;      Params:         0       0       0       0       0
  3611 ;;      Locals:         0       3       0       0       0
  3612 ;;      Temps:          0       1       0       0       0
  3613 ;;      Totals:         0       4       0       0       0
  3614 ;;Total ram usage:        4 bytes
  3615 ;; Hardware stack levels used: 1
  3616 ;; Hardware stack levels required when called: 3
  3617 ;; This function calls:
  3618 ;;		_Lcd_Port
  3619 ;; This function is called by:
  3620 ;;		_Lcd_Write_String
  3621 ;; This function uses a non-reentrant model
  3622 ;;
  3623                           
  3624     0561                     _Lcd_Write_Char:	
  3625                           ;psect for function _Lcd_Write_Char
  3626                           
  3627                           
  3628                           ;incstack = 0
  3629                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3630                           ;Lcd_Write_Char@a stored from wreg
  3631     0561  1283               	bcf	3,5	;RP0=0, select bank0
  3632     0562  1303               	bcf	3,6	;RP1=0, select bank0
  3633     0563  00A4               	movwf	Lcd_Write_Char@a
  3634     0564                     l1579:
  3635                           
  3636                           ;./lcd.h: 89: void Lcd_Write_Char(char a);./lcd.h: 90: {;./lcd.h: 91:    char temp,y;;./
      +                          lcd.h: 92:    temp = a&0x0F;
  3637     0564  0824               	movf	Lcd_Write_Char@a,w
  3638     0565  00A2               	movwf	Lcd_Write_Char@temp
  3639     0566                     l1581:
  3640     0566  300F               	movlw	15
  3641     0567  05A2               	andwf	Lcd_Write_Char@temp,f
  3642     0568                     l1583:
  3643                           
  3644                           ;./lcd.h: 93:    y = a&0xF0;
  3645     0568  0824               	movf	Lcd_Write_Char@a,w
  3646     0569  00A3               	movwf	Lcd_Write_Char@y
  3647     056A  30F0               	movlw	240
  3648     056B  05A3               	andwf	Lcd_Write_Char@y,f
  3649     056C                     l1585:
  3650                           
  3651                           ;./lcd.h: 94:    RD2 = 1;
  3652     056C  1508               	bsf	8,2	;volatile
  3653     056D                     l1587:
  3654                           
  3655                           ;./lcd.h: 95:    Lcd_Port(y>>4);
  3656     056D  0823               	movf	Lcd_Write_Char@y,w
  3657     056E  00A1               	movwf	??_Lcd_Write_Char
  3658     056F  3004               	movlw	4
  3659     0570                     u1205:
  3660     0570  1003               	clrc
  3661     0571  0CA1               	rrf	??_Lcd_Write_Char,f
  3662     0572  3EFF               	addlw	-1
  3663     0573  1D03               	skipz
  3664     0574  2D70               	goto	u1205
  3665     0575  0821               	movf	??_Lcd_Write_Char,w
  3666     0576  120A  118A  2779  120A  118A  	fcall	_Lcd_Port
  3667     057B                     l1589:
  3668                           
  3669                           ;./lcd.h: 96:    RD3 = 1;
  3670     057B  1283               	bcf	3,5	;RP0=0, select bank0
  3671     057C  1303               	bcf	3,6	;RP1=0, select bank0
  3672     057D  1588               	bsf	8,3	;volatile
  3673     057E                     l1591:
  3674                           
  3675                           ;./lcd.h: 97:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  3676     057E  300C               	movlw	12
  3677     057F  1283               	bcf	3,5	;RP0=0, select bank0
  3678     0580  1303               	bcf	3,6	;RP1=0, select bank0
  3679     0581  00A1               	movwf	??_Lcd_Write_Char
  3680     0582                     u1507:
  3681     0582  0BA1               	decfsz	??_Lcd_Write_Char,f
  3682     0583  2D82               	goto	u1507
  3683     0584  0000               	nop
  3684     0585                     l1593:
  3685                           
  3686                           ;./lcd.h: 98:    RD3 = 0;
  3687     0585  1283               	bcf	3,5	;RP0=0, select bank0
  3688     0586  1303               	bcf	3,6	;RP1=0, select bank0
  3689     0587  1188               	bcf	8,3	;volatile
  3690     0588                     l1595:
  3691                           
  3692                           ;./lcd.h: 99:    Lcd_Port(temp);
  3693     0588  0822               	movf	Lcd_Write_Char@temp,w
  3694     0589  120A  118A  2779  120A  118A  	fcall	_Lcd_Port
  3695     058E                     l1597:
  3696                           
  3697                           ;./lcd.h: 100:    RD3 = 1;
  3698     058E  1283               	bcf	3,5	;RP0=0, select bank0
  3699     058F  1303               	bcf	3,6	;RP1=0, select bank0
  3700     0590  1588               	bsf	8,3	;volatile
  3701     0591                     l1599:
  3702                           
  3703                           ;./lcd.h: 101:    _delay((unsigned long)((40)*(4000000/4000000.0)));
  3704     0591  300C               	movlw	12
  3705     0592  1283               	bcf	3,5	;RP0=0, select bank0
  3706     0593  1303               	bcf	3,6	;RP1=0, select bank0
  3707     0594  00A1               	movwf	??_Lcd_Write_Char
  3708     0595                     u1517:
  3709     0595  0BA1               	decfsz	??_Lcd_Write_Char,f
  3710     0596  2D95               	goto	u1517
  3711     0597  0000               	nop
  3712     0598                     l1601:
  3713                           
  3714                           ;./lcd.h: 102:    RD3 = 0;
  3715     0598  1283               	bcf	3,5	;RP0=0, select bank0
  3716     0599  1303               	bcf	3,6	;RP1=0, select bank0
  3717     059A  1188               	bcf	8,3	;volatile
  3718     059B                     l122:
  3719     059B  0008               	return
  3720     059C                     __end_of_Lcd_Write_Char:
  3721                           
  3722                           	psect	text22
  3723     0447                     __ptext22:	
  3724 ;; *************** function _Lcd_Set_Cursor *****************
  3725 ;; Defined at:
  3726 ;;		line 49 in file "./lcd.h"
  3727 ;; Parameters:    Size  Location     Type
  3728 ;;  a               1    wreg     unsigned char 
  3729 ;;  b               1    4[BANK0 ] unsigned char 
  3730 ;; Auto vars:     Size  Location     Type
  3731 ;;  a               1    6[BANK0 ] unsigned char 
  3732 ;;  temp            1    9[BANK0 ] unsigned char 
  3733 ;;  y               1    8[BANK0 ] unsigned char 
  3734 ;;  z               1    7[BANK0 ] unsigned char 
  3735 ;; Return value:  Size  Location     Type
  3736 ;;                  1    wreg      void 
  3737 ;; Registers used:
  3738 ;;		wreg, status,2, status,0, pclath, cstack
  3739 ;; Tracked objects:
  3740 ;;		On entry : 0/0
  3741 ;;		On exit  : 0/0
  3742 ;;		Unchanged: 0/0
  3743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3744 ;;      Params:         0       1       0       0       0
  3745 ;;      Locals:         0       4       0       0       0
  3746 ;;      Temps:          0       1       0       0       0
  3747 ;;      Totals:         0       6       0       0       0
  3748 ;;Total ram usage:        6 bytes
  3749 ;; Hardware stack levels used: 1
  3750 ;; Hardware stack levels required when called: 4
  3751 ;; This function calls:
  3752 ;;		_Lcd_Cmd
  3753 ;; This function is called by:
  3754 ;;		_print_TankState
  3755 ;;		_print_Index
  3756 ;; This function uses a non-reentrant model
  3757 ;;
  3758                           
  3759     0447                     _Lcd_Set_Cursor:	
  3760                           ;psect for function _Lcd_Set_Cursor
  3761                           
  3762                           
  3763                           ;incstack = 0
  3764                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3765                           ;Lcd_Set_Cursor@a stored from wreg
  3766     0447  1283               	bcf	3,5	;RP0=0, select bank0
  3767     0448  1303               	bcf	3,6	;RP1=0, select bank0
  3768     0449  00A6               	movwf	Lcd_Set_Cursor@a
  3769     044A                     l1615:
  3770                           
  3771                           ;./lcd.h: 49: void Lcd_Set_Cursor(char a, char b);./lcd.h: 50: {;./lcd.h: 51:  char temp
      +                          ,z,y;;./lcd.h: 52:  if(a == 1)
  3772     044A  0326               	decf	Lcd_Set_Cursor@a,w
  3773     044B  1D03               	btfss	3,2
  3774     044C  2C4E               	goto	u1221
  3775     044D  2C4F               	goto	u1220
  3776     044E                     u1221:
  3777     044E  2C6F               	goto	l1627
  3778     044F                     u1220:
  3779     044F                     l1617:
  3780                           
  3781                           ;./lcd.h: 53:  {;./lcd.h: 54:    temp = 0x80 + b - 1;
  3782     044F  0824               	movf	Lcd_Set_Cursor@b,w
  3783     0450  3E7F               	addlw	127
  3784     0451  00A9               	movwf	Lcd_Set_Cursor@temp
  3785                           
  3786                           ;./lcd.h: 55:   z = temp>>4;
  3787     0452  0829               	movf	Lcd_Set_Cursor@temp,w
  3788     0453  00A5               	movwf	??_Lcd_Set_Cursor
  3789     0454  3004               	movlw	4
  3790     0455                     u1235:
  3791     0455  1003               	clrc
  3792     0456  0CA5               	rrf	??_Lcd_Set_Cursor,f
  3793     0457  3EFF               	addlw	-1
  3794     0458  1D03               	skipz
  3795     0459  2C55               	goto	u1235
  3796     045A  0825               	movf	??_Lcd_Set_Cursor,w
  3797     045B  00A7               	movwf	Lcd_Set_Cursor@z
  3798     045C                     l1619:
  3799                           
  3800                           ;./lcd.h: 56:   y = temp & 0x0F;
  3801     045C  0829               	movf	Lcd_Set_Cursor@temp,w
  3802     045D  00A8               	movwf	Lcd_Set_Cursor@y
  3803     045E                     l1621:
  3804     045E  300F               	movlw	15
  3805     045F  05A8               	andwf	Lcd_Set_Cursor@y,f
  3806     0460                     l1623:
  3807                           
  3808                           ;./lcd.h: 57:   Lcd_Cmd(z);
  3809     0460  0827               	movf	Lcd_Set_Cursor@z,w
  3810     0461  120A  118A  27B6  120A  118A  	fcall	_Lcd_Cmd
  3811     0466                     l1625:
  3812                           
  3813                           ;./lcd.h: 58:   Lcd_Cmd(y);
  3814     0466  1283               	bcf	3,5	;RP0=0, select bank0
  3815     0467  1303               	bcf	3,6	;RP1=0, select bank0
  3816     0468  0828               	movf	Lcd_Set_Cursor@y,w
  3817     0469  120A  118A  27B6  120A  118A  	fcall	_Lcd_Cmd
  3818                           
  3819                           ;./lcd.h: 59:  }
  3820     046E  2C94               	goto	l116
  3821     046F                     l1627:
  3822     046F  3002               	movlw	2
  3823     0470  0626               	xorwf	Lcd_Set_Cursor@a,w
  3824     0471  1D03               	btfss	3,2
  3825     0472  2C74               	goto	u1241
  3826     0473  2C75               	goto	u1240
  3827     0474                     u1241:
  3828     0474  2C94               	goto	l116
  3829     0475                     u1240:
  3830     0475                     l1629:
  3831                           
  3832                           ;./lcd.h: 61:  {;./lcd.h: 62:   temp = 0xC0 + b - 1;
  3833     0475  0824               	movf	Lcd_Set_Cursor@b,w
  3834     0476  3EBF               	addlw	191
  3835     0477  00A9               	movwf	Lcd_Set_Cursor@temp
  3836                           
  3837                           ;./lcd.h: 63:   z = temp>>4;
  3838     0478  0829               	movf	Lcd_Set_Cursor@temp,w
  3839     0479  00A5               	movwf	??_Lcd_Set_Cursor
  3840     047A  3004               	movlw	4
  3841     047B                     u1255:
  3842     047B  1003               	clrc
  3843     047C  0CA5               	rrf	??_Lcd_Set_Cursor,f
  3844     047D  3EFF               	addlw	-1
  3845     047E  1D03               	skipz
  3846     047F  2C7B               	goto	u1255
  3847     0480  0825               	movf	??_Lcd_Set_Cursor,w
  3848     0481  00A7               	movwf	Lcd_Set_Cursor@z
  3849     0482                     l1631:
  3850                           
  3851                           ;./lcd.h: 64:   y = temp & 0x0F;
  3852     0482  0829               	movf	Lcd_Set_Cursor@temp,w
  3853     0483  00A8               	movwf	Lcd_Set_Cursor@y
  3854     0484                     l1633:
  3855     0484  300F               	movlw	15
  3856     0485  05A8               	andwf	Lcd_Set_Cursor@y,f
  3857     0486                     l1635:
  3858                           
  3859                           ;./lcd.h: 65:   Lcd_Cmd(z);
  3860     0486  0827               	movf	Lcd_Set_Cursor@z,w
  3861     0487  120A  118A  27B6  120A  118A  	fcall	_Lcd_Cmd
  3862     048C                     l1637:
  3863                           
  3864                           ;./lcd.h: 66:   Lcd_Cmd(y);
  3865     048C  1283               	bcf	3,5	;RP0=0, select bank0
  3866     048D  1303               	bcf	3,6	;RP1=0, select bank0
  3867     048E  0828               	movf	Lcd_Set_Cursor@y,w
  3868     048F  120A  118A  27B6  120A  118A  	fcall	_Lcd_Cmd
  3869     0494                     l116:
  3870     0494  0008               	return
  3871     0495                     __end_of_Lcd_Set_Cursor:
  3872                           
  3873                           	psect	text23
  3874     0FD8                     __ptext23:	
  3875 ;; *************** function _Lcd_Clear *****************
  3876 ;; Defined at:
  3877 ;;		line 43 in file "./lcd.h"
  3878 ;; Parameters:    Size  Location     Type
  3879 ;;		None
  3880 ;; Auto vars:     Size  Location     Type
  3881 ;;		None
  3882 ;; Return value:  Size  Location     Type
  3883 ;;                  1    wreg      void 
  3884 ;; Registers used:
  3885 ;;		wreg, status,2, status,0, pclath, cstack
  3886 ;; Tracked objects:
  3887 ;;		On entry : 0/0
  3888 ;;		On exit  : 0/0
  3889 ;;		Unchanged: 0/0
  3890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3891 ;;      Params:         0       0       0       0       0
  3892 ;;      Locals:         0       0       0       0       0
  3893 ;;      Temps:          0       0       0       0       0
  3894 ;;      Totals:         0       0       0       0       0
  3895 ;;Total ram usage:        0 bytes
  3896 ;; Hardware stack levels used: 1
  3897 ;; Hardware stack levels required when called: 4
  3898 ;; This function calls:
  3899 ;;		_Lcd_Cmd
  3900 ;; This function is called by:
  3901 ;;		_print_TankState
  3902 ;;		_print_Index
  3903 ;; This function uses a non-reentrant model
  3904 ;;
  3905                           
  3906     0FD8                     _Lcd_Clear:	
  3907                           ;psect for function _Lcd_Clear
  3908                           
  3909     0FD8                     l1613:	
  3910                           ;incstack = 0
  3911                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3912                           
  3913                           
  3914                           ;./lcd.h: 45:  Lcd_Cmd(0);
  3915     0FD8  3000               	movlw	0
  3916     0FD9  120A  118A  27B6  120A  158A  	fcall	_Lcd_Cmd
  3917                           
  3918                           ;./lcd.h: 46:  Lcd_Cmd(1);
  3919     0FDE  3001               	movlw	1
  3920     0FDF  120A  118A  27B6  120A  158A  	fcall	_Lcd_Cmd
  3921     0FE4                     l110:
  3922     0FE4  0008               	return
  3923     0FE5                     __end_of_Lcd_Clear:
  3924                           
  3925                           	psect	text24
  3926     0638                     __ptext24:	
  3927 ;; *************** function _lcd_debounceButtons *****************
  3928 ;; Defined at:
  3929 ;;		line 77 in file "./lcdFunctions.h"
  3930 ;; Parameters:    Size  Location     Type
  3931 ;;		None
  3932 ;; Auto vars:     Size  Location     Type
  3933 ;;		None
  3934 ;; Return value:  Size  Location     Type
  3935 ;;                  1    wreg      void 
  3936 ;; Registers used:
  3937 ;;		wreg, status,2, status,0, pclath, cstack
  3938 ;; Tracked objects:
  3939 ;;		On entry : 0/0
  3940 ;;		On exit  : 0/0
  3941 ;;		Unchanged: 0/0
  3942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3943 ;;      Params:         0       0       0       0       0
  3944 ;;      Locals:         0       0       0       0       0
  3945 ;;      Temps:          0       1       0       0       0
  3946 ;;      Totals:         0       1       0       0       0
  3947 ;;Total ram usage:        1 bytes
  3948 ;; Hardware stack levels used: 1
  3949 ;; Hardware stack levels required when called: 3
  3950 ;; This function calls:
  3951 ;;		_lcd_turnLeft
  3952 ;;		_lcd_turnRight
  3953 ;; This function is called by:
  3954 ;;		_lcd_run
  3955 ;; This function uses a non-reentrant model
  3956 ;;
  3957                           
  3958     0638                     _lcd_debounceButtons:	
  3959                           ;psect for function _lcd_debounceButtons
  3960                           
  3961     0638                     l1701:	
  3962                           ;incstack = 0
  3963                           ; Regs used in _lcd_debounceButtons: [wreg+status,2+status,0+pclath+cstack]
  3964                           
  3965                           
  3966                           ;./lcdFunctions.h: 80:     if (timer_lcdButtons.reached == 0) {
  3967     0638  1683               	bsf	3,5	;RP0=1, select bank1
  3968     0639  1303               	bcf	3,6	;RP1=0, select bank1
  3969     063A  0855               	movf	(_timer_lcdButtons^(0+128)+5),w
  3970     063B  1D03               	btfss	3,2
  3971     063C  2E3E               	goto	u1321
  3972     063D  2E3F               	goto	u1320
  3973     063E                     u1321:
  3974     063E  2E40               	goto	l1705
  3975     063F                     u1320:
  3976     063F  2E6B               	goto	l151
  3977     0640                     l1705:
  3978                           
  3979                           ;./lcdFunctions.h: 85:     timer_lcdButtons.reached = 0;
  3980     0640  01D5               	clrf	(_timer_lcdButtons^(0+128)+5)
  3981     0641                     l1707:
  3982                           
  3983                           ;./lcdFunctions.h: 88:     if (PORTBbits.RB1 == 0 && lastLeftButtonState != 0) {
  3984     0641  1283               	bcf	3,5	;RP0=0, select bank0
  3985     0642  1303               	bcf	3,6	;RP1=0, select bank0
  3986     0643  1886               	btfsc	6,1	;volatile
  3987     0644  2E46               	goto	u1331
  3988     0645  2E47               	goto	u1330
  3989     0646                     u1331:
  3990     0646  2E51               	goto	l1713
  3991     0647                     u1330:
  3992     0647                     l1709:
  3993     0647  087D               	movf	_lastLeftButtonState,w
  3994     0648  1903               	btfsc	3,2
  3995     0649  2E4B               	goto	u1341
  3996     064A  2E4C               	goto	u1340
  3997     064B                     u1341:
  3998     064B  2E51               	goto	l1713
  3999     064C                     u1340:
  4000     064C                     l1711:
  4001                           
  4002                           ;./lcdFunctions.h: 89:         lcd_turnLeft();
  4003     064C  120A  158A  27F2  120A  118A  	fcall	_lcd_turnLeft
  4004     0651                     l1713:
  4005                           
  4006                           ;./lcdFunctions.h: 93:     if (PORTBbits.RB2 == 0 && lastRightButtonState != 0) {
  4007     0651  1283               	bcf	3,5	;RP0=0, select bank0
  4008     0652  1303               	bcf	3,6	;RP1=0, select bank0
  4009     0653  1906               	btfsc	6,2	;volatile
  4010     0654  2E56               	goto	u1351
  4011     0655  2E57               	goto	u1350
  4012     0656                     u1351:
  4013     0656  2E61               	goto	l1719
  4014     0657                     u1350:
  4015     0657                     l1715:
  4016     0657  087C               	movf	_lastRightButtonState,w
  4017     0658  1903               	btfsc	3,2
  4018     0659  2E5B               	goto	u1361
  4019     065A  2E5C               	goto	u1360
  4020     065B                     u1361:
  4021     065B  2E61               	goto	l1719
  4022     065C                     u1360:
  4023     065C                     l1717:
  4024                           
  4025                           ;./lcdFunctions.h: 94:         lcd_turnRight();
  4026     065C  120A  118A  25E5  120A  118A  	fcall	_lcd_turnRight
  4027     0661                     l1719:
  4028                           
  4029                           ;./lcdFunctions.h: 98:     lastLeftButtonState = PORTBbits.RB1;
  4030     0661  1283               	bcf	3,5	;RP0=0, select bank0
  4031     0662  1303               	bcf	3,6	;RP1=0, select bank0
  4032     0663  0C06               	rrf	6,w	;volatile
  4033     0664  3901               	andlw	1
  4034     0665  00FD               	movwf	_lastLeftButtonState
  4035     0666                     l1721:
  4036                           
  4037                           ;./lcdFunctions.h: 99:     lastRightButtonState = PORTBbits.RB2;
  4038     0666  0C06               	rrf	6,w	;volatile
  4039     0667  00A0               	movwf	??_lcd_debounceButtons
  4040     0668  0C20               	rrf	??_lcd_debounceButtons,w
  4041     0669  3901               	andlw	1
  4042     066A  00FC               	movwf	_lastRightButtonState
  4043     066B                     l151:
  4044     066B  0008               	return
  4045     066C                     __end_of_lcd_debounceButtons:
  4046                           
  4047                           	psect	text25
  4048     05E5                     __ptext25:	
  4049 ;; *************** function _lcd_turnRight *****************
  4050 ;; Defined at:
  4051 ;;		line 129 in file "./lcdFunctions.h"
  4052 ;; Parameters:    Size  Location     Type
  4053 ;;		None
  4054 ;; Auto vars:     Size  Location     Type
  4055 ;;		None
  4056 ;; Return value:  Size  Location     Type
  4057 ;;                  1    wreg      void 
  4058 ;; Registers used:
  4059 ;;		wreg, status,2, status,0
  4060 ;; Tracked objects:
  4061 ;;		On entry : 0/0
  4062 ;;		On exit  : 0/0
  4063 ;;		Unchanged: 0/0
  4064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4065 ;;      Params:         0       0       0       0       0
  4066 ;;      Locals:         0       0       0       0       0
  4067 ;;      Temps:          0       0       0       0       0
  4068 ;;      Totals:         0       0       0       0       0
  4069 ;;Total ram usage:        0 bytes
  4070 ;; Hardware stack levels used: 1
  4071 ;; Hardware stack levels required when called: 2
  4072 ;; This function calls:
  4073 ;;		Nothing
  4074 ;; This function is called by:
  4075 ;;		_lcd_debounceButtons
  4076 ;; This function uses a non-reentrant model
  4077 ;;
  4078                           
  4079     05E5                     _lcd_turnRight:	
  4080                           ;psect for function _lcd_turnRight
  4081                           
  4082     05E5                     l1667:	
  4083                           ;incstack = 0
  4084                           ; Regs used in _lcd_turnRight: [wreg+status,2+status,0]
  4085                           
  4086                           
  4087                           ;./lcdFunctions.h: 132:   if(lcd_index >= 4)
  4088     05E5  3004               	movlw	4
  4089     05E6  1283               	bcf	3,5	;RP0=0, select bank0
  4090     05E7  1303               	bcf	3,6	;RP1=0, select bank0
  4091     05E8  026A               	subwf	_lcd_index,w
  4092     05E9  1C03               	skipc
  4093     05EA  2DEC               	goto	u1301
  4094     05EB  2DED               	goto	u1300
  4095     05EC                     u1301:
  4096     05EC  2DF0               	goto	l1671
  4097     05ED                     u1300:
  4098     05ED                     l1669:
  4099                           
  4100                           ;./lcdFunctions.h: 133:     lcd_index = 1;
  4101     05ED  3001               	movlw	1
  4102     05EE  00EA               	movwf	_lcd_index
  4103     05EF  2DF2               	goto	l168
  4104     05F0                     l1671:
  4105                           
  4106                           ;./lcdFunctions.h: 135:     lcd_index++;
  4107     05F0  3001               	movlw	1
  4108     05F1  07EA               	addwf	_lcd_index,f
  4109     05F2                     l168:
  4110     05F2  0008               	return
  4111     05F3                     __end_of_lcd_turnRight:
  4112                           
  4113                           	psect	text26
  4114     0FF2                     __ptext26:	
  4115 ;; *************** function _lcd_turnLeft *****************
  4116 ;; Defined at:
  4117 ;;		line 138 in file "./lcdFunctions.h"
  4118 ;; Parameters:    Size  Location     Type
  4119 ;;		None
  4120 ;; Auto vars:     Size  Location     Type
  4121 ;;		None
  4122 ;; Return value:  Size  Location     Type
  4123 ;;                  1    wreg      void 
  4124 ;; Registers used:
  4125 ;;		wreg, status,2, status,0
  4126 ;; Tracked objects:
  4127 ;;		On entry : 0/0
  4128 ;;		On exit  : 0/0
  4129 ;;		Unchanged: 0/0
  4130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4131 ;;      Params:         0       0       0       0       0
  4132 ;;      Locals:         0       0       0       0       0
  4133 ;;      Temps:          0       0       0       0       0
  4134 ;;      Totals:         0       0       0       0       0
  4135 ;;Total ram usage:        0 bytes
  4136 ;; Hardware stack levels used: 1
  4137 ;; Hardware stack levels required when called: 2
  4138 ;; This function calls:
  4139 ;;		Nothing
  4140 ;; This function is called by:
  4141 ;;		_lcd_debounceButtons
  4142 ;; This function uses a non-reentrant model
  4143 ;;
  4144                           
  4145     0FF2                     _lcd_turnLeft:	
  4146                           ;psect for function _lcd_turnLeft
  4147                           
  4148     0FF2                     l1661:	
  4149                           ;incstack = 0
  4150                           ; Regs used in _lcd_turnLeft: [wreg+status,2+status,0]
  4151                           
  4152                           
  4153                           ;./lcdFunctions.h: 141:   if(lcd_index <= 1)
  4154     0FF2  3002               	movlw	2
  4155     0FF3  1283               	bcf	3,5	;RP0=0, select bank0
  4156     0FF4  1303               	bcf	3,6	;RP1=0, select bank0
  4157     0FF5  026A               	subwf	_lcd_index,w
  4158     0FF6  1803               	skipnc
  4159     0FF7  2FF9               	goto	u1291
  4160     0FF8  2FFA               	goto	u1290
  4161     0FF9                     u1291:
  4162     0FF9  2FFD               	goto	l1665
  4163     0FFA                     u1290:
  4164     0FFA                     l1663:
  4165                           
  4166                           ;./lcdFunctions.h: 142:     lcd_index = 4;
  4167     0FFA  3004               	movlw	4
  4168     0FFB  00EA               	movwf	_lcd_index
  4169     0FFC  2FFF               	goto	l173
  4170     0FFD                     l1665:
  4171                           
  4172                           ;./lcdFunctions.h: 144:     lcd_index--;
  4173     0FFD  3001               	movlw	1
  4174     0FFE  02EA               	subwf	_lcd_index,f
  4175     0FFF                     l173:
  4176     0FFF  0008               	return
  4177     1000                     __end_of_lcd_turnLeft:
  4178                           
  4179                           	psect	text27
  4180     0FB9                     __ptext27:	
  4181 ;; *************** function _interruption_init *****************
  4182 ;; Defined at:
  4183 ;;		line 122 in file "./config.h"
  4184 ;; Parameters:    Size  Location     Type
  4185 ;;		None
  4186 ;; Auto vars:     Size  Location     Type
  4187 ;;		None
  4188 ;; Return value:  Size  Location     Type
  4189 ;;                  1    wreg      void 
  4190 ;; Registers used:
  4191 ;;		None
  4192 ;; Tracked objects:
  4193 ;;		On entry : 0/0
  4194 ;;		On exit  : 0/0
  4195 ;;		Unchanged: 0/0
  4196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4197 ;;      Params:         0       0       0       0       0
  4198 ;;      Locals:         0       0       0       0       0
  4199 ;;      Temps:          0       0       0       0       0
  4200 ;;      Totals:         0       0       0       0       0
  4201 ;;Total ram usage:        0 bytes
  4202 ;; Hardware stack levels used: 1
  4203 ;; Hardware stack levels required when called: 2
  4204 ;; This function calls:
  4205 ;;		Nothing
  4206 ;; This function is called by:
  4207 ;;		_main
  4208 ;; This function uses a non-reentrant model
  4209 ;;
  4210                           
  4211     0FB9                     _interruption_init:	
  4212                           ;psect for function _interruption_init
  4213                           
  4214     0FB9                     l1773:	
  4215                           ;incstack = 0
  4216                           ; Regs used in _interruption_init: []
  4217                           
  4218                           
  4219                           ;./config.h: 124:   INTCONbits.GIE=1;
  4220     0FB9  178B               	bsf	11,7	;volatile
  4221                           
  4222                           ;./config.h: 125:   OPTION_REGbits.INTEDG = 1;
  4223     0FBA  1683               	bsf	3,5	;RP0=1, select bank1
  4224     0FBB  1303               	bcf	3,6	;RP1=0, select bank1
  4225     0FBC  1701               	bsf	1,6	;volatile
  4226                           
  4227                           ;./config.h: 127:   INTCONbits.INTE = 1;
  4228     0FBD  160B               	bsf	11,4	;volatile
  4229                           
  4230                           ;./config.h: 129:   INTCONbits.PEIE = 1;
  4231     0FBE  170B               	bsf	11,6	;volatile
  4232                           
  4233                           ;./config.h: 131:   PIE1bits.TMR1IE = 1;
  4234     0FBF  140C               	bsf	12,0	;volatile
  4235     0FC0                     l93:
  4236     0FC0  0008               	return
  4237     0FC1                     __end_of_interruption_init:
  4238                           
  4239                           	psect	text28
  4240     0FB1                     __ptext28:	
  4241 ;; *************** function _WDT_init *****************
  4242 ;; Defined at:
  4243 ;;		line 62 in file "./config.h"
  4244 ;; Parameters:    Size  Location     Type
  4245 ;;		None
  4246 ;; Auto vars:     Size  Location     Type
  4247 ;;		None
  4248 ;; Return value:  Size  Location     Type
  4249 ;;                  1    wreg      void 
  4250 ;; Registers used:
  4251 ;;		None
  4252 ;; Tracked objects:
  4253 ;;		On entry : 0/0
  4254 ;;		On exit  : 0/0
  4255 ;;		Unchanged: 0/0
  4256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4257 ;;      Params:         0       0       0       0       0
  4258 ;;      Locals:         0       0       0       0       0
  4259 ;;      Temps:          0       0       0       0       0
  4260 ;;      Totals:         0       0       0       0       0
  4261 ;;Total ram usage:        0 bytes
  4262 ;; Hardware stack levels used: 1
  4263 ;; Hardware stack levels required when called: 2
  4264 ;; This function calls:
  4265 ;;		Nothing
  4266 ;; This function is called by:
  4267 ;;		_main
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271     0FB1                     _WDT_init:	
  4272                           ;psect for function _WDT_init
  4273                           
  4274     0FB1                     l1761:	
  4275                           ;incstack = 0
  4276                           ; Regs used in _WDT_init: []
  4277                           
  4278     0FB1  1683               	bsf	3,5	;RP0=1, select bank1
  4279     0FB2  1303               	bcf	3,6	;RP1=0, select bank1
  4280     0FB3  1581               	bsf	1,3	;volatile
  4281     0FB4  1401               	bsf	1,0	;volatile
  4282     0FB5  1481               	bsf	1,1	;volatile
  4283     0FB6  1501               	bsf	1,2	;volatile
  4284     0FB7  0064               	clrwdt	;# 
  4285     0FB8                     l84:
  4286     0FB8  0008               	return
  4287     0FB9                     __end_of_WDT_init:
  4288                           
  4289                           	psect	text29
  4290     033B                     __ptext29:	
  4291 ;; *************** function _Lcd_Init *****************
  4292 ;; Defined at:
  4293 ;;		line 70 in file "./lcd.h"
  4294 ;; Parameters:    Size  Location     Type
  4295 ;;		None
  4296 ;; Auto vars:     Size  Location     Type
  4297 ;;		None
  4298 ;; Return value:  Size  Location     Type
  4299 ;;                  1    wreg      void 
  4300 ;; Registers used:
  4301 ;;		wreg, status,2, status,0, pclath, cstack
  4302 ;; Tracked objects:
  4303 ;;		On entry : 0/0
  4304 ;;		On exit  : 0/0
  4305 ;;		Unchanged: 0/0
  4306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4307 ;;      Params:         0       0       0       0       0
  4308 ;;      Locals:         0       0       0       0       0
  4309 ;;      Temps:          0       2       0       0       0
  4310 ;;      Totals:         0       2       0       0       0
  4311 ;;Total ram usage:        2 bytes
  4312 ;; Hardware stack levels used: 1
  4313 ;; Hardware stack levels required when called: 4
  4314 ;; This function calls:
  4315 ;;		_Lcd_Cmd
  4316 ;;		_Lcd_Port
  4317 ;; This function is called by:
  4318 ;;		_main
  4319 ;; This function uses a non-reentrant model
  4320 ;;
  4321                           
  4322     033B                     _Lcd_Init:	
  4323                           ;psect for function _Lcd_Init
  4324                           
  4325     033B                     l1775:	
  4326                           ;incstack = 0
  4327                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  4328                           
  4329                           
  4330                           ;./lcd.h: 72:   Lcd_Port(0x00);
  4331     033B  3000               	movlw	0
  4332     033C  120A  118A  2779  120A  118A  	fcall	_Lcd_Port
  4333     0341                     l1777:
  4334                           
  4335                           ;./lcd.h: 73:    _delay((unsigned long)((20)*(4000000/4000.0)));
  4336     0341  301A               	movlw	26
  4337     0342  1283               	bcf	3,5	;RP0=0, select bank0
  4338     0343  1303               	bcf	3,6	;RP1=0, select bank0
  4339     0344  00A5               	movwf	??_Lcd_Init+1
  4340     0345  30F7               	movlw	247
  4341     0346  00A4               	movwf	??_Lcd_Init
  4342     0347                     u1527:
  4343     0347  0BA4               	decfsz	??_Lcd_Init,f
  4344     0348  2B47               	goto	u1527
  4345     0349  0BA5               	decfsz	??_Lcd_Init+1,f
  4346     034A  2B47               	goto	u1527
  4347     034B  2B4C               	nop2
  4348     034C                     l1779:
  4349                           
  4350                           ;./lcd.h: 74:   Lcd_Cmd(0x03);
  4351     034C  3003               	movlw	3
  4352     034D  120A  118A  27B6  120A  118A  	fcall	_Lcd_Cmd
  4353                           
  4354                           ;./lcd.h: 75:  _delay((unsigned long)((5)*(4000000/4000.0)));
  4355     0352  3007               	movlw	7
  4356     0353  1283               	bcf	3,5	;RP0=0, select bank0
  4357     0354  1303               	bcf	3,6	;RP1=0, select bank0
  4358     0355  00A5               	movwf	??_Lcd_Init+1
  4359     0356  307C               	movlw	124
  4360     0357  00A4               	movwf	??_Lcd_Init
  4361     0358                     u1537:
  4362     0358  0BA4               	decfsz	??_Lcd_Init,f
  4363     0359  2B58               	goto	u1537
  4364     035A  0BA5               	decfsz	??_Lcd_Init+1,f
  4365     035B  2B58               	goto	u1537
  4366     035C  0000               	nop
  4367     035D                     l1781:
  4368                           
  4369                           ;./lcd.h: 76:   Lcd_Cmd(0x03);
  4370     035D  3003               	movlw	3
  4371     035E  120A  118A  27B6  120A  118A  	fcall	_Lcd_Cmd
  4372     0363                     l1783:
  4373                           
  4374                           ;./lcd.h: 77:  _delay((unsigned long)((11)*(4000000/4000.0)));
  4375     0363  300F               	movlw	15
  4376     0364  1283               	bcf	3,5	;RP0=0, select bank0
  4377     0365  1303               	bcf	3,6	;RP1=0, select bank0
  4378     0366  00A5               	movwf	??_Lcd_Init+1
  4379     0367  3047               	movlw	71
  4380     0368  00A4               	movwf	??_Lcd_Init
  4381     0369                     u1547:
  4382     0369  0BA4               	decfsz	??_Lcd_Init,f
  4383     036A  2B69               	goto	u1547
  4384     036B  0BA5               	decfsz	??_Lcd_Init+1,f
  4385     036C  2B69               	goto	u1547
  4386                           
  4387                           ;./lcd.h: 78:   Lcd_Cmd(0x03);
  4388     036D  3003               	movlw	3
  4389     036E  120A  118A  27B6  120A  118A  	fcall	_Lcd_Cmd
  4390                           
  4391                           ;./lcd.h: 80:   Lcd_Cmd(0x02);
  4392     0373  3002               	movlw	2
  4393     0374  120A  118A  27B6  120A  118A  	fcall	_Lcd_Cmd
  4394                           
  4395                           ;./lcd.h: 81:   Lcd_Cmd(0x02);
  4396     0379  3002               	movlw	2
  4397     037A  120A  118A  27B6  120A  118A  	fcall	_Lcd_Cmd
  4398                           
  4399                           ;./lcd.h: 82:   Lcd_Cmd(0x08);
  4400     037F  3008               	movlw	8
  4401     0380  120A  118A  27B6  120A  118A  	fcall	_Lcd_Cmd
  4402                           
  4403                           ;./lcd.h: 83:   Lcd_Cmd(0x00);
  4404     0385  3000               	movlw	0
  4405     0386  120A  118A  27B6  120A  118A  	fcall	_Lcd_Cmd
  4406                           
  4407                           ;./lcd.h: 84:   Lcd_Cmd(0x0C);
  4408     038B  300C               	movlw	12
  4409     038C  120A  118A  27B6  120A  118A  	fcall	_Lcd_Cmd
  4410                           
  4411                           ;./lcd.h: 85:   Lcd_Cmd(0x00);
  4412     0391  3000               	movlw	0
  4413     0392  120A  118A  27B6  120A  118A  	fcall	_Lcd_Cmd
  4414                           
  4415                           ;./lcd.h: 86:   Lcd_Cmd(0x06);
  4416     0397  3006               	movlw	6
  4417     0398  120A  118A  27B6  120A  118A  	fcall	_Lcd_Cmd
  4418     039D                     l119:
  4419     039D  0008               	return
  4420     039E                     __end_of_Lcd_Init:
  4421                           
  4422                           	psect	text30
  4423     07B6                     __ptext30:	
  4424 ;; *************** function _Lcd_Cmd *****************
  4425 ;; Defined at:
  4426 ;;		line 34 in file "./lcd.h"
  4427 ;; Parameters:    Size  Location     Type
  4428 ;;  a               1    wreg     unsigned char 
  4429 ;; Auto vars:     Size  Location     Type
  4430 ;;  a               1    3[BANK0 ] unsigned char 
  4431 ;; Return value:  Size  Location     Type
  4432 ;;                  1    wreg      void 
  4433 ;; Registers used:
  4434 ;;		wreg, status,2, status,0, pclath, cstack
  4435 ;; Tracked objects:
  4436 ;;		On entry : 0/0
  4437 ;;		On exit  : 0/0
  4438 ;;		Unchanged: 0/0
  4439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4440 ;;      Params:         0       0       0       0       0
  4441 ;;      Locals:         0       1       0       0       0
  4442 ;;      Temps:          0       2       0       0       0
  4443 ;;      Totals:         0       3       0       0       0
  4444 ;;Total ram usage:        3 bytes
  4445 ;; Hardware stack levels used: 1
  4446 ;; Hardware stack levels required when called: 3
  4447 ;; This function calls:
  4448 ;;		_Lcd_Port
  4449 ;; This function is called by:
  4450 ;;		_Lcd_Clear
  4451 ;;		_Lcd_Set_Cursor
  4452 ;;		_Lcd_Init
  4453 ;; This function uses a non-reentrant model
  4454 ;;
  4455                           
  4456     07B6                     _Lcd_Cmd:	
  4457                           ;psect for function _Lcd_Cmd
  4458                           
  4459                           
  4460                           ;incstack = 0
  4461                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  4462                           ;Lcd_Cmd@a stored from wreg
  4463     07B6  1283               	bcf	3,5	;RP0=0, select bank0
  4464     07B7  1303               	bcf	3,6	;RP1=0, select bank0
  4465     07B8  00A3               	movwf	Lcd_Cmd@a
  4466     07B9                     l1569:
  4467                           
  4468                           ;./lcd.h: 34: void Lcd_Cmd(char a);./lcd.h: 35: {;./lcd.h: 36:  RD2 = 0;
  4469     07B9  1108               	bcf	8,2	;volatile
  4470     07BA                     l1571:
  4471                           
  4472                           ;./lcd.h: 37:  Lcd_Port(a);
  4473     07BA  0823               	movf	Lcd_Cmd@a,w
  4474     07BB  120A  118A  2779  120A  118A  	fcall	_Lcd_Port
  4475     07C0                     l1573:
  4476                           
  4477                           ;./lcd.h: 38:  RD3 = 1;
  4478     07C0  1283               	bcf	3,5	;RP0=0, select bank0
  4479     07C1  1303               	bcf	3,6	;RP1=0, select bank0
  4480     07C2  1588               	bsf	8,3	;volatile
  4481     07C3                     l1575:
  4482                           
  4483                           ;./lcd.h: 39:         _delay((unsigned long)((4)*(4000000/4000.0)));
  4484     07C3  3006               	movlw	6
  4485     07C4  1283               	bcf	3,5	;RP0=0, select bank0
  4486     07C5  1303               	bcf	3,6	;RP1=0, select bank0
  4487     07C6  00A2               	movwf	??_Lcd_Cmd+1
  4488     07C7  302F               	movlw	47
  4489     07C8  00A1               	movwf	??_Lcd_Cmd
  4490     07C9                     u1557:
  4491     07C9  0BA1               	decfsz	??_Lcd_Cmd,f
  4492     07CA  2FC9               	goto	u1557
  4493     07CB  0BA2               	decfsz	??_Lcd_Cmd+1,f
  4494     07CC  2FC9               	goto	u1557
  4495     07CD  2FCE               	nop2
  4496     07CE                     l1577:
  4497                           
  4498                           ;./lcd.h: 40:         RD3 = 0;
  4499     07CE  1283               	bcf	3,5	;RP0=0, select bank0
  4500     07CF  1303               	bcf	3,6	;RP1=0, select bank0
  4501     07D0  1188               	bcf	8,3	;volatile
  4502     07D1                     l107:
  4503     07D1  0008               	return
  4504     07D2                     __end_of_Lcd_Cmd:
  4505                           
  4506                           	psect	text31
  4507     0779                     __ptext31:	
  4508 ;; *************** function _Lcd_Port *****************
  4509 ;; Defined at:
  4510 ;;		line 12 in file "./lcd.h"
  4511 ;; Parameters:    Size  Location     Type
  4512 ;;  a               1    wreg     unsigned char 
  4513 ;; Auto vars:     Size  Location     Type
  4514 ;;  a               1    0[BANK0 ] unsigned char 
  4515 ;; Return value:  Size  Location     Type
  4516 ;;                  1    wreg      void 
  4517 ;; Registers used:
  4518 ;;		wreg
  4519 ;; Tracked objects:
  4520 ;;		On entry : 0/0
  4521 ;;		On exit  : 0/0
  4522 ;;		Unchanged: 0/0
  4523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4524 ;;      Params:         0       0       0       0       0
  4525 ;;      Locals:         0       1       0       0       0
  4526 ;;      Temps:          0       0       0       0       0
  4527 ;;      Totals:         0       1       0       0       0
  4528 ;;Total ram usage:        1 bytes
  4529 ;; Hardware stack levels used: 1
  4530 ;; Hardware stack levels required when called: 2
  4531 ;; This function calls:
  4532 ;;		Nothing
  4533 ;; This function is called by:
  4534 ;;		_Lcd_Cmd
  4535 ;;		_Lcd_Init
  4536 ;;		_Lcd_Write_Char
  4537 ;; This function uses a non-reentrant model
  4538 ;;
  4539                           
  4540     0779                     _Lcd_Port:	
  4541                           ;psect for function _Lcd_Port
  4542                           
  4543                           
  4544                           ;incstack = 0
  4545                           ; Regs used in _Lcd_Port: [wreg]
  4546                           ;Lcd_Port@a stored from wreg
  4547     0779  1283               	bcf	3,5	;RP0=0, select bank0
  4548     077A  1303               	bcf	3,6	;RP1=0, select bank0
  4549     077B  00A0               	movwf	Lcd_Port@a
  4550     077C                     l1479:
  4551                           
  4552                           ;./lcd.h: 12: void Lcd_Port(char a);./lcd.h: 13: {;./lcd.h: 14:  if(a & 1)
  4553     077C  1C20               	btfss	Lcd_Port@a,0
  4554     077D  2F7F               	goto	u1001
  4555     077E  2F80               	goto	u1000
  4556     077F                     u1001:
  4557     077F  2F82               	goto	l96
  4558     0780                     u1000:
  4559     0780                     l1481:
  4560                           
  4561                           ;./lcd.h: 15:   RD4 = 1;
  4562     0780  1608               	bsf	8,4	;volatile
  4563     0781  2F83               	goto	l97
  4564     0782                     l96:	
  4565                           ;./lcd.h: 16:  else
  4566                           
  4567                           
  4568                           ;./lcd.h: 17:   RD4 = 0;
  4569     0782  1208               	bcf	8,4	;volatile
  4570     0783                     l97:
  4571                           
  4572                           ;./lcd.h: 19:  if(a & 2)
  4573     0783  1CA0               	btfss	Lcd_Port@a,1
  4574     0784  2F86               	goto	u1011
  4575     0785  2F87               	goto	u1010
  4576     0786                     u1011:
  4577     0786  2F89               	goto	l98
  4578     0787                     u1010:
  4579     0787                     l1483:
  4580                           
  4581                           ;./lcd.h: 20:   RD5 = 1;
  4582     0787  1688               	bsf	8,5	;volatile
  4583     0788  2F8A               	goto	l99
  4584     0789                     l98:	
  4585                           ;./lcd.h: 21:  else
  4586                           
  4587                           
  4588                           ;./lcd.h: 22:   RD5 = 0;
  4589     0789  1288               	bcf	8,5	;volatile
  4590     078A                     l99:
  4591                           
  4592                           ;./lcd.h: 24:  if(a & 4)
  4593     078A  1D20               	btfss	Lcd_Port@a,2
  4594     078B  2F8D               	goto	u1021
  4595     078C  2F8E               	goto	u1020
  4596     078D                     u1021:
  4597     078D  2F90               	goto	l100
  4598     078E                     u1020:
  4599     078E                     l1485:
  4600                           
  4601                           ;./lcd.h: 25:   RD6 = 1;
  4602     078E  1708               	bsf	8,6	;volatile
  4603     078F  2F91               	goto	l101
  4604     0790                     l100:	
  4605                           ;./lcd.h: 26:  else
  4606                           
  4607                           
  4608                           ;./lcd.h: 27:   RD6 = 0;
  4609     0790  1308               	bcf	8,6	;volatile
  4610     0791                     l101:
  4611                           
  4612                           ;./lcd.h: 29:  if(a & 8)
  4613     0791  1DA0               	btfss	Lcd_Port@a,3
  4614     0792  2F94               	goto	u1031
  4615     0793  2F95               	goto	u1030
  4616     0794                     u1031:
  4617     0794  2F97               	goto	l102
  4618     0795                     u1030:
  4619     0795                     l1487:
  4620                           
  4621                           ;./lcd.h: 30:   RD7 = 1;
  4622     0795  1788               	bsf	8,7	;volatile
  4623     0796  2F98               	goto	l104
  4624     0797                     l102:	
  4625                           ;./lcd.h: 31:  else
  4626                           
  4627                           
  4628                           ;./lcd.h: 32:   RD7 = 0;
  4629     0797  1388               	bcf	8,7	;volatile
  4630     0798                     l104:
  4631     0798  0008               	return
  4632     0799                     __end_of_Lcd_Port:
  4633                           
  4634                           	psect	text32
  4635     0FCC                     __ptext32:	
  4636 ;; *************** function _ADC_init *****************
  4637 ;; Defined at:
  4638 ;;		line 30 in file "./config.h"
  4639 ;; Parameters:    Size  Location     Type
  4640 ;;		None
  4641 ;; Auto vars:     Size  Location     Type
  4642 ;;		None
  4643 ;; Return value:  Size  Location     Type
  4644 ;;                  1    wreg      void 
  4645 ;; Registers used:
  4646 ;;		None
  4647 ;; Tracked objects:
  4648 ;;		On entry : 0/0
  4649 ;;		On exit  : 0/0
  4650 ;;		Unchanged: 0/0
  4651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4652 ;;      Params:         0       0       0       0       0
  4653 ;;      Locals:         0       0       0       0       0
  4654 ;;      Temps:          0       0       0       0       0
  4655 ;;      Totals:         0       0       0       0       0
  4656 ;;Total ram usage:        0 bytes
  4657 ;; Hardware stack levels used: 1
  4658 ;; Hardware stack levels required when called: 2
  4659 ;; This function calls:
  4660 ;;		Nothing
  4661 ;; This function is called by:
  4662 ;;		_main
  4663 ;; This function uses a non-reentrant model
  4664 ;;
  4665                           
  4666     0FCC                     _ADC_init:	
  4667                           ;psect for function _ADC_init
  4668                           
  4669     0FCC                     l1759:	
  4670                           ;incstack = 0
  4671                           ; Regs used in _ADC_init: []
  4672                           
  4673                           
  4674                           ;./config.h: 32: void WDT_init()
  4675     0FCC  1683               	bsf	3,5	;RP0=1, select bank1
  4676     0FCD  1303               	bcf	3,6	;RP1=0, select bank1
  4677     0FCE  101F               	bcf	31,0	;volatile
  4678                           
  4679                           ;./config.h: 33: {
  4680     0FCF  109F               	bcf	31,1	;volatile
  4681                           
  4682                           ;./config.h: 34:   OPTION_REGbits.PSA = 1;
  4683     0FD0  151F               	bsf	31,2	;volatile
  4684                           
  4685                           ;./config.h: 35: 
  4686     0FD1  159F               	bsf	31,3	;volatile
  4687                           
  4688                           ;./config.h: 38:   OPTION_REGbits.PS1 = 1;
  4689     0FD2  179F               	bsf	31,7	;volatile
  4690                           
  4691                           ;./config.h: 41:   __asm("clrwdt");
  4692     0FD3  1283               	bcf	3,5	;RP0=0, select bank0
  4693     0FD4  1303               	bcf	3,6	;RP1=0, select bank0
  4694     0FD5  131F               	bcf	31,6	;volatile
  4695                           
  4696                           ;./config.h: 42: }
  4697     0FD6  139F               	bcf	31,7	;volatile
  4698     0FD7                     l75:
  4699     0FD7  0008               	return
  4700     0FD8                     __end_of_ADC_init:
  4701                           
  4702                           	psect	text33
  4703     066C                     __ptext33:	
  4704 ;; *************** function _interruptionHandler *****************
  4705 ;; Defined at:
  4706 ;;		line 16 in file "main.c"
  4707 ;; Parameters:    Size  Location     Type
  4708 ;;		None
  4709 ;; Auto vars:     Size  Location     Type
  4710 ;;		None
  4711 ;; Return value:  Size  Location     Type
  4712 ;;                  1    wreg      void 
  4713 ;; Registers used:
  4714 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4715 ;; Tracked objects:
  4716 ;;		On entry : 0/0
  4717 ;;		On exit  : 0/0
  4718 ;;		Unchanged: 0/0
  4719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4720 ;;      Params:         0       0       0       0       0
  4721 ;;      Locals:         0       0       0       0       0
  4722 ;;      Temps:          3       0       0       0       0
  4723 ;;      Totals:         3       0       0       0       0
  4724 ;;Total ram usage:        3 bytes
  4725 ;; Hardware stack levels used: 1
  4726 ;; Hardware stack levels required when called: 1
  4727 ;; This function calls:
  4728 ;;		_runTimer
  4729 ;; This function is called by:
  4730 ;;		Interrupt level 1
  4731 ;; This function uses a non-reentrant model
  4732 ;;
  4733                           
  4734     066C                     _interruptionHandler:	
  4735                           ;psect for function _interruptionHandler
  4736                           
  4737     066C                     i1l1833:
  4738                           
  4739                           ;main.c: 18:   if(INTCONbits.INTF)
  4740     066C  1C8B               	btfss	11,1	;volatile
  4741     066D  2E6F               	goto	u148_21
  4742     066E  2E70               	goto	u148_20
  4743     066F                     u148_21:
  4744     066F  2E78               	goto	i1l180
  4745     0670                     u148_20:
  4746     0670                     i1l1835:
  4747                           
  4748                           ;main.c: 19:   {;main.c: 20:     INTCONbits.INTF = 0;
  4749     0670  108B               	bcf	11,1	;volatile
  4750                           
  4751                           ;main.c: 21:     tankState = WTANK_ERROR;
  4752     0671  3003               	movlw	3
  4753     0672  1283               	bcf	3,5	;RP0=0, select bank0
  4754     0673  1303               	bcf	3,6	;RP1=0, select bank0
  4755     0674  00ED               	movwf	_tankState
  4756                           
  4757                           ;main.c: 22:     irrigationState = IRRIG_ERROR;
  4758     0675  3002               	movlw	2
  4759     0676  00EB               	movwf	_irrigationState
  4760                           
  4761                           ;main.c: 23:   }
  4762     0677  2E95               	goto	i1l183
  4763     0678                     i1l180:	
  4764                           ;main.c: 24:   else if(PIR1bits.TMR1IF)
  4765                           
  4766     0678  1283               	bcf	3,5	;RP0=0, select bank0
  4767     0679  1303               	bcf	3,6	;RP1=0, select bank0
  4768     067A  1C0C               	btfss	12,0	;volatile
  4769     067B  2E7D               	goto	u149_21
  4770     067C  2E7E               	goto	u149_20
  4771     067D                     u149_21:
  4772     067D  2E95               	goto	i1l183
  4773     067E                     u149_20:
  4774     067E                     i1l1837:
  4775                           
  4776                           ;main.c: 25:   {;main.c: 26:     PIR1bits.TMR1IF = 0;
  4777     067E  100C               	bcf	12,0	;volatile
  4778                           
  4779                           ;main.c: 29:     TMR1H = 0xFF;
  4780     067F  30FF               	movlw	255
  4781     0680  008F               	movwf	15	;volatile
  4782                           
  4783                           ;main.c: 30:     TMR1L = 0x67;
  4784     0681  3067               	movlw	103
  4785     0682  008E               	movwf	14	;volatile
  4786     0683                     i1l1839:
  4787                           
  4788                           ;main.c: 32:     runTimer(&timer_WTANK_timeout);
  4789     0683  30CA               	movlw	low _timer_WTANK_timeout
  4790     0684  00F0               	movwf	runTimer@timer
  4791     0685  3000               	movlw	high _timer_WTANK_timeout
  4792     0686  00F1               	movwf	runTimer@timer+1
  4793     0687  120A  118A  226A  120A  118A  	fcall	_runTimer
  4794                           
  4795                           ;main.c: 33:     runTimer(&timer_lcdButtons);
  4796     068C  30D0               	movlw	low _timer_lcdButtons
  4797     068D  00F0               	movwf	runTimer@timer
  4798     068E  3000               	movlw	high _timer_lcdButtons
  4799     068F  00F1               	movwf	runTimer@timer+1
  4800     0690  120A  118A  226A  120A  118A  	fcall	_runTimer
  4801     0695                     i1l183:
  4802     0695  087A               	movf	??_interruptionHandler+2,w
  4803     0696  008A               	movwf	10
  4804     0697  0879               	movf	??_interruptionHandler+1,w
  4805     0698  0084               	movwf	4
  4806     0699  0E78               	swapf	??_interruptionHandler,w
  4807     069A  0083               	movwf	3
  4808     069B  0EFE               	swapf	btemp,f
  4809     069C  0E7E               	swapf	btemp,w
  4810     069D  0009               	retfie
  4811     069E                     __end_of_interruptionHandler:
  4812                           
  4813                           	psect	intentry
  4814     0004                     __pintentry:	
  4815                           ;incstack = 0
  4816 ;; hardware stack exceeded
  4817                           ; Regs used in _interruptionHandler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4818                           
  4819     0004                     interrupt_function:
  4820     007E                     saved_w         set	btemp
  4821     0004  00FE               	movwf	btemp
  4822     0005  0E03               	swapf	3,w
  4823     0006  00F8               	movwf	??_interruptionHandler
  4824     0007  0804               	movf	4,w
  4825     0008  00F9               	movwf	??_interruptionHandler+1
  4826     0009  080A               	movf	10,w
  4827     000A  00FA               	movwf	??_interruptionHandler+2
  4828     000B  120A  118A  2E6C   	ljmp	_interruptionHandler
  4829                           
  4830                           	psect	text34
  4831     026A                     __ptext34:	
  4832 ;; *************** function _runTimer *****************
  4833 ;; Defined at:
  4834 ;;		line 5 in file "virtualTimer.c"
  4835 ;; Parameters:    Size  Location     Type
  4836 ;;  timer           2    0[COMMON] PTR struct .
  4837 ;;		 -> timer_WTANK_timeout(6), timer_lcdButtons(6), 
  4838 ;; Auto vars:     Size  Location     Type
  4839 ;;		None
  4840 ;; Return value:  Size  Location     Type
  4841 ;;                  1    wreg      void 
  4842 ;; Registers used:
  4843 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4844 ;; Tracked objects:
  4845 ;;		On entry : 0/0
  4846 ;;		On exit  : 0/0
  4847 ;;		Unchanged: 0/0
  4848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4849 ;;      Params:         2       0       0       0       0
  4850 ;;      Locals:         0       0       0       0       0
  4851 ;;      Temps:          6       0       0       0       0
  4852 ;;      Totals:         8       0       0       0       0
  4853 ;;Total ram usage:        8 bytes
  4854 ;; Hardware stack levels used: 1
  4855 ;; This function calls:
  4856 ;;		Nothing
  4857 ;; This function is called by:
  4858 ;;		_interruptionHandler
  4859 ;; This function uses a non-reentrant model
  4860 ;;
  4861                           
  4862     026A                     _runTimer:	
  4863                           ;psect for function _runTimer
  4864                           
  4865     026A                     i1l1801:	
  4866                           ;incstack = 0
  4867 ;; hardware stack exceeded
  4868                           ; Regs used in _runTimer: [wreg-fsr0h+status,2+status,0]
  4869                           
  4870                           
  4871                           ;virtualTimer.c: 5: void runTimer(virtualTimer *timer);virtualTimer.c: 6: {;virtualTimer
      +                          .c: 7:   if(timer->active == 0)
  4872     026A  0870               	movf	runTimer@timer,w
  4873     026B  3E04               	addlw	4
  4874     026C  00F2               	movwf	??_runTimer
  4875     026D  0871               	movf	runTimer@timer+1,w
  4876     026E  1803               	skipnc
  4877     026F  3E01               	addlw	1
  4878     0270  3E00               	addlw	0
  4879     0271  00F3               	movwf	??_runTimer+1
  4880     0272  0872               	movf	??_runTimer,w
  4881     0273  0084               	movwf	4
  4882     0274  1783               	bsf	3,7
  4883     0275  1C73               	btfss	??_runTimer+1,0
  4884     0276  1383               	bcf	3,7
  4885     0277  0800               	movf	0,w
  4886     0278  1D03               	btfss	3,2
  4887     0279  2A7B               	goto	u146_21
  4888     027A  2A7C               	goto	u146_20
  4889     027B                     u146_21:
  4890     027B  2A7D               	goto	i1l1805
  4891     027C                     u146_20:
  4892     027C  2AD5               	goto	i1l241
  4893     027D                     i1l1805:
  4894                           
  4895                           ;virtualTimer.c: 10:   if(timer->elapsedTime >= timer->targetTime)
  4896     027D  0870               	movf	runTimer@timer,w
  4897     027E  0084               	movwf	4
  4898     027F  1783               	bsf	3,7
  4899     0280  1C71               	btfss	runTimer@timer+1,0
  4900     0281  1383               	bcf	3,7
  4901     0282  0800               	movf	0,w
  4902     0283  00F2               	movwf	??_runTimer
  4903     0284  0A84               	incf	4,f
  4904     0285  0800               	movf	0,w
  4905     0286  00F3               	movwf	??_runTimer+1
  4906     0287  0870               	movf	runTimer@timer,w
  4907     0288  3E02               	addlw	2
  4908     0289  00F4               	movwf	??_runTimer+2
  4909     028A  0871               	movf	runTimer@timer+1,w
  4910     028B  1803               	skipnc
  4911     028C  3E01               	addlw	1
  4912     028D  3E00               	addlw	0
  4913     028E  00F5               	movwf	??_runTimer+3
  4914     028F  0874               	movf	??_runTimer+2,w
  4915     0290  0084               	movwf	4
  4916     0291  1783               	bsf	3,7
  4917     0292  1C75               	btfss	??_runTimer+3,0
  4918     0293  1383               	bcf	3,7
  4919     0294  0800               	movf	0,w
  4920     0295  00F6               	movwf	??_runTimer+4
  4921     0296  0A84               	incf	4,f
  4922     0297  0800               	movf	0,w
  4923     0298  00F7               	movwf	??_runTimer+5
  4924     0299  0873               	movf	??_runTimer+1,w
  4925     029A  0277               	subwf	??_runTimer+5,w
  4926     029B  1D03               	skipz
  4927     029C  2A9F               	goto	u147_25
  4928     029D  0872               	movf	??_runTimer,w
  4929     029E  0276               	subwf	??_runTimer+4,w
  4930     029F                     u147_25:
  4931     029F  1C03               	skipc
  4932     02A0  2AA2               	goto	u147_21
  4933     02A1  2AA3               	goto	u147_20
  4934     02A2                     u147_21:
  4935     02A2  2AC3               	goto	i1l1811
  4936     02A3                     u147_20:
  4937     02A3                     i1l1807:
  4938                           
  4939                           ;virtualTimer.c: 11:   {;virtualTimer.c: 12:     timer->reached = 1;
  4940     02A3  0870               	movf	runTimer@timer,w
  4941     02A4  3E05               	addlw	5
  4942     02A5  00F2               	movwf	??_runTimer
  4943     02A6  0871               	movf	runTimer@timer+1,w
  4944     02A7  1803               	skipnc
  4945     02A8  3E01               	addlw	1
  4946     02A9  3E00               	addlw	0
  4947     02AA  00F3               	movwf	??_runTimer+1
  4948     02AB  0872               	movf	??_runTimer,w
  4949     02AC  0084               	movwf	4
  4950     02AD  1783               	bsf	3,7
  4951     02AE  1C73               	btfss	??_runTimer+1,0
  4952     02AF  1383               	bcf	3,7
  4953     02B0  3001               	movlw	1
  4954     02B1  0080               	movwf	0
  4955                           
  4956                           ;virtualTimer.c: 14:     timer->elapsedTime = 0;
  4957     02B2  0870               	movf	runTimer@timer,w
  4958     02B3  3E02               	addlw	2
  4959     02B4  00F2               	movwf	??_runTimer
  4960     02B5  0871               	movf	runTimer@timer+1,w
  4961     02B6  1803               	skipnc
  4962     02B7  3E01               	addlw	1
  4963     02B8  3E00               	addlw	0
  4964     02B9  00F3               	movwf	??_runTimer+1
  4965     02BA  0872               	movf	??_runTimer,w
  4966     02BB  0084               	movwf	4
  4967     02BC  1783               	bsf	3,7
  4968     02BD  1C73               	btfss	??_runTimer+1,0
  4969     02BE  1383               	bcf	3,7
  4970     02BF  0180               	clrf	0
  4971     02C0  0A84               	incf	4,f
  4972     02C1  0180               	clrf	0
  4973     02C2  2AD5               	goto	i1l241
  4974     02C3                     i1l1811:
  4975                           
  4976                           ;virtualTimer.c: 18:   timer->elapsedTime++;
  4977     02C3  0870               	movf	runTimer@timer,w
  4978     02C4  3E02               	addlw	2
  4979     02C5  00F2               	movwf	??_runTimer
  4980     02C6  0871               	movf	runTimer@timer+1,w
  4981     02C7  1803               	skipnc
  4982     02C8  3E01               	addlw	1
  4983     02C9  3E00               	addlw	0
  4984     02CA  00F3               	movwf	??_runTimer+1
  4985     02CB  0872               	movf	??_runTimer,w
  4986     02CC  0084               	movwf	4
  4987     02CD  1783               	bsf	3,7
  4988     02CE  1C73               	btfss	??_runTimer+1,0
  4989     02CF  1383               	bcf	3,7
  4990     02D0  3001               	movlw	1
  4991     02D1  0780               	addwf	0,f
  4992     02D2  0A84               	incf	4,f
  4993     02D3  1803               	skipnc
  4994     02D4  0A80               	incf	0,f
  4995     02D5                     i1l241:
  4996     02D5  0008               	return
  4997     02D6                     __end_of_runTimer:
  4998     0002                     ___latbits      equ	2
  4999     007E                     btemp           set	126	;btemp
  5000     007E                     wtemp0          set	126
  5001                           
  5002                           	psect	config
  5003                           
  5004                           ;Config register CONFIG @ 0x2007
  5005                           ;	Oscillator Selection bits
  5006                           ;	FOSC = HS, HS oscillator
  5007                           ;	Watchdog Timer Enable bit
  5008                           ;	WDTE = ON, WDT enabled
  5009                           ;	Power-up Timer Enable bit
  5010                           ;	PWRTE = ON, PWRT enabled
  5011                           ;	Brown-out Reset Enable bit
  5012                           ;	BOREN = ON, BOR enabled
  5013                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  5014                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  5015                           ;	Data EEPROM Memory Code Protection bit
  5016                           ;	CPD = OFF, Data EEPROM code protection off
  5017                           ;	Flash Program Memory Write Enable bits
  5018                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  5019                           ;	In-Circuit Debugger Mode bit
  5020                           ;	DEBUG = 0x1, unprogrammed default
  5021                           ;	Flash Program Memory Code Protection bit
  5022                           ;	CP = OFF, Code protection off
  5023     2007                     	org	8199
  5024     2007  3F76               	dw	16246

Data Sizes:
    Strings     40
    Constant    0
    Data        23
    BSS         43
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     73      80
    BANK1            80      0      54
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(2) Largest target is 20
		 -> print_Index@buffer(BANK0[20]), print_TankState@buffer(BANK0[20]), 

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 20
		 -> print_Index@buffer(BANK0[20]), print_TankState@buffer(BANK0[20]), 

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> print_Index@buffer(BANK0[20]), print_TankState@buffer(BANK0[20]), STR_5(CODE[12]), 

    runTimer@timer	PTR struct . size(2) Largest target is 6
		 -> timer_lcdButtons(BANK1[6]), timer_WTANK_timeout(BANK1[6]), 

    S1038$buffer	PTR unsigned char  size(2) Largest target is 20
		 -> print_Index@buffer(BANK0[20]), print_TankState@buffer(BANK0[20]), 

    S1038$source	PTR const unsigned char  size(1) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_6(CODE[3]), STR_7(CODE[3]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 20
		 -> print_Index@buffer(BANK0[20]), print_TankState@buffer(BANK0[20]), 

    startTimer@timer	PTR struct . size(2) Largest target is 6
		 -> timer_WTANK_timeout(BANK1[6]), 

    stopTimer@timer	PTR struct . size(2) Largest target is 6
		 -> timer_WTANK_timeout(BANK1[6]), 

    TankStateString	PTR const unsigned char [4] size(1) Largest target is 6
		 -> STR_1(CODE[6]), STR_2(CODE[5]), STR_3(CODE[6]), STR_4(CODE[5]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 3
		 -> STR_6(CODE[3]), STR_7(CODE[3]), 

    vfpfcnvrt@cp_1120	PTR unsigned char  size(2) Largest target is 6
		 -> ?_sprintf(BANK0[2]), STR_1(CODE[6]), STR_2(CODE[5]), STR_3(CODE[6]), 
		 -> STR_4(CODE[5]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(BANK0[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 3
		 -> STR_6(CODE[3]), STR_7(CODE[3]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_6(CODE[3]), STR_7(CODE[3]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _interruptionHandler in COMMON

    _interruptionHandler->_runTimer

Critical Paths under _main in BANK0

    _stopFilling->_stopTimer
    _startFilling->_startTimer
    _lcd_run->_print_Index
    _print_TankState->_sprintf
    _print_Index->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_fputc
    _abs->___awmod
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _interruptionHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptionHandler in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptionHandler in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptionHandler in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    6557
                           _ADC_init
                           _Lcd_Init
                           _WDT_init
                  _interruption_init
                            _lcd_run
                          _pins_init
                 _run_waterTankLogic
                    _timer1_1ms_init
 ---------------------------------------------------------------------------------
 (1) _timer1_1ms_init                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _run_waterTankLogic                                   2     2      0     268
                                              4 BANK0      2     2      0
                   _check_TankStatus
                       _startFilling
                        _stopFilling
 ---------------------------------------------------------------------------------
 (2) _stopFilling                                          0     0      0      45
                          _stopTimer
 ---------------------------------------------------------------------------------
 (3) _stopTimer                                            4     2      2      45
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _startFilling                                         0     0      0      45
                         _startTimer
 ---------------------------------------------------------------------------------
 (3) _startTimer                                           4     2      2      45
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _check_TankStatus                                     3     3      0     178
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _pins_init                                            4     1      3      98
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (1) _lcd_run                                              0     0      0    5930
                _lcd_debounceButtons
                        _print_Index
                    _print_TankState
 ---------------------------------------------------------------------------------
 (2) _print_TankState                                     20    20      0    2965
                                             51 BANK0     20    20      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _print_Index                                         22    22      0    2965
                                             51 BANK0     22    22      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             19    15      4    2021
                                             34 BANK0     17    13      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             5     1      4    1816
                                             29 BANK0      5     1      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           16    11      5    1683
                                             13 BANK0     16    11      5
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                               13     9      4     232
                                              0 BANK0     13     9      4
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2      67
                                              6 BANK0      4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     298
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     302
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_String                                     7     5      2     315
                                              5 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (4) _Lcd_Write_Char                                       4     4      0     222
                                              1 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Set_Cursor                                       6     5      1     434
                                              4 BANK0      6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Clear                                            0     0      0     145
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _lcd_debounceButtons                                  1     1      0       0
                                              0 BANK0      1     1      0
                       _lcd_turnLeft
                      _lcd_turnRight
 ---------------------------------------------------------------------------------
 (3) _lcd_turnRight                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _lcd_turnLeft                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruption_init                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _WDT_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     261
                                              4 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Cmd                                              3     3      0     145
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (5) _Lcd_Port                                             1     1      0     116
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _interruptionHandler                                  3     3      0     134
                                              8 COMMON     3     3      0
                           _runTimer
 ---------------------------------------------------------------------------------
 (9) _runTimer                                             8     6      2     134
                                              0 COMMON     8     6      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_init
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _WDT_init
   _interruption_init
   _lcd_run
     _lcd_debounceButtons
       _lcd_turnLeft
       _lcd_turnRight
     _print_Index
       _Lcd_Clear
         _Lcd_Cmd
       _Lcd_Set_Cursor
         _Lcd_Cmd
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _sprintf
         _vfprintf
           _vfpfcnvrt
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _fputc
               _putch
     _print_TankState
       _Lcd_Clear
       _Lcd_Set_Cursor
       _Lcd_Write_String
       _sprintf
   _pins_init
   _run_waterTankLogic
     _check_TankStatus
     _startFilling
       _startTimer
     _stopFilling
       _stopTimer
   _timer1_1ms_init

 _interruptionHandler (ROOT)
   _runTimer

Address spaces:
Name               Size   Autos  Total    Usage
BANK3               96      0       0      0.0%
BITBANK3            96      0       0      0.0%
BANK2               96      0       0      0.0%
BITBANK2            96      0       0      0.0%
BANK1               80      0      54     67.5%
BITBANK1            80      0       0      0.0%
BANK0               80     73      80    100.0%
BITBANK0            80      0       0      0.0%
COMMON              14     11      14    100.0%
BITCOMMON           14      0       1      7.1%
DATA                 0      0     148      0.0%
STACK                0      0       0      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Mon Dec 09 03:20:02 2024

                          pc 0002                           l90 07B5                           l75 0FD7  
                         l84 0FB8                           l93 0FC0                           l87 0FCB  
                         l96 0782                           l97 0783                           l98 0789  
                         l99 078A                 ___awdiv@sign 0025                           fsr 0004  
                        l100 0790                          l101 0791                          l102 0797  
                        l110 0FE4                          l104 0798                          l122 059B  
                        l107 07D1                          l116 0494                          l213 04DB  
                        l119 039D                          l151 066B                          l128 0521  
                        l144 0446                          l232 0FF1                          l147 06CA  
                        l163 0712                          l219 04DB                          l235 05FF  
                        l500 033A                          l173 0FFF                          l245 0757  
                        l229 0560                          l168 05F2                          l248 0778  
                        l513 03F6                          l188 05C6                          l810 0735  
                        l861 06EF                          l880 0269                          l848 01C9  
                        l891 0003                          l868 07F7                          _RD2 0042  
                        _RD3 0043                          _RD4 0044                          _RD5 0045  
                        _RD6 0046                          _RD7 0047                          u810 0318  
                        u811 0317                          u900 03D5                          u805 0308  
                        u901 03D4                          u830 032C                          u750 02DD  
                        u831 032B                          u815 0314                          u751 02DC  
                        u840 0331                          u760 02E8                          u920 03E8  
                        u841 0330                          u825 0320                          u761 02E7  
                        u921 03E7                          u905 03D1                          u770 02F7  
                        u930 03ED                          u850 03A5                          u771 02F6  
                        u931 03EC                          u915 03DC                          u851 03A4  
                        u860 03B0                          u940 01D2                          u861 03AF  
                        u941 01D1                          u790 0307                          u870 03BB  
                        u950 01D8                          u791 0306                          u871 03BA  
                        u951 01D7                          u960 01F7                          u785 02FB  
                        u961 01F6                          u890 03CB                          u970 0229  
                        u891 03CA                          u971 0228                          u980 024C  
                        u885 03BF                          u990 07EB                          u991 07EA  
                        u975 0225                 _startFilling 0FE5                          _abs 07E5  
          print_Index@buffer 0055                ?_lcd_turnLeft 0070                          fsr0 0004  
                        indf 0000                 ___awmod@sign 0025                  _stopFilling 05F3  
                       ?_abs 0026                         l1401 0307                         l1403 0318  
                       l1411 032C                         l1413 0331                         l1405 031E  
                       l1421 03A1                         l1501 007C                         l1415 0336  
                       l1407 031F                         l1431 03B5                         l1423 03A5  
                       l1511 00A7                         l1503 0088                         l1601 0598  
                       l1409 0326                         l1441 03CB                         l1433 03BB  
                       l1425 03AA                         l1521 00ED                         l1513 00CA  
                       l1505 0099                         l1451 03ED                         l1443 03D5  
                       l1435 03BE                         l1427 03AC                         l1419 039E  
                       l1523 00F2                         l1515 00DD                         l1507 009E  
                       l1531 011A                         l1603 06CB                         l1701 0638  
                       l1613 0FD8                         l1621 045E                         l1381 02E2  
                       l1453 03F2                         l1445 03DB                         l1437 03C5  
                       l1429 03B0                         l1461 01D8                         l1541 013E  
                       l1533 011B                         l1525 00FB                         l1517 00E3  
                       l1509 00A0                         l1605 06D0                         l1711 064C  
                       l1631 0482                         l1623 0460                         l1615 044A  
                       l1391 02F1                         l1383 02E4                         l1375 02D6  
                       l1447 03E2                         l1439 03C7                         l1471 07E5  
                       l1463 01DF                         l1551 0166                         l1543 014D  
                       l1535 0129                         l1527 010F                         l1519 00E8  
                       l1607 06DF                         l1481 0780                         l1721 0666  
                       l1713 0651                         l1705 0640                         l1633 0484  
                       l1625 0466                         l1617 044F                         l1641 04E1  
                       l1393 02F7                         l1385 02E8                         l1377 02D9  
                       l1449 03E8                         l1473 07EB                         l1465 01F7  
                       l1457 01CA                         l1553 0179                         l1545 015C  
                       l1537 012D                         l1529 0113                         l1609 06ED  
                       l1483 0787                         l1571 07BA                         l1715 0657  
                       l1707 0641                         l1635 0486                         l1619 045C  
                       l1627 046F                         l1643 04FD                         l1395 02FA  
                       l1387 02ED                         l1379 02DD                         l1475 07EC  
                       l1467 0229                         l1459 01D2                         l1555 0191  
                       l1539 0130                         l1491 0058                         l1563 01B0  
                       l1651 071B                         l1723 0495                         l1485 078E  
                       l1573 07C0                         l1661 0FF2                         l1717 065C  
                       l1709 0647                         l1637 048C                         l1629 0475  
                       l1581 0566                         l1645 0505                         l1397 0301  
                       l1389 02EF                         l1557 0199                         l1549 0161  
                       l1493 005C                         l1653 071D                         l1741 04C7  
                       l1733 04B5                         l1725 04A7                         l1821 0537  
                       l1813 0522                         l1487 0795                         l1479 077C  
                       l1575 07C3                         l1663 0FFA                         l1671 05F0  
                       l1719 0661                         l1591 057E                         l1583 0568  
                       l1639 04DC                         l1399 0303                         l1559 01A8  
                       l1495 0064                         l1655 071F                         l1647 0713  
                       l1743 04CC                         l1735 04BA                         l1727 04AA  
                       l1751 05F3                         l1823 053D                         l1815 0528  
                       l1577 07CE                         l1569 07B9                         l1761 0FB1  
                       l1665 0FFD                         l1593 0585                         l1585 056C  
                       l1497 006A                         l1489 0047                         l1657 072C  
                       l1649 0717                         l1681 0400                         l1745 04CE  
                       l1737 04BF                         l1729 04AF                         l1673 0736  
                       l1753 05F6                         l1825 0542                         l1817 052D  
                       l1841 059C                         l1667 05E5                         l1595 0588  
                       l1587 056D                         l1579 0564                         l1499 0070  
                       l1691 0431                         l1683 0402                         l1771 07B4  
                       l1747 04D3                         l1739 04C2                         l1755 0FE5  
                       l1675 0758                         l1819 0531                         l1827 0546  
                       l1763 0FC1                         l1851 05BC                         l1843 05A3  
                       l1781 035D                         l1773 0FB9                         l1669 05ED  
                       l1597 058E                         l1589 057B                         l1693 043B  
                       l1685 0407                         l1677 03F7                         l1765 079C  
                       l1749 04D8                         l1757 0FE8                         l1853 05C7  
                       l1845 05AD                         l1759 0FCC                         l1783 0363  
                       l1775 033B                         l1599 0591                         l1695 069E  
                       l1687 0411                         l1767 07B2                         l1855 05CC  
                       l1847 05B2                         l1777 0341                         l1697 06AD  
                       l1689 041C                         l1785 06F0                         l1769 07B3  
                       l1849 05B7                         l1779 034C                         l1699 06BF  
                       l1787 06F6                         l1789 06FC                         l1877 0552  
                       l1799 0702                         STR_1 061C                         STR_2 0628  
                       STR_3 0622                         STR_4 062D                         STR_5 0610  
                       STR_6 0635                         STR_7 0632                         u1000 0780  
                       u1001 077F                         u1010 0787                         u1011 0786  
                       u1020 078E                         u1100 00E8                         u1021 078D  
                       u1101 00E7                         u1030 0795                         u1110 00ED  
                       u1031 0794                         u1111 00EC                         u1120 00F2  
                       u1040 0058                         u1121 00F1                         u1041 0057  
                       u1130 0119                         u1050 007C                         u1210 06ED  
                       u1131 0118                         u1051 007B                         u1211 06EC  
                       u1300 05ED                         u1220 044F                         u1140 0129  
                       u1060 0088                         u1301 05EC                         u1221 044E  
                       u1205 0570                         u1141 0128                         u1061 0087  
                       u1150 013E                         u1070 00A5                         u1310 03FF  
                       u1151 013D                         u1071 00A3                         u1311 03FE  
                       u1320 063F                         u1240 0475                         u1160 014D  
                       u1080 00A6                         u1400 04BA                         u1321 063E  
                       u1241 0474                         u1161 014C                         u1401 04B9  
                       u1330 0647                         u1170 015C                         u1090 00E3  
                       u1410 04BF                         u1331 0646                         u1235 0455  
                       u1171 015B                         u1091 00E2                         u1411 04BE  
                       u1340 064C                         u1260 04EB                         u1180 0166  
                       u1420 04C7                         u1341 064B                         u1181 0165  
                       u1421 04C6                         u1350 0657                         u1270 050F  
                       u1190 01A7                         u1430 04CC                         u1351 0656  
                       u1255 047B                         u1191 01A6                         u1431 04CB  
                       u1360 065C                         u1280 0521                         u1440 04D3  
                       u1361 065B                         u1281 0520                         u1441 04D2  
                       u1290 0FFA                         u1450 04D8                         u1370 04A7  
                       u1291 0FF9                         u1507 0582                         u1451 04D7  
                       u1371 04A6                         u1380 04AF                         u1517 0595  
                       u1381 04AE                         u1390 04B4                         u1527 0347  
                       u1391 04B3                         u1537 0358                         u1547 0369  
                       u1557 07C9                         abs@a 0026            ?_Lcd_Write_String 0025  
                       _dbuf 00A0                         _main 059C                         _prec 00C2  
                       btemp 007E               ?_lcd_turnRight 0070                         start 000E  
         ??_Lcd_Write_String 0027             __end_of_ADC_init 0FD8              __end_of_Lcd_Cmd 07D2  
        _flag_airConditioner 03D8                        ??_abs 0028                        ?_main 0070  
            __end_of___awdiv 033B              __end_of___awmod 03F7              ___awdiv@divisor 0020  
             ??_lcd_turnLeft 0020                        i1l241 02D5                        i1l180 0678  
                      i1l183 0695              ___awdiv@counter 0024                 vfpfcnvrt@fmt 002F  
                      _TMR1H 000F                        _TMR1L 000E      __end_of_timer1_1ms_init 0FCC  
                      _TRISA 0085                        _TRISB 0086                        _TRISC 0087  
                      _TRISD 0088              __end_of_lcd_run 0713                        _flags 006E  
                      _fputc 01CA                        _width 00C0                        _putch 0003  
             __pbitbssCOMMON 03D8                        pclath 000A              _irrigationState 006B  
           __end_of_WDT_init 0FB9                        status 0003                        wtemp0 007E  
            __end_of_sprintf 0736     __end_of_check_TankStatus 04DC             __end_of_Lcd_Init 039E  
           __end_of_Lcd_Port 0799          _lastLeftButtonState 007D              __initialization 0011  
               __end_of_main 05D5                       ??_main 0069            _leftButtonPressed 03DA  
                     ?_fputc 0020                       _ADRESH 001E                       _ADRESL 009E  
              _lastTankState 006C             ___awdiv@dividend 0022                       ?_putch 0070  
                     i1l1801 026A                       i1l1811 02C3                       i1l1805 027D  
                     i1l1807 02A3                       i1l1833 066C                       i1l1835 0670  
                     i1l1837 067E                       i1l1839 0683                       u146_20 027C  
                     u146_21 027B                       u147_20 02A3                       u147_21 02A2  
                     u147_25 029F                       u148_20 0670                       u148_21 066F  
                     u149_20 067E                       u149_21 067D              ??_lcd_turnRight 0020  
                  ??_Lcd_Cmd 0021                vfpfcnvrt@done 0036        print_TankState@buffer 0053  
               vfprintf@cfmt 0041                    ??___awdiv 0024                    ??___awmod 0024  
           ___awdiv@quotient 0026              ___awmod@divisor 0020              ___awmod@counter 0024  
                  ??_lcd_run 0069                       fputc@c 0020                 __pdataCOMMON 007C  
           ?_timer1_1ms_init 0070                       saved_w 007E                    ?_ADC_init 0070  
           __end_of_runTimer 02D6                       putch@c 0070             __end_of_vfprintf 06F0  
                  ??_sprintf 0046                 ?_print_Index 0070              Lcd_Set_Cursor@a 0026  
            Lcd_Set_Cursor@b 0024              Lcd_Set_Cursor@y 0028              Lcd_Set_Cursor@z 0027  
    __end_of__initialization 0043            __end_of_Lcd_Clear 0FE5         __end_of_lcd_turnLeft 1000  
             __pcstackCOMMON 0070                 __pidataBANK0 0FAC                 __pidataBANK1 05D5  
__end_of_interruptionHandler 069E                __end_of_fputc 026A                __end_of_putch 0004  
              runTimer@timer 0070                    ?_WDT_init 0070               _Lcd_Set_Cursor 0447  
             _OPTION_REGbits 0081                   ??_ADC_init 0020                    ?_Lcd_Init 0070  
               ?_stopFilling 0070                    ?_Lcd_Port 0070                      ??_fputc 0024  
                    ??_putch 0020                   __pbssBANK0 006E                   __pbssBANK1 00A0  
        _timer_WTANK_timeout 00CA                   __pmaintext 059C                   __pintentry 0004  
     __end_of_Lcd_Set_Cursor 0495                   ??_WDT_init 0020               stopTimer@timer 0020  
                 ??_Lcd_Init 0024                   ??_Lcd_Port 0020            ??_print_TankState 0053  
                 __stringtab 0600               _Lcd_Write_Char 0561                      _Lcd_Cmd 07B6  
         _rightButtonPressed 03D9            ?_check_TankStatus 0070                      ___awdiv 02D6  
         ??_check_TankStatus 0020                      ___awmod 039E                    ?_runTimer 0070  
                  ?_vfprintf 003D              ?_Lcd_Set_Cursor 0024                      __ptext1 0FC1  
                    __ptext2 0522                      __ptext3 05F3                      __ptext4 0758  
                    __ptext5 0FE5                      __ptext6 0736                      __ptext7 0495  
                    __ptext8 0799                      __ptext9 06F0                      _lcd_run 06F0  
                  _T1CONbits 0010             ___awmod@dividend 0022                      _sprintf 0713  
                    clrloop0 07F9       __end_of_Lcd_Write_Char 059C         end_of_initialization 0043  
                    fputc@fp 0022            __end_of_pins_init 07B6             vfpfcnvrt@cp_1120 0034  
          __end_of_vfpfcnvrt 01CA             vfpfcnvrt@convarg 0038                    Lcd_Port@a 0020  
                 ??_runTimer 0072                   ??_vfprintf 0041            __end_of_stopTimer 0779  
                  _PORTBbits 0006                    _PORTCbits 0007                 _lcd_turnLeft 0FF2  
                  _TRISCbits 0087              ?_Lcd_Write_Char 0070                   _startTimer 0736  
          Lcd_Write_String@a 0025            Lcd_Write_String@i 002A        __end_of_lcd_turnRight 05F3  
 __end_of_run_waterTankLogic 0561                    _Lcd_Clear 0FD8                  vfpfcnvrt@ap 0030  
                vfpfcnvrt@cp 0037                  vfpfcnvrt@fp 002D             _Lcd_Write_String 04DC  
              __pidataCOMMON 0FAA                ?_startFilling 0070          start_initialization 0011  
        _lcd_debounceButtons 0638              pins_init@_TRISA 0023              pins_init@_TRISB 0020  
            pins_init@_TRISC 0021              pins_init@_TRISD 0022                  __end_of_abs 07F8  
       ?_lcd_debounceButtons 0070                  vfprintf@fmt 003F          check_TankStatus@bot 0022  
                 ?_Lcd_Clear 0070          check_TankStatus@top 0021                   init_fetch0 07D2  
                __pdataBANK0 0069                  __pdataBANK1 00C6              Lcd_Write_Char@a 0024  
            Lcd_Write_Char@y 0023              _print_TankState 03F7               ??_startFilling 0024  
                  ___latbits 0002                __pcstackBANK0 0020                  ?_startTimer 0020  
                   ?_Lcd_Cmd 0070        ??_lcd_debounceButtons 0020             ??_Lcd_Set_Cursor 0025  
            _TankStateString 00C6                     ?___awdiv 0020                     ?___awmod 0020  
                  _lcd_index 006A                    __pstrings 0600                     ?_lcd_run 0070  
            startTimer@timer 0020                     _ADC_init 0FCC                     ?_sprintf 0042  
          interrupt_function 0004            _interruption_init 0FB9                    _tankState 006D  
                  clear_ram0 07F8                     _PIE1bits 008C           ?_interruption_init 0070  
                  _pins_init 0799                     Lcd_Cmd@a 0023            ??_timer1_1ms_init 0020  
                   _PIR1bits 000C                     _GO_nDONE 00FA      __end_of_print_TankState 0447  
                ??_Lcd_Clear 0024          ??_interruption_init 0020                    _vfpfcnvrt 0047  
                 _ADCON0bits 001F                  __stringbase 060F                   _ADCON1bits 009F  
                   _WDT_init 0FB1             ??_Lcd_Write_Char 0021                    _stopTimer 0758  
                   _Lcd_Init 033B                     _Lcd_Port 0779                ??_print_Index 0053  
                 vfpfcnvrt@c 003C         _lastRightButtonState 007C    __end_of_interruption_init 0FC1  
   __end_of_Lcd_Write_String 0522         __end_of_startFilling 0FF2                   ?_pins_init 0020  
                 vfprintf@ap 0040                   vfprintf@fp 003D                   ?_vfpfcnvrt 002D  
         __end_of__stringtab 0610           _run_waterTankLogic 0522                   sprintf@fmt 0043  
                 ?_stopTimer 0020                ??_stopFilling 0024                     __ptext10 03F7  
                   __ptext11 069E                     __ptext20 04DC                     __ptext12 0713  
                   __ptext21 0561                     __ptext13 06CB                     __ptext30 07B6  
                   __ptext22 0447                     __ptext14 0047                     __ptext31 0779  
                   __ptext23 0FD8                     __ptext15 01CA                     __ptext32 0FCC  
                   __ptext24 0638                     __ptext16 0003                     __ptext33 066C  
                   __ptext25 05E5                     __ptext17 07E5                     __ptext34 026A  
                   __ptext26 0FF2                     __ptext18 039E                     __ptext27 0FB9  
                   __ptext19 02D6          ?_run_waterTankLogic 0070                     __ptext28 0FB1  
                   __ptext29 033B          __end_of_print_Index 06CB          _interruptionHandler 066C  
       ??_run_waterTankLogic 0024             ?_print_TankState 0070                     _runTimer 026A  
                   _vfprintf 06CB         ?_interruptionHandler 0070                   _INTCONbits 000B  
           _check_TankStatus 0495                     init_ram0 07D6                 ??_startTimer 0022  
         Lcd_Write_Char@temp 0022                     intlevel1 0000                    sprintf@ap 0047  
               _timerCounter 00C4          __end_of_stopFilling 0600                    stringcode 060A  
                ??_pins_init 0023                  ??_vfpfcnvrt 0032           Lcd_Set_Cursor@temp 0029  
         __end_of_startTimer 0758          _lastIrrigationState 0069        ??_interruptionHandler 0078  
                _temperature 006F                     sprintf@f 0048                     sprintf@s 0042  
                ??_stopTimer 0022                     stringdir 060A                     stringtab 0600  
                _print_Index 069E              _timer1_1ms_init 0FC1  __end_of_lcd_debounceButtons 066C  
              _lcd_turnRight 05E5             _timer_lcdButtons 00D0  
